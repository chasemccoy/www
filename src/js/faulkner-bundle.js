(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to, from3, except, desc) => {
    if (from3 && typeof from3 === "object" || typeof from3 === "function") {
      for (let key of __getOwnPropNames(from3))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/slugify/slugify.js
  var require_slugify = __commonJS({
    "node_modules/slugify/slugify.js"(exports, module) {
      (function(name2, root, factory) {
        if (typeof exports === "object") {
          module.exports = factory();
          module.exports["default"] = factory();
        } else if (typeof define === "function" && define.amd) {
          define(factory);
        } else {
          root[name2] = factory();
        }
      })("slugify", exports, function() {
        var charMap = JSON.parse(`{"$":"dollar","%":"percent","&":"and","<":"less",">":"greater","|":"or","\xA2":"cent","\xA3":"pound","\xA4":"currency","\xA5":"yen","\xA9":"(c)","\xAA":"a","\xAE":"(r)","\xBA":"o","\xC0":"A","\xC1":"A","\xC2":"A","\xC3":"A","\xC4":"A","\xC5":"A","\xC6":"AE","\xC7":"C","\xC8":"E","\xC9":"E","\xCA":"E","\xCB":"E","\xCC":"I","\xCD":"I","\xCE":"I","\xCF":"I","\xD0":"D","\xD1":"N","\xD2":"O","\xD3":"O","\xD4":"O","\xD5":"O","\xD6":"O","\xD8":"O","\xD9":"U","\xDA":"U","\xDB":"U","\xDC":"U","\xDD":"Y","\xDE":"TH","\xDF":"ss","\xE0":"a","\xE1":"a","\xE2":"a","\xE3":"a","\xE4":"a","\xE5":"a","\xE6":"ae","\xE7":"c","\xE8":"e","\xE9":"e","\xEA":"e","\xEB":"e","\xEC":"i","\xED":"i","\xEE":"i","\xEF":"i","\xF0":"d","\xF1":"n","\xF2":"o","\xF3":"o","\xF4":"o","\xF5":"o","\xF6":"o","\xF8":"o","\xF9":"u","\xFA":"u","\xFB":"u","\xFC":"u","\xFD":"y","\xFE":"th","\xFF":"y","\u0100":"A","\u0101":"a","\u0102":"A","\u0103":"a","\u0104":"A","\u0105":"a","\u0106":"C","\u0107":"c","\u010C":"C","\u010D":"c","\u010E":"D","\u010F":"d","\u0110":"DJ","\u0111":"dj","\u0112":"E","\u0113":"e","\u0116":"E","\u0117":"e","\u0118":"e","\u0119":"e","\u011A":"E","\u011B":"e","\u011E":"G","\u011F":"g","\u0122":"G","\u0123":"g","\u0128":"I","\u0129":"i","\u012A":"i","\u012B":"i","\u012E":"I","\u012F":"i","\u0130":"I","\u0131":"i","\u0136":"k","\u0137":"k","\u013B":"L","\u013C":"l","\u013D":"L","\u013E":"l","\u0141":"L","\u0142":"l","\u0143":"N","\u0144":"n","\u0145":"N","\u0146":"n","\u0147":"N","\u0148":"n","\u014C":"O","\u014D":"o","\u0150":"O","\u0151":"o","\u0152":"OE","\u0153":"oe","\u0154":"R","\u0155":"r","\u0158":"R","\u0159":"r","\u015A":"S","\u015B":"s","\u015E":"S","\u015F":"s","\u0160":"S","\u0161":"s","\u0162":"T","\u0163":"t","\u0164":"T","\u0165":"t","\u0168":"U","\u0169":"u","\u016A":"u","\u016B":"u","\u016E":"U","\u016F":"u","\u0170":"U","\u0171":"u","\u0172":"U","\u0173":"u","\u0174":"W","\u0175":"w","\u0176":"Y","\u0177":"y","\u0178":"Y","\u0179":"Z","\u017A":"z","\u017B":"Z","\u017C":"z","\u017D":"Z","\u017E":"z","\u018F":"E","\u0192":"f","\u01A0":"O","\u01A1":"o","\u01AF":"U","\u01B0":"u","\u01C8":"LJ","\u01C9":"lj","\u01CB":"NJ","\u01CC":"nj","\u0218":"S","\u0219":"s","\u021A":"T","\u021B":"t","\u0259":"e","\u02DA":"o","\u0386":"A","\u0388":"E","\u0389":"H","\u038A":"I","\u038C":"O","\u038E":"Y","\u038F":"W","\u0390":"i","\u0391":"A","\u0392":"B","\u0393":"G","\u0394":"D","\u0395":"E","\u0396":"Z","\u0397":"H","\u0398":"8","\u0399":"I","\u039A":"K","\u039B":"L","\u039C":"M","\u039D":"N","\u039E":"3","\u039F":"O","\u03A0":"P","\u03A1":"R","\u03A3":"S","\u03A4":"T","\u03A5":"Y","\u03A6":"F","\u03A7":"X","\u03A8":"PS","\u03A9":"W","\u03AA":"I","\u03AB":"Y","\u03AC":"a","\u03AD":"e","\u03AE":"h","\u03AF":"i","\u03B0":"y","\u03B1":"a","\u03B2":"b","\u03B3":"g","\u03B4":"d","\u03B5":"e","\u03B6":"z","\u03B7":"h","\u03B8":"8","\u03B9":"i","\u03BA":"k","\u03BB":"l","\u03BC":"m","\u03BD":"n","\u03BE":"3","\u03BF":"o","\u03C0":"p","\u03C1":"r","\u03C2":"s","\u03C3":"s","\u03C4":"t","\u03C5":"y","\u03C6":"f","\u03C7":"x","\u03C8":"ps","\u03C9":"w","\u03CA":"i","\u03CB":"y","\u03CC":"o","\u03CD":"y","\u03CE":"w","\u0401":"Yo","\u0402":"DJ","\u0404":"Ye","\u0406":"I","\u0407":"Yi","\u0408":"J","\u0409":"LJ","\u040A":"NJ","\u040B":"C","\u040F":"DZ","\u0410":"A","\u0411":"B","\u0412":"V","\u0413":"G","\u0414":"D","\u0415":"E","\u0416":"Zh","\u0417":"Z","\u0418":"I","\u0419":"J","\u041A":"K","\u041B":"L","\u041C":"M","\u041D":"N","\u041E":"O","\u041F":"P","\u0420":"R","\u0421":"S","\u0422":"T","\u0423":"U","\u0424":"F","\u0425":"H","\u0426":"C","\u0427":"Ch","\u0428":"Sh","\u0429":"Sh","\u042A":"U","\u042B":"Y","\u042C":"","\u042D":"E","\u042E":"Yu","\u042F":"Ya","\u0430":"a","\u0431":"b","\u0432":"v","\u0433":"g","\u0434":"d","\u0435":"e","\u0436":"zh","\u0437":"z","\u0438":"i","\u0439":"j","\u043A":"k","\u043B":"l","\u043C":"m","\u043D":"n","\u043E":"o","\u043F":"p","\u0440":"r","\u0441":"s","\u0442":"t","\u0443":"u","\u0444":"f","\u0445":"h","\u0446":"c","\u0447":"ch","\u0448":"sh","\u0449":"sh","\u044A":"u","\u044B":"y","\u044C":"","\u044D":"e","\u044E":"yu","\u044F":"ya","\u0451":"yo","\u0452":"dj","\u0454":"ye","\u0456":"i","\u0457":"yi","\u0458":"j","\u0459":"lj","\u045A":"nj","\u045B":"c","\u045D":"u","\u045F":"dz","\u0490":"G","\u0491":"g","\u0492":"GH","\u0493":"gh","\u049A":"KH","\u049B":"kh","\u04A2":"NG","\u04A3":"ng","\u04AE":"UE","\u04AF":"ue","\u04B0":"U","\u04B1":"u","\u04BA":"H","\u04BB":"h","\u04D8":"AE","\u04D9":"ae","\u04E8":"OE","\u04E9":"oe","\u0531":"A","\u0532":"B","\u0533":"G","\u0534":"D","\u0535":"E","\u0536":"Z","\u0537":"E'","\u0538":"Y'","\u0539":"T'","\u053A":"JH","\u053B":"I","\u053C":"L","\u053D":"X","\u053E":"C'","\u053F":"K","\u0540":"H","\u0541":"D'","\u0542":"GH","\u0543":"TW","\u0544":"M","\u0545":"Y","\u0546":"N","\u0547":"SH","\u0549":"CH","\u054A":"P","\u054B":"J","\u054C":"R'","\u054D":"S","\u054E":"V","\u054F":"T","\u0550":"R","\u0551":"C","\u0553":"P'","\u0554":"Q'","\u0555":"O''","\u0556":"F","\u0587":"EV","\u0621":"a","\u0622":"aa","\u0623":"a","\u0624":"u","\u0625":"i","\u0626":"e","\u0627":"a","\u0628":"b","\u0629":"h","\u062A":"t","\u062B":"th","\u062C":"j","\u062D":"h","\u062E":"kh","\u062F":"d","\u0630":"th","\u0631":"r","\u0632":"z","\u0633":"s","\u0634":"sh","\u0635":"s","\u0636":"dh","\u0637":"t","\u0638":"z","\u0639":"a","\u063A":"gh","\u0641":"f","\u0642":"q","\u0643":"k","\u0644":"l","\u0645":"m","\u0646":"n","\u0647":"h","\u0648":"w","\u0649":"a","\u064A":"y","\u064B":"an","\u064C":"on","\u064D":"en","\u064E":"a","\u064F":"u","\u0650":"e","\u0652":"","\u0660":"0","\u0661":"1","\u0662":"2","\u0663":"3","\u0664":"4","\u0665":"5","\u0666":"6","\u0667":"7","\u0668":"8","\u0669":"9","\u067E":"p","\u0686":"ch","\u0698":"zh","\u06A9":"k","\u06AF":"g","\u06CC":"y","\u06F0":"0","\u06F1":"1","\u06F2":"2","\u06F3":"3","\u06F4":"4","\u06F5":"5","\u06F6":"6","\u06F7":"7","\u06F8":"8","\u06F9":"9","\u0E3F":"baht","\u10D0":"a","\u10D1":"b","\u10D2":"g","\u10D3":"d","\u10D4":"e","\u10D5":"v","\u10D6":"z","\u10D7":"t","\u10D8":"i","\u10D9":"k","\u10DA":"l","\u10DB":"m","\u10DC":"n","\u10DD":"o","\u10DE":"p","\u10DF":"zh","\u10E0":"r","\u10E1":"s","\u10E2":"t","\u10E3":"u","\u10E4":"f","\u10E5":"k","\u10E6":"gh","\u10E7":"q","\u10E8":"sh","\u10E9":"ch","\u10EA":"ts","\u10EB":"dz","\u10EC":"ts","\u10ED":"ch","\u10EE":"kh","\u10EF":"j","\u10F0":"h","\u1E62":"S","\u1E63":"s","\u1E80":"W","\u1E81":"w","\u1E82":"W","\u1E83":"w","\u1E84":"W","\u1E85":"w","\u1E9E":"SS","\u1EA0":"A","\u1EA1":"a","\u1EA2":"A","\u1EA3":"a","\u1EA4":"A","\u1EA5":"a","\u1EA6":"A","\u1EA7":"a","\u1EA8":"A","\u1EA9":"a","\u1EAA":"A","\u1EAB":"a","\u1EAC":"A","\u1EAD":"a","\u1EAE":"A","\u1EAF":"a","\u1EB0":"A","\u1EB1":"a","\u1EB2":"A","\u1EB3":"a","\u1EB4":"A","\u1EB5":"a","\u1EB6":"A","\u1EB7":"a","\u1EB8":"E","\u1EB9":"e","\u1EBA":"E","\u1EBB":"e","\u1EBC":"E","\u1EBD":"e","\u1EBE":"E","\u1EBF":"e","\u1EC0":"E","\u1EC1":"e","\u1EC2":"E","\u1EC3":"e","\u1EC4":"E","\u1EC5":"e","\u1EC6":"E","\u1EC7":"e","\u1EC8":"I","\u1EC9":"i","\u1ECA":"I","\u1ECB":"i","\u1ECC":"O","\u1ECD":"o","\u1ECE":"O","\u1ECF":"o","\u1ED0":"O","\u1ED1":"o","\u1ED2":"O","\u1ED3":"o","\u1ED4":"O","\u1ED5":"o","\u1ED6":"O","\u1ED7":"o","\u1ED8":"O","\u1ED9":"o","\u1EDA":"O","\u1EDB":"o","\u1EDC":"O","\u1EDD":"o","\u1EDE":"O","\u1EDF":"o","\u1EE0":"O","\u1EE1":"o","\u1EE2":"O","\u1EE3":"o","\u1EE4":"U","\u1EE5":"u","\u1EE6":"U","\u1EE7":"u","\u1EE8":"U","\u1EE9":"u","\u1EEA":"U","\u1EEB":"u","\u1EEC":"U","\u1EED":"u","\u1EEE":"U","\u1EEF":"u","\u1EF0":"U","\u1EF1":"u","\u1EF2":"Y","\u1EF3":"y","\u1EF4":"Y","\u1EF5":"y","\u1EF6":"Y","\u1EF7":"y","\u1EF8":"Y","\u1EF9":"y","\u2013":"-","\u2018":"'","\u2019":"'","\u201C":"\\"","\u201D":"\\"","\u201E":"\\"","\u2020":"+","\u2022":"*","\u2026":"...","\u20A0":"ecu","\u20A2":"cruzeiro","\u20A3":"french franc","\u20A4":"lira","\u20A5":"mill","\u20A6":"naira","\u20A7":"peseta","\u20A8":"rupee","\u20A9":"won","\u20AA":"new shequel","\u20AB":"dong","\u20AC":"euro","\u20AD":"kip","\u20AE":"tugrik","\u20AF":"drachma","\u20B0":"penny","\u20B1":"peso","\u20B2":"guarani","\u20B3":"austral","\u20B4":"hryvnia","\u20B5":"cedi","\u20B8":"kazakhstani tenge","\u20B9":"indian rupee","\u20BA":"turkish lira","\u20BD":"russian ruble","\u20BF":"bitcoin","\u2120":"sm","\u2122":"tm","\u2202":"d","\u2206":"delta","\u2211":"sum","\u221E":"infinity","\u2665":"love","\u5143":"yuan","\u5186":"yen","\uFDFC":"rial","\uFEF5":"laa","\uFEF7":"laa","\uFEF9":"lai","\uFEFB":"la"}`);
        var locales = JSON.parse('{"bg":{"\u0419":"Y","\u0426":"Ts","\u0429":"Sht","\u042A":"A","\u042C":"Y","\u0439":"y","\u0446":"ts","\u0449":"sht","\u044A":"a","\u044C":"y"},"de":{"\xC4":"AE","\xE4":"ae","\xD6":"OE","\xF6":"oe","\xDC":"UE","\xFC":"ue","\xDF":"ss","%":"prozent","&":"und","|":"oder","\u2211":"summe","\u221E":"unendlich","\u2665":"liebe"},"es":{"%":"por ciento","&":"y","<":"menor que",">":"mayor que","|":"o","\xA2":"centavos","\xA3":"libras","\xA4":"moneda","\u20A3":"francos","\u2211":"suma","\u221E":"infinito","\u2665":"amor"},"fr":{"%":"pourcent","&":"et","<":"plus petit",">":"plus grand","|":"ou","\xA2":"centime","\xA3":"livre","\xA4":"devise","\u20A3":"franc","\u2211":"somme","\u221E":"infini","\u2665":"amour"},"pt":{"%":"porcento","&":"e","<":"menor",">":"maior","|":"ou","\xA2":"centavo","\u2211":"soma","\xA3":"libra","\u221E":"infinito","\u2665":"amor"},"uk":{"\u0418":"Y","\u0438":"y","\u0419":"Y","\u0439":"y","\u0426":"Ts","\u0446":"ts","\u0425":"Kh","\u0445":"kh","\u0429":"Shch","\u0449":"shch","\u0413":"H","\u0433":"h"},"vi":{"\u0110":"D","\u0111":"d"},"da":{"\xD8":"OE","\xF8":"oe","\xC5":"AA","\xE5":"aa","%":"procent","&":"og","|":"eller","$":"dollar","<":"mindre end",">":"st\xF8rre end"},"nb":{"&":"og","\xC5":"AA","\xC6":"AE","\xD8":"OE","\xE5":"aa","\xE6":"ae","\xF8":"oe"},"it":{"&":"e"},"nl":{"&":"en"},"sv":{"&":"och","\xC5":"AA","\xC4":"AE","\xD6":"OE","\xE5":"aa","\xE4":"ae","\xF6":"oe"}}');
        function replace(string3, options) {
          if (typeof string3 !== "string") {
            throw new Error("slugify: string argument expected");
          }
          options = typeof options === "string" ? { replacement: options } : options || {};
          var locale = locales[options.locale] || {};
          var replacement = options.replacement === void 0 ? "-" : options.replacement;
          var trim = options.trim === void 0 ? true : options.trim;
          var slug = string3.normalize().split("").reduce(function(result, ch2) {
            var appendChar = locale[ch2];
            if (appendChar === void 0)
              appendChar = charMap[ch2];
            if (appendChar === void 0)
              appendChar = ch2;
            if (appendChar === replacement)
              appendChar = " ";
            return result + appendChar.replace(options.remove || /[^\w\s$*_+~.()'"!\-:@]+/g, "");
          }, "");
          if (options.strict) {
            slug = slug.replace(/[^A-Za-z0-9\s]/g, "");
          }
          if (trim) {
            slug = slug.trim();
          }
          slug = slug.replace(/\s+/g, replacement);
          if (options.lower) {
            slug = slug.toLowerCase();
          }
          return slug;
        }
        replace.extend = function(customMap) {
          Object.assign(charMap, customMap);
        };
        return replace;
      });
    }
  });

  // node_modules/@codemirror/state/dist/index.js
  function textLength(text) {
    let length = -1;
    for (let line of text)
      length += line.length + 1;
    return length;
  }
  function appendText(text, target, from3 = 0, to = 1e9) {
    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
      let line = text[i], end2 = pos + line.length;
      if (end2 >= from3) {
        if (end2 > to)
          line = line.slice(0, to - pos);
        if (pos < from3)
          line = line.slice(from3 - pos);
        if (first) {
          target[target.length - 1] += line;
          first = false;
        } else
          target.push(line);
      }
      pos = end2 + 1;
    }
    return target;
  }
  function sliceText(text, from3, to) {
    return appendText(text, [""], from3, to);
  }
  function isExtendingChar(code) {
    for (let i = 1; i < extend.length; i += 2)
      if (extend[i] > code)
        return extend[i - 1] <= code;
    return false;
  }
  function isRegionalIndicator(code) {
    return code >= 127462 && code <= 127487;
  }
  function findClusterBreak(str, pos, forward = true, includeExtending = true) {
    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
  }
  function nextClusterBreak(str, pos, includeExtending) {
    if (pos == str.length)
      return pos;
    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
      pos--;
    let prev = codePointAt(str, pos);
    pos += codePointSize(prev);
    while (pos < str.length) {
      let next2 = codePointAt(str, pos);
      if (prev == ZWJ || next2 == ZWJ || includeExtending && isExtendingChar(next2)) {
        pos += codePointSize(next2);
        prev = next2;
      } else if (isRegionalIndicator(next2)) {
        let countBefore = 0, i = pos - 2;
        while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
          countBefore++;
          i -= 2;
        }
        if (countBefore % 2 == 0)
          break;
        else
          pos += 2;
      } else {
        break;
      }
    }
    return pos;
  }
  function prevClusterBreak(str, pos, includeExtending) {
    while (pos > 0) {
      let found = nextClusterBreak(str, pos - 2, includeExtending);
      if (found < pos)
        return found;
      pos--;
    }
    return 0;
  }
  function surrogateLow(ch2) {
    return ch2 >= 56320 && ch2 < 57344;
  }
  function surrogateHigh(ch2) {
    return ch2 >= 55296 && ch2 < 56320;
  }
  function codePointAt(str, pos) {
    let code0 = str.charCodeAt(pos);
    if (!surrogateHigh(code0) || pos + 1 == str.length)
      return code0;
    let code1 = str.charCodeAt(pos + 1);
    if (!surrogateLow(code1))
      return code0;
    return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
  }
  function codePointSize(code) {
    return code < 65536 ? 1 : 2;
  }
  function addSection(sections, len, ins, forceJoin = false) {
    if (len == 0 && ins <= 0)
      return;
    let last = sections.length - 2;
    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
      sections[last] += len;
    else if (len == 0 && sections[last] == 0)
      sections[last + 1] += ins;
    else if (forceJoin) {
      sections[last] += len;
      sections[last + 1] += ins;
    } else
      sections.push(len, ins);
  }
  function addInsert(values2, sections, value) {
    if (value.length == 0)
      return;
    let index = sections.length - 2 >> 1;
    if (index < values2.length) {
      values2[values2.length - 1] = values2[values2.length - 1].append(value);
    } else {
      while (values2.length < index)
        values2.push(Text.empty);
      values2.push(value);
    }
  }
  function iterChanges(desc, f, individual) {
    let inserted = desc.inserted;
    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length; ) {
      let len = desc.sections[i++], ins = desc.sections[i++];
      if (ins < 0) {
        posA += len;
        posB += len;
      } else {
        let endA = posA, endB = posB, text = Text.empty;
        for (; ; ) {
          endA += len;
          endB += ins;
          if (ins && inserted)
            text = text.append(inserted[i - 2 >> 1]);
          if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
            break;
          len = desc.sections[i++];
          ins = desc.sections[i++];
        }
        f(posA, endA, posB, endB, text);
        posA = endA;
        posB = endB;
      }
    }
  }
  function mapSet(setA, setB, before, mkSet = false) {
    let sections = [], insert2 = mkSet ? [] : null;
    let a2 = new SectionIter(setA), b = new SectionIter(setB);
    for (let inserted = -1; ; ) {
      if (a2.ins == -1 && b.ins == -1) {
        let len = Math.min(a2.len, b.len);
        addSection(sections, len, -1);
        a2.forward(len);
        b.forward(len);
      } else if (b.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b.len < a2.len || b.len == a2.len && !before))) {
        let len = b.len;
        addSection(sections, b.ins, -1);
        while (len) {
          let piece = Math.min(a2.len, len);
          if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
            addSection(sections, 0, a2.ins);
            if (insert2)
              addInsert(insert2, sections, a2.text);
            inserted = a2.i;
          }
          a2.forward(piece);
          len -= piece;
        }
        b.next();
      } else if (a2.ins >= 0) {
        let len = 0, left = a2.len;
        while (left) {
          if (b.ins == -1) {
            let piece = Math.min(left, b.len);
            len += piece;
            left -= piece;
            b.forward(piece);
          } else if (b.ins == 0 && b.len < left) {
            left -= b.len;
            b.next();
          } else {
            break;
          }
        }
        addSection(sections, len, inserted < a2.i ? a2.ins : 0);
        if (insert2 && inserted < a2.i)
          addInsert(insert2, sections, a2.text);
        inserted = a2.i;
        a2.forward(a2.len - left);
      } else if (a2.done && b.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else {
        throw new Error("Mismatched change set lengths");
      }
    }
  }
  function composeSets(setA, setB, mkSet = false) {
    let sections = [];
    let insert2 = mkSet ? [] : null;
    let a2 = new SectionIter(setA), b = new SectionIter(setB);
    for (let open = false; ; ) {
      if (a2.done && b.done) {
        return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
      } else if (a2.ins == 0) {
        addSection(sections, a2.len, 0, open);
        a2.next();
      } else if (b.len == 0 && !b.done) {
        addSection(sections, 0, b.ins, open);
        if (insert2)
          addInsert(insert2, sections, b.text);
        b.next();
      } else if (a2.done || b.done) {
        throw new Error("Mismatched change set lengths");
      } else {
        let len = Math.min(a2.len2, b.len), sectionLen = sections.length;
        if (a2.ins == -1) {
          let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
          addSection(sections, len, insB, open);
          if (insert2 && insB)
            addInsert(insert2, sections, b.text);
        } else if (b.ins == -1) {
          addSection(sections, a2.off ? 0 : a2.len, len, open);
          if (insert2)
            addInsert(insert2, sections, a2.textBit(len));
        } else {
          addSection(sections, a2.off ? 0 : a2.len, b.off ? 0 : b.ins, open);
          if (insert2 && !b.off)
            addInsert(insert2, sections, b.text);
        }
        open = (a2.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
        a2.forward2(len);
        b.forward(len);
      }
    }
  }
  function checkSelection(selection, docLength) {
    for (let range of selection.ranges)
      if (range.to > docLength)
        throw new RangeError("Selection points outside of document");
  }
  function sameArray(a2, b) {
    return a2 == b || a2.length == b.length && a2.every((e, i) => e === b[i]);
  }
  function compareArray(a2, b, compare2) {
    if (a2.length != b.length)
      return false;
    for (let i = 0; i < a2.length; i++)
      if (!compare2(a2[i], b[i]))
        return false;
    return true;
  }
  function ensureAll(state, addrs) {
    let changed = false;
    for (let addr of addrs)
      if (ensureAddr(state, addr) & 1)
        changed = true;
    return changed;
  }
  function dynamicFacetSlot(addresses, facet, providers) {
    let providerAddrs = providers.map((p) => addresses[p.id]);
    let providerTypes = providers.map((p) => p.type);
    let dynamic = providerAddrs.filter((p) => !(p & 1));
    let idx = addresses[facet.id] >> 1;
    function get(state) {
      let values2 = [];
      for (let i = 0; i < providerAddrs.length; i++) {
        let value = getAddr(state, providerAddrs[i]);
        if (providerTypes[i] == 2)
          for (let val of value)
            values2.push(val);
        else
          values2.push(value);
      }
      return facet.combine(values2);
    }
    return {
      create(state) {
        for (let addr of providerAddrs)
          ensureAddr(state, addr);
        state.values[idx] = get(state);
        return 1;
      },
      update(state, tr) {
        if (!ensureAll(state, dynamic))
          return 0;
        let value = get(state);
        if (facet.compare(value, state.values[idx]))
          return 0;
        state.values[idx] = value;
        return 1;
      },
      reconfigure(state, oldState) {
        let depChanged = ensureAll(state, providerAddrs);
        let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
        if (oldProviders && !depChanged && sameArray(providers, oldProviders)) {
          state.values[idx] = oldValue;
          return 0;
        }
        let value = get(state);
        if (facet.compare(value, oldValue)) {
          state.values[idx] = oldValue;
          return 0;
        }
        state.values[idx] = value;
        return 1;
      }
    };
  }
  function prec(value) {
    return (ext) => new PrecExtension(ext, value);
  }
  function flatten(extension, compartments, newCompartments) {
    let result = [[], [], [], [], []];
    let seen = /* @__PURE__ */ new Map();
    function inner(ext, prec2) {
      let known = seen.get(ext);
      if (known != null) {
        if (known <= prec2)
          return;
        let found = result[known].indexOf(ext);
        if (found > -1)
          result[known].splice(found, 1);
        if (ext instanceof CompartmentInstance)
          newCompartments.delete(ext.compartment);
      }
      seen.set(ext, prec2);
      if (Array.isArray(ext)) {
        for (let e of ext)
          inner(e, prec2);
      } else if (ext instanceof CompartmentInstance) {
        if (newCompartments.has(ext.compartment))
          throw new RangeError(`Duplicate use of compartment in extensions`);
        let content3 = compartments.get(ext.compartment) || ext.inner;
        newCompartments.set(ext.compartment, content3);
        inner(content3, prec2);
      } else if (ext instanceof PrecExtension) {
        inner(ext.inner, ext.prec);
      } else if (ext instanceof StateField) {
        result[prec2].push(ext);
        if (ext.provides)
          inner(ext.provides, prec2);
      } else if (ext instanceof FacetProvider) {
        result[prec2].push(ext);
        if (ext.facet.extensions)
          inner(ext.facet.extensions, Prec_.default);
      } else {
        let content3 = ext.extension;
        if (!content3)
          throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
        inner(content3, prec2);
      }
    }
    inner(extension, Prec_.default);
    return result.reduce((a2, b) => a2.concat(b));
  }
  function ensureAddr(state, addr) {
    if (addr & 1)
      return 2;
    let idx = addr >> 1;
    let status = state.status[idx];
    if (status == 4)
      throw new Error("Cyclic dependency between fields and/or facets");
    if (status & 2)
      return status;
    state.status[idx] = 4;
    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
    return state.status[idx] = 2 | changed;
  }
  function getAddr(state, addr) {
    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
  }
  function joinRanges(a2, b) {
    let result = [];
    for (let iA = 0, iB = 0; ; ) {
      let from3, to;
      if (iA < a2.length && (iB == b.length || b[iB] >= a2[iA])) {
        from3 = a2[iA++];
        to = a2[iA++];
      } else if (iB < b.length) {
        from3 = b[iB++];
        to = b[iB++];
      } else
        return result;
      if (!result.length || result[result.length - 1] < from3)
        result.push(from3, to);
      else if (result[result.length - 1] < to)
        result[result.length - 1] = to;
    }
  }
  function mergeTransaction(a2, b, sequential) {
    var _a2;
    let mapForA, mapForB, changes;
    if (sequential) {
      mapForA = b.changes;
      mapForB = ChangeSet.empty(b.changes.length);
      changes = a2.changes.compose(b.changes);
    } else {
      mapForA = b.changes.map(a2.changes);
      mapForB = a2.changes.mapDesc(b.changes, true);
      changes = a2.changes.compose(mapForA);
    }
    return {
      changes,
      selection: b.selection ? b.selection.map(mapForB) : (_a2 = a2.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
      effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
      annotations: a2.annotations.length ? a2.annotations.concat(b.annotations) : b.annotations,
      scrollIntoView: a2.scrollIntoView || b.scrollIntoView
    };
  }
  function resolveTransactionInner(state, spec, docSize) {
    let sel = spec.selection, annotations = asArray(spec.annotations);
    if (spec.userEvent)
      annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
    return {
      changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
      selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
      effects: asArray(spec.effects),
      annotations,
      scrollIntoView: !!spec.scrollIntoView
    };
  }
  function resolveTransaction(state, specs, filter) {
    let s2 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
    if (specs.length && specs[0].filter === false)
      filter = false;
    for (let i = 1; i < specs.length; i++) {
      if (specs[i].filter === false)
        filter = false;
      let seq = !!specs[i].sequential;
      s2 = mergeTransaction(s2, resolveTransactionInner(state, specs[i], seq ? s2.changes.newLength : state.doc.length), seq);
    }
    let tr = Transaction.create(state, s2.changes, s2.selection, s2.effects, s2.annotations, s2.scrollIntoView);
    return extendTransaction(filter ? filterTransaction(tr) : tr);
  }
  function filterTransaction(tr) {
    let state = tr.startState;
    let result = true;
    for (let filter of state.facet(changeFilter)) {
      let value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value))
        result = result === true ? value : joinRanges(result, value);
    }
    if (result !== true) {
      let changes, back;
      if (result === false) {
        back = tr.changes.invertedDesc;
        changes = ChangeSet.empty(state.doc.length);
      } else {
        let filtered = tr.changes.filter(result);
        changes = filtered.changes;
        back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
      }
      tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
    }
    let filters = state.facet(transactionFilter);
    for (let i = filters.length - 1; i >= 0; i--) {
      let filtered = filters[i](tr);
      if (filtered instanceof Transaction)
        tr = filtered;
      else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
        tr = filtered[0];
      else
        tr = resolveTransaction(state, asArray(filtered), false);
    }
    return tr;
  }
  function extendTransaction(tr) {
    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
    for (let i = extenders.length - 1; i >= 0; i--) {
      let extension = extenders[i](tr);
      if (extension && Object.keys(extension).length)
        spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
    }
    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
  }
  function asArray(value) {
    return value == null ? none : Array.isArray(value) ? value : [value];
  }
  function hasWordChar(str) {
    if (wordChar)
      return wordChar.test(str);
    for (let i = 0; i < str.length; i++) {
      let ch2 = str[i];
      if (/\w/.test(ch2) || ch2 > "\x80" && (ch2.toUpperCase() != ch2.toLowerCase() || nonASCIISingleCaseWordChar.test(ch2)))
        return true;
    }
    return false;
  }
  function makeCategorizer(wordChars) {
    return (char) => {
      if (!/\S/.test(char))
        return CharCategory.Space;
      if (hasWordChar(char))
        return CharCategory.Word;
      for (let i = 0; i < wordChars.length; i++)
        if (char.indexOf(wordChars[i]) > -1)
          return CharCategory.Word;
      return CharCategory.Other;
    };
  }
  function cmpRange(a2, b) {
    return a2.from - b.from || a2.value.startSide - b.value.startSide;
  }
  function lazySort(ranges) {
    if (ranges.length > 1)
      for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
        let cur = ranges[i];
        if (cmpRange(prev, cur) > 0)
          return ranges.slice().sort(cmpRange);
        prev = cur;
      }
    return ranges;
  }
  function findSharedChunks(a2, b, textDiff) {
    let inA = /* @__PURE__ */ new Map();
    for (let set2 of a2)
      for (let i = 0; i < set2.chunk.length; i++)
        if (set2.chunk[i].maxPoint <= 0)
          inA.set(set2.chunk[i], set2.chunkPos[i]);
    let shared = /* @__PURE__ */ new Set();
    for (let set2 of b)
      for (let i = 0; i < set2.chunk.length; i++) {
        let known = inA.get(set2.chunk[i]);
        if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set2.chunkPos[i] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set2.chunk[i].length)))
          shared.add(set2.chunk[i]);
      }
    return shared;
  }
  function heapBubble(heap, index) {
    for (let cur = heap[index]; ; ) {
      let childIndex = (index << 1) + 1;
      if (childIndex >= heap.length)
        break;
      let child = heap[childIndex];
      if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
        child = heap[childIndex + 1];
        childIndex++;
      }
      if (cur.compare(child) < 0)
        break;
      heap[childIndex] = cur;
      heap[index] = child;
      index = childIndex;
    }
  }
  function compare(a2, startA, b, startB, length, comparator) {
    a2.goto(startA);
    b.goto(startB);
    let endB = startB + length;
    let pos = startB, dPos = startB - startA;
    for (; ; ) {
      let diff2 = a2.to + dPos - b.to || a2.endSide - b.endSide;
      let end2 = diff2 < 0 ? a2.to + dPos : b.to, clipEnd = Math.min(end2, endB);
      if (a2.point || b.point) {
        if (!(a2.point && b.point && (a2.point == b.point || a2.point.eq(b.point)) && sameValues(a2.activeForPoint(a2.to + dPos), b.activeForPoint(b.to))))
          comparator.comparePoint(pos, clipEnd, a2.point, b.point);
      } else {
        if (clipEnd > pos && !sameValues(a2.active, b.active))
          comparator.compareRange(pos, clipEnd, a2.active, b.active);
      }
      if (end2 > endB)
        break;
      pos = end2;
      if (diff2 <= 0)
        a2.next();
      if (diff2 >= 0)
        b.next();
    }
  }
  function sameValues(a2, b) {
    if (a2.length != b.length)
      return false;
    for (let i = 0; i < a2.length; i++)
      if (a2[i] != b[i] && !a2[i].eq(b[i]))
        return false;
    return true;
  }
  function remove(array2, index) {
    for (let i = index, e = array2.length - 1; i < e; i++)
      array2[i] = array2[i + 1];
    array2.pop();
  }
  function insert(array2, index, value) {
    for (let i = array2.length - 1; i >= index; i--)
      array2[i + 1] = array2[i];
    array2[index] = value;
  }
  function findMinIndex(value, array2) {
    let found = -1, foundPos = 1e9;
    for (let i = 0; i < array2.length; i++)
      if ((array2[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
        found = i;
        foundPos = array2[i];
      }
    return found;
  }
  function findColumn(string3, col, tabSize, strict) {
    for (let i = 0, n2 = 0; ; ) {
      if (n2 >= col)
        return i;
      if (i == string3.length)
        break;
      n2 += string3.charCodeAt(i) == 9 ? tabSize - n2 % tabSize : 1;
      i = findClusterBreak(string3, i);
    }
    return strict === true ? -1 : string3.length;
  }
  var Text, TextLeaf, TextNode, RawTextCursor, PartialTextCursor, LineCursor, Line, extend, ZWJ, DefaultSplit, MapMode, ChangeDesc, ChangeSet, SectionIter, SelectionRange, EditorSelection, nextID, Facet, FacetProvider, initField, StateField, Prec_, Prec, PrecExtension, Compartment, CompartmentInstance, Configuration, languageData, allowMultipleSelections, lineSeparator, changeFilter, transactionFilter, transactionExtender, readOnly, Annotation, AnnotationType, StateEffectType, StateEffect, Transaction, none, CharCategory, nonASCIISingleCaseWordChar, wordChar, EditorState, RangeValue, Range, Chunk, RangeSet, RangeSetBuilder, LayerCursor, HeapCursor, SpanCursor;
  var init_dist = __esm({
    "node_modules/@codemirror/state/dist/index.js"() {
      Text = class {
        /**
        @internal
        */
        constructor() {
        }
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
          if (pos < 0 || pos > this.length)
            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
          return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n2) {
          if (n2 < 1 || n2 > this.lines)
            throw new RangeError(`Invalid line number ${n2} in ${this.lines}-line document`);
          return this.lineInner(n2, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from3, to, text) {
          let parts = [];
          this.decompose(
            0,
            from3,
            parts,
            2
            /* Open.To */
          );
          if (text.length)
            text.decompose(
              0,
              text.length,
              parts,
              1 | 2
              /* Open.To */
            );
          this.decompose(
            to,
            this.length,
            parts,
            1
            /* Open.From */
          );
          return TextNode.from(parts, this.length - (to - from3) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
          return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from3, to = this.length) {
          let parts = [];
          this.decompose(from3, to, parts, 0);
          return TextNode.from(parts, to - from3);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
          if (other == this)
            return true;
          if (other.length != this.length || other.lines != this.lines)
            return false;
          let start2 = this.scanIdentical(other, 1), end2 = this.length - this.scanIdentical(other, -1);
          let a2 = new RawTextCursor(this), b = new RawTextCursor(other);
          for (let skip = start2, pos = start2; ; ) {
            a2.next(skip);
            b.next(skip);
            skip = 0;
            if (a2.lineBreak != b.lineBreak || a2.done != b.done || a2.value != b.value)
              return false;
            pos += a2.value.length;
            if (a2.done || pos >= end2)
              return true;
          }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) {
          return new RawTextCursor(this, dir);
        }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from3, to = this.length) {
          return new PartialTextCursor(this, from3, to);
        }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from3, to) {
          let inner;
          if (from3 == null) {
            inner = this.iter();
          } else {
            if (to == null)
              to = this.lines + 1;
            let start2 = this.line(from3).from;
            inner = this.iterRange(start2, Math.max(start2, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
          }
          return new LineCursor(inner);
        }
        /**
        @internal
        */
        toString() {
          return this.sliceString(0);
        }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
          let lines = [];
          this.flatten(lines);
          return lines;
        }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
          if (text.length == 0)
            throw new RangeError("A document must have at least one line");
          if (text.length == 1 && !text[0])
            return Text.empty;
          return text.length <= 32 ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
      };
      TextLeaf = class extends Text {
        constructor(text, length = textLength(text)) {
          super();
          this.text = text;
          this.length = length;
        }
        get lines() {
          return this.text.length;
        }
        get children() {
          return null;
        }
        lineInner(target, isLine, line, offset2) {
          for (let i = 0; ; i++) {
            let string3 = this.text[i], end2 = offset2 + string3.length;
            if ((isLine ? line : end2) >= target)
              return new Line(offset2, end2, line, string3);
            offset2 = end2 + 1;
            line++;
          }
        }
        decompose(from3, to, target, open) {
          let text = from3 <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from3, to), Math.min(to, this.length) - Math.max(0, from3));
          if (open & 1) {
            let prev = target.pop();
            let joined = appendText(text.text, prev.text.slice(), 0, text.length);
            if (joined.length <= 32) {
              target.push(new TextLeaf(joined, prev.length + text.length));
            } else {
              let mid = joined.length >> 1;
              target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
            }
          } else {
            target.push(text);
          }
        }
        replace(from3, to, text) {
          if (!(text instanceof TextLeaf))
            return super.replace(from3, to, text);
          let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from3)), to);
          let newLen = this.length + text.length - (to - from3);
          if (lines.length <= 32)
            return new TextLeaf(lines, newLen);
          return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from3, to = this.length, lineSep = "\n") {
          let result = "";
          for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
            let line = this.text[i], end2 = pos + line.length;
            if (pos > from3 && i)
              result += lineSep;
            if (from3 < end2 && to > pos)
              result += line.slice(Math.max(0, from3 - pos), to - pos);
            pos = end2 + 1;
          }
          return result;
        }
        flatten(target) {
          for (let line of this.text)
            target.push(line);
        }
        scanIdentical() {
          return 0;
        }
        static split(text, target) {
          let part = [], len = -1;
          for (let line of text) {
            part.push(line);
            len += line.length + 1;
            if (part.length == 32) {
              target.push(new TextLeaf(part, len));
              part = [];
              len = -1;
            }
          }
          if (len > -1)
            target.push(new TextLeaf(part, len));
          return target;
        }
      };
      TextNode = class extends Text {
        constructor(children, length) {
          super();
          this.children = children;
          this.length = length;
          this.lines = 0;
          for (let child of children)
            this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset2) {
          for (let i = 0; ; i++) {
            let child = this.children[i], end2 = offset2 + child.length, endLine = line + child.lines - 1;
            if ((isLine ? endLine : end2) >= target)
              return child.lineInner(target, isLine, line, offset2);
            offset2 = end2 + 1;
            line = endLine + 1;
          }
        }
        decompose(from3, to, target, open) {
          for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
            let child = this.children[i], end2 = pos + child.length;
            if (from3 <= end2 && to >= pos) {
              let childOpen = open & ((pos <= from3 ? 1 : 0) | (end2 >= to ? 2 : 0));
              if (pos >= from3 && end2 <= to && !childOpen)
                target.push(child);
              else
                child.decompose(from3 - pos, to - pos, target, childOpen);
            }
            pos = end2 + 1;
          }
        }
        replace(from3, to, text) {
          if (text.lines < this.lines)
            for (let i = 0, pos = 0; i < this.children.length; i++) {
              let child = this.children[i], end2 = pos + child.length;
              if (from3 >= pos && to <= end2) {
                let updated = child.replace(from3 - pos, to - pos, text);
                let totalLines = this.lines - child.lines + updated.lines;
                if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
                  let copy = this.children.slice();
                  copy[i] = updated;
                  return new TextNode(copy, this.length - (to - from3) + text.length);
                }
                return super.replace(pos, end2, updated);
              }
              pos = end2 + 1;
            }
          return super.replace(from3, to, text);
        }
        sliceString(from3, to = this.length, lineSep = "\n") {
          let result = "";
          for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
            let child = this.children[i], end2 = pos + child.length;
            if (pos > from3 && i)
              result += lineSep;
            if (from3 < end2 && to > pos)
              result += child.sliceString(from3 - pos, to - pos, lineSep);
            pos = end2 + 1;
          }
          return result;
        }
        flatten(target) {
          for (let child of this.children)
            child.flatten(target);
        }
        scanIdentical(other, dir) {
          if (!(other instanceof TextNode))
            return 0;
          let length = 0;
          let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
          for (; ; iA += dir, iB += dir) {
            if (iA == eA || iB == eB)
              return length;
            let chA = this.children[iA], chB = other.children[iB];
            if (chA != chB)
              return length + chA.scanIdentical(chB, dir);
            length += chA.length + 1;
          }
        }
        static from(children, length = children.reduce((l2, ch2) => l2 + ch2.length + 1, -1)) {
          let lines = 0;
          for (let ch2 of children)
            lines += ch2.lines;
          if (lines < 32) {
            let flat = [];
            for (let ch2 of children)
              ch2.flatten(flat);
            return new TextLeaf(flat, length);
          }
          let chunk = Math.max(
            32,
            lines >> 5
            /* Tree.BranchShift */
          ), maxChunk = chunk << 1, minChunk = chunk >> 1;
          let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
          function add2(child) {
            let last;
            if (child.lines > maxChunk && child instanceof TextNode) {
              for (let node of child.children)
                add2(node);
            } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
              flush();
              chunked.push(child);
            } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
              currentLines += child.lines;
              currentLen += child.length + 1;
              currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
            } else {
              if (currentLines + child.lines > chunk)
                flush();
              currentLines += child.lines;
              currentLen += child.length + 1;
              currentChunk.push(child);
            }
          }
          function flush() {
            if (currentLines == 0)
              return;
            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
            currentLen = -1;
            currentLines = currentChunk.length = 0;
          }
          for (let child of children)
            add2(child);
          flush();
          return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
      };
      Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
      RawTextCursor = class {
        constructor(text, dir = 1) {
          this.dir = dir;
          this.done = false;
          this.lineBreak = false;
          this.value = "";
          this.nodes = [text];
          this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
          this.done = this.lineBreak = false;
          for (; ; ) {
            let last = this.nodes.length - 1;
            let top3 = this.nodes[last], offsetValue = this.offsets[last], offset2 = offsetValue >> 1;
            let size = top3 instanceof TextLeaf ? top3.text.length : top3.children.length;
            if (offset2 == (dir > 0 ? size : 0)) {
              if (last == 0) {
                this.done = true;
                this.value = "";
                return this;
              }
              if (dir > 0)
                this.offsets[last - 1]++;
              this.nodes.pop();
              this.offsets.pop();
            } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
              this.offsets[last] += dir;
              if (skip == 0) {
                this.lineBreak = true;
                this.value = "\n";
                return this;
              }
              skip--;
            } else if (top3 instanceof TextLeaf) {
              let next2 = top3.text[offset2 + (dir < 0 ? -1 : 0)];
              this.offsets[last] += dir;
              if (next2.length > Math.max(0, skip)) {
                this.value = skip == 0 ? next2 : dir > 0 ? next2.slice(skip) : next2.slice(0, next2.length - skip);
                return this;
              }
              skip -= next2.length;
            } else {
              let next2 = top3.children[offset2 + (dir < 0 ? -1 : 0)];
              if (skip > next2.length) {
                skip -= next2.length;
                this.offsets[last] += dir;
              } else {
                if (dir < 0)
                  this.offsets[last]--;
                this.nodes.push(next2);
                this.offsets.push(dir > 0 ? 1 : (next2 instanceof TextLeaf ? next2.text.length : next2.children.length) << 1);
              }
            }
          }
        }
        next(skip = 0) {
          if (skip < 0) {
            this.nextInner(-skip, -this.dir);
            skip = this.value.length;
          }
          return this.nextInner(skip, this.dir);
        }
      };
      PartialTextCursor = class {
        constructor(text, start2, end2) {
          this.value = "";
          this.done = false;
          this.cursor = new RawTextCursor(text, start2 > end2 ? -1 : 1);
          this.pos = start2 > end2 ? text.length : 0;
          this.from = Math.min(start2, end2);
          this.to = Math.max(start2, end2);
        }
        nextInner(skip, dir) {
          if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
            this.value = "";
            this.done = true;
            return this;
          }
          skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
          let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
          if (skip > limit)
            skip = limit;
          limit -= skip;
          let { value } = this.cursor.next(skip);
          this.pos += (value.length + skip) * dir;
          this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
          this.done = !this.value;
          return this;
        }
        next(skip = 0) {
          if (skip < 0)
            skip = Math.max(skip, this.from - this.pos);
          else if (skip > 0)
            skip = Math.min(skip, this.to - this.pos);
          return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() {
          return this.cursor.lineBreak && this.value != "";
        }
      };
      LineCursor = class {
        constructor(inner) {
          this.inner = inner;
          this.afterBreak = true;
          this.value = "";
          this.done = false;
        }
        next(skip = 0) {
          let { done, lineBreak, value } = this.inner.next(skip);
          if (done) {
            this.done = true;
            this.value = "";
          } else if (lineBreak) {
            if (this.afterBreak) {
              this.value = "";
            } else {
              this.afterBreak = true;
              this.next();
            }
          } else {
            this.value = value;
            this.afterBreak = false;
          }
          return this;
        }
        get lineBreak() {
          return false;
        }
      };
      if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function() {
          return this.iter();
        };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
          return this;
        };
      }
      Line = class {
        /**
        @internal
        */
        constructor(from3, to, number3, text) {
          this.from = from3;
          this.to = to;
          this.number = number3;
          this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() {
          return this.to - this.from;
        }
      };
      extend = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s2) => s2 ? parseInt(s2, 36) : 1);
      for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
      ZWJ = 8205;
      DefaultSplit = /\r\n?|\n/;
      MapMode = /* @__PURE__ */ function(MapMode2) {
        MapMode2[MapMode2["Simple"] = 0] = "Simple";
        MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
        MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
        MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
        return MapMode2;
      }(MapMode || (MapMode = {}));
      ChangeDesc = class {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(sections) {
          this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2)
            result += this.sections[i];
          return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
          let result = 0;
          for (let i = 0; i < this.sections.length; i += 2) {
            let ins = this.sections[i + 1];
            result += ins < 0 ? this.sections[i] : ins;
          }
          return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() {
          return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
        }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
          for (let i = 0, posA = 0, posB = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++];
            if (ins < 0) {
              f(posA, posB, len);
              posB += len;
            } else {
              posB += ins;
            }
            posA += len;
          }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
          iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
          let sections = [];
          for (let i = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++];
            if (ins < 0)
              sections.push(len, ins);
            else
              sections.push(ins, len);
          }
          return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) {
          return this.empty ? other : other.empty ? this : composeSets(this, other);
        }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) {
          return other.empty ? this : mapSet(this, other, before);
        }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
          let posA = 0, posB = 0;
          for (let i = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
            if (ins < 0) {
              if (endA > pos)
                return posB + (pos - posA);
              posB += len;
            } else {
              if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos))
                return null;
              if (endA > pos || endA == pos && assoc < 0 && !len)
                return pos == posA || assoc < 0 ? posB : posB + ins;
              posB += ins;
            }
            posA = endA;
          }
          if (pos > posA)
            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
          return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from3, to = from3) {
          for (let i = 0, pos = 0; i < this.sections.length && pos <= to; ) {
            let len = this.sections[i++], ins = this.sections[i++], end2 = pos + len;
            if (ins >= 0 && pos <= to && end2 >= from3)
              return pos < from3 && end2 > to ? "cover" : true;
            pos = end2;
          }
          return false;
        }
        /**
        @internal
        */
        toString() {
          let result = "";
          for (let i = 0; i < this.sections.length; ) {
            let len = this.sections[i++], ins = this.sections[i++];
            result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
          }
          return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() {
          return this.sections;
        }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json3) {
          if (!Array.isArray(json3) || json3.length % 2 || json3.some((a2) => typeof a2 != "number"))
            throw new RangeError("Invalid JSON representation of ChangeDesc");
          return new ChangeDesc(json3);
        }
        /**
        @internal
        */
        static create(sections) {
          return new ChangeDesc(sections);
        }
      };
      ChangeSet = class extends ChangeDesc {
        constructor(sections, inserted) {
          super(sections);
          this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc2) {
          if (this.length != doc2.length)
            throw new RangeError("Applying change set to a document with the wrong length");
          iterChanges(this, (fromA, toA, fromB, _toB, text) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text), false);
          return doc2;
        }
        mapDesc(other, before = false) {
          return mapSet(this, other, before, true);
        }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc2) {
          let sections = this.sections.slice(), inserted = [];
          for (let i = 0, pos = 0; i < sections.length; i += 2) {
            let len = sections[i], ins = sections[i + 1];
            if (ins >= 0) {
              sections[i] = ins;
              sections[i + 1] = len;
              let index = i >> 1;
              while (inserted.length < index)
                inserted.push(Text.empty);
              inserted.push(len ? doc2.slice(pos, pos + len) : Text.empty);
            }
            pos += len;
          }
          return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) {
          return this.empty ? other : other.empty ? this : composeSets(this, other, true);
        }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) {
          return other.empty ? this : mapSet(this, other, before, true);
        }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
          iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() {
          return ChangeDesc.create(this.sections);
        }
        /**
        @internal
        */
        filter(ranges) {
          let resultSections = [], resultInserted = [], filteredSections = [];
          let iter = new SectionIter(this);
          done:
            for (let i = 0, pos = 0; ; ) {
              let next2 = i == ranges.length ? 1e9 : ranges[i++];
              while (pos < next2 || pos == next2 && iter.len == 0) {
                if (iter.done)
                  break done;
                let len = Math.min(iter.len, next2 - pos);
                addSection(filteredSections, len, -1);
                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                addSection(resultSections, len, ins);
                if (ins > 0)
                  addInsert(resultInserted, resultSections, iter.text);
                iter.forward(len);
                pos += len;
              }
              let end2 = ranges[i++];
              while (pos < end2) {
                if (iter.done)
                  break done;
                let len = Math.min(iter.len, end2 - pos);
                addSection(resultSections, len, -1);
                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                iter.forward(len);
                pos += len;
              }
            }
          return {
            changes: new ChangeSet(resultSections, resultInserted),
            filtered: ChangeDesc.create(filteredSections)
          };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
          let parts = [];
          for (let i = 0; i < this.sections.length; i += 2) {
            let len = this.sections[i], ins = this.sections[i + 1];
            if (ins < 0)
              parts.push(len);
            else if (ins == 0)
              parts.push([len]);
            else
              parts.push([len].concat(this.inserted[i >> 1].toJSON()));
          }
          return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
          let sections = [], inserted = [], pos = 0;
          let total = null;
          function flush(force = false) {
            if (!force && !sections.length)
              return;
            if (pos < length)
              addSection(sections, length - pos, -1);
            let set2 = new ChangeSet(sections, inserted);
            total = total ? total.compose(set2.map(total)) : set2;
            sections = [];
            inserted = [];
            pos = 0;
          }
          function process2(spec) {
            if (Array.isArray(spec)) {
              for (let sub of spec)
                process2(sub);
            } else if (spec instanceof ChangeSet) {
              if (spec.length != length)
                throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
              flush();
              total = total ? total.compose(spec.map(total)) : spec;
            } else {
              let { from: from3, to = from3, insert: insert2 } = spec;
              if (from3 > to || from3 < 0 || to > length)
                throw new RangeError(`Invalid change range ${from3} to ${to} (in doc of length ${length})`);
              let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
              let insLen = insText.length;
              if (from3 == to && insLen == 0)
                return;
              if (from3 < pos)
                flush();
              if (from3 > pos)
                addSection(sections, from3 - pos, -1);
              addSection(sections, to - from3, insLen);
              addInsert(inserted, sections, insText);
              pos = to;
            }
          }
          process2(changes);
          flush(!total);
          return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
          return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json3) {
          if (!Array.isArray(json3))
            throw new RangeError("Invalid JSON representation of ChangeSet");
          let sections = [], inserted = [];
          for (let i = 0; i < json3.length; i++) {
            let part = json3[i];
            if (typeof part == "number") {
              sections.push(part, -1);
            } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i2) => i2 && typeof e != "string")) {
              throw new RangeError("Invalid JSON representation of ChangeSet");
            } else if (part.length == 1) {
              sections.push(part[0], 0);
            } else {
              while (inserted.length < i)
                inserted.push(Text.empty);
              inserted[i] = Text.of(part.slice(1));
              sections.push(part[0], inserted[i].length);
            }
          }
          return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
          return new ChangeSet(sections, inserted);
        }
      };
      SectionIter = class {
        constructor(set2) {
          this.set = set2;
          this.i = 0;
          this.next();
        }
        next() {
          let { sections } = this.set;
          if (this.i < sections.length) {
            this.len = sections[this.i++];
            this.ins = sections[this.i++];
          } else {
            this.len = 0;
            this.ins = -2;
          }
          this.off = 0;
        }
        get done() {
          return this.ins == -2;
        }
        get len2() {
          return this.ins < 0 ? this.len : this.ins;
        }
        get text() {
          let { inserted } = this.set, index = this.i - 2 >> 1;
          return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
          let { inserted } = this.set, index = this.i - 2 >> 1;
          return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
        }
        forward(len) {
          if (len == this.len)
            this.next();
          else {
            this.len -= len;
            this.off += len;
          }
        }
        forward2(len) {
          if (this.ins == -1)
            this.forward(len);
          else if (len == this.ins)
            this.next();
          else {
            this.ins -= len;
            this.off += len;
          }
        }
      };
      SelectionRange = class {
        constructor(from3, to, flags) {
          this.from = from3;
          this.to = to;
          this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() {
          return this.flags & 16 ? this.to : this.from;
        }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() {
          return this.flags & 16 ? this.from : this.to;
        }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() {
          return this.from == this.to;
        }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() {
          return this.flags & 4 ? -1 : this.flags & 8 ? 1 : 0;
        }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
          let level = this.flags & 3;
          return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
          let value = this.flags >> 5;
          return value == 33554431 ? void 0 : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
          let from3, to;
          if (this.empty) {
            from3 = to = change.mapPos(this.from, assoc);
          } else {
            from3 = change.mapPos(this.from, 1);
            to = change.mapPos(this.to, -1);
          }
          return from3 == this.from && to == this.to ? this : new SelectionRange(from3, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from3, to = from3) {
          if (from3 <= this.anchor && to >= this.anchor)
            return EditorSelection.range(from3, to);
          let head = Math.abs(from3 - this.anchor) > Math.abs(to - this.anchor) ? from3 : to;
          return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
          return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() {
          return { anchor: this.anchor, head: this.head };
        }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json3) {
          if (!json3 || typeof json3.anchor != "number" || typeof json3.head != "number")
            throw new RangeError("Invalid JSON representation for SelectionRange");
          return EditorSelection.range(json3.anchor, json3.head);
        }
        /**
        @internal
        */
        static create(from3, to, flags) {
          return new SelectionRange(from3, to, flags);
        }
      };
      EditorSelection = class {
        constructor(ranges, mainIndex) {
          this.ranges = ranges;
          this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
          if (change.empty)
            return this;
          return EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
          if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
            return false;
          for (let i = 0; i < this.ranges.length; i++)
            if (!this.ranges[i].eq(other.ranges[i]))
              return false;
          return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() {
          return this.ranges[this.mainIndex];
        }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
          return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
          return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
          let ranges = this.ranges.slice();
          ranges[which] = range;
          return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
          return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json3) {
          if (!json3 || !Array.isArray(json3.ranges) || typeof json3.main != "number" || json3.main >= json3.ranges.length)
            throw new RangeError("Invalid JSON representation for EditorSelection");
          return new EditorSelection(json3.ranges.map((r2) => SelectionRange.fromJSON(r2)), json3.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
          return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
          if (ranges.length == 0)
            throw new RangeError("A selection needs at least one range");
          for (let pos = 0, i = 0; i < ranges.length; i++) {
            let range = ranges[i];
            if (range.empty ? range.from <= pos : range.from < pos)
              return EditorSelection.normalized(ranges.slice(), mainIndex);
            pos = range.to;
          }
          return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
          return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 : 8) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431) << 5);
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn, bidiLevel) {
          let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431) << 5 | (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
          return head < anchor ? SelectionRange.create(head, anchor, 16 | 8 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 4 : 0) | flags);
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
          let main = ranges[mainIndex];
          ranges.sort((a2, b) => a2.from - b.from);
          mainIndex = ranges.indexOf(main);
          for (let i = 1; i < ranges.length; i++) {
            let range = ranges[i], prev = ranges[i - 1];
            if (range.empty ? range.from <= prev.to : range.from < prev.to) {
              let from3 = prev.from, to = Math.max(range.to, prev.to);
              if (i <= mainIndex)
                mainIndex--;
              ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from3) : EditorSelection.range(from3, to));
            }
          }
          return new EditorSelection(ranges, mainIndex);
        }
      };
      nextID = 0;
      Facet = class {
        constructor(combine, compareInput, compare2, isStatic, enables) {
          this.combine = combine;
          this.compareInput = compareInput;
          this.compare = compare2;
          this.isStatic = isStatic;
          this.id = nextID++;
          this.default = combine([]);
          this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
          return new Facet(config.combine || ((a2) => a2), config.compareInput || ((a2, b) => a2 === b), config.compare || (!config.combine ? sameArray : (a2, b) => a2 === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
          return new FacetProvider([], this, 0, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
          if (this.isStatic)
            throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 1, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
          if (this.isStatic)
            throw new Error("Can't compute a static facet");
          return new FacetProvider(deps, this, 2, get);
        }
        from(field, get) {
          if (!get)
            get = (x) => x;
          return this.compute([field], (state) => get(state.field(field)));
        }
      };
      FacetProvider = class {
        constructor(dependencies, facet, type7, value) {
          this.dependencies = dependencies;
          this.facet = facet;
          this.type = type7;
          this.value = value;
          this.id = nextID++;
        }
        dynamicSlot(addresses) {
          var _a2;
          let getter = this.value;
          let compare2 = this.facet.compareInput;
          let id2 = this.id, idx = addresses[id2] >> 1, multi = this.type == 2;
          let depDoc = false, depSel = false, depAddrs = [];
          for (let dep of this.dependencies) {
            if (dep == "doc")
              depDoc = true;
            else if (dep == "selection")
              depSel = true;
            else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
              depAddrs.push(addresses[dep.id]);
          }
          return {
            create(state) {
              state.values[idx] = getter(state);
              return 1;
            },
            update(state, tr) {
              if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
                let newVal = getter(state);
                if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
                  state.values[idx] = newVal;
                  return 1;
                }
              }
              return 0;
            },
            reconfigure: (state, oldState) => {
              let newVal, oldAddr = oldState.config.address[id2];
              if (oldAddr != null) {
                let oldVal = getAddr(oldState, oldAddr);
                if (this.dependencies.every((dep) => {
                  return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
                  state.values[idx] = oldVal;
                  return 0;
                }
              } else {
                newVal = getter(state);
              }
              state.values[idx] = newVal;
              return 1;
            }
          };
        }
      };
      initField = /* @__PURE__ */ Facet.define({ static: true });
      StateField = class {
        constructor(id2, createF, updateF, compareF, spec) {
          this.id = id2;
          this.createF = createF;
          this.updateF = updateF;
          this.compareF = compareF;
          this.spec = spec;
          this.provides = void 0;
        }
        /**
        Define a state field.
        */
        static define(config) {
          let field = new StateField(nextID++, config.create, config.update, config.compare || ((a2, b) => a2 === b), config);
          if (config.provide)
            field.provides = config.provide(field);
          return field;
        }
        create(state) {
          let init = state.facet(initField).find((i) => i.field == this);
          return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
          let idx = addresses[this.id] >> 1;
          return {
            create: (state) => {
              state.values[idx] = this.create(state);
              return 1;
            },
            update: (state, tr) => {
              let oldVal = state.values[idx];
              let value = this.updateF(oldVal, tr);
              if (this.compareF(oldVal, value))
                return 0;
              state.values[idx] = value;
              return 1;
            },
            reconfigure: (state, oldState) => {
              if (oldState.config.address[this.id] != null) {
                state.values[idx] = oldState.field(this);
                return 0;
              }
              state.values[idx] = this.create(state);
              return 1;
            }
          };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
          return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() {
          return this;
        }
      };
      Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
      Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /* @__PURE__ */ prec(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /* @__PURE__ */ prec(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /* @__PURE__ */ prec(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /* @__PURE__ */ prec(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /* @__PURE__ */ prec(Prec_.lowest)
      };
      PrecExtension = class {
        constructor(inner, prec2) {
          this.inner = inner;
          this.prec = prec2;
        }
      };
      Compartment = class {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) {
          return new CompartmentInstance(this, ext);
        }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content3) {
          return Compartment.reconfigure.of({ compartment: this, extension: content3 });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
          return state.config.compartments.get(this);
        }
      };
      CompartmentInstance = class {
        constructor(compartment, inner) {
          this.compartment = compartment;
          this.inner = inner;
        }
      };
      Configuration = class {
        constructor(base4, compartments, dynamicSlots, address, staticValues, facets) {
          this.base = base4;
          this.compartments = compartments;
          this.dynamicSlots = dynamicSlots;
          this.address = address;
          this.staticValues = staticValues;
          this.facets = facets;
          this.statusTemplate = [];
          while (this.statusTemplate.length < dynamicSlots.length)
            this.statusTemplate.push(
              0
              /* SlotStatus.Unresolved */
            );
        }
        staticFacet(facet) {
          let addr = this.address[facet.id];
          return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base4, compartments, oldState) {
          let fields = [];
          let facets = /* @__PURE__ */ Object.create(null);
          let newCompartments = /* @__PURE__ */ new Map();
          for (let ext of flatten(base4, compartments, newCompartments)) {
            if (ext instanceof StateField)
              fields.push(ext);
            else
              (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
          }
          let address = /* @__PURE__ */ Object.create(null);
          let staticValues = [];
          let dynamicSlots = [];
          for (let field of fields) {
            address[field.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a2) => field.slot(a2));
          }
          let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
          for (let id2 in facets) {
            let providers = facets[id2], facet = providers[0].facet;
            let oldProviders = oldFacets && oldFacets[id2] || [];
            if (providers.every(
              (p) => p.type == 0
              /* Provider.Static */
            )) {
              address[facet.id] = staticValues.length << 1 | 1;
              if (sameArray(oldProviders, providers)) {
                staticValues.push(oldState.facet(facet));
              } else {
                let value = facet.combine(providers.map((p) => p.value));
                staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
              }
            } else {
              for (let p of providers) {
                if (p.type == 0) {
                  address[p.id] = staticValues.length << 1 | 1;
                  staticValues.push(p.value);
                } else {
                  address[p.id] = dynamicSlots.length << 1;
                  dynamicSlots.push((a2) => p.dynamicSlot(a2));
                }
              }
              address[facet.id] = dynamicSlots.length << 1;
              dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet, providers));
            }
          }
          let dynamic = dynamicSlots.map((f) => f(address));
          return new Configuration(base4, newCompartments, dynamic, address, staticValues, facets);
        }
      };
      languageData = /* @__PURE__ */ Facet.define();
      allowMultipleSelections = /* @__PURE__ */ Facet.define({
        combine: (values2) => values2.some((v) => v),
        static: true
      });
      lineSeparator = /* @__PURE__ */ Facet.define({
        combine: (values2) => values2.length ? values2[0] : void 0,
        static: true
      });
      changeFilter = /* @__PURE__ */ Facet.define();
      transactionFilter = /* @__PURE__ */ Facet.define();
      transactionExtender = /* @__PURE__ */ Facet.define();
      readOnly = /* @__PURE__ */ Facet.define({
        combine: (values2) => values2.length ? values2[0] : false
      });
      Annotation = class {
        /**
        @internal
        */
        constructor(type7, value) {
          this.type = type7;
          this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() {
          return new AnnotationType();
        }
      };
      AnnotationType = class {
        /**
        Create an instance of this annotation.
        */
        of(value) {
          return new Annotation(this, value);
        }
      };
      StateEffectType = class {
        /**
        @internal
        */
        constructor(map) {
          this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) {
          return new StateEffect(this, value);
        }
      };
      StateEffect = class {
        /**
        @internal
        */
        constructor(type7, value) {
          this.type = type7;
          this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
          let mapped = this.type.map(this.value, mapping);
          return mapped === void 0 ? void 0 : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type7) {
          return this.type == type7;
        }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds.
        */
        static define(spec = {}) {
          return new StateEffectType(spec.map || ((v) => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
          if (!effects.length)
            return effects;
          let result = [];
          for (let effect of effects) {
            let mapped = effect.map(mapping);
            if (mapped)
              result.push(mapped);
          }
          return result;
        }
      };
      StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
      StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
      Transaction = class {
        constructor(startState, changes, selection, effects, annotations, scrollIntoView2) {
          this.startState = startState;
          this.changes = changes;
          this.selection = selection;
          this.effects = effects;
          this.annotations = annotations;
          this.scrollIntoView = scrollIntoView2;
          this._doc = null;
          this._state = null;
          if (selection)
            checkSelection(selection, changes.newLength);
          if (!annotations.some((a2) => a2.type == Transaction.time))
            this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView2) {
          return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView2);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
          return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
          return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
          if (!this._state)
            this.startState.applyTransaction(this);
          return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type7) {
          for (let ann of this.annotations)
            if (ann.type == type7)
              return ann.value;
          return void 0;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() {
          return !this.changes.empty;
        }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() {
          return this.startState.config != this.state.config;
        }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
          let e = this.annotation(Transaction.userEvent);
          return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
      };
      Transaction.time = /* @__PURE__ */ Annotation.define();
      Transaction.userEvent = /* @__PURE__ */ Annotation.define();
      Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
      Transaction.remote = /* @__PURE__ */ Annotation.define();
      none = [];
      CharCategory = /* @__PURE__ */ function(CharCategory2) {
        CharCategory2[CharCategory2["Word"] = 0] = "Word";
        CharCategory2[CharCategory2["Space"] = 1] = "Space";
        CharCategory2[CharCategory2["Other"] = 2] = "Other";
        return CharCategory2;
      }(CharCategory || (CharCategory = {}));
      nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
      try {
        wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
      } catch (_) {
      }
      EditorState = class {
        constructor(config, doc2, selection, values2, computeSlot, tr) {
          this.config = config;
          this.doc = doc2;
          this.selection = selection;
          this.values = values2;
          this.status = config.statusTemplate.slice();
          this.computeSlot = computeSlot;
          if (tr)
            tr._state = this;
          for (let i = 0; i < this.config.dynamicSlots.length; i++)
            ensureAddr(this, i << 1);
          this.computeSlot = null;
        }
        field(field, require2 = true) {
          let addr = this.config.address[field.id];
          if (addr == null) {
            if (require2)
              throw new RangeError("Field is not present in this state");
            return void 0;
          }
          ensureAddr(this, addr);
          return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
          return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
          let conf = this.config, { base: base4, compartments } = conf;
          for (let effect of tr.effects) {
            if (effect.is(Compartment.reconfigure)) {
              if (conf) {
                compartments = /* @__PURE__ */ new Map();
                conf.compartments.forEach((val, key) => compartments.set(key, val));
                conf = null;
              }
              compartments.set(effect.value.compartment, effect.value.extension);
            } else if (effect.is(StateEffect.reconfigure)) {
              conf = null;
              base4 = effect.value;
            } else if (effect.is(StateEffect.appendConfig)) {
              conf = null;
              base4 = asArray(base4).concat(effect.value);
            }
          }
          let startValues;
          if (!conf) {
            conf = Configuration.resolve(base4, compartments, this);
            let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
            startValues = intermediateState.values;
          } else {
            startValues = tr.startState.values.slice();
          }
          new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
          if (typeof text == "string")
            text = this.toText(text);
          return this.changeByRange((range) => ({
            changes: { from: range.from, to: range.to, insert: text },
            range: EditorSelection.cursor(range.from + text.length)
          }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
          let sel = this.selection;
          let result1 = f(sel.ranges[0]);
          let changes = this.changes(result1.changes), ranges = [result1.range];
          let effects = asArray(result1.effects);
          for (let i = 1; i < sel.ranges.length; i++) {
            let result = f(sel.ranges[i]);
            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
            for (let j = 0; j < i; j++)
              ranges[j] = ranges[j].map(newMapped);
            let mapBy = changes.mapDesc(newChanges, true);
            ranges.push(result.range.map(mapBy));
            changes = changes.compose(newMapped);
            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
          }
          return {
            changes,
            selection: EditorSelection.create(ranges, sel.mainIndex),
            effects
          };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
          if (spec instanceof ChangeSet)
            return spec;
          return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string3) {
          return Text.of(string3.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from3 = 0, to = this.doc.length) {
          return this.doc.sliceString(from3, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
          let addr = this.config.address[facet.id];
          if (addr == null)
            return facet.default;
          ensureAddr(this, addr);
          return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
          let result = {
            doc: this.sliceDoc(),
            selection: this.selection.toJSON()
          };
          if (fields)
            for (let prop in fields) {
              let value = fields[prop];
              if (value instanceof StateField && this.config.address[value.id] != null)
                result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
            }
          return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json3, config = {}, fields) {
          if (!json3 || typeof json3.doc != "string")
            throw new RangeError("Invalid JSON representation for EditorState");
          let fieldInit = [];
          if (fields)
            for (let prop in fields) {
              if (Object.prototype.hasOwnProperty.call(json3, prop)) {
                let field = fields[prop], value = json3[prop];
                fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
              }
            }
          return EditorState.create({
            doc: json3.doc,
            selection: EditorSelection.fromJSON(json3.selection),
            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
          });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
          let configuration = Configuration.resolve(config.extensions || [], /* @__PURE__ */ new Map());
          let doc2 = config.doc instanceof Text ? config.doc : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
          let selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
          checkSelection(selection, doc2.length);
          if (!configuration.staticFacet(allowMultipleSelections))
            selection = selection.asSingle();
          return new EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() {
          return this.facet(EditorState.tabSize);
        }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() {
          return this.facet(EditorState.lineSeparator) || "\n";
        }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() {
          return this.facet(readOnly);
        }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert2) {
          for (let map of this.facet(EditorState.phrases))
            if (Object.prototype.hasOwnProperty.call(map, phrase)) {
              phrase = map[phrase];
              break;
            }
          if (insert2.length)
            phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
              if (i == "$")
                return "$";
              let n2 = +(i || 1);
              return !n2 || n2 > insert2.length ? m : insert2[n2 - 1];
            });
          return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        
        Examples of language data fields are...
        
        - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
          comment syntax.
        - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
          for providing language-specific completion sources.
        - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
          characters that should be considered part of words in this
          language.
        - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
          bracket closing behavior.
        */
        languageDataAt(name2, pos, side = -1) {
          let values2 = [];
          for (let provider of this.facet(languageData)) {
            for (let result of provider(this, pos, side)) {
              if (Object.prototype.hasOwnProperty.call(result, name2))
                values2.push(result[name2]);
            }
          }
          return values2;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
          return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
          let { text, from: from3, length } = this.doc.lineAt(pos);
          let cat = this.charCategorizer(pos);
          let start2 = pos - from3, end2 = pos - from3;
          while (start2 > 0) {
            let prev = findClusterBreak(text, start2, false);
            if (cat(text.slice(prev, start2)) != CharCategory.Word)
              break;
            start2 = prev;
          }
          while (end2 < length) {
            let next2 = findClusterBreak(text, end2);
            if (cat(text.slice(end2, next2)) != CharCategory.Word)
              break;
            end2 = next2;
          }
          return start2 == end2 ? null : EditorSelection.range(start2 + from3, end2 + from3);
        }
      };
      EditorState.allowMultipleSelections = allowMultipleSelections;
      EditorState.tabSize = /* @__PURE__ */ Facet.define({
        combine: (values2) => values2.length ? values2[0] : 4
      });
      EditorState.lineSeparator = lineSeparator;
      EditorState.readOnly = readOnly;
      EditorState.phrases = /* @__PURE__ */ Facet.define({
        compare(a2, b) {
          let kA = Object.keys(a2), kB = Object.keys(b);
          return kA.length == kB.length && kA.every((k) => a2[k] == b[k]);
        }
      });
      EditorState.languageData = languageData;
      EditorState.changeFilter = changeFilter;
      EditorState.transactionFilter = transactionFilter;
      EditorState.transactionExtender = transactionExtender;
      Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
      RangeValue = class {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) {
          return this == other;
        }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from3, to = from3) {
          return Range.create(from3, to, this);
        }
      };
      RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
      RangeValue.prototype.point = false;
      RangeValue.prototype.mapMode = MapMode.TrackDel;
      Range = class {
        constructor(from3, to, value) {
          this.from = from3;
          this.to = to;
          this.value = value;
        }
        /**
        @internal
        */
        static create(from3, to, value) {
          return new Range(from3, to, value);
        }
      };
      Chunk = class {
        constructor(from3, to, value, maxPoint) {
          this.from = from3;
          this.to = to;
          this.value = value;
          this.maxPoint = maxPoint;
        }
        get length() {
          return this.to[this.to.length - 1];
        }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end2, startAt = 0) {
          let arr = end2 ? this.to : this.from;
          for (let lo = startAt, hi = arr.length; ; ) {
            if (lo == hi)
              return lo;
            let mid = lo + hi >> 1;
            let diff2 = arr[mid] - pos || (end2 ? this.value[mid].endSide : this.value[mid].startSide) - side;
            if (mid == lo)
              return diff2 >= 0 ? lo : hi;
            if (diff2 >= 0)
              hi = mid;
            else
              lo = mid + 1;
          }
        }
        between(offset2, from3, to, f) {
          for (let i = this.findIndex(from3, -1e9, true), e = this.findIndex(to, 1e9, false, i); i < e; i++)
            if (f(this.from[i] + offset2, this.to[i] + offset2, this.value[i]) === false)
              return false;
        }
        map(offset2, changes) {
          let value = [], from3 = [], to = [], newPos = -1, maxPoint = -1;
          for (let i = 0; i < this.value.length; i++) {
            let val = this.value[i], curFrom = this.from[i] + offset2, curTo = this.to[i] + offset2, newFrom, newTo;
            if (curFrom == curTo) {
              let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
              if (mapped == null)
                continue;
              newFrom = newTo = mapped;
              if (val.startSide != val.endSide) {
                newTo = changes.mapPos(curFrom, val.endSide);
                if (newTo < newFrom)
                  continue;
              }
            } else {
              newFrom = changes.mapPos(curFrom, val.startSide);
              newTo = changes.mapPos(curTo, val.endSide);
              if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                continue;
            }
            if ((newTo - newFrom || val.endSide - val.startSide) < 0)
              continue;
            if (newPos < 0)
              newPos = newFrom;
            if (val.point)
              maxPoint = Math.max(maxPoint, newTo - newFrom);
            value.push(val);
            from3.push(newFrom - newPos);
            to.push(newTo - newPos);
          }
          return { mapped: value.length ? new Chunk(from3, to, value, maxPoint) : null, pos: newPos };
        }
      };
      RangeSet = class {
        constructor(chunkPos, chunk, nextLayer, maxPoint) {
          this.chunkPos = chunkPos;
          this.chunk = chunk;
          this.nextLayer = nextLayer;
          this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
          return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
          let last = this.chunk.length - 1;
          return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
          if (this.isEmpty)
            return 0;
          let size = this.nextLayer.size;
          for (let chunk of this.chunk)
            size += chunk.value.length;
          return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
          return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
          let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
          let filter = updateSpec.filter;
          if (add2.length == 0 && !filter)
            return this;
          if (sort)
            add2 = add2.slice().sort(cmpRange);
          if (this.isEmpty)
            return add2.length ? RangeSet.of(add2) : this;
          let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
          let builder = new RangeSetBuilder();
          while (cur.value || i < add2.length) {
            if (i < add2.length && (cur.from - add2[i].from || cur.startSide - add2[i].value.startSide) >= 0) {
              let range = add2[i++];
              if (!builder.addInner(range.from, range.to, range.value))
                spill.push(range);
            } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add2.length || this.chunkEnd(cur.chunkIndex) < add2[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
              cur.nextChunk();
            } else {
              if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                if (!builder.addInner(cur.from, cur.to, cur.value))
                  spill.push(Range.create(cur.from, cur.to, cur.value));
              }
              cur.next();
            }
          }
          return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
          if (changes.empty || this.isEmpty)
            return this;
          let chunks = [], chunkPos = [], maxPoint = -1;
          for (let i = 0; i < this.chunk.length; i++) {
            let start2 = this.chunkPos[i], chunk = this.chunk[i];
            let touch = changes.touchesRange(start2, start2 + chunk.length);
            if (touch === false) {
              maxPoint = Math.max(maxPoint, chunk.maxPoint);
              chunks.push(chunk);
              chunkPos.push(changes.mapPos(start2));
            } else if (touch === true) {
              let { mapped, pos } = chunk.map(start2, changes);
              if (mapped) {
                maxPoint = Math.max(maxPoint, mapped.maxPoint);
                chunks.push(mapped);
                chunkPos.push(pos);
              }
            }
          }
          let next2 = this.nextLayer.map(changes);
          return chunks.length == 0 ? next2 : new RangeSet(chunkPos, chunks, next2 || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from3, to, f) {
          if (this.isEmpty)
            return;
          for (let i = 0; i < this.chunk.length; i++) {
            let start2 = this.chunkPos[i], chunk = this.chunk[i];
            if (to >= start2 && from3 <= start2 + chunk.length && chunk.between(start2, from3 - start2, to - start2, f) === false)
              return;
          }
          this.nextLayer.between(from3, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from3 = 0) {
          return HeapCursor.from([this]).goto(from3);
        }
        /**
        @internal
        */
        get isEmpty() {
          return this.nextLayer == this;
        }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from3 = 0) {
          return HeapCursor.from(sets).goto(from3);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
          let a2 = oldSets.filter((set2) => set2.maxPoint > 0 || !set2.isEmpty && set2.maxPoint >= minPointSize);
          let b = newSets.filter((set2) => set2.maxPoint > 0 || !set2.isEmpty && set2.maxPoint >= minPointSize);
          let sharedChunks = findSharedChunks(a2, b, textDiff);
          let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
          let sideB = new SpanCursor(b, sharedChunks, minPointSize);
          textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
          if (textDiff.empty && textDiff.length == 0)
            compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from3 = 0, to) {
          if (to == null)
            to = 1e9 - 1;
          let a2 = oldSets.filter((set2) => !set2.isEmpty && newSets.indexOf(set2) < 0);
          let b = newSets.filter((set2) => !set2.isEmpty && oldSets.indexOf(set2) < 0);
          if (a2.length != b.length)
            return false;
          if (!a2.length)
            return true;
          let sharedChunks = findSharedChunks(a2, b);
          let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from3), sideB = new SpanCursor(b, sharedChunks, 0).goto(from3);
          for (; ; ) {
            if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
              return false;
            if (sideA.to > to)
              return true;
            sideA.next();
            sideB.next();
          }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from3, to, iterator, minPointSize = -1) {
          let cursor = new SpanCursor(sets, null, minPointSize).goto(from3), pos = from3;
          let openRanges = cursor.openStart;
          for (; ; ) {
            let curTo = Math.min(cursor.to, to);
            if (cursor.point) {
              let active = cursor.activeForPoint(cursor.to);
              let openCount = cursor.pointFrom < from3 ? active.length + 1 : Math.min(active.length, openRanges);
              iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
              openRanges = Math.min(cursor.openEnd(curTo), active.length);
            } else if (curTo > pos) {
              iterator.span(pos, curTo, cursor.active, openRanges);
              openRanges = cursor.openEnd(curTo);
            }
            if (cursor.to > to)
              return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
            pos = cursor.to;
            cursor.next();
          }
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
          let build = new RangeSetBuilder();
          for (let range of ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges)
            build.add(range.from, range.to, range.value);
          return build.finish();
        }
      };
      RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
      RangeSet.empty.nextLayer = RangeSet.empty;
      RangeSetBuilder = class {
        /**
        Create an empty builder.
        */
        constructor() {
          this.chunks = [];
          this.chunkPos = [];
          this.chunkStart = -1;
          this.last = null;
          this.lastFrom = -1e9;
          this.lastTo = -1e9;
          this.from = [];
          this.to = [];
          this.value = [];
          this.maxPoint = -1;
          this.setMaxPoint = -1;
          this.nextLayer = null;
        }
        finishChunk(newArrays) {
          this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
          this.chunkPos.push(this.chunkStart);
          this.chunkStart = -1;
          this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
          this.maxPoint = -1;
          if (newArrays) {
            this.from = [];
            this.to = [];
            this.value = [];
          }
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from3, to, value) {
          if (!this.addInner(from3, to, value))
            (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from3, to, value);
        }
        /**
        @internal
        */
        addInner(from3, to, value) {
          let diff2 = from3 - this.lastTo || value.startSide - this.last.endSide;
          if (diff2 <= 0 && (from3 - this.lastFrom || value.startSide - this.last.startSide) < 0)
            throw new Error("Ranges must be added sorted by `from` position and `startSide`");
          if (diff2 < 0)
            return false;
          if (this.from.length == 250)
            this.finishChunk(true);
          if (this.chunkStart < 0)
            this.chunkStart = from3;
          this.from.push(from3 - this.chunkStart);
          this.to.push(to - this.chunkStart);
          this.last = value;
          this.lastFrom = from3;
          this.lastTo = to;
          this.value.push(value);
          if (value.point)
            this.maxPoint = Math.max(this.maxPoint, to - from3);
          return true;
        }
        /**
        @internal
        */
        addChunk(from3, chunk) {
          if ((from3 - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
            return false;
          if (this.from.length)
            this.finishChunk(true);
          this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
          this.chunks.push(chunk);
          this.chunkPos.push(from3);
          let last = chunk.value.length - 1;
          this.last = chunk.value[last];
          this.lastFrom = chunk.from[last] + from3;
          this.lastTo = chunk.to[last] + from3;
          return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() {
          return this.finishInner(RangeSet.empty);
        }
        /**
        @internal
        */
        finishInner(next2) {
          if (this.from.length)
            this.finishChunk(false);
          if (this.chunks.length == 0)
            return next2;
          let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next2) : next2, this.setMaxPoint);
          this.from = null;
          return result;
        }
      };
      LayerCursor = class {
        constructor(layer, skip, minPoint, rank = 0) {
          this.layer = layer;
          this.skip = skip;
          this.minPoint = minPoint;
          this.rank = rank;
        }
        get startSide() {
          return this.value ? this.value.startSide : 0;
        }
        get endSide() {
          return this.value ? this.value.endSide : 0;
        }
        goto(pos, side = -1e9) {
          this.chunkIndex = this.rangeIndex = 0;
          this.gotoInner(pos, side, false);
          return this;
        }
        gotoInner(pos, side, forward) {
          while (this.chunkIndex < this.layer.chunk.length) {
            let next2 = this.layer.chunk[this.chunkIndex];
            if (!(this.skip && this.skip.has(next2) || this.layer.chunkEnd(this.chunkIndex) < pos || next2.maxPoint < this.minPoint))
              break;
            this.chunkIndex++;
            forward = false;
          }
          if (this.chunkIndex < this.layer.chunk.length) {
            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
            if (!forward || this.rangeIndex < rangeIndex)
              this.setRangeIndex(rangeIndex);
          }
          this.next();
        }
        forward(pos, side) {
          if ((this.to - pos || this.endSide - side) < 0)
            this.gotoInner(pos, side, true);
        }
        next() {
          for (; ; ) {
            if (this.chunkIndex == this.layer.chunk.length) {
              this.from = this.to = 1e9;
              this.value = null;
              break;
            } else {
              let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
              let from3 = chunkPos + chunk.from[this.rangeIndex];
              this.from = from3;
              this.to = chunkPos + chunk.to[this.rangeIndex];
              this.value = chunk.value[this.rangeIndex];
              this.setRangeIndex(this.rangeIndex + 1);
              if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                break;
            }
          }
        }
        setRangeIndex(index) {
          if (index == this.layer.chunk[this.chunkIndex].value.length) {
            this.chunkIndex++;
            if (this.skip) {
              while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                this.chunkIndex++;
            }
            this.rangeIndex = 0;
          } else {
            this.rangeIndex = index;
          }
        }
        nextChunk() {
          this.chunkIndex++;
          this.rangeIndex = 0;
          this.next();
        }
        compare(other) {
          return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
        }
      };
      HeapCursor = class {
        constructor(heap) {
          this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
          let heap = [];
          for (let i = 0; i < sets.length; i++) {
            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
              if (cur.maxPoint >= minPoint)
                heap.push(new LayerCursor(cur, skip, minPoint, i));
            }
          }
          return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() {
          return this.value ? this.value.startSide : 0;
        }
        goto(pos, side = -1e9) {
          for (let cur of this.heap)
            cur.goto(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
            heapBubble(this.heap, i);
          this.next();
          return this;
        }
        forward(pos, side) {
          for (let cur of this.heap)
            cur.forward(pos, side);
          for (let i = this.heap.length >> 1; i >= 0; i--)
            heapBubble(this.heap, i);
          if ((this.to - pos || this.value.endSide - side) < 0)
            this.next();
        }
        next() {
          if (this.heap.length == 0) {
            this.from = this.to = 1e9;
            this.value = null;
            this.rank = -1;
          } else {
            let top3 = this.heap[0];
            this.from = top3.from;
            this.to = top3.to;
            this.value = top3.value;
            this.rank = top3.rank;
            if (top3.value)
              top3.next();
            heapBubble(this.heap, 0);
          }
        }
      };
      SpanCursor = class {
        constructor(sets, skip, minPoint) {
          this.minPoint = minPoint;
          this.active = [];
          this.activeTo = [];
          this.activeRank = [];
          this.minActive = -1;
          this.point = null;
          this.pointFrom = 0;
          this.pointRank = 0;
          this.to = -1e9;
          this.endSide = 0;
          this.openStart = -1;
          this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1e9) {
          this.cursor.goto(pos, side);
          this.active.length = this.activeTo.length = this.activeRank.length = 0;
          this.minActive = -1;
          this.to = pos;
          this.endSide = side;
          this.openStart = -1;
          this.next();
          return this;
        }
        forward(pos, side) {
          while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
            this.removeActive(this.minActive);
          this.cursor.forward(pos, side);
        }
        removeActive(index) {
          remove(this.active, index);
          remove(this.activeTo, index);
          remove(this.activeRank, index);
          this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
          let i = 0, { value, to, rank } = this.cursor;
          while (i < this.activeRank.length && this.activeRank[i] <= rank)
            i++;
          insert(this.active, i, value);
          insert(this.activeTo, i, to);
          insert(this.activeRank, i, rank);
          if (trackOpen)
            insert(trackOpen, i, this.cursor.from);
          this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
          let from3 = this.to, wasPoint = this.point;
          this.point = null;
          let trackOpen = this.openStart < 0 ? [] : null;
          for (; ; ) {
            let a2 = this.minActive;
            if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
              if (this.activeTo[a2] > from3) {
                this.to = this.activeTo[a2];
                this.endSide = this.active[a2].endSide;
                break;
              }
              this.removeActive(a2);
              if (trackOpen)
                remove(trackOpen, a2);
            } else if (!this.cursor.value) {
              this.to = this.endSide = 1e9;
              break;
            } else if (this.cursor.from > from3) {
              this.to = this.cursor.from;
              this.endSide = this.cursor.startSide;
              break;
            } else {
              let nextVal = this.cursor.value;
              if (!nextVal.point) {
                this.addActive(trackOpen);
                this.cursor.next();
              } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                this.cursor.next();
              } else {
                this.point = nextVal;
                this.pointFrom = this.cursor.from;
                this.pointRank = this.cursor.rank;
                this.to = this.cursor.to;
                this.endSide = nextVal.endSide;
                this.cursor.next();
                this.forward(this.to, this.endSide);
                break;
              }
            }
          }
          if (trackOpen) {
            this.openStart = 0;
            for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from3; i--)
              this.openStart++;
          }
        }
        activeForPoint(to) {
          if (!this.active.length)
            return this.active;
          let active = [];
          for (let i = this.active.length - 1; i >= 0; i--) {
            if (this.activeRank[i] < this.pointRank)
              break;
            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
              active.push(this.active[i]);
          }
          return active.reverse();
        }
        openEnd(to) {
          let open = 0;
          for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
            open++;
          return open;
        }
      };
    }
  });

  // node_modules/style-mod/src/style-mod.js
  var C, COUNT, SET, top, StyleModule, adoptedSet, StyleSet;
  var init_style_mod = __esm({
    "node_modules/style-mod/src/style-mod.js"() {
      C = "\u037C";
      COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
      SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
      top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
      StyleModule = class {
        // :: (Object<Style>, ?{finish: ?(string) → string})
        // Create a style module from the given spec.
        //
        // When `finish` is given, it is called on regular (non-`@`)
        // selectors (after `&` expansion) to compute the final selector.
        constructor(spec, options) {
          this.rules = [];
          let { finish } = options || {};
          function splitSelector(selector) {
            return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
          }
          function render(selectors, spec2, target, isKeyframes) {
            let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
            if (isAt && spec2 == null)
              return target.push(selectors[0] + ";");
            for (let prop in spec2) {
              let value = spec2[prop];
              if (/&/.test(prop)) {
                render(
                  prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b) => a2.concat(b)),
                  value,
                  target
                );
              } else if (value && typeof value == "object") {
                if (!isAt)
                  throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
                render(splitSelector(prop), value, local, keyframes);
              } else if (value != null) {
                local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l2) => "-" + l2.toLowerCase()) + ": " + value + ";");
              }
            }
            if (local.length || keyframes) {
              target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
            }
          }
          for (let prop in spec)
            render(splitSelector(prop), spec[prop], this.rules);
        }
        // :: () → string
        // Returns a string containing the module's CSS rules.
        getRules() {
          return this.rules.join("\n");
        }
        // :: () → string
        // Generate a new unique CSS class name.
        static newName() {
          let id2 = top[COUNT] || 1;
          top[COUNT] = id2 + 1;
          return C + id2.toString(36);
        }
        // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
        //
        // Mount the given set of modules in the given DOM root, which ensures
        // that the CSS rules defined by the module are available in that
        // context.
        //
        // Rules are only added to the document once per root.
        //
        // Rule order will follow the order of the modules, so that rules from
        // modules later in the array take precedence of those from earlier
        // modules. If you call this function multiple times for the same root
        // in a way that changes the order of already mounted modules, the old
        // order will be changed.
        static mount(root, modules) {
          (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
        }
      };
      adoptedSet = null;
      StyleSet = class {
        constructor(root) {
          if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
            if (adoptedSet) {
              root.adoptedStyleSheets = [adoptedSet.sheet, ...root.adoptedStyleSheets];
              return root[SET] = adoptedSet;
            }
            this.sheet = new CSSStyleSheet();
            root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
            adoptedSet = this;
          } else {
            this.styleTag = (root.ownerDocument || root).createElement("style");
            let target = root.head || root;
            target.insertBefore(this.styleTag, target.firstChild);
          }
          this.modules = [];
          root[SET] = this;
        }
        mount(modules) {
          let sheet = this.sheet;
          let pos = 0, j = 0;
          for (let i = 0; i < modules.length; i++) {
            let mod = modules[i], index = this.modules.indexOf(mod);
            if (index < j && index > -1) {
              this.modules.splice(index, 1);
              j--;
              index = -1;
            }
            if (index == -1) {
              this.modules.splice(j++, 0, mod);
              if (sheet)
                for (let k = 0; k < mod.rules.length; k++)
                  sheet.insertRule(mod.rules[k], pos++);
            } else {
              while (j < index)
                pos += this.modules[j++].rules.length;
              pos += mod.rules.length;
              j++;
            }
          }
          if (!sheet) {
            let text = "";
            for (let i = 0; i < this.modules.length; i++)
              text += this.modules[i].getRules() + "\n";
            this.styleTag.textContent = text;
          }
        }
      };
    }
  });

  // node_modules/w3c-keyname/index.es.js
  function keyName(event) {
    var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
    var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
    if (name2 == "Esc")
      name2 = "Escape";
    if (name2 == "Del")
      name2 = "Delete";
    if (name2 == "Left")
      name2 = "ArrowLeft";
    if (name2 == "Up")
      name2 = "ArrowUp";
    if (name2 == "Right")
      name2 = "ArrowRight";
    if (name2 == "Down")
      name2 = "ArrowDown";
    return name2;
  }
  var base, shift, chrome, gecko, mac, ie, brokenModifierNames, i, i, i, code;
  var init_index_es = __esm({
    "node_modules/w3c-keyname/index.es.js"() {
      base = {
        8: "Backspace",
        9: "Tab",
        10: "Enter",
        12: "NumLock",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        44: "PrintScreen",
        45: "Insert",
        46: "Delete",
        59: ";",
        61: "=",
        91: "Meta",
        92: "Meta",
        106: "*",
        107: "+",
        108: ",",
        109: "-",
        110: ".",
        111: "/",
        144: "NumLock",
        145: "ScrollLock",
        160: "Shift",
        161: "Shift",
        162: "Control",
        163: "Control",
        164: "Alt",
        165: "Alt",
        173: "-",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'"
      };
      shift = {
        48: ")",
        49: "!",
        50: "@",
        51: "#",
        52: "$",
        53: "%",
        54: "^",
        55: "&",
        56: "*",
        57: "(",
        59: ":",
        61: "+",
        173: "_",
        186: ":",
        187: "+",
        188: "<",
        189: "_",
        190: ">",
        191: "?",
        192: "~",
        219: "{",
        220: "|",
        221: "}",
        222: '"'
      };
      chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
      gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
      mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
      ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
      brokenModifierNames = mac || chrome && +chrome[1] < 57;
      for (i = 0; i < 10; i++)
        base[48 + i] = base[96 + i] = String(i);
      for (i = 1; i <= 24; i++)
        base[i + 111] = "F" + i;
      for (i = 65; i <= 90; i++) {
        base[i] = String.fromCharCode(i + 32);
        shift[i] = String.fromCharCode(i);
      }
      for (code in base)
        if (!shift.hasOwnProperty(code))
          shift[code] = base[code];
    }
  });

  // node_modules/@codemirror/view/dist/index.js
  function getSelection(root) {
    let target;
    if (root.nodeType == 11) {
      target = root.getSelection ? root : root.ownerDocument;
    } else {
      target = root;
    }
    return target.getSelection();
  }
  function contains(dom, node) {
    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
  }
  function deepActiveElement(doc2) {
    let elt2 = doc2.activeElement;
    while (elt2 && elt2.shadowRoot)
      elt2 = elt2.shadowRoot.activeElement;
    return elt2;
  }
  function hasSelection(dom, selection) {
    if (!selection.anchorNode)
      return false;
    try {
      return contains(dom, selection.anchorNode);
    } catch (_) {
      return false;
    }
  }
  function clientRectsFor(dom) {
    if (dom.nodeType == 3)
      return textRange(dom, 0, dom.nodeValue.length).getClientRects();
    else if (dom.nodeType == 1)
      return dom.getClientRects();
    else
      return [];
  }
  function isEquivalentPosition(node, off, targetNode, targetOff) {
    return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
  }
  function domIndex(node) {
    for (var index = 0; ; index++) {
      node = node.previousSibling;
      if (!node)
        return index;
    }
  }
  function scanFor(node, off, targetNode, targetOff, dir) {
    for (; ; ) {
      if (node == targetNode && off == targetOff)
        return true;
      if (off == (dir < 0 ? 0 : maxOffset(node))) {
        if (node.nodeName == "DIV")
          return false;
        let parent = node.parentNode;
        if (!parent || parent.nodeType != 1)
          return false;
        off = domIndex(node) + (dir < 0 ? 0 : 1);
        node = parent;
      } else if (node.nodeType == 1) {
        node = node.childNodes[off + (dir < 0 ? -1 : 0)];
        if (node.nodeType == 1 && node.contentEditable == "false")
          return false;
        off = dir < 0 ? maxOffset(node) : 0;
      } else {
        return false;
      }
    }
  }
  function maxOffset(node) {
    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function flattenRect(rect, left) {
    let x = left ? rect.left : rect.right;
    return { left: x, right: x, top: rect.top, bottom: rect.bottom };
  }
  function windowRect(win) {
    return {
      left: 0,
      right: win.innerWidth,
      top: 0,
      bottom: win.innerHeight
    };
  }
  function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
    let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
    for (let cur = dom; cur; ) {
      if (cur.nodeType == 1) {
        let bounding, top3 = cur == doc2.body;
        if (top3) {
          bounding = windowRect(win);
        } else {
          if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
            cur = cur.assignedSlot || cur.parentNode;
            continue;
          }
          let rect2 = cur.getBoundingClientRect();
          bounding = {
            left: rect2.left,
            right: rect2.left + cur.clientWidth,
            top: rect2.top,
            bottom: rect2.top + cur.clientHeight
          };
        }
        let moveX = 0, moveY = 0;
        if (y == "nearest") {
          if (rect.top < bounding.top) {
            moveY = -(bounding.top - rect.top + yMargin);
            if (side > 0 && rect.bottom > bounding.bottom + moveY)
              moveY = rect.bottom - bounding.bottom + moveY + yMargin;
          } else if (rect.bottom > bounding.bottom) {
            moveY = rect.bottom - bounding.bottom + yMargin;
            if (side < 0 && rect.top - moveY < bounding.top)
              moveY = -(bounding.top + moveY - rect.top + yMargin);
          }
        } else {
          let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
          let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y == "start" || y == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
          moveY = targetTop - bounding.top;
        }
        if (x == "nearest") {
          if (rect.left < bounding.left) {
            moveX = -(bounding.left - rect.left + xMargin);
            if (side > 0 && rect.right > bounding.right + moveX)
              moveX = rect.right - bounding.right + moveX + xMargin;
          } else if (rect.right > bounding.right) {
            moveX = rect.right - bounding.right + xMargin;
            if (side < 0 && rect.left < bounding.left + moveX)
              moveX = -(bounding.left + moveX - rect.left + xMargin);
          }
        } else {
          let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
          moveX = targetLeft - bounding.left;
        }
        if (moveX || moveY) {
          if (top3) {
            win.scrollBy(moveX, moveY);
          } else {
            let movedX = 0, movedY = 0;
            if (moveY) {
              let start2 = cur.scrollTop;
              cur.scrollTop += moveY;
              movedY = cur.scrollTop - start2;
            }
            if (moveX) {
              let start2 = cur.scrollLeft;
              cur.scrollLeft += moveX;
              movedX = cur.scrollLeft - start2;
            }
            rect = {
              left: rect.left - movedX,
              top: rect.top - movedY,
              right: rect.right - movedX,
              bottom: rect.bottom - movedY
            };
            if (movedX && Math.abs(movedX - moveX) < 1)
              x = "nearest";
            if (movedY && Math.abs(movedY - moveY) < 1)
              y = "nearest";
          }
        }
        if (top3)
          break;
        cur = cur.assignedSlot || cur.parentNode;
      } else if (cur.nodeType == 11) {
        cur = cur.host;
      } else {
        break;
      }
    }
  }
  function scrollableParent(dom) {
    let doc2 = dom.ownerDocument;
    for (let cur = dom.parentNode; cur; ) {
      if (cur == doc2.body) {
        break;
      } else if (cur.nodeType == 1) {
        if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
          return cur;
        cur = cur.assignedSlot || cur.parentNode;
      } else if (cur.nodeType == 11) {
        cur = cur.host;
      } else {
        break;
      }
    }
    return null;
  }
  function focusPreventScroll(dom) {
    if (dom.setActive)
      return dom.setActive();
    if (preventScrollSupported)
      return dom.focus(preventScrollSupported);
    let stack = [];
    for (let cur = dom; cur; cur = cur.parentNode) {
      stack.push(cur, cur.scrollTop, cur.scrollLeft);
      if (cur == cur.ownerDocument)
        break;
    }
    dom.focus(preventScrollSupported == null ? {
      get preventScroll() {
        preventScrollSupported = { preventScroll: true };
        return true;
      }
    } : void 0);
    if (!preventScrollSupported) {
      preventScrollSupported = false;
      for (let i = 0; i < stack.length; ) {
        let elt2 = stack[i++], top3 = stack[i++], left = stack[i++];
        if (elt2.scrollTop != top3)
          elt2.scrollTop = top3;
        if (elt2.scrollLeft != left)
          elt2.scrollLeft = left;
      }
    }
  }
  function textRange(node, from3, to = from3) {
    let range = scratchRange || (scratchRange = document.createRange());
    range.setEnd(node, to);
    range.setStart(node, from3);
    return range;
  }
  function dispatchKey(elt2, name2, code) {
    let options = { key: name2, code: name2, keyCode: code, which: code, cancelable: true };
    let down = new KeyboardEvent("keydown", options);
    down.synthetic = true;
    elt2.dispatchEvent(down);
    let up = new KeyboardEvent("keyup", options);
    up.synthetic = true;
    elt2.dispatchEvent(up);
    return down.defaultPrevented || up.defaultPrevented;
  }
  function getRoot(node) {
    while (node) {
      if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
        return node;
      node = node.assignedSlot || node.parentNode;
    }
    return null;
  }
  function clearAttributes(node) {
    while (node.attributes.length)
      node.removeAttributeNode(node.attributes[0]);
  }
  function atElementStart(doc2, selection) {
    let node = selection.focusNode, offset2 = selection.focusOffset;
    if (!node || selection.anchorNode != node || selection.anchorOffset != offset2)
      return false;
    for (; ; ) {
      if (offset2) {
        if (node.nodeType != 1)
          return false;
        let prev = node.childNodes[offset2 - 1];
        if (prev.contentEditable == "false")
          offset2--;
        else {
          node = prev;
          offset2 = maxOffset(node);
        }
      } else if (node == doc2) {
        return true;
      } else {
        offset2 = domIndex(node);
        node = node.parentNode;
      }
    }
  }
  function rm$1(dom) {
    let next2 = dom.nextSibling;
    dom.parentNode.removeChild(dom);
    return next2;
  }
  function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
    let { children } = parent;
    let before = children.length ? children[fromI] : null;
    let last = insert2.length ? insert2[insert2.length - 1] : null;
    let breakAtEnd = last ? last.breakAfter : breakAtStart;
    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
      return;
    if (toI < children.length) {
      let after = children[toI];
      if (after && toOff < after.length) {
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          insert2[insert2.length - 1] = after;
        } else {
          if (toOff)
            after.merge(0, toOff, null, false, 0, openEnd);
          insert2.push(after);
        }
      } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
        if (last)
          last.breakAfter = 1;
        else
          breakAtStart = 1;
      }
      toI++;
    }
    if (before) {
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
          before.breakAfter = insert2.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
    }
    while (fromI < toI && insert2.length) {
      if (children[toI - 1].become(insert2[insert2.length - 1])) {
        toI--;
        insert2.pop();
        openEnd = insert2.length ? 0 : openStart;
      } else if (children[fromI].become(insert2[0])) {
        fromI++;
        insert2.shift();
        openStart = insert2.length ? 0 : openEnd;
      } else {
        break;
      }
    }
    if (!insert2.length && fromI && toI < children.length && !children[fromI - 1].breakAfter && children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
      fromI--;
    if (fromI < toI || insert2.length)
      parent.replaceChildren(fromI, toI, insert2);
  }
  function mergeChildrenInto(parent, from3, to, insert2, openStart, openEnd) {
    let cur = parent.childCursor();
    let { i: toI, off: toOff } = cur.findPos(to, 1);
    let { i: fromI, off: fromOff } = cur.findPos(from3, -1);
    let dLen = from3 - to;
    for (let view of insert2)
      dLen += view.length;
    parent.length += dLen;
    replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
  }
  function textCoords(text, pos, side) {
    let length = text.nodeValue.length;
    if (pos > length)
      pos = length;
    let from3 = pos, to = pos, flatten2 = 0;
    if (pos == 0 && side < 0 || pos == length && side >= 0) {
      if (!(browser.chrome || browser.gecko)) {
        if (pos) {
          from3--;
          flatten2 = 1;
        } else if (to < length) {
          to++;
          flatten2 = -1;
        }
      }
    } else {
      if (side < 0)
        from3--;
      else if (to < length)
        to++;
    }
    let rects = textRange(text, from3, to).getClientRects();
    if (!rects.length)
      return Rect0;
    let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
    if (browser.safari && !flatten2 && rect.width == 0)
      rect = Array.prototype.find.call(rects, (r2) => r2.width) || rect;
    return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
  }
  function scanCompositionTree(pos, side, view, text, enterView, fromText) {
    if (view instanceof MarkView) {
      for (let child = view.dom.firstChild; child; child = child.nextSibling) {
        let desc = ContentView.get(child);
        if (!desc)
          return fromText(pos, side);
        let hasComp = contains(child, text);
        let len = desc.length + (hasComp ? text.nodeValue.length : 0);
        if (pos < len || pos == len && desc.getSide() <= 0)
          return hasComp ? scanCompositionTree(pos, side, desc, text, enterView, fromText) : enterView(desc, pos, side);
        pos -= len;
      }
      return enterView(view, view.length, -1);
    } else if (view.dom == text) {
      return fromText(pos, side);
    } else {
      return enterView(view, pos, side);
    }
  }
  function posFromDOMInCompositionTree(node, offset2, view, text) {
    if (view instanceof MarkView) {
      let pos = 0;
      for (let child of view.children) {
        let hasComp = contains(child.dom, text);
        if (contains(child.dom, node))
          return pos + (hasComp ? posFromDOMInCompositionTree(node, offset2, child, text) : child.localPosFromDOM(node, offset2));
        pos += hasComp ? text.nodeValue.length : child.length;
      }
    } else if (view.dom == text) {
      return Math.min(offset2, text.nodeValue.length);
    }
    return view.localPosFromDOM(node, offset2);
  }
  function inlineSiblingRect(view, side) {
    let parent = view.parent, index = parent ? parent.children.indexOf(view) : -1;
    while (parent && index >= 0) {
      if (side < 0 ? index > 0 : index < parent.children.length) {
        let next2 = parent.children[index + side];
        if (next2 instanceof TextView) {
          let nextRect = next2.coordsAt(side < 0 ? next2.length : 0, side);
          if (nextRect)
            return nextRect;
        }
        index += side;
      } else if (parent instanceof MarkView && parent.parent) {
        index = parent.parent.children.indexOf(parent) + (side < 0 ? 0 : 1);
        parent = parent.parent;
      } else {
        let last = parent.dom.lastChild;
        if (last && last.nodeName == "BR")
          return last.getClientRects()[0];
        break;
      }
    }
    return void 0;
  }
  function inlineDOMAtPos(parent, pos) {
    let dom = parent.dom, { children } = parent, i = 0;
    for (let off = 0; i < children.length; i++) {
      let child = children[i], end2 = off + child.length;
      if (end2 == off && child.getSide() <= 0)
        continue;
      if (pos > off && pos < end2 && child.dom.parentNode == dom)
        return child.domAtPos(pos - off);
      if (pos <= off)
        break;
      off = end2;
    }
    for (let j = i; j > 0; j--) {
      let prev = children[j - 1];
      if (prev.dom.parentNode == dom)
        return prev.domAtPos(prev.length);
    }
    for (let j = i; j < children.length; j++) {
      let next2 = children[j];
      if (next2.dom.parentNode == dom)
        return next2.domAtPos(0);
    }
    return new DOMPos(dom, 0);
  }
  function joinInlineInto(parent, view, open) {
    let last, { children } = parent;
    if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
      joinInlineInto(last, view.children[0], open - 1);
    } else {
      children.push(view);
      view.setParent(parent);
    }
    parent.length += view.length;
  }
  function coordsInChildren(view, pos, side) {
    let before = null, beforePos = -1, after = null, afterPos = -1;
    function scan(view2, pos2) {
      for (let i = 0, off = 0; i < view2.children.length && off <= pos2; i++) {
        let child = view2.children[i], end2 = off + child.length;
        if (end2 >= pos2) {
          if (child.children.length) {
            scan(child, pos2 - off);
          } else if (!after && (end2 > pos2 || off == end2 && child.getSide() > 0)) {
            after = child;
            afterPos = pos2 - off;
          } else if (off < pos2 || off == end2 && child.getSide() < 0) {
            before = child;
            beforePos = pos2 - off;
          }
        }
        off = end2;
      }
    }
    scan(view, pos);
    let target = (side < 0 ? before : after) || before || after;
    if (target)
      return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
    return fallbackRect(view);
  }
  function fallbackRect(view) {
    let last = view.dom.lastChild;
    if (!last)
      return view.dom.getBoundingClientRect();
    let rects = clientRectsFor(last);
    return rects[rects.length - 1] || null;
  }
  function combineAttrs(source, target) {
    for (let name2 in source) {
      if (name2 == "class" && target.class)
        target.class += " " + source.class;
      else if (name2 == "style" && target.style)
        target.style += ";" + source.style;
      else
        target[name2] = source[name2];
    }
    return target;
  }
  function attrsEq(a2, b) {
    if (a2 == b)
      return true;
    if (!a2 || !b)
      return false;
    let keysA = Object.keys(a2), keysB = Object.keys(b);
    if (keysA.length != keysB.length)
      return false;
    for (let key of keysA) {
      if (keysB.indexOf(key) == -1 || a2[key] !== b[key])
        return false;
    }
    return true;
  }
  function updateAttrs(dom, prev, attrs) {
    let changed = null;
    if (prev) {
      for (let name2 in prev)
        if (!(attrs && name2 in attrs))
          dom.removeAttribute(changed = name2);
    }
    if (attrs) {
      for (let name2 in attrs)
        if (!(prev && prev[name2] == attrs[name2]))
          dom.setAttribute(changed = name2, attrs[name2]);
    }
    return !!changed;
  }
  function getInclusive(spec, block2 = false) {
    let { inclusiveStart: start2, inclusiveEnd: end2 } = spec;
    if (start2 == null)
      start2 = spec.inclusive;
    if (end2 == null)
      end2 = spec.inclusive;
    return { start: start2 !== null && start2 !== void 0 ? start2 : block2, end: end2 !== null && end2 !== void 0 ? end2 : block2 };
  }
  function widgetsEq(a2, b) {
    return a2 == b || !!(a2 && b && a2.compare(b));
  }
  function addRange(from3, to, ranges, margin = 0) {
    let last = ranges.length - 1;
    if (last >= 0 && ranges[last] + margin >= from3)
      ranges[last] = Math.max(ranges[last], to);
    else
      ranges.push(from3, to);
  }
  function wrapMarks(view, active) {
    for (let mark of active)
      view = new MarkView(mark, [view], view.length);
    return view;
  }
  function logException(state, exception, context) {
    let handler = state.facet(exceptionSink);
    if (handler.length)
      handler[0](exception);
    else if (window.onerror)
      window.onerror(String(exception), context, void 0, void 0, exception);
    else if (context)
      console.error(context + ":", exception);
    else
      console.error(exception);
  }
  function dec(str) {
    let result = [];
    for (let i = 0; i < str.length; i++)
      result.push(1 << +str[i]);
    return result;
  }
  function charType(ch2) {
    return ch2 <= 247 ? LowTypes[ch2] : 1424 <= ch2 && ch2 <= 1524 ? 2 : 1536 <= ch2 && ch2 <= 1785 ? ArabicTypes[ch2 - 1536] : 1774 <= ch2 && ch2 <= 2220 ? 4 : 8192 <= ch2 && ch2 <= 8203 ? 256 : 64336 <= ch2 && ch2 <= 65023 ? 4 : ch2 == 8204 ? 256 : 1;
  }
  function computeOrder(line, direction) {
    let len = line.length, outerType = direction == LTR ? 1 : 2, oppositeType = direction == LTR ? 2 : 1;
    if (!line || outerType == 1 && !BidiRE.test(line))
      return trivialOrder(len);
    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
      let type7 = charType(line.charCodeAt(i));
      if (type7 == 512)
        type7 = prev;
      else if (type7 == 8 && prevStrong == 4)
        type7 = 16;
      types[i] = type7 == 4 ? 2 : type7;
      if (type7 & 7)
        prevStrong = type7;
      prev = type7;
    }
    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
      let type7 = types[i];
      if (type7 == 128) {
        if (i < len - 1 && prev == types[i + 1] && prev & 24)
          type7 = types[i] = prev;
        else
          types[i] = 256;
      } else if (type7 == 64) {
        let end2 = i + 1;
        while (end2 < len && types[end2] == 64)
          end2++;
        let replace = i && prev == 8 || end2 < len && types[end2] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
        for (let j = i; j < end2; j++)
          types[j] = replace;
        i = end2 - 1;
      } else if (type7 == 8 && prevStrong == 1) {
        types[i] = 1;
      }
      prev = type7;
      if (type7 & 7)
        prevStrong = type7;
    }
    for (let i = 0, sI = 0, context = 0, ch2, br, type7; i < len; i++) {
      if (br = Brackets[ch2 = line.charCodeAt(i)]) {
        if (br < 0) {
          for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
            if (BracketStack[sJ + 1] == -br) {
              let flags = BracketStack[sJ + 2];
              let type8 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
              if (type8)
                types[i] = types[BracketStack[sJ]] = type8;
              sI = sJ;
              break;
            }
          }
        } else if (BracketStack.length == 189) {
          break;
        } else {
          BracketStack[sI++] = i;
          BracketStack[sI++] = ch2;
          BracketStack[sI++] = context;
        }
      } else if ((type7 = types[i]) == 2 || type7 == 1) {
        let embed = type7 == outerType;
        context = embed ? 0 : 1;
        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
          let cur = BracketStack[sJ + 2];
          if (cur & 2)
            break;
          if (embed) {
            BracketStack[sJ + 2] |= 2;
          } else {
            if (cur & 4)
              break;
            BracketStack[sJ + 2] |= 4;
          }
        }
      }
    }
    for (let i = 0; i < len; i++) {
      if (types[i] == 256) {
        let end2 = i + 1;
        while (end2 < len && types[end2] == 256)
          end2++;
        let beforeL = (i ? types[i - 1] : outerType) == 1;
        let afterL = (end2 < len ? types[end2] : outerType) == 1;
        let replace = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
        for (let j = i; j < end2; j++)
          types[j] = replace;
        i = end2 - 1;
      }
    }
    let order = [];
    if (outerType == 1) {
      for (let i = 0; i < len; ) {
        let start2 = i, rtl = types[i++] != 1;
        while (i < len && rtl == (types[i] != 1))
          i++;
        if (rtl) {
          for (let j = i; j > start2; ) {
            let end2 = j, l2 = types[--j] != 2;
            while (j > start2 && l2 == (types[j - 1] != 2))
              j--;
            order.push(new BidiSpan(j, end2, l2 ? 2 : 1));
          }
        } else {
          order.push(new BidiSpan(start2, i, 0));
        }
      }
    } else {
      for (let i = 0; i < len; ) {
        let start2 = i, rtl = types[i++] == 2;
        while (i < len && rtl == (types[i] == 2))
          i++;
        order.push(new BidiSpan(start2, i, rtl ? 1 : 2));
      }
    }
    return order;
  }
  function trivialOrder(length) {
    return [new BidiSpan(0, length, 0)];
  }
  function moveVisually(line, order, dir, start2, forward) {
    var _a2;
    let startIndex = start2.head - line.from, spanI = -1;
    if (startIndex == 0) {
      if (!forward || !line.length)
        return null;
      if (order[0].level != dir) {
        startIndex = order[0].side(false, dir);
        spanI = 0;
      }
    } else if (startIndex == line.length) {
      if (forward)
        return null;
      let last = order[order.length - 1];
      if (last.level != dir) {
        startIndex = last.side(true, dir);
        spanI = order.length - 1;
      }
    }
    if (spanI < 0)
      spanI = BidiSpan.find(order, startIndex, (_a2 = start2.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start2.assoc);
    let span = order[spanI];
    if (startIndex == span.side(forward, dir)) {
      span = order[spanI += forward ? 1 : -1];
      startIndex = span.side(!forward, dir);
    }
    let indexForward = forward == (span.dir == dir);
    let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
    if (nextIndex != span.side(forward, dir))
      return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
    if (!nextSpan && span.level != dir)
      return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
    if (nextSpan && nextSpan.level < span.level)
      return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
    return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
  }
  function isBlockElement(node) {
    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
  }
  function betweenUneditable(pos) {
    return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
  }
  function compositionSurroundingNode(view) {
    let sel = view.observer.selectionRange;
    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
    if (!textNode)
      return null;
    let cView = view.docView.nearest(textNode);
    if (!cView)
      return null;
    if (cView instanceof LineView) {
      let topNode = textNode;
      while (topNode.parentNode != cView.dom)
        topNode = topNode.parentNode;
      let prev = topNode.previousSibling;
      while (prev && !ContentView.get(prev))
        prev = prev.previousSibling;
      let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
      return { from: pos, to: pos, node: topNode, text: textNode };
    } else {
      for (; ; ) {
        let { parent } = cView;
        if (!parent)
          return null;
        if (parent instanceof LineView)
          break;
        cView = parent;
      }
      let from3 = cView.posAtStart;
      return { from: from3, to: from3 + cView.length, node: cView.dom, text: textNode };
    }
  }
  function computeCompositionDeco(view, changes) {
    let surrounding = compositionSurroundingNode(view);
    if (!surrounding)
      return Decoration.none;
    let { from: from3, to, node, text: textNode } = surrounding;
    let newFrom = changes.mapPos(from3, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
    let { state } = view, text = node.nodeType == 3 ? node.nodeValue : new DOMReader([], state).readRange(node.firstChild, null).text;
    if (newTo - newFrom < text.length) {
      if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length), LineBreakPlaceholder) == text)
        newTo = newFrom + text.length;
      else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo, LineBreakPlaceholder) == text)
        newFrom = newTo - text.length;
      else
        return Decoration.none;
    } else if (state.doc.sliceString(newFrom, newTo, LineBreakPlaceholder) != text) {
      return Decoration.none;
    }
    let topView = ContentView.get(node);
    if (topView instanceof CompositionView)
      topView = topView.widget.topView;
    else if (topView)
      topView.parent = null;
    return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true }).range(newFrom, newTo));
  }
  function nearbyTextNode(startNode, startOffset, side) {
    if (side <= 0)
      for (let node = startNode, offset2 = startOffset; ; ) {
        if (node.nodeType == 3)
          return node;
        if (node.nodeType == 1 && offset2 > 0) {
          node = node.childNodes[offset2 - 1];
          offset2 = maxOffset(node);
        } else {
          break;
        }
      }
    if (side >= 0)
      for (let node = startNode, offset2 = startOffset; ; ) {
        if (node.nodeType == 3)
          return node;
        if (node.nodeType == 1 && offset2 < node.childNodes.length && side >= 0) {
          node = node.childNodes[offset2];
          offset2 = 0;
        } else {
          break;
        }
      }
    return null;
  }
  function nextToUneditable(node, offset2) {
    if (node.nodeType != 1)
      return 0;
    return (offset2 && node.childNodes[offset2 - 1].contentEditable == "false" ? 1 : 0) | (offset2 < node.childNodes.length && node.childNodes[offset2].contentEditable == "false" ? 2 : 0);
  }
  function findChangedDeco(a2, b, diff2) {
    let comp = new DecorationComparator$1();
    RangeSet.compare(a2, b, diff2, comp);
    return comp.changes;
  }
  function inUneditable(node, inside2) {
    for (let cur = node; cur && cur != inside2; cur = cur.assignedSlot || cur.parentNode) {
      if (cur.nodeType == 1 && cur.contentEditable == "false") {
        return true;
      }
    }
    return false;
  }
  function groupAt(state, pos, bias = 1) {
    let categorize = state.charCategorizer(pos);
    let line = state.doc.lineAt(pos), linePos = pos - line.from;
    if (line.length == 0)
      return EditorSelection.cursor(pos);
    if (linePos == 0)
      bias = 1;
    else if (linePos == line.length)
      bias = -1;
    let from3 = linePos, to = linePos;
    if (bias < 0)
      from3 = findClusterBreak(line.text, linePos, false);
    else
      to = findClusterBreak(line.text, linePos);
    let cat = categorize(line.text.slice(from3, to));
    while (from3 > 0) {
      let prev = findClusterBreak(line.text, from3, false);
      if (categorize(line.text.slice(prev, from3)) != cat)
        break;
      from3 = prev;
    }
    while (to < line.length) {
      let next2 = findClusterBreak(line.text, to);
      if (categorize(line.text.slice(to, next2)) != cat)
        break;
      to = next2;
    }
    return EditorSelection.range(from3 + line.from, to + line.from);
  }
  function getdx(x, rect) {
    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
  }
  function getdy(y, rect) {
    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
  }
  function yOverlap(a2, b) {
    return a2.top < b.bottom - 1 && a2.bottom > b.top + 1;
  }
  function upTop(rect, top3) {
    return top3 < rect.top ? { top: top3, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
  }
  function upBot(rect, bottom) {
    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
  }
  function domPosAtCoords(parent, x, y) {
    let closest, closestRect, closestX, closestY, closestOverlap = false;
    let above, below, aboveRect, belowRect;
    for (let child = parent.firstChild; child; child = child.nextSibling) {
      let rects = clientRectsFor(child);
      for (let i = 0; i < rects.length; i++) {
        let rect = rects[i];
        if (closestRect && yOverlap(closestRect, rect))
          rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
        let dx = getdx(x, rect), dy = getdy(y, rect);
        if (dx == 0 && dy == 0)
          return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
        if (!closest || closestY > dy || closestY == dy && closestX > dx) {
          closest = child;
          closestRect = rect;
          closestX = dx;
          closestY = dy;
          let side = dy ? y < rect.top ? -1 : 1 : dx ? x < rect.left ? -1 : 1 : 0;
          closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
        }
        if (dx == 0) {
          if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
            above = child;
            aboveRect = rect;
          } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
            below = child;
            belowRect = rect;
          }
        } else if (aboveRect && yOverlap(aboveRect, rect)) {
          aboveRect = upBot(aboveRect, rect.bottom);
        } else if (belowRect && yOverlap(belowRect, rect)) {
          belowRect = upTop(belowRect, rect.top);
        }
      }
    }
    if (aboveRect && aboveRect.bottom >= y) {
      closest = above;
      closestRect = aboveRect;
    } else if (belowRect && belowRect.top <= y) {
      closest = below;
      closestRect = belowRect;
    }
    if (!closest)
      return { node: parent, offset: 0 };
    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
    if (closest.nodeType == 3)
      return domPosInText(closest, clipX, y);
    if (closestOverlap && closest.contentEditable != "false")
      return domPosAtCoords(closest, clipX, y);
    let offset2 = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
    return { node: parent, offset: offset2 };
  }
  function domPosInText(node, x, y) {
    let len = node.nodeValue.length;
    let closestOffset = -1, closestDY = 1e9, generalSide = 0;
    for (let i = 0; i < len; i++) {
      let rects = textRange(node, i, i + 1).getClientRects();
      for (let j = 0; j < rects.length; j++) {
        let rect = rects[j];
        if (rect.top == rect.bottom)
          continue;
        if (!generalSide)
          generalSide = x - rect.left;
        let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
        if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
          let right = x >= (rect.left + rect.right) / 2, after = right;
          if (browser.chrome || browser.gecko) {
            let rectBefore = textRange(node, i).getBoundingClientRect();
            if (rectBefore.left == rect.right)
              after = !right;
          }
          if (dy <= 0)
            return { node, offset: i + (after ? 1 : 0) };
          closestOffset = i + (after ? 1 : 0);
          closestDY = dy;
        }
      }
    }
    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
  }
  function posAtCoords(view, coords, precise, bias = -1) {
    var _a2, _b2;
    let content3 = view.contentDOM.getBoundingClientRect(), docTop = content3.top + view.viewState.paddingTop;
    let block2, { docHeight } = view.viewState;
    let { x, y } = coords, yOffset = y - docTop;
    if (yOffset < 0)
      return 0;
    if (yOffset > docHeight)
      return view.state.doc.length;
    for (let halfLine = view.defaultLineHeight / 2, bounced = false; ; ) {
      block2 = view.elementAtHeight(yOffset);
      if (block2.type == BlockType.Text)
        break;
      for (; ; ) {
        yOffset = bias > 0 ? block2.bottom + halfLine : block2.top - halfLine;
        if (yOffset >= 0 && yOffset <= docHeight)
          break;
        if (bounced)
          return precise ? null : 0;
        bounced = true;
        bias = -bias;
      }
    }
    y = docTop + yOffset;
    let lineStart = block2.from;
    if (lineStart < view.viewport.from)
      return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content3, block2, x, y);
    if (lineStart > view.viewport.to)
      return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content3, block2, x, y);
    let doc2 = view.dom.ownerDocument;
    let root = view.root.elementFromPoint ? view.root : doc2;
    let element2 = root.elementFromPoint(x, y);
    if (element2 && !view.contentDOM.contains(element2))
      element2 = null;
    if (!element2) {
      x = Math.max(content3.left + 1, Math.min(content3.right - 1, x));
      element2 = root.elementFromPoint(x, y);
      if (element2 && !view.contentDOM.contains(element2))
        element2 = null;
    }
    let node, offset2 = -1;
    if (element2 && ((_a2 = view.docView.nearest(element2)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
      if (doc2.caretPositionFromPoint) {
        let pos = doc2.caretPositionFromPoint(x, y);
        if (pos)
          ({ offsetNode: node, offset: offset2 } = pos);
      } else if (doc2.caretRangeFromPoint) {
        let range = doc2.caretRangeFromPoint(x, y);
        if (range) {
          ({ startContainer: node, startOffset: offset2 } = range);
          if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset2, x) || browser.chrome && isSuspiciousChromeCaretResult(node, offset2, x))
            node = void 0;
        }
      }
    }
    if (!node || !view.docView.dom.contains(node)) {
      let line = LineView.find(view.docView, lineStart);
      if (!line)
        return yOffset > block2.top + block2.height / 2 ? block2.to : block2.from;
      ({ node, offset: offset2 } = domPosAtCoords(line.dom, x, y));
    }
    let nearest = view.docView.nearest(node);
    if (!nearest)
      return null;
    if (nearest.isWidget && ((_b2 = nearest.dom) === null || _b2 === void 0 ? void 0 : _b2.nodeType) == 1) {
      let rect = nearest.dom.getBoundingClientRect();
      return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
    } else {
      return nearest.localPosFromDOM(node, offset2) + nearest.posAtStart;
    }
  }
  function posAtCoordsImprecise(view, contentRect, block2, x, y) {
    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
    if (view.lineWrapping && block2.height > view.defaultLineHeight * 1.5) {
      let line = Math.floor((y - block2.top) / view.defaultLineHeight);
      into += line * view.viewState.heightOracle.lineLength;
    }
    let content3 = view.state.sliceDoc(block2.from, block2.to);
    return block2.from + findColumn(content3, into, view.state.tabSize);
  }
  function isSuspiciousSafariCaretResult(node, offset2, x) {
    let len;
    if (node.nodeType != 3 || offset2 != (len = node.nodeValue.length))
      return false;
    for (let next2 = node.nextSibling; next2; next2 = next2.nextSibling)
      if (next2.nodeType != 1 || next2.nodeName != "BR")
        return false;
    return textRange(node, len - 1, len).getBoundingClientRect().left > x;
  }
  function isSuspiciousChromeCaretResult(node, offset2, x) {
    if (offset2 != 0)
      return false;
    for (let cur = node; ; ) {
      let parent = cur.parentNode;
      if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
        return false;
      if (parent.classList.contains("cm-line"))
        break;
      cur = parent;
    }
    let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
    return x - rect.left > 5;
  }
  function moveToLineBoundary(view, start2, forward, includeWrap) {
    let line = view.state.doc.lineAt(start2.head);
    let coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start2.assoc < 0 && start2.head > line.from ? start2.head - 1 : start2.head);
    if (coords) {
      let editorRect = view.dom.getBoundingClientRect();
      let direction = view.textDirectionAt(line.from);
      let pos = view.posAtCoords({
        x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
        y: (coords.top + coords.bottom) / 2
      });
      if (pos != null)
        return EditorSelection.cursor(pos, forward ? -1 : 1);
    }
    let lineView = LineView.find(view.docView, start2.head);
    let end2 = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
    return EditorSelection.cursor(end2, forward ? -1 : 1);
  }
  function moveByChar(view, start2, forward, by) {
    let line = view.state.doc.lineAt(start2.head), spans = view.bidiSpans(line);
    let direction = view.textDirectionAt(line.from);
    for (let cur = start2, check = null; ; ) {
      let next2 = moveVisually(line, spans, direction, cur, forward), char = movedOver;
      if (!next2) {
        if (line.number == (forward ? view.state.doc.lines : 1))
          return cur;
        char = "\n";
        line = view.state.doc.line(line.number + (forward ? 1 : -1));
        spans = view.bidiSpans(line);
        next2 = EditorSelection.cursor(forward ? line.from : line.to);
      }
      if (!check) {
        if (!by)
          return next2;
        check = by(char);
      } else if (!check(char)) {
        return cur;
      }
      cur = next2;
    }
  }
  function byGroup(view, pos, start2) {
    let categorize = view.state.charCategorizer(pos);
    let cat = categorize(start2);
    return (next2) => {
      let nextCat = categorize(next2);
      if (cat == CharCategory.Space)
        cat = nextCat;
      return cat == nextCat;
    };
  }
  function moveVertically(view, start2, forward, distance) {
    let startPos = start2.head, dir = forward ? 1 : -1;
    if (startPos == (forward ? view.state.doc.length : 0))
      return EditorSelection.cursor(startPos, start2.assoc);
    let goal = start2.goalColumn, startY;
    let rect = view.contentDOM.getBoundingClientRect();
    let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
    if (startCoords) {
      if (goal == null)
        goal = startCoords.left - rect.left;
      startY = dir < 0 ? startCoords.top : startCoords.bottom;
    } else {
      let line = view.viewState.lineBlockAt(startPos);
      if (goal == null)
        goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
      startY = (dir < 0 ? line.top : line.bottom) + docTop;
    }
    let resolvedGoal = rect.left + goal;
    let dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
    for (let extra = 0; ; extra += 10) {
      let curY = startY + (dist + extra) * dir;
      let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
      if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
        return EditorSelection.cursor(pos, start2.assoc, void 0, goal);
    }
  }
  function skipAtoms(view, oldPos, pos) {
    let atoms17 = view.state.facet(atomicRanges).map((f) => f(view));
    for (; ; ) {
      let moved = false;
      for (let set2 of atoms17) {
        set2.between(pos.from - 1, pos.from + 1, (from3, to, value) => {
          if (pos.from > from3 && pos.from < to) {
            pos = oldPos.head > pos.from ? EditorSelection.cursor(from3, 1) : EditorSelection.cursor(to, -1);
            moved = true;
          }
        });
      }
      if (!moved)
        return pos;
    }
  }
  function dragScrollSpeed(dist) {
    return dist * 0.7 + 8;
  }
  function addsSelectionRange(view, event) {
    let facet = view.state.facet(clickAddsSelectionRange);
    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
  }
  function dragMovesSelection(view, event) {
    let facet = view.state.facet(dragMovesSelection$1);
    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
  }
  function isInPrimarySelection(view, event) {
    let { main } = view.state.selection;
    if (main.empty)
      return false;
    let sel = getSelection(view.root);
    if (!sel || sel.rangeCount == 0)
      return true;
    let rects = sel.getRangeAt(0).getClientRects();
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
        return true;
    }
    return false;
  }
  function eventBelongsToEditor(view, event) {
    if (!event.bubbles)
      return true;
    if (event.defaultPrevented)
      return false;
    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
      if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
        return false;
    return true;
  }
  function capturePaste(view) {
    let parent = view.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.focus();
    setTimeout(() => {
      view.focus();
      target.remove();
      doPaste(view, target.value);
    }, 50);
  }
  function doPaste(view, input) {
    let { state } = view, changes, i = 1, text = state.toText(input);
    let byLine = text.lines == state.selection.ranges.length;
    let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text.toString();
    if (linewise) {
      let lastLine = -1;
      changes = state.changeByRange((range) => {
        let line = state.doc.lineAt(range.from);
        if (line.from == lastLine)
          return { range };
        lastLine = line.from;
        let insert2 = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
        return {
          changes: { from: line.from, insert: insert2 },
          range: EditorSelection.cursor(range.from + insert2.length)
        };
      });
    } else if (byLine) {
      changes = state.changeByRange((range) => {
        let line = text.line(i++);
        return {
          changes: { from: range.from, to: range.to, insert: line.text },
          range: EditorSelection.cursor(range.from + line.length)
        };
      });
    } else {
      changes = state.replaceSelection(text);
    }
    view.dispatch(changes, {
      userEvent: "input.paste",
      scrollIntoView: true
    });
  }
  function rangeForClick(view, pos, bias, type7) {
    if (type7 == 1) {
      return EditorSelection.cursor(pos, bias);
    } else if (type7 == 2) {
      return groupAt(view.state, pos, bias);
    } else {
      let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
      let from3 = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
      if (to < view.state.doc.length && to == line.to)
        to++;
      return EditorSelection.range(from3, to);
    }
  }
  function findPositionSide(view, pos, x, y) {
    let line = LineView.find(view.docView, pos);
    if (!line)
      return 1;
    let off = pos - line.posAtStart;
    if (off == 0)
      return 1;
    if (off == line.length)
      return -1;
    let before = line.coordsAt(off, -1);
    if (before && inside(x, y, before))
      return -1;
    let after = line.coordsAt(off, 1);
    if (after && inside(x, y, after))
      return 1;
    return before && insideY(y, before) ? -1 : 1;
  }
  function queryPos(view, event) {
    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
  }
  function getClickType(event) {
    if (!BadMouseDetail)
      return event.detail;
    let last = lastMouseDown, lastTime = lastMouseDownTime;
    lastMouseDown = event;
    lastMouseDownTime = Date.now();
    return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
  }
  function basicMouseSelection(view, event) {
    let start2 = queryPos(view, event), type7 = getClickType(event);
    let startSel = view.state.selection;
    return {
      update(update) {
        if (update.docChanged) {
          start2.pos = update.changes.mapPos(start2.pos);
          startSel = startSel.map(update.changes);
        }
      },
      get(event2, extend2, multiple) {
        let cur = queryPos(view, event2);
        let range = rangeForClick(view, cur.pos, cur.bias, type7);
        if (start2.pos != cur.pos && !extend2) {
          let startRange = rangeForClick(view, start2.pos, start2.bias, type7);
          let from3 = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
          range = from3 < range.from ? EditorSelection.range(from3, to) : EditorSelection.range(to, from3);
        }
        if (extend2)
          return startSel.replaceRange(startSel.main.extend(range.from, range.to));
        else if (multiple && startSel.ranges.length > 1 && startSel.ranges.some((r2) => r2.eq(range)))
          return removeRange(startSel, range);
        else if (multiple)
          return startSel.addRange(range);
        else
          return EditorSelection.create([range]);
      }
    };
  }
  function removeRange(sel, range) {
    for (let i = 0; ; i++) {
      if (sel.ranges[i].eq(range))
        return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
    }
  }
  function dropText(view, event, text, direct) {
    if (!text)
      return;
    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
    event.preventDefault();
    let { mouseSelection } = view.inputState;
    let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
    let ins = { from: dropPos, insert: text };
    let changes = view.state.changes(del ? [del, ins] : ins);
    view.focus();
    view.dispatch({
      changes,
      selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
      userEvent: del ? "move.drop" : "input.drop"
    });
  }
  function captureCopy(view, text) {
    let parent = view.dom.parentNode;
    if (!parent)
      return;
    let target = parent.appendChild(document.createElement("textarea"));
    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
    target.value = text;
    target.focus();
    target.selectionEnd = text.length;
    target.selectionStart = 0;
    setTimeout(() => {
      target.remove();
      view.focus();
    }, 50);
  }
  function copiedRange(state) {
    let content3 = [], ranges = [], linewise = false;
    for (let range of state.selection.ranges)
      if (!range.empty) {
        content3.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    if (!content3.length) {
      let upto = -1;
      for (let { from: from3 } of state.selection.ranges) {
        let line = state.doc.lineAt(from3);
        if (line.number > upto) {
          content3.push(line.text);
          ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
        }
        upto = line.number;
      }
      linewise = true;
    }
    return { text: content3.join(state.lineBreak), ranges, linewise };
  }
  function focusChangeTransaction(state, focus) {
    let effects = [];
    for (let getEffect of state.facet(focusChangeEffect)) {
      let effect = getEffect(state, focus);
      if (effect)
        effects.push(effect);
    }
    return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
  }
  function updateForFocusChange(view) {
    setTimeout(() => {
      let focus = view.hasFocus;
      if (focus != view.inputState.notifiedFocused) {
        let tr = focusChangeTransaction(view.state, focus);
        if (tr)
          view.dispatch(tr);
        else
          view.update([]);
      }
    }, 10);
  }
  function mergeGaps(nodes, around) {
    let before, after;
    if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
      nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
  }
  function heightRelevantDecoChanges(a2, b, diff2) {
    let comp = new DecorationComparator();
    RangeSet.compare(a2, b, diff2, comp, 0);
    return comp.changes;
  }
  function visiblePixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
    let top3 = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
    for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
      if (parent.nodeType == 1) {
        let elt2 = parent;
        let style2 = window.getComputedStyle(elt2);
        if ((elt2.scrollHeight > elt2.clientHeight || elt2.scrollWidth > elt2.clientWidth) && style2.overflow != "visible") {
          let parentRect = elt2.getBoundingClientRect();
          left = Math.max(left, parentRect.left);
          right = Math.min(right, parentRect.right);
          top3 = Math.max(top3, parentRect.top);
          bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
        }
        parent = style2.position == "absolute" || style2.position == "fixed" ? elt2.offsetParent : elt2.parentNode;
      } else if (parent.nodeType == 11) {
        parent = parent.host;
      } else {
        break;
      }
    }
    return {
      left: left - rect.left,
      right: Math.max(left, right) - rect.left,
      top: top3 - (rect.top + paddingTop),
      bottom: Math.max(top3, bottom) - (rect.top + paddingTop)
    };
  }
  function fullPixelRange(dom, paddingTop) {
    let rect = dom.getBoundingClientRect();
    return {
      left: 0,
      right: rect.right - rect.left,
      top: paddingTop,
      bottom: rect.bottom - (rect.top + paddingTop)
    };
  }
  function lineStructure(from3, to, stateDeco) {
    let ranges = [], pos = from3, total = 0;
    RangeSet.spans(stateDeco, from3, to, {
      span() {
      },
      point(from4, to2) {
        if (from4 > pos) {
          ranges.push({ from: pos, to: from4 });
          total += from4 - pos;
        }
        pos = to2;
      }
    }, 20);
    if (pos < to) {
      ranges.push({ from: pos, to });
      total += to - pos;
    }
    return { total, ranges };
  }
  function findPosition({ total, ranges }, ratio) {
    if (ratio <= 0)
      return ranges[0].from;
    if (ratio >= 1)
      return ranges[ranges.length - 1].to;
    let dist = Math.floor(total * ratio);
    for (let i = 0; ; i++) {
      let { from: from3, to } = ranges[i], size = to - from3;
      if (dist <= size)
        return from3 + dist;
      dist -= size;
    }
  }
  function findFraction(structure, pos) {
    let counted = 0;
    for (let { from: from3, to } of structure.ranges) {
      if (pos <= to) {
        counted += pos - from3;
        break;
      }
      counted += to - from3;
    }
    return counted / structure.total;
  }
  function find(array2, f) {
    for (let val of array2)
      if (f(val))
        return val;
    return void 0;
  }
  function scaleBlock(block2, scaler) {
    if (scaler.scale == 1)
      return block2;
    let bTop = scaler.toDOM(block2.top), bBottom = scaler.toDOM(block2.bottom);
    return new BlockInfo(block2.from, block2.length, bTop, bBottom - bTop, Array.isArray(block2.type) ? block2.type.map((b) => scaleBlock(b, scaler)) : block2.type);
  }
  function buildTheme(main, spec, scopes) {
    return new StyleModule(spec, {
      finish(sel) {
        return /&/.test(sel) ? sel.replace(/&\w*/, (m) => {
          if (m == "&")
            return main;
          if (!scopes || !scopes[m])
            throw new RangeError(`Unsupported selector: ${m}`);
          return scopes[m];
        }) : main + " " + sel;
      }
    });
  }
  function applyDOMChange(view, domChange) {
    let change;
    let { newSel } = domChange, sel = view.state.selection.main;
    if (domChange.bounds) {
      let { from: from3, to } = domChange.bounds;
      let preferredPos = sel.from, preferredSide = null;
      if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && domChange.text.length < to - from3) {
        preferredPos = sel.to;
        preferredSide = "end";
      }
      let diff2 = findDiff(view.state.doc.sliceString(from3, to, LineBreakPlaceholder), domChange.text, preferredPos - from3, preferredSide);
      if (diff2) {
        if (browser.chrome && view.inputState.lastKeyCode == 13 && diff2.toB == diff2.from + 2 && domChange.text.slice(diff2.from, diff2.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
          diff2.toB--;
        change = {
          from: from3 + diff2.from,
          to: from3 + diff2.toA,
          insert: Text.of(domChange.text.slice(diff2.from, diff2.toB).split(LineBreakPlaceholder))
        };
      }
    } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
      newSel = null;
    }
    if (!change && !newSel)
      return false;
    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
      change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
    } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
      change = {
        from: sel.from,
        to: sel.to,
        insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
      };
    } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
      if (newSel && change.insert.length == 2)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
    } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
      if (newSel)
        newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
      change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
    }
    if (change) {
      let startState = view.state;
      if (browser.ios && view.inputState.flushIOSKey(view))
        return true;
      if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
        return true;
      let text = change.insert.toString();
      if (view.state.facet(inputHandler).some((h) => h(view, change.from, change.to, text)))
        return true;
      if (view.inputState.composing >= 0)
        view.inputState.composing++;
      let tr;
      if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
        let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
        let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
        tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
      } else {
        let changes = startState.changes(change);
        let mainSel = newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? newSel.main : void 0;
        if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
          let replaced = view.state.sliceDoc(change.from, change.to);
          let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
          let offset2 = sel.to - change.to, size = sel.to - sel.from;
          tr = startState.changeByRange((range) => {
            if (range.from == sel.from && range.to == sel.to)
              return { changes, range: mainSel || range.map(changes) };
            let to = range.to - offset2, from3 = to - replaced.length;
            if (range.to - range.from != size || view.state.sliceDoc(from3, to) != replaced || // Unfortunately, there's no way to make multiple
            // changes in the same node work without aborting
            // composition, so cursors in the composition range are
            // ignored.
            compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
              return { range };
            let rangeChanges = startState.changes({ from: from3, to, insert: change.insert }), selOff = range.to - sel.to;
            return {
              changes: rangeChanges,
              range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
            };
          });
        } else {
          tr = {
            changes,
            selection: mainSel && startState.selection.replaceRange(mainSel)
          };
        }
      }
      let userEvent = "input.type";
      if (view.composing) {
        userEvent += ".compose";
        if (view.inputState.compositionFirstChange) {
          userEvent += ".start";
          view.inputState.compositionFirstChange = false;
        }
      }
      view.dispatch(tr, { scrollIntoView: true, userEvent });
      return true;
    } else if (newSel && !newSel.main.eq(sel)) {
      let scrollIntoView2 = false, userEvent = "select";
      if (view.inputState.lastSelectionTime > Date.now() - 50) {
        if (view.inputState.lastSelectionOrigin == "select")
          scrollIntoView2 = true;
        userEvent = view.inputState.lastSelectionOrigin;
      }
      view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView2, userEvent });
      return true;
    } else {
      return false;
    }
  }
  function findDiff(a2, b, preferredPos, preferredSide) {
    let minLen = Math.min(a2.length, b.length);
    let from3 = 0;
    while (from3 < minLen && a2.charCodeAt(from3) == b.charCodeAt(from3))
      from3++;
    if (from3 == minLen && a2.length == b.length)
      return null;
    let toA = a2.length, toB = b.length;
    while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
      toA--;
      toB--;
    }
    if (preferredSide == "end") {
      let adjust = Math.max(0, from3 - Math.min(toA, toB));
      preferredPos -= toA + adjust - from3;
    }
    if (toA < from3 && a2.length < b.length) {
      let move = preferredPos <= from3 && preferredPos >= toA ? from3 - preferredPos : 0;
      from3 -= move;
      toB = from3 + (toB - toA);
      toA = from3;
    } else if (toB < from3) {
      let move = preferredPos <= from3 && preferredPos >= toB ? from3 - preferredPos : 0;
      from3 -= move;
      toA = from3 + (toA - toB);
      toB = from3;
    }
    return { from: from3, toA, toB };
  }
  function selectionPoints(view) {
    let result = [];
    if (view.root.activeElement != view.contentDOM)
      return result;
    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
    if (anchorNode) {
      result.push(new DOMPoint(anchorNode, anchorOffset));
      if (focusNode != anchorNode || focusOffset != anchorOffset)
        result.push(new DOMPoint(focusNode, focusOffset));
    }
    return result;
  }
  function selectionFromPoints(points, base4) {
    if (points.length == 0)
      return null;
    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base4, head + base4) : null;
  }
  function findChild(cView, dom, dir) {
    while (dom) {
      let curView = ContentView.get(dom);
      if (curView && curView.parent == cView)
        return curView;
      let parent = dom.parentNode;
      dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
    }
    return null;
  }
  function safariSelectionRangeHack(view) {
    let found = null;
    function read(event) {
      event.preventDefault();
      event.stopImmediatePropagation();
      found = event.getTargetRanges()[0];
    }
    view.contentDOM.addEventListener("beforeinput", read, true);
    view.dom.ownerDocument.execCommand("indent");
    view.contentDOM.removeEventListener("beforeinput", read, true);
    if (!found)
      return null;
    let anchorNode = found.startContainer, anchorOffset = found.startOffset;
    let focusNode = found.endContainer, focusOffset = found.endOffset;
    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
      [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
    return { anchorNode, anchorOffset, focusNode, focusOffset };
  }
  function attrsFromFacet(view, facet, base4) {
    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
      let source = sources[i], value = typeof source == "function" ? source(view) : source;
      if (value)
        combineAttrs(value, base4);
    }
    return base4;
  }
  function normalizeKeyName(name2, platform) {
    const parts = name2.split(/-(?!$)/);
    let result = parts[parts.length - 1];
    if (result == "Space")
      result = " ";
    let alt, ctrl, shift2, meta2;
    for (let i = 0; i < parts.length - 1; ++i) {
      const mod = parts[i];
      if (/^(cmd|meta|m)$/i.test(mod))
        meta2 = true;
      else if (/^a(lt)?$/i.test(mod))
        alt = true;
      else if (/^(c|ctrl|control)$/i.test(mod))
        ctrl = true;
      else if (/^s(hift)?$/i.test(mod))
        shift2 = true;
      else if (/^mod$/i.test(mod)) {
        if (platform == "mac")
          meta2 = true;
        else
          ctrl = true;
      } else
        throw new Error("Unrecognized modifier name: " + mod);
    }
    if (alt)
      result = "Alt-" + result;
    if (ctrl)
      result = "Ctrl-" + result;
    if (meta2)
      result = "Meta-" + result;
    if (shift2)
      result = "Shift-" + result;
    return result;
  }
  function modifiers(name2, event, shift2) {
    if (event.altKey)
      name2 = "Alt-" + name2;
    if (event.ctrlKey)
      name2 = "Ctrl-" + name2;
    if (event.metaKey)
      name2 = "Meta-" + name2;
    if (shift2 !== false && event.shiftKey)
      name2 = "Shift-" + name2;
    return name2;
  }
  function getKeymap(state) {
    let bindings = state.facet(keymap);
    let map = Keymaps.get(bindings);
    if (!map)
      Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a2, b) => a2.concat(b), [])));
    return map;
  }
  function buildKeymap(bindings, platform = currentPlatform) {
    let bound = /* @__PURE__ */ Object.create(null);
    let isPrefix = /* @__PURE__ */ Object.create(null);
    let checkPrefix = (name2, is2) => {
      let current = isPrefix[name2];
      if (current == null)
        isPrefix[name2] = is2;
      else if (current != is2)
        throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
    };
    let add2 = (scope, key, command2, preventDefault) => {
      var _a2, _b2;
      let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
      let parts = key.split(/ (?!$)/).map((k) => normalizeKeyName(k, platform));
      for (let i = 1; i < parts.length; i++) {
        let prefix2 = parts.slice(0, i).join(" ");
        checkPrefix(prefix2, true);
        if (!scopeObj[prefix2])
          scopeObj[prefix2] = {
            preventDefault: true,
            run: [(view) => {
              let ourObj = storedPrefix = { view, prefix: prefix2, scope };
              setTimeout(() => {
                if (storedPrefix == ourObj)
                  storedPrefix = null;
              }, PrefixTimeout);
              return true;
            }]
          };
      }
      let full = parts.join(" ");
      checkPrefix(full, false);
      let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, run: ((_b2 = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b2 === void 0 ? void 0 : _b2.slice()) || [] });
      if (command2)
        binding.run.push(command2);
      if (preventDefault)
        binding.preventDefault = true;
    };
    for (let b of bindings) {
      let scopes = b.scope ? b.scope.split(" ") : ["editor"];
      if (b.any)
        for (let scope of scopes) {
          let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
          if (!scopeObj._any)
            scopeObj._any = { preventDefault: false, run: [] };
          for (let key in scopeObj)
            scopeObj[key].run.push(b.any);
        }
      let name2 = b[platform] || b.key;
      if (!name2)
        continue;
      for (let scope of scopes) {
        add2(scope, name2, b.run, b.preventDefault);
        if (b.shift)
          add2(scope, "Shift-" + name2, b.shift, b.preventDefault);
      }
    }
    return bound;
  }
  function runHandlers(map, event, view, scope) {
    let name2 = keyName(event);
    let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
    let prefix2 = "", fallthrough = false;
    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
      prefix2 = storedPrefix.prefix + " ";
      if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
        storedPrefix = null;
    }
    let ran = /* @__PURE__ */ new Set();
    let runFor = (binding) => {
      if (binding) {
        for (let cmd of binding.run)
          if (!ran.has(cmd)) {
            ran.add(cmd);
            if (cmd(view, event))
              return true;
          }
        if (binding.preventDefault)
          fallthrough = true;
      }
      return false;
    };
    let scopeObj = map[scope], baseName, shiftName;
    if (scopeObj) {
      if (runFor(scopeObj[prefix2 + modifiers(name2, event, !isChar)]))
        return true;
      if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
      !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
        if (runFor(scopeObj[prefix2 + modifiers(baseName, event, true)]))
          return true;
        else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix2 + modifiers(shiftName, event, false)]))
          return true;
      } else if (isChar && event.shiftKey) {
        if (runFor(scopeObj[prefix2 + modifiers(name2, event, true)]))
          return true;
      }
      if (runFor(scopeObj._any))
        return true;
    }
    return fallthrough;
  }
  var Rect0, DOMSelectionState, preventScrollSupported, scratchRange, DOMPos, noChildren, ContentView, ChildCursor, nav, doc, ie_edge, ie_upto10, ie_11up, ie2, gecko2, chrome2, webkit, safari, ios, browser, MaxJoinLen, TextView, MarkView, WidgetView, CompositionView, WidgetBufferView, WidgetType, BlockType, Decoration, MarkDecoration, LineDecoration, PointDecoration, LineView, BlockWidgetView, ContentBuilder, NullWidget, clickAddsSelectionRange, dragMovesSelection$1, mouseSelectionStyle, exceptionSink, updateListener, inputHandler, focusChangeEffect, perLineTextDirection, nativeSelectionHidden, ScrollTarget, scrollIntoView, editable, nextPluginID, viewPlugin, ViewPlugin, PluginInstance, editorAttributes, contentAttributes, decorations, atomicRanges, scrollMargins, styleModule, ChangedRange, ViewUpdate, Direction, LTR, RTL, LowTypes, ArabicTypes, Brackets, BracketStack, BidiRE, BidiSpan, types, movedOver, LineBreakPlaceholder, DOMReader, DOMPoint, DocView, BlockGapWidget, CompositionWidget, DecorationComparator$1, InputState, PendingKeys, EmacsyPendingKeys, modifierCodes, MouseSelection, handlers, handlerOptions, brokenClipboardAPI, insideY, inside, BadMouseDetail, lastMouseDown, lastMouseDownCount, lastMouseDownTime, lastLinewiseCopy, isFocusChange, wrappingWhiteSpace, HeightOracle, MeasuredHeights, BlockInfo, QueryType, Epsilon, HeightMap, HeightMapBlock, HeightMapText, HeightMapGap, HeightMapBranch, relevantWidgetHeight, NodeBuilder, DecorationComparator, LineGap, LineGapWidget, ViewState, Viewport, IdScaler, BigScaler, theme, darkTheme, baseThemeID, baseLightID, baseDarkID, lightDarkIDs, baseTheme$1, DOMChange, observeOptions, useCharData, DOMObserver, EditorView, MaxBidiLine, BadMeasure, CachedOrder, currentPlatform, handleKeyEvents, keymap, Keymaps, storedPrefix, PrefixTimeout, CanHidePrimary, themeSpec, UnicodeRegexpSupport, baseTheme, GutterMarker;
  var init_dist2 = __esm({
    "node_modules/@codemirror/view/dist/index.js"() {
      init_dist();
      init_style_mod();
      init_index_es();
      Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
      DOMSelectionState = class {
        constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
        }
        eq(domSel) {
          return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
          this.set(range.anchorNode, range.anchorOffset, range.focusNode, range.focusOffset);
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
          this.anchorNode = anchorNode;
          this.anchorOffset = anchorOffset;
          this.focusNode = focusNode;
          this.focusOffset = focusOffset;
        }
      };
      preventScrollSupported = null;
      DOMPos = class {
        constructor(node, offset2, precise = true) {
          this.node = node;
          this.offset = offset2;
          this.precise = precise;
        }
        static before(dom, precise) {
          return new DOMPos(dom.parentNode, domIndex(dom), precise);
        }
        static after(dom, precise) {
          return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
        }
      };
      noChildren = [];
      ContentView = class {
        constructor() {
          this.parent = null;
          this.dom = null;
          this.dirty = 2;
        }
        get overrideDOMText() {
          return null;
        }
        get posAtStart() {
          return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
          return this.posAtStart + this.length;
        }
        posBefore(view) {
          let pos = this.posAtStart;
          for (let child of this.children) {
            if (child == view)
              return pos;
            pos += child.length + child.breakAfter;
          }
          throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
          return this.posBefore(view) + view.length;
        }
        // Will return a rectangle directly before (when side < 0), after
        // (side > 0) or directly on (when the browser supports it) the
        // given position.
        coordsAt(_pos, _side) {
          return null;
        }
        sync(view, track) {
          if (this.dirty & 2) {
            let parent = this.dom;
            let prev = null, next2;
            for (let child of this.children) {
              if (child.dirty) {
                if (!child.dom && (next2 = prev ? prev.nextSibling : parent.firstChild)) {
                  let contentView = ContentView.get(next2);
                  if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                    child.reuseDOM(next2);
                }
                child.sync(view, track);
                child.dirty = 0;
              }
              next2 = prev ? prev.nextSibling : parent.firstChild;
              if (track && !track.written && track.node == parent && next2 != child.dom)
                track.written = true;
              if (child.dom.parentNode == parent) {
                while (next2 && next2 != child.dom)
                  next2 = rm$1(next2);
              } else {
                parent.insertBefore(child.dom, next2);
              }
              prev = child.dom;
            }
            next2 = prev ? prev.nextSibling : parent.firstChild;
            if (next2 && track && track.node == parent)
              track.written = true;
            while (next2)
              next2 = rm$1(next2);
          } else if (this.dirty & 1) {
            for (let child of this.children)
              if (child.dirty) {
                child.sync(view, track);
                child.dirty = 0;
              }
          }
        }
        reuseDOM(_dom) {
        }
        localPosFromDOM(node, offset2) {
          let after;
          if (node == this.dom) {
            after = this.dom.childNodes[offset2];
          } else {
            let bias = maxOffset(node) == 0 ? 0 : offset2 == 0 ? -1 : 1;
            for (; ; ) {
              let parent = node.parentNode;
              if (parent == this.dom)
                break;
              if (bias == 0 && parent.firstChild != parent.lastChild) {
                if (node == parent.firstChild)
                  bias = -1;
                else
                  bias = 1;
              }
              node = parent;
            }
            if (bias < 0)
              after = node;
            else
              after = node.nextSibling;
          }
          if (after == this.dom.firstChild)
            return 0;
          while (after && !ContentView.get(after))
            after = after.nextSibling;
          if (!after)
            return this.length;
          for (let i = 0, pos = 0; ; i++) {
            let child = this.children[i];
            if (child.dom == after)
              return pos;
            pos += child.length + child.breakAfter;
          }
        }
        domBoundsAround(from3, to, offset2 = 0) {
          let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
          for (let i = 0, pos = offset2, prevEnd = offset2; i < this.children.length; i++) {
            let child = this.children[i], end2 = pos + child.length;
            if (pos < from3 && end2 > to)
              return child.domBoundsAround(from3, to, pos);
            if (end2 >= from3 && fromI == -1) {
              fromI = i;
              fromStart = pos;
            }
            if (pos > to && child.dom.parentNode == this.dom) {
              toI = i;
              toEnd = prevEnd;
              break;
            }
            prevEnd = end2;
            pos = end2 + child.breakAfter;
          }
          return {
            from: fromStart,
            to: toEnd < 0 ? offset2 + this.length : toEnd,
            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
          };
        }
        markDirty(andParent = false) {
          this.dirty |= 2;
          this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
          for (let parent = this.parent; parent; parent = parent.parent) {
            if (childList)
              parent.dirty |= 2;
            if (parent.dirty & 1)
              return;
            parent.dirty |= 1;
            childList = false;
          }
        }
        setParent(parent) {
          if (this.parent != parent) {
            this.parent = parent;
            if (this.dirty)
              this.markParentsDirty(true);
          }
        }
        setDOM(dom) {
          if (this.dom)
            this.dom.cmView = null;
          this.dom = dom;
          dom.cmView = this;
        }
        get rootView() {
          for (let v = this; ; ) {
            let parent = v.parent;
            if (!parent)
              return v;
            v = parent;
          }
        }
        replaceChildren(from3, to, children = noChildren) {
          this.markDirty();
          for (let i = from3; i < to; i++) {
            let child = this.children[i];
            if (child.parent == this)
              child.destroy();
          }
          this.children.splice(from3, to - from3, ...children);
          for (let i = 0; i < children.length; i++)
            children[i].setParent(this);
        }
        ignoreMutation(_rec) {
          return false;
        }
        ignoreEvent(_event) {
          return false;
        }
        childCursor(pos = this.length) {
          return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
          return this.childCursor().findPos(pos, bias);
        }
        toString() {
          let name2 = this.constructor.name.replace("View", "");
          return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
        }
        static get(node) {
          return node.cmView;
        }
        get isEditable() {
          return true;
        }
        get isWidget() {
          return false;
        }
        merge(from3, to, source, hasStart, openStart, openEnd) {
          return false;
        }
        become(other) {
          return false;
        }
        canReuseDOM(other) {
          return other.constructor == this.constructor;
        }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() {
          return 0;
        }
        destroy() {
          this.parent = null;
        }
      };
      ContentView.prototype.breakAfter = 0;
      ChildCursor = class {
        constructor(children, pos, i) {
          this.children = children;
          this.pos = pos;
          this.i = i;
          this.off = 0;
        }
        findPos(pos, bias = 1) {
          for (; ; ) {
            if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
              this.off = pos - this.pos;
              return this;
            }
            let next2 = this.children[--this.i];
            this.pos -= next2.length + next2.breakAfter;
          }
        }
      };
      nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
      doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
      ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
      ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
      ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
      ie2 = !!(ie_upto10 || ie_11up || ie_edge);
      gecko2 = !ie2 && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
      chrome2 = !ie2 && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
      webkit = "webkitFontSmoothing" in doc.documentElement.style;
      safari = !ie2 && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
      ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
      browser = {
        mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
        windows: /* @__PURE__ */ /Win/.test(nav.platform),
        linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
        ie: ie2,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko: gecko2,
        gecko_version: gecko2 ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome2,
        chrome_version: chrome2 ? +chrome2[1] : 0,
        ios,
        android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
      };
      MaxJoinLen = 256;
      TextView = class extends ContentView {
        constructor(text) {
          super();
          this.text = text;
        }
        get length() {
          return this.text.length;
        }
        createDOM(textDOM) {
          this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(view, track) {
          if (!this.dom)
            this.createDOM();
          if (this.dom.nodeValue != this.text) {
            if (track && track.node == this.dom)
              track.written = true;
            this.dom.nodeValue = this.text;
          }
        }
        reuseDOM(dom) {
          if (dom.nodeType == 3)
            this.createDOM(dom);
        }
        merge(from3, to, source) {
          if (source && (!(source instanceof TextView) || this.length - (to - from3) + source.length > MaxJoinLen))
            return false;
          this.text = this.text.slice(0, from3) + (source ? source.text : "") + this.text.slice(to);
          this.markDirty();
          return true;
        }
        split(from3) {
          let result = new TextView(this.text.slice(from3));
          this.text = this.text.slice(0, from3);
          this.markDirty();
          return result;
        }
        localPosFromDOM(node, offset2) {
          return node == this.dom ? offset2 : offset2 ? this.text.length : 0;
        }
        domAtPos(pos) {
          return new DOMPos(this.dom, pos);
        }
        domBoundsAround(_from, _to, offset2) {
          return { from: offset2, to: offset2 + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
          return textCoords(this.dom, pos, side);
        }
      };
      MarkView = class extends ContentView {
        constructor(mark, children = [], length = 0) {
          super();
          this.mark = mark;
          this.children = children;
          this.length = length;
          for (let ch2 of children)
            ch2.setParent(this);
        }
        setAttrs(dom) {
          clearAttributes(dom);
          if (this.mark.class)
            dom.className = this.mark.class;
          if (this.mark.attrs)
            for (let name2 in this.mark.attrs)
              dom.setAttribute(name2, this.mark.attrs[name2]);
          return dom;
        }
        reuseDOM(node) {
          if (node.nodeName == this.mark.tagName.toUpperCase()) {
            this.setDOM(node);
            this.dirty |= 4 | 2;
          }
        }
        sync(view, track) {
          if (!this.dom)
            this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
          else if (this.dirty & 4)
            this.setAttrs(this.dom);
          super.sync(view, track);
        }
        merge(from3, to, source, _hasStart, openStart, openEnd) {
          if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from3 && openStart <= 0 || to < this.length && openEnd <= 0))
            return false;
          mergeChildrenInto(this, from3, to, source ? source.children : [], openStart - 1, openEnd - 1);
          this.markDirty();
          return true;
        }
        split(from3) {
          let result = [], off = 0, detachFrom = -1, i = 0;
          for (let elt2 of this.children) {
            let end2 = off + elt2.length;
            if (end2 > from3)
              result.push(off < from3 ? elt2.split(from3 - off) : elt2);
            if (detachFrom < 0 && off >= from3)
              detachFrom = i;
            off = end2;
            i++;
          }
          let length = this.length - from3;
          this.length = from3;
          if (detachFrom > -1) {
            this.children.length = detachFrom;
            this.markDirty();
          }
          return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
        }
        coordsAt(pos, side) {
          return coordsInChildren(this, pos, side);
        }
      };
      WidgetView = class extends ContentView {
        constructor(widget, length, side) {
          super();
          this.widget = widget;
          this.length = length;
          this.side = side;
          this.prevWidget = null;
        }
        static create(widget, length, side) {
          return new (widget.customView || WidgetView)(widget, length, side);
        }
        split(from3) {
          let result = WidgetView.create(this.widget, this.length - from3, this.side);
          this.length -= from3;
          return result;
        }
        sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
            if (this.dom && this.prevWidget)
              this.prevWidget.destroy(this.dom);
            this.prevWidget = null;
            this.setDOM(this.widget.toDOM(view));
            this.dom.contentEditable = "false";
          }
        }
        getSide() {
          return this.side;
        }
        merge(from3, to, source, hasStart, openStart, openEnd) {
          if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from3 > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
            return false;
          this.length = from3 + (source ? source.length : 0) + (this.length - to);
          return true;
        }
        become(other) {
          if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
            if (this.widget.constructor == other.widget.constructor) {
              if (!this.widget.eq(other.widget))
                this.markDirty(true);
              if (this.dom && !this.prevWidget)
                this.prevWidget = this.widget;
              this.widget = other.widget;
              return true;
            }
          }
          return false;
        }
        ignoreMutation() {
          return true;
        }
        ignoreEvent(event) {
          return this.widget.ignoreEvent(event);
        }
        get overrideDOMText() {
          if (this.length == 0)
            return Text.empty;
          let top3 = this;
          while (top3.parent)
            top3 = top3.parent;
          let { view } = top3, text = view && view.state.doc, start2 = this.posAtStart;
          return text ? text.slice(start2, start2 + this.length) : Text.empty;
        }
        domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() {
          return null;
        }
        coordsAt(pos, side) {
          let rects = this.dom.getClientRects(), rect = null;
          if (!rects.length)
            return Rect0;
          for (let i = pos > 0 ? rects.length - 1 : 0; ; i += pos > 0 ? -1 : 1) {
            rect = rects[i];
            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
              break;
          }
          return this.length ? rect : flattenRect(rect, this.side > 0);
        }
        get isEditable() {
          return false;
        }
        get isWidget() {
          return true;
        }
        destroy() {
          super.destroy();
          if (this.dom)
            this.widget.destroy(this.dom);
        }
      };
      CompositionView = class extends WidgetView {
        domAtPos(pos) {
          let { topView, text } = this.widget;
          if (!topView)
            return new DOMPos(text, Math.min(pos, text.nodeValue.length));
          return scanCompositionTree(pos, 0, topView, text, (v, p) => v.domAtPos(p), (p) => new DOMPos(text, Math.min(p, text.nodeValue.length)));
        }
        sync() {
          this.setDOM(this.widget.toDOM());
        }
        localPosFromDOM(node, offset2) {
          let { topView, text } = this.widget;
          if (!topView)
            return Math.min(offset2, this.length);
          return posFromDOMInCompositionTree(node, offset2, topView, text);
        }
        ignoreMutation() {
          return false;
        }
        get overrideDOMText() {
          return null;
        }
        coordsAt(pos, side) {
          let { topView, text } = this.widget;
          if (!topView)
            return textCoords(text, pos, side);
          return scanCompositionTree(pos, side, topView, text, (v, pos2, side2) => v.coordsAt(pos2, side2), (pos2, side2) => textCoords(text, pos2, side2));
        }
        destroy() {
          var _a2;
          super.destroy();
          (_a2 = this.widget.topView) === null || _a2 === void 0 ? void 0 : _a2.destroy();
        }
        get isEditable() {
          return true;
        }
        canReuseDOM() {
          return true;
        }
      };
      WidgetBufferView = class extends ContentView {
        constructor(side) {
          super();
          this.side = side;
        }
        get length() {
          return 0;
        }
        merge() {
          return false;
        }
        become(other) {
          return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() {
          return new WidgetBufferView(this.side);
        }
        sync() {
          if (!this.dom) {
            let dom = document.createElement("img");
            dom.className = "cm-widgetBuffer";
            dom.setAttribute("aria-hidden", "true");
            this.setDOM(dom);
          }
        }
        getSide() {
          return this.side;
        }
        domAtPos(pos) {
          return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
        }
        localPosFromDOM() {
          return 0;
        }
        domBoundsAround() {
          return null;
        }
        coordsAt(pos) {
          let imgRect = this.dom.getBoundingClientRect();
          let siblingRect = inlineSiblingRect(this, this.side > 0 ? -1 : 1);
          return siblingRect && siblingRect.top < imgRect.bottom && siblingRect.bottom > imgRect.top ? { left: imgRect.left, right: imgRect.right, top: siblingRect.top, bottom: siblingRect.bottom } : imgRect;
        }
        get overrideDOMText() {
          return Text.empty;
        }
      };
      TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
      WidgetType = class {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) {
          return false;
        }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom, view) {
          return false;
        }
        /**
        @internal
        */
        compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() {
          return -1;
        }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) {
          return true;
        }
        /**
        @internal
        */
        get customView() {
          return null;
        }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) {
        }
      };
      BlockType = /* @__PURE__ */ function(BlockType2) {
        BlockType2[BlockType2["Text"] = 0] = "Text";
        BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
        BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
        BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
        return BlockType2;
      }(BlockType || (BlockType = {}));
      Decoration = class extends RangeValue {
        constructor(startSide, endSide, widget, spec) {
          super();
          this.startSide = startSide;
          this.endSide = endSide;
          this.widget = widget;
          this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() {
          return false;
        }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
          return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
          let side = spec.side || 0, block2 = !!spec.block;
          side += block2 ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
          return new PointDecoration(spec, side, side, block2, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
          let block2 = !!spec.block, startSide, endSide;
          if (spec.isBlockGap) {
            startSide = -5e8;
            endSide = 4e8;
          } else {
            let { start: start2, end: end2 } = getInclusive(spec, block2);
            startSide = (start2 ? block2 ? -3e8 : -1 : 5e8) - 1;
            endSide = (end2 ? block2 ? 2e8 : 1 : -6e8) + 1;
          }
          return new PointDecoration(spec, startSide, endSide, block2, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
          return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
          return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() {
          return this.widget ? this.widget.estimatedHeight > -1 : false;
        }
      };
      Decoration.none = RangeSet.empty;
      MarkDecoration = class extends Decoration {
        constructor(spec) {
          let { start: start2, end: end2 } = getInclusive(spec);
          super(start2 ? -1 : 5e8, end2 ? 1 : -6e8, null, spec);
          this.tagName = spec.tagName || "span";
          this.class = spec.class || "";
          this.attrs = spec.attributes || null;
        }
        eq(other) {
          return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this.class == other.class && attrsEq(this.attrs, other.attrs);
        }
        range(from3, to = from3) {
          if (from3 >= to)
            throw new RangeError("Mark decorations may not be empty");
          return super.range(from3, to);
        }
      };
      MarkDecoration.prototype.point = false;
      LineDecoration = class extends Decoration {
        constructor(spec) {
          super(-2e8, -2e8, null, spec);
        }
        eq(other) {
          return other instanceof LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from3, to = from3) {
          if (to != from3)
            throw new RangeError("Line decoration ranges must be zero-length");
          return super.range(from3, to);
        }
      };
      LineDecoration.prototype.mapMode = MapMode.TrackBefore;
      LineDecoration.prototype.point = true;
      PointDecoration = class extends Decoration {
        constructor(spec, startSide, endSide, block2, widget, isReplace) {
          super(startSide, endSide, widget, spec);
          this.block = block2;
          this.isReplace = isReplace;
          this.mapMode = !block2 ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
          return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() {
          return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
        }
        eq(other) {
          return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from3, to = from3) {
          if (this.isReplace && (from3 > to || from3 == to && this.startSide > 0 && this.endSide <= 0))
            throw new RangeError("Invalid range for replacement decoration");
          if (!this.isReplace && to != from3)
            throw new RangeError("Widget decorations can only have zero-length ranges");
          return super.range(from3, to);
        }
      };
      PointDecoration.prototype.point = true;
      LineView = class extends ContentView {
        constructor() {
          super(...arguments);
          this.children = [];
          this.length = 0;
          this.prevAttrs = void 0;
          this.attrs = null;
          this.breakAfter = 0;
        }
        // Consumes source
        merge(from3, to, source, hasStart, openStart, openEnd) {
          if (source) {
            if (!(source instanceof LineView))
              return false;
            if (!this.dom)
              source.transferDOM(this);
          }
          if (hasStart)
            this.setDeco(source ? source.attrs : null);
          mergeChildrenInto(this, from3, to, source ? source.children : [], openStart, openEnd);
          return true;
        }
        split(at) {
          let end2 = new LineView();
          end2.breakAfter = this.breakAfter;
          if (this.length == 0)
            return end2;
          let { i, off } = this.childPos(at);
          if (off) {
            end2.append(this.children[i].split(off), 0);
            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
            i++;
          }
          for (let j = i; j < this.children.length; j++)
            end2.append(this.children[j], 0);
          while (i > 0 && this.children[i - 1].length == 0)
            this.children[--i].destroy();
          this.children.length = i;
          this.markDirty();
          this.length = at;
          return end2;
        }
        transferDOM(other) {
          if (!this.dom)
            return;
          this.markDirty();
          other.setDOM(this.dom);
          other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
          this.prevAttrs = void 0;
          this.dom = null;
        }
        setDeco(attrs) {
          if (!attrsEq(this.attrs, attrs)) {
            if (this.dom) {
              this.prevAttrs = this.attrs;
              this.markDirty();
            }
            this.attrs = attrs;
          }
        }
        append(child, openStart) {
          joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
          let attrs = deco.spec.attributes, cls = deco.spec.class;
          if (attrs)
            this.attrs = combineAttrs(attrs, this.attrs || {});
          if (cls)
            this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
          return inlineDOMAtPos(this, pos);
        }
        reuseDOM(node) {
          if (node.nodeName == "DIV") {
            this.setDOM(node);
            this.dirty |= 4 | 2;
          }
        }
        sync(view, track) {
          var _a2;
          if (!this.dom) {
            this.setDOM(document.createElement("div"));
            this.dom.className = "cm-line";
            this.prevAttrs = this.attrs ? null : void 0;
          } else if (this.dirty & 4) {
            clearAttributes(this.dom);
            this.dom.className = "cm-line";
            this.prevAttrs = this.attrs ? null : void 0;
          }
          if (this.prevAttrs !== void 0) {
            updateAttrs(this.dom, this.prevAttrs, this.attrs);
            this.dom.classList.add("cm-line");
            this.prevAttrs = void 0;
          }
          super.sync(view, track);
          let last = this.dom.lastChild;
          while (last && ContentView.get(last) instanceof MarkView)
            last = last.lastChild;
          if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch2) => ch2 instanceof TextView))) {
            let hack = document.createElement("BR");
            hack.cmIgnore = true;
            this.dom.appendChild(hack);
          }
        }
        measureTextSize() {
          if (this.children.length == 0 || this.length > 20)
            return null;
          let totalWidth = 0, textHeight;
          for (let child of this.children) {
            if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
              return null;
            let rects = clientRectsFor(child.dom);
            if (rects.length != 1)
              return null;
            totalWidth += rects[0].width;
            textHeight = rects[0].height;
          }
          return !totalWidth ? null : {
            lineHeight: this.dom.getBoundingClientRect().height,
            charWidth: totalWidth / this.length,
            textHeight
          };
        }
        coordsAt(pos, side) {
          let rect = coordsInChildren(this, pos, side);
          if (!this.children.length && rect && this.parent) {
            let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
            if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
              let dist = (height - heightOracle.textHeight) / 2;
              return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
            }
          }
          return rect;
        }
        become(_other) {
          return false;
        }
        get type() {
          return BlockType.Text;
        }
        static find(docView, pos) {
          for (let i = 0, off = 0; i < docView.children.length; i++) {
            let block2 = docView.children[i], end2 = off + block2.length;
            if (end2 >= pos) {
              if (block2 instanceof LineView)
                return block2;
              if (end2 > pos)
                break;
            }
            off = end2 + block2.breakAfter;
          }
          return null;
        }
      };
      BlockWidgetView = class extends ContentView {
        constructor(widget, length, type7) {
          super();
          this.widget = widget;
          this.length = length;
          this.type = type7;
          this.breakAfter = 0;
          this.prevWidget = null;
        }
        merge(from3, to, source, _takeDeco, openStart, openEnd) {
          if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from3 > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
            return false;
          this.length = from3 + (source ? source.length : 0) + (this.length - to);
          return true;
        }
        domAtPos(pos) {
          return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
          let len = this.length - at;
          this.length = at;
          let end2 = new BlockWidgetView(this.widget, len, this.type);
          end2.breakAfter = this.breakAfter;
          return end2;
        }
        get children() {
          return noChildren;
        }
        sync(view) {
          if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
            if (this.dom && this.prevWidget)
              this.prevWidget.destroy(this.dom);
            this.prevWidget = null;
            this.setDOM(this.widget.toDOM(view));
            this.dom.contentEditable = "false";
          }
        }
        get overrideDOMText() {
          return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() {
          return null;
        }
        become(other) {
          if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
            if (!other.widget.eq(this.widget))
              this.markDirty(true);
            if (this.dom && !this.prevWidget)
              this.prevWidget = this.widget;
            this.widget = other.widget;
            this.length = other.length;
            this.breakAfter = other.breakAfter;
            return true;
          }
          return false;
        }
        ignoreMutation() {
          return true;
        }
        ignoreEvent(event) {
          return this.widget.ignoreEvent(event);
        }
        get isEditable() {
          return false;
        }
        get isWidget() {
          return true;
        }
        destroy() {
          super.destroy();
          if (this.dom)
            this.widget.destroy(this.dom);
        }
      };
      ContentBuilder = class {
        constructor(doc2, pos, end2, disallowBlockEffectsFor) {
          this.doc = doc2;
          this.pos = pos;
          this.end = end2;
          this.disallowBlockEffectsFor = disallowBlockEffectsFor;
          this.content = [];
          this.curLine = null;
          this.breakAtStart = 0;
          this.pendingBuffer = 0;
          this.bufferMarks = [];
          this.atCursorPos = true;
          this.openStart = -1;
          this.openEnd = -1;
          this.text = "";
          this.textOff = 0;
          this.cursor = doc2.iter();
          this.skip = pos;
        }
        posCovered() {
          if (this.content.length == 0)
            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
          let last = this.content[this.content.length - 1];
          return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
          if (!this.curLine) {
            this.content.push(this.curLine = new LineView());
            this.atCursorPos = true;
          }
          return this.curLine;
        }
        flushBuffer(active = this.bufferMarks) {
          if (this.pendingBuffer) {
            this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
            this.pendingBuffer = 0;
          }
        }
        addBlockWidget(view) {
          this.flushBuffer();
          this.curLine = null;
          this.content.push(view);
        }
        finish(openEnd) {
          if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
            this.flushBuffer();
          else
            this.pendingBuffer = 0;
          if (!this.posCovered())
            this.getLine();
        }
        buildText(length, active, openStart) {
          while (length > 0) {
            if (this.textOff == this.text.length) {
              let { value, lineBreak, done } = this.cursor.next(this.skip);
              this.skip = 0;
              if (done)
                throw new Error("Ran out of text content when drawing inline views");
              if (lineBreak) {
                if (!this.posCovered())
                  this.getLine();
                if (this.content.length)
                  this.content[this.content.length - 1].breakAfter = 1;
                else
                  this.breakAtStart = 1;
                this.flushBuffer();
                this.curLine = null;
                this.atCursorPos = true;
                length--;
                continue;
              } else {
                this.text = value;
                this.textOff = 0;
              }
            }
            let take = Math.min(
              this.text.length - this.textOff,
              length,
              512
              /* T.Chunk */
            );
            this.flushBuffer(active.slice(active.length - openStart));
            this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
            this.atCursorPos = true;
            this.textOff += take;
            length -= take;
            openStart = 0;
          }
        }
        span(from3, to, active, openStart) {
          this.buildText(to - from3, active, openStart);
          this.pos = to;
          if (this.openStart < 0)
            this.openStart = openStart;
        }
        point(from3, to, deco, active, openStart, index) {
          if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
            if (deco.block)
              throw new RangeError("Block decorations may not be specified via plugins");
            if (to > this.doc.lineAt(this.pos).to)
              throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
          }
          let len = to - from3;
          if (deco instanceof PointDecoration) {
            if (deco.block) {
              let { type: type7 } = deco;
              if (type7 == BlockType.WidgetAfter && !this.posCovered())
                this.getLine();
              this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type7));
            } else {
              let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
              let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from3 < to || deco.startSide > 0);
              let cursorAfter = !view.isEditable && (from3 < to || openStart > active.length || deco.startSide <= 0);
              let line = this.getLine();
              if (this.pendingBuffer == 2 && !cursorBefore)
                this.pendingBuffer = 0;
              this.flushBuffer(active);
              if (cursorBefore) {
                line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                openStart = active.length + Math.max(0, openStart - active.length);
              }
              line.append(wrapMarks(view, active), openStart);
              this.atCursorPos = cursorAfter;
              this.pendingBuffer = !cursorAfter ? 0 : from3 < to || openStart > active.length ? 1 : 2;
              if (this.pendingBuffer)
                this.bufferMarks = active.slice();
            }
          } else if (this.doc.lineAt(this.pos).from == this.pos) {
            this.getLine().addLineDeco(deco);
          }
          if (len) {
            if (this.textOff + len <= this.text.length) {
              this.textOff += len;
            } else {
              this.skip += len - (this.text.length - this.textOff);
              this.text = "";
              this.textOff = 0;
            }
            this.pos = to;
          }
          if (this.openStart < 0)
            this.openStart = openStart;
        }
        static build(text, from3, to, decorations2, dynamicDecorationMap) {
          let builder = new ContentBuilder(text, from3, to, dynamicDecorationMap);
          builder.openEnd = RangeSet.spans(decorations2, from3, to, builder);
          if (builder.openStart < 0)
            builder.openStart = builder.openEnd;
          builder.finish(builder.openEnd);
          return builder;
        }
      };
      NullWidget = class extends WidgetType {
        constructor(tag) {
          super();
          this.tag = tag;
        }
        eq(other) {
          return other.tag == this.tag;
        }
        toDOM() {
          return document.createElement(this.tag);
        }
        updateDOM(elt2) {
          return elt2.nodeName.toLowerCase() == this.tag;
        }
      };
      clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
      dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
      mouseSelectionStyle = /* @__PURE__ */ Facet.define();
      exceptionSink = /* @__PURE__ */ Facet.define();
      updateListener = /* @__PURE__ */ Facet.define();
      inputHandler = /* @__PURE__ */ Facet.define();
      focusChangeEffect = /* @__PURE__ */ Facet.define();
      perLineTextDirection = /* @__PURE__ */ Facet.define({
        combine: (values2) => values2.some((x) => x)
      });
      nativeSelectionHidden = /* @__PURE__ */ Facet.define({
        combine: (values2) => values2.some((x) => x)
      });
      ScrollTarget = class {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
          this.range = range;
          this.y = y;
          this.x = x;
          this.yMargin = yMargin;
          this.xMargin = xMargin;
        }
        map(changes) {
          return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
        }
      };
      scrollIntoView = /* @__PURE__ */ StateEffect.define({ map: (t2, ch2) => t2.map(ch2) });
      editable = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.length ? values2[0] : true });
      nextPluginID = 0;
      viewPlugin = /* @__PURE__ */ Facet.define();
      ViewPlugin = class {
        constructor(id2, create, domEventHandlers, buildExtensions) {
          this.id = id2;
          this.create = create;
          this.domEventHandlers = domEventHandlers;
          this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
          const { eventHandlers, provide, decorations: deco } = spec || {};
          return new ViewPlugin(nextPluginID++, create, eventHandlers, (plugin) => {
            let ext = [viewPlugin.of(plugin)];
            if (deco)
              ext.push(decorations.of((view) => {
                let pluginInst = view.plugin(plugin);
                return pluginInst ? deco(pluginInst) : Decoration.none;
              }));
            if (provide)
              ext.push(provide(plugin));
            return ext;
          });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
          return ViewPlugin.define((view) => new cls(view), spec);
        }
      };
      PluginInstance = class {
        constructor(spec) {
          this.spec = spec;
          this.mustUpdate = null;
          this.value = null;
        }
        update(view) {
          if (!this.value) {
            if (this.spec) {
              try {
                this.value = this.spec.create(view);
              } catch (e) {
                logException(view.state, e, "CodeMirror plugin crashed");
                this.deactivate();
              }
            }
          } else if (this.mustUpdate) {
            let update = this.mustUpdate;
            this.mustUpdate = null;
            if (this.value.update) {
              try {
                this.value.update(update);
              } catch (e) {
                logException(update.state, e, "CodeMirror plugin crashed");
                if (this.value.destroy)
                  try {
                    this.value.destroy();
                  } catch (_) {
                  }
                this.deactivate();
              }
            }
          }
          return this;
        }
        destroy(view) {
          var _a2;
          if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
            try {
              this.value.destroy();
            } catch (e) {
              logException(view.state, e, "CodeMirror plugin crashed");
            }
          }
        }
        deactivate() {
          this.spec = this.value = null;
        }
      };
      editorAttributes = /* @__PURE__ */ Facet.define();
      contentAttributes = /* @__PURE__ */ Facet.define();
      decorations = /* @__PURE__ */ Facet.define();
      atomicRanges = /* @__PURE__ */ Facet.define();
      scrollMargins = /* @__PURE__ */ Facet.define();
      styleModule = /* @__PURE__ */ Facet.define();
      ChangedRange = class {
        constructor(fromA, toA, fromB, toB) {
          this.fromA = fromA;
          this.toA = toA;
          this.fromB = fromB;
          this.toB = toB;
        }
        join(other) {
          return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set2) {
          let i = set2.length, me = this;
          for (; i > 0; i--) {
            let range = set2[i - 1];
            if (range.fromA > me.toA)
              continue;
            if (range.toA < me.fromA)
              break;
            me = me.join(range);
            set2.splice(i - 1, 1);
          }
          set2.splice(i, 0, me);
          return set2;
        }
        static extendWithRanges(diff2, ranges) {
          if (ranges.length == 0)
            return diff2;
          let result = [];
          for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
            let next2 = dI == diff2.length ? null : diff2[dI], off = posA - posB;
            let end2 = next2 ? next2.fromB : 1e9;
            while (rI < ranges.length && ranges[rI] < end2) {
              let from3 = ranges[rI], to = ranges[rI + 1];
              let fromB = Math.max(posB, from3), toB = Math.min(end2, to);
              if (fromB <= toB)
                new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
              if (to > end2)
                break;
              else
                rI += 2;
            }
            if (!next2)
              return result;
            new ChangedRange(next2.fromA, next2.toA, next2.fromB, next2.toB).addToSet(result);
            posA = next2.toA;
            posB = next2.toB;
          }
        }
      };
      ViewUpdate = class {
        constructor(view, state, transactions) {
          this.view = view;
          this.state = state;
          this.transactions = transactions;
          this.flags = 0;
          this.startState = view.state;
          this.changes = ChangeSet.empty(this.startState.doc.length);
          for (let tr of transactions)
            this.changes = this.changes.compose(tr.changes);
          let changedRanges = [];
          this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
          this.changedRanges = changedRanges;
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
          return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
          return (this.flags & 4) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
          return (this.flags & 2) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
          return this.docChanged || (this.flags & (8 | 2)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
          return (this.flags & 1) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
          return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
          return this.transactions.some((tr) => tr.selection);
        }
        /**
        @internal
        */
        get empty() {
          return this.flags == 0 && this.transactions.length == 0;
        }
      };
      Direction = /* @__PURE__ */ function(Direction2) {
        Direction2[Direction2["LTR"] = 0] = "LTR";
        Direction2[Direction2["RTL"] = 1] = "RTL";
        return Direction2;
      }(Direction || (Direction = {}));
      LTR = Direction.LTR;
      RTL = Direction.RTL;
      LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
      ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
      Brackets = /* @__PURE__ */ Object.create(null);
      BracketStack = [];
      for (let p of ["()", "[]", "{}"]) {
        let l2 = /* @__PURE__ */ p.charCodeAt(0), r2 = /* @__PURE__ */ p.charCodeAt(1);
        Brackets[l2] = r2;
        Brackets[r2] = -l2;
      }
      BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
      BidiSpan = class {
        /**
        @internal
        */
        constructor(from3, to, level) {
          this.from = from3;
          this.to = to;
          this.level = level;
        }
        /**
        The direction of this span.
        */
        get dir() {
          return this.level % 2 ? RTL : LTR;
        }
        /**
        @internal
        */
        side(end2, dir) {
          return this.dir == dir == end2 ? this.to : this.from;
        }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
          let maybe = -1;
          for (let i = 0; i < order.length; i++) {
            let span = order[i];
            if (span.from <= index && span.to >= index) {
              if (span.level == level)
                return i;
              if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level))
                maybe = i;
            }
          }
          if (maybe < 0)
            throw new RangeError("Index out of range");
          return maybe;
        }
      };
      types = [];
      movedOver = "";
      LineBreakPlaceholder = "\uFFFF";
      DOMReader = class {
        constructor(points, state) {
          this.points = points;
          this.text = "";
          this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
          this.text += text;
        }
        lineBreak() {
          this.text += LineBreakPlaceholder;
        }
        readRange(start2, end2) {
          if (!start2)
            return this;
          let parent = start2.parentNode;
          for (let cur = start2; ; ) {
            this.findPointBefore(parent, cur);
            this.readNode(cur);
            let next2 = cur.nextSibling;
            if (next2 == end2)
              break;
            let view = ContentView.get(cur), nextView = ContentView.get(next2);
            if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur)) || isBlockElement(next2) && (cur.nodeName != "BR" || cur.cmIgnore))
              this.lineBreak();
            cur = next2;
          }
          this.findPointBefore(parent, end2);
          return this;
        }
        readTextNode(node) {
          let text = node.nodeValue;
          for (let point of this.points)
            if (point.node == node)
              point.pos = this.text.length + Math.min(point.offset, text.length);
          for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
            let nextBreak = -1, breakSize = 1, m;
            if (this.lineSeparator) {
              nextBreak = text.indexOf(this.lineSeparator, off);
              breakSize = this.lineSeparator.length;
            } else if (m = re.exec(text)) {
              nextBreak = m.index;
              breakSize = m[0].length;
            }
            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
            if (nextBreak < 0)
              break;
            this.lineBreak();
            if (breakSize > 1) {
              for (let point of this.points)
                if (point.node == node && point.pos > this.text.length)
                  point.pos -= breakSize - 1;
            }
            off = nextBreak + breakSize;
          }
        }
        readNode(node) {
          if (node.cmIgnore)
            return;
          let view = ContentView.get(node);
          let fromView = view && view.overrideDOMText;
          if (fromView != null) {
            this.findPointInside(node, fromView.length);
            for (let i = fromView.iter(); !i.next().done; ) {
              if (i.lineBreak)
                this.lineBreak();
              else
                this.append(i.value);
            }
          } else if (node.nodeType == 3) {
            this.readTextNode(node);
          } else if (node.nodeName == "BR") {
            if (node.nextSibling)
              this.lineBreak();
          } else if (node.nodeType == 1) {
            this.readRange(node.firstChild, null);
          }
        }
        findPointBefore(node, next2) {
          for (let point of this.points)
            if (point.node == node && node.childNodes[point.offset] == next2)
              point.pos = this.text.length;
        }
        findPointInside(node, maxLen) {
          for (let point of this.points)
            if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
              point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
      };
      DOMPoint = class {
        constructor(node, offset2) {
          this.node = node;
          this.offset = offset2;
          this.pos = -1;
        }
      };
      DocView = class extends ContentView {
        constructor(view) {
          super();
          this.view = view;
          this.compositionDeco = Decoration.none;
          this.decorations = [];
          this.dynamicDecorationMap = [];
          this.minWidth = 0;
          this.minWidthFrom = 0;
          this.minWidthTo = 0;
          this.impreciseAnchor = null;
          this.impreciseHead = null;
          this.forceSelection = false;
          this.lastUpdate = Date.now();
          this.setDOM(view.contentDOM);
          this.children = [new LineView()];
          this.children[0].setParent(this);
          this.updateDeco();
          this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
        }
        get length() {
          return this.view.state.doc.length;
        }
        // Update the document view to a given state. scrollIntoView can be
        // used as a hint to compute a new viewport that includes that
        // position, if we know the editor is going to scroll that position
        // into view.
        update(update) {
          let changedRanges = update.changedRanges;
          if (this.minWidth > 0 && changedRanges.length) {
            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
              this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
            } else {
              this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
              this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
            }
          }
          if (this.view.inputState.composing < 0)
            this.compositionDeco = Decoration.none;
          else if (update.transactions.length || this.dirty)
            this.compositionDeco = computeCompositionDeco(this.view, update.changes);
          if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update && update.state.doc.lines != update.startState.doc.lines)
            this.forceSelection = true;
          let prevDeco = this.decorations, deco = this.updateDeco();
          let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
          changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
          if (this.dirty == 0 && changedRanges.length == 0) {
            return false;
          } else {
            this.updateInner(changedRanges, update.startState.doc.length);
            if (update.transactions.length)
              this.lastUpdate = Date.now();
            return true;
          }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength) {
          this.view.viewState.mustMeasureContent = true;
          this.updateChildren(changes, oldLength);
          let { observer } = this.view;
          observer.ignore(() => {
            this.dom.style.height = this.view.viewState.contentHeight + "px";
            this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
            this.sync(this.view, track);
            this.dirty = 0;
            if (track && (track.written || observer.selectionRange.focusNode != track.node))
              this.forceSelection = true;
            this.dom.style.height = "";
          });
          let gaps = [];
          if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
            for (let child of this.children)
              if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                gaps.push(child.dom);
          }
          observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength) {
          let cursor = this.childCursor(oldLength);
          for (let i = changes.length - 1; ; i--) {
            let next2 = i >= 0 ? changes[i] : null;
            if (!next2)
              break;
            let { fromA, toA, fromB, toB } = next2;
            let { content: content3, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
            let { i: toI, off: toOff } = cursor.findPos(toA, 1);
            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
            replaceRange(this, fromI, fromOff, toI, toOff, content3, breakAtStart, openStart, openEnd);
          }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
          if (mustRead || !this.view.observer.selectionRange.focusNode)
            this.view.observer.readSelectionRange();
          if (!(fromPointer || this.mayControlSelection()))
            return;
          let force = this.forceSelection;
          this.forceSelection = false;
          let main = this.view.state.selection.main;
          let anchor = this.domAtPos(main.anchor);
          let head = main.empty ? anchor : this.domAtPos(main.head);
          if (browser.gecko && main.empty && betweenUneditable(anchor)) {
            let dummy = document.createTextNode("");
            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
            anchor = head = new DOMPos(dummy, 0);
            force = true;
          }
          let domSel = this.view.observer.selectionRange;
          if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
            this.view.observer.ignore(() => {
              if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
                this.dom.blur();
                this.dom.focus({ preventScroll: true });
              }
              let rawSel = getSelection(this.view.root);
              if (!rawSel)
                ;
              else if (main.empty) {
                if (browser.gecko) {
                  let nextTo = nextToUneditable(anchor.node, anchor.offset);
                  if (nextTo && nextTo != (1 | 2)) {
                    let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 ? 1 : -1);
                    if (text)
                      anchor = new DOMPos(text, nextTo == 1 ? 0 : text.nodeValue.length);
                  }
                }
                rawSel.collapse(anchor.node, anchor.offset);
                if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                  domSel.cursorBidiLevel = main.bidiLevel;
              } else if (rawSel.extend) {
                rawSel.collapse(anchor.node, anchor.offset);
                try {
                  rawSel.extend(head.node, head.offset);
                } catch (_) {
                }
              } else {
                let range = document.createRange();
                if (main.anchor > main.head)
                  [anchor, head] = [head, anchor];
                range.setEnd(head.node, head.offset);
                range.setStart(anchor.node, anchor.offset);
                rawSel.removeAllRanges();
                rawSel.addRange(range);
              }
            });
            this.view.observer.setSelectionRange(anchor, head);
          }
          this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
          this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
          if (this.compositionDeco.size)
            return;
          let { view } = this, cursor = view.state.selection.main;
          let sel = getSelection(view.root);
          let { anchorNode, anchorOffset } = view.observer.selectionRange;
          if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
            return;
          let line = LineView.find(this, cursor.head);
          if (!line)
            return;
          let lineStart = line.posAtStart;
          if (cursor.head == lineStart || cursor.head == lineStart + line.length)
            return;
          let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
          if (!before || !after || before.bottom > after.top)
            return;
          let dom = this.domAtPos(cursor.head + cursor.assoc);
          sel.collapse(dom.node, dom.offset);
          sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
          view.observer.readSelectionRange();
          let newRange = view.observer.selectionRange;
          if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
            sel.collapse(anchorNode, anchorOffset);
        }
        mayControlSelection() {
          let active = this.view.root.activeElement;
          return active == this.dom || hasSelection(this.dom, this.view.observer.selectionRange) && !(active && this.dom.contains(active));
        }
        nearest(dom) {
          for (let cur = dom; cur; ) {
            let domView = ContentView.get(cur);
            if (domView && domView.rootView == this)
              return domView;
            cur = cur.parentNode;
          }
          return null;
        }
        posFromDOM(node, offset2) {
          let view = this.nearest(node);
          if (!view)
            throw new RangeError("Trying to find position for a DOM position outside of the document");
          return view.localPosFromDOM(node, offset2) + view.posAtStart;
        }
        domAtPos(pos) {
          let { i, off } = this.childCursor().findPos(pos, -1);
          for (; i < this.children.length - 1; ) {
            let child = this.children[i];
            if (off < child.length || child instanceof LineView)
              break;
            i++;
            off = 0;
          }
          return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
          for (let off = this.length, i = this.children.length - 1; ; i--) {
            let child = this.children[i], start2 = off - child.breakAfter - child.length;
            if (pos > start2 || pos == start2 && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2))
              return child.coordsAt(pos - start2, side);
            off = start2;
          }
        }
        measureVisibleLineHeights(viewport) {
          let result = [], { from: from3, to } = viewport;
          let contentWidth = this.view.contentDOM.clientWidth;
          let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
          let widest = -1, ltr = this.view.textDirection == Direction.LTR;
          for (let pos = 0, i = 0; i < this.children.length; i++) {
            let child = this.children[i], end2 = pos + child.length;
            if (end2 > to)
              break;
            if (pos >= from3) {
              let childRect = child.dom.getBoundingClientRect();
              result.push(childRect.height);
              if (isWider) {
                let last = child.dom.lastChild;
                let rects = last ? clientRectsFor(last) : [];
                if (rects.length) {
                  let rect = rects[rects.length - 1];
                  let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                  if (width > widest) {
                    widest = width;
                    this.minWidth = contentWidth;
                    this.minWidthFrom = pos;
                    this.minWidthTo = end2;
                  }
                }
              }
            }
            pos = end2 + child.breakAfter;
          }
          return result;
        }
        textDirectionAt(pos) {
          let { i } = this.childPos(pos, 1);
          return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
          for (let child of this.children) {
            if (child instanceof LineView) {
              let measure = child.measureTextSize();
              if (measure)
                return measure;
            }
          }
          let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
          dummy.className = "cm-line";
          dummy.style.width = "99999px";
          dummy.textContent = "abc def ghi jkl mno pqr stu";
          this.view.observer.ignore(() => {
            this.dom.appendChild(dummy);
            let rect = clientRectsFor(dummy.firstChild)[0];
            lineHeight = dummy.getBoundingClientRect().height;
            charWidth = rect ? rect.width / 27 : 7;
            textHeight = rect ? rect.height : lineHeight;
            dummy.remove();
          });
          return { lineHeight, charWidth, textHeight };
        }
        childCursor(pos = this.length) {
          let i = this.children.length;
          if (i)
            pos -= this.children[--i].length;
          return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
          let deco = [], vs = this.view.viewState;
          for (let pos = 0, i = 0; ; i++) {
            let next2 = i == vs.viewports.length ? null : vs.viewports[i];
            let end2 = next2 ? next2.from - 1 : this.length;
            if (end2 > pos) {
              let height = vs.lineBlockAt(end2).bottom - vs.lineBlockAt(pos).top;
              deco.push(Decoration.replace({
                widget: new BlockGapWidget(height),
                block: true,
                inclusive: true,
                isBlockGap: true
              }).range(pos, end2));
            }
            if (!next2)
              break;
            pos = next2.to + 1;
          }
          return Decoration.set(deco);
        }
        updateDeco() {
          let allDeco = this.view.state.facet(decorations).map((d3, i) => {
            let dynamic = this.dynamicDecorationMap[i] = typeof d3 == "function";
            return dynamic ? d3(this.view) : d3;
          });
          for (let i = allDeco.length; i < allDeco.length + 3; i++)
            this.dynamicDecorationMap[i] = false;
          return this.decorations = [
            ...allDeco,
            this.compositionDeco,
            this.computeBlockGapDeco(),
            this.view.viewState.lineGapDeco
          ];
        }
        scrollIntoView(target) {
          let { range } = target;
          let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
          if (!rect)
            return;
          if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
            rect = {
              left: Math.min(rect.left, other.left),
              top: Math.min(rect.top, other.top),
              right: Math.max(rect.right, other.right),
              bottom: Math.max(rect.bottom, other.bottom)
            };
          let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
          for (let margins of this.view.state.facet(scrollMargins).map((f) => f(this.view)))
            if (margins) {
              let { left, right, top: top3, bottom } = margins;
              if (left != null)
                mLeft = Math.max(mLeft, left);
              if (right != null)
                mRight = Math.max(mRight, right);
              if (top3 != null)
                mTop = Math.max(mTop, top3);
              if (bottom != null)
                mBottom = Math.max(mBottom, bottom);
            }
          let targetRect = {
            left: rect.left - mLeft,
            top: rect.top - mTop,
            right: rect.right + mRight,
            bottom: rect.bottom + mBottom
          };
          scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
        }
      };
      BlockGapWidget = class extends WidgetType {
        constructor(height) {
          super();
          this.height = height;
        }
        toDOM() {
          let elt2 = document.createElement("div");
          this.updateDOM(elt2);
          return elt2;
        }
        eq(other) {
          return other.height == this.height;
        }
        updateDOM(elt2) {
          elt2.style.height = this.height + "px";
          return true;
        }
        get estimatedHeight() {
          return this.height;
        }
      };
      CompositionWidget = class extends WidgetType {
        constructor(top3, text, topView) {
          super();
          this.top = top3;
          this.text = text;
          this.topView = topView;
        }
        eq(other) {
          return this.top == other.top && this.text == other.text;
        }
        toDOM() {
          return this.top;
        }
        ignoreEvent() {
          return false;
        }
        get customView() {
          return CompositionView;
        }
      };
      DecorationComparator$1 = class {
        constructor() {
          this.changes = [];
        }
        compareRange(from3, to) {
          addRange(from3, to, this.changes);
        }
        comparePoint(from3, to) {
          addRange(from3, to, this.changes);
        }
      };
      InputState = class {
        constructor(view) {
          this.lastKeyCode = 0;
          this.lastKeyTime = 0;
          this.lastTouchTime = 0;
          this.lastFocusTime = 0;
          this.lastScrollTop = 0;
          this.lastScrollLeft = 0;
          this.chromeScrollHack = -1;
          this.pendingIOSKey = void 0;
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastEscPress = 0;
          this.lastContextMenu = 0;
          this.scrollHandlers = [];
          this.registeredEvents = [];
          this.customHandlers = [];
          this.composing = -1;
          this.compositionFirstChange = null;
          this.compositionEndedAt = 0;
          this.mouseSelection = null;
          let handleEvent = (handler, event) => {
            if (this.ignoreDuringComposition(event))
              return;
            if (event.type == "keydown" && this.keydown(view, event))
              return;
            if (this.mustFlushObserver(event))
              view.observer.forceFlush();
            if (this.runCustomHandlers(event.type, view, event))
              event.preventDefault();
            else
              handler(view, event);
          };
          for (let type7 in handlers) {
            let handler = handlers[type7];
            view.contentDOM.addEventListener(type7, (event) => {
              if (eventBelongsToEditor(view, event))
                handleEvent(handler, event);
            }, handlerOptions[type7]);
            this.registeredEvents.push(type7);
          }
          view.scrollDOM.addEventListener("mousedown", (event) => {
            if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
              handleEvent(handlers.mousedown, event);
              if (!event.defaultPrevented && event.button == 2) {
                let start2 = view.contentDOM.style.minHeight;
                view.contentDOM.style.minHeight = "100%";
                setTimeout(() => view.contentDOM.style.minHeight = start2, 200);
              }
            }
          });
          if (browser.chrome && browser.chrome_version == 102) {
            view.scrollDOM.addEventListener("wheel", () => {
              if (this.chromeScrollHack < 0)
                view.contentDOM.style.pointerEvents = "none";
              else
                window.clearTimeout(this.chromeScrollHack);
              this.chromeScrollHack = setTimeout(() => {
                this.chromeScrollHack = -1;
                view.contentDOM.style.pointerEvents = "";
              }, 100);
            }, { passive: true });
          }
          this.notifiedFocused = view.hasFocus;
          if (browser.safari)
            view.contentDOM.addEventListener("input", () => null);
        }
        setSelectionOrigin(origin) {
          this.lastSelectionOrigin = origin;
          this.lastSelectionTime = Date.now();
        }
        ensureHandlers(view, plugins) {
          var _a2;
          let handlers2;
          this.customHandlers = [];
          for (let plugin of plugins)
            if (handlers2 = (_a2 = plugin.update(view).spec) === null || _a2 === void 0 ? void 0 : _a2.domEventHandlers) {
              this.customHandlers.push({ plugin: plugin.value, handlers: handlers2 });
              for (let type7 in handlers2)
                if (this.registeredEvents.indexOf(type7) < 0 && type7 != "scroll") {
                  this.registeredEvents.push(type7);
                  view.contentDOM.addEventListener(type7, (event) => {
                    if (!eventBelongsToEditor(view, event))
                      return;
                    if (this.runCustomHandlers(type7, view, event))
                      event.preventDefault();
                  });
                }
            }
        }
        runCustomHandlers(type7, view, event) {
          for (let set2 of this.customHandlers) {
            let handler = set2.handlers[type7];
            if (handler) {
              try {
                if (handler.call(set2.plugin, event, view) || event.defaultPrevented)
                  return true;
              } catch (e) {
                logException(view.state, e);
              }
            }
          }
          return false;
        }
        runScrollHandlers(view, event) {
          this.lastScrollTop = view.scrollDOM.scrollTop;
          this.lastScrollLeft = view.scrollDOM.scrollLeft;
          for (let set2 of this.customHandlers) {
            let handler = set2.handlers.scroll;
            if (handler) {
              try {
                handler.call(set2.plugin, event, view);
              } catch (e) {
                logException(view.state, e);
              }
            }
          }
        }
        keydown(view, event) {
          this.lastKeyCode = event.keyCode;
          this.lastKeyTime = Date.now();
          if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2e3)
            return true;
          if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
            view.observer.delayAndroidKey(event.key, event.keyCode);
            return true;
          }
          let pending;
          if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key) => key.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
            this.pendingIOSKey = pending || event;
            setTimeout(() => this.flushIOSKey(view), 250);
            return true;
          }
          return false;
        }
        flushIOSKey(view) {
          let key = this.pendingIOSKey;
          if (!key)
            return false;
          this.pendingIOSKey = void 0;
          return dispatchKey(view.contentDOM, key.key, key.keyCode);
        }
        ignoreDuringComposition(event) {
          if (!/^key/.test(event.type))
            return false;
          if (this.composing > 0)
            return true;
          if (browser.safari && !browser.ios && Date.now() - this.compositionEndedAt < 100) {
            this.compositionEndedAt = 0;
            return true;
          }
          return false;
        }
        mustFlushObserver(event) {
          return event.type == "keydown" && event.keyCode != 229;
        }
        startMouseSelection(mouseSelection) {
          if (this.mouseSelection)
            this.mouseSelection.destroy();
          this.mouseSelection = mouseSelection;
        }
        update(update) {
          if (this.mouseSelection)
            this.mouseSelection.update(update);
          if (update.transactions.length)
            this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
          if (this.mouseSelection)
            this.mouseSelection.destroy();
        }
      };
      PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
      ];
      EmacsyPendingKeys = "dthko";
      modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
      MouseSelection = class {
        constructor(view, startEvent, style2, mustSelect) {
          this.view = view;
          this.style = style2;
          this.mustSelect = mustSelect;
          this.scrollSpeed = { x: 0, y: 0 };
          this.scrolling = -1;
          this.lastEvent = startEvent;
          this.scrollParent = scrollableParent(view.contentDOM);
          let doc2 = view.contentDOM.ownerDocument;
          doc2.addEventListener("mousemove", this.move = this.move.bind(this));
          doc2.addEventListener("mouseup", this.up = this.up.bind(this));
          this.extend = startEvent.shiftKey;
          this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
          this.dragMove = dragMovesSelection(view, startEvent);
          this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
        }
        start(event) {
          if (this.dragging === false) {
            event.preventDefault();
            this.select(event);
          }
        }
        move(event) {
          var _a2;
          if (event.buttons == 0)
            return this.destroy();
          if (this.dragging !== false)
            return;
          this.select(this.lastEvent = event);
          let sx = 0, sy = 0;
          let rect = ((_a2 = this.scrollParent) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
          if (event.clientX <= rect.left)
            sx = -dragScrollSpeed(rect.left - event.clientX);
          else if (event.clientX >= rect.right)
            sx = dragScrollSpeed(event.clientX - rect.right);
          if (event.clientY <= rect.top)
            sy = -dragScrollSpeed(rect.top - event.clientY);
          else if (event.clientY >= rect.bottom)
            sy = dragScrollSpeed(event.clientY - rect.bottom);
          this.setScrollSpeed(sx, sy);
        }
        up(event) {
          if (this.dragging == null)
            this.select(this.lastEvent);
          if (!this.dragging)
            event.preventDefault();
          this.destroy();
        }
        destroy() {
          this.setScrollSpeed(0, 0);
          let doc2 = this.view.contentDOM.ownerDocument;
          doc2.removeEventListener("mousemove", this.move);
          doc2.removeEventListener("mouseup", this.up);
          this.view.inputState.mouseSelection = null;
        }
        setScrollSpeed(sx, sy) {
          this.scrollSpeed = { x: sx, y: sy };
          if (sx || sy) {
            if (this.scrolling < 0)
              this.scrolling = setInterval(() => this.scroll(), 50);
          } else if (this.scrolling > -1) {
            clearInterval(this.scrolling);
            this.scrolling = -1;
          }
        }
        scroll() {
          if (this.scrollParent) {
            this.scrollParent.scrollLeft += this.scrollSpeed.x;
            this.scrollParent.scrollTop += this.scrollSpeed.y;
          } else {
            this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
          }
          if (this.dragging === false)
            this.select(this.lastEvent);
        }
        select(event) {
          let selection = this.style.get(event, this.extend, this.multiple);
          if (this.mustSelect || !selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc)
            this.view.dispatch({
              selection,
              userEvent: "select.pointer"
            });
          this.mustSelect = false;
        }
        update(update) {
          if (update.docChanged && this.dragging)
            this.dragging = this.dragging.map(update.changes);
          if (this.style.update(update))
            setTimeout(() => this.select(this.lastEvent), 20);
        }
      };
      handlers = /* @__PURE__ */ Object.create(null);
      handlerOptions = /* @__PURE__ */ Object.create(null);
      brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
      handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27)
          view.inputState.lastEscPress = Date.now();
        else if (modifierCodes.indexOf(event.keyCode) < 0)
          view.inputState.lastEscPress = 0;
      };
      handlers.touchstart = (view, e) => {
        view.inputState.lastTouchTime = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
      };
      handlers.touchmove = (view) => {
        view.inputState.setSelectionOrigin("select.pointer");
      };
      handlerOptions.touchstart = handlerOptions.touchmove = { passive: true };
      handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (view.inputState.lastTouchTime > Date.now() - 2e3)
          return;
        let style2 = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
          style2 = makeStyle(view, event);
          if (style2)
            break;
        }
        if (!style2 && event.button == 0)
          style2 = basicMouseSelection(view, event);
        if (style2) {
          let mustFocus = view.root.activeElement != view.contentDOM;
          view.inputState.startMouseSelection(new MouseSelection(view, event, style2, mustFocus));
          if (mustFocus)
            view.observer.ignore(() => focusPreventScroll(view.contentDOM));
          if (view.inputState.mouseSelection)
            view.inputState.mouseSelection.start(event);
        }
      };
      insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
      inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
      BadMouseDetail = browser.ie && browser.ie_version <= 11;
      lastMouseDown = null;
      lastMouseDownCount = 0;
      lastMouseDownTime = 0;
      handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
          mouseSelection.dragging = main;
        if (event.dataTransfer) {
          event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
          event.dataTransfer.effectAllowed = "copyMove";
        }
      };
      handlers.drop = (view, event) => {
        if (!event.dataTransfer)
          return;
        if (view.state.readOnly)
          return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) {
          event.preventDefault();
          let text = Array(files.length), read = 0;
          let finishFile = () => {
            if (++read == files.length)
              dropText(view, event, text.filter((s2) => s2 != null).join(view.state.lineBreak), false);
          };
          for (let i = 0; i < files.length; i++) {
            let reader = new FileReader();
            reader.onerror = finishFile;
            reader.onload = () => {
              if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                text[i] = reader.result;
              finishFile();
            };
            reader.readAsText(files[i]);
          }
        } else {
          dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
      };
      handlers.paste = (view, event) => {
        if (view.state.readOnly)
          return event.preventDefault();
        view.observer.flush();
        let data2 = brokenClipboardAPI ? null : event.clipboardData;
        if (data2) {
          doPaste(view, data2.getData("text/plain") || data2.getData("text/uri-text"));
          event.preventDefault();
        } else {
          capturePaste(view);
        }
      };
      lastLinewiseCopy = null;
      handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
          return;
        lastLinewiseCopy = linewise ? text : null;
        let data2 = brokenClipboardAPI ? null : event.clipboardData;
        if (data2) {
          event.preventDefault();
          data2.clearData();
          data2.setData("text/plain", text);
        } else {
          captureCopy(view, text);
        }
        if (event.type == "cut" && !view.state.readOnly)
          view.dispatch({
            changes: ranges,
            scrollIntoView: true,
            userEvent: "delete.cut"
          });
      };
      isFocusChange = /* @__PURE__ */ Annotation.define();
      handlers.focus = (view) => {
        view.inputState.lastFocusTime = Date.now();
        if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
          view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
          view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
        }
        updateForFocusChange(view);
      };
      handlers.blur = (view) => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
      };
      handlers.compositionstart = handlers.compositionupdate = (view) => {
        if (view.inputState.compositionFirstChange == null)
          view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
          view.inputState.composing = 0;
        }
      };
      handlers.compositionend = (view) => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionFirstChange = null;
        if (browser.chrome && browser.android)
          view.observer.flushSoon();
        setTimeout(() => {
          if (view.inputState.composing < 0 && view.docView.compositionDeco.size)
            view.update([]);
        }, 50);
      };
      handlers.contextmenu = (view) => {
        view.inputState.lastContextMenu = Date.now();
      };
      handlers.beforeinput = (view, event) => {
        var _a2;
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find((key) => key.inputType == event.inputType))) {
          view.observer.delayAndroidKey(pending.key, pending.keyCode);
          if (pending.key == "Backspace" || pending.key == "Delete") {
            let startViewHeight = ((_a2 = window.visualViewport) === null || _a2 === void 0 ? void 0 : _a2.height) || 0;
            setTimeout(() => {
              var _a3;
              if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                view.contentDOM.blur();
                view.focus();
              }
            }, 100);
          }
        }
      };
      wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
      HeightOracle = class {
        constructor(lineWrapping) {
          this.lineWrapping = lineWrapping;
          this.doc = Text.empty;
          this.heightSamples = {};
          this.lineHeight = 14;
          this.charWidth = 7;
          this.textHeight = 14;
          this.lineLength = 30;
          this.heightChanged = false;
        }
        heightForGap(from3, to) {
          let lines = this.doc.lineAt(to).number - this.doc.lineAt(from3).number + 1;
          if (this.lineWrapping)
            lines += Math.max(0, Math.ceil((to - from3 - lines * this.lineLength * 0.5) / this.lineLength));
          return this.lineHeight * lines;
        }
        heightForLine(length) {
          if (!this.lineWrapping)
            return this.lineHeight;
          let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
          return lines * this.lineHeight;
        }
        setDoc(doc2) {
          this.doc = doc2;
          return this;
        }
        mustRefreshForWrapping(whiteSpace) {
          return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
          let newHeight = false;
          for (let i = 0; i < lineHeights.length; i++) {
            let h = lineHeights[i];
            if (h < 0) {
              i++;
            } else if (!this.heightSamples[Math.floor(h * 10)]) {
              newHeight = true;
              this.heightSamples[Math.floor(h * 10)] = true;
            }
          }
          return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
          let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
          let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
          this.lineWrapping = lineWrapping;
          this.lineHeight = lineHeight;
          this.charWidth = charWidth;
          this.textHeight = textHeight;
          this.lineLength = lineLength;
          if (changed) {
            this.heightSamples = {};
            for (let i = 0; i < knownHeights.length; i++) {
              let h = knownHeights[i];
              if (h < 0)
                i++;
              else
                this.heightSamples[Math.floor(h * 10)] = true;
            }
          }
          return changed;
        }
      };
      MeasuredHeights = class {
        constructor(from3, heights) {
          this.from = from3;
          this.heights = heights;
          this.index = 0;
        }
        get more() {
          return this.index < this.heights.length;
        }
      };
      BlockInfo = class {
        /**
        @internal
        */
        constructor(from3, length, top3, height, type7) {
          this.from = from3;
          this.length = length;
          this.top = top3;
          this.height = height;
          this.type = type7;
        }
        /**
        The end of the element as a document position.
        */
        get to() {
          return this.from + this.length;
        }
        /**
        The bottom position of the element.
        */
        get bottom() {
          return this.top + this.height;
        }
        /**
        @internal
        */
        join(other) {
          let detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
          return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
        }
      };
      QueryType = /* @__PURE__ */ function(QueryType2) {
        QueryType2[QueryType2["ByPos"] = 0] = "ByPos";
        QueryType2[QueryType2["ByHeight"] = 1] = "ByHeight";
        QueryType2[QueryType2["ByPosNoHeight"] = 2] = "ByPosNoHeight";
        return QueryType2;
      }(QueryType || (QueryType = {}));
      Epsilon = 1e-3;
      HeightMap = class {
        constructor(length, height, flags = 2) {
          this.length = length;
          this.height = height;
          this.flags = flags;
        }
        get outdated() {
          return (this.flags & 2) > 0;
        }
        set outdated(value) {
          this.flags = (value ? 2 : 0) | this.flags & ~2;
        }
        setHeight(oracle, height) {
          if (this.height != height) {
            if (Math.abs(this.height - height) > Epsilon)
              oracle.heightChanged = true;
            this.height = height;
          }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
          return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) {
          result.push(this);
        }
        decomposeRight(_from, result) {
          result.push(this);
        }
        applyChanges(decorations2, oldDoc, oracle, changes) {
          let me = this, doc2 = oracle.doc;
          for (let i = changes.length - 1; i >= 0; i--) {
            let { fromA, toA, fromB, toB } = changes[i];
            let start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
            let end2 = start2.to >= toA ? start2 : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
            toB += end2.to - toA;
            toA = end2.to;
            while (i > 0 && start2.from <= changes[i - 1].toA) {
              fromA = changes[i - 1].fromA;
              fromB = changes[i - 1].fromB;
              i--;
              if (fromA < start2.from)
                start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
            }
            fromB += start2.from - fromA;
            fromA = start2.from;
            let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
            me = me.replace(fromA, toA, nodes);
          }
          return me.updateHeight(oracle, 0);
        }
        static empty() {
          return new HeightMapText(0, 0);
        }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
          if (nodes.length == 1)
            return nodes[0];
          let i = 0, j = nodes.length, before = 0, after = 0;
          for (; ; ) {
            if (i == j) {
              if (before > after * 2) {
                let split = nodes[i - 1];
                if (split.break)
                  nodes.splice(--i, 1, split.left, null, split.right);
                else
                  nodes.splice(--i, 1, split.left, split.right);
                j += 1 + split.break;
                before -= split.size;
              } else if (after > before * 2) {
                let split = nodes[j];
                if (split.break)
                  nodes.splice(j, 1, split.left, null, split.right);
                else
                  nodes.splice(j, 1, split.left, split.right);
                j += 2 + split.break;
                after -= split.size;
              } else {
                break;
              }
            } else if (before < after) {
              let next2 = nodes[i++];
              if (next2)
                before += next2.size;
            } else {
              let next2 = nodes[--j];
              if (next2)
                after += next2.size;
            }
          }
          let brk = 0;
          if (nodes[i - 1] == null) {
            brk = 1;
            i--;
          } else if (nodes[i] == null) {
            brk = 1;
            j++;
          }
          return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
      };
      HeightMap.prototype.size = 1;
      HeightMapBlock = class extends HeightMap {
        constructor(length, height, type7) {
          super(length, height);
          this.type = type7;
        }
        blockAt(_height, _oracle, top3, offset2) {
          return new BlockInfo(offset2, this.length, top3, this.height, this.type);
        }
        lineAt(_value, _type, oracle, top3, offset2) {
          return this.blockAt(0, oracle, top3, offset2);
        }
        forEachLine(from3, to, oracle, top3, offset2, f) {
          if (from3 <= offset2 + this.length && to >= offset2)
            f(this.blockAt(0, oracle, top3, offset2));
        }
        updateHeight(oracle, offset2 = 0, _force = false, measured) {
          if (measured && measured.from <= offset2 && measured.more)
            this.setHeight(oracle, measured.heights[measured.index++]);
          this.outdated = false;
          return this;
        }
        toString() {
          return `block(${this.length})`;
        }
      };
      HeightMapText = class extends HeightMapBlock {
        constructor(length, height) {
          super(length, height, BlockType.Text);
          this.collapsed = 0;
          this.widgetHeight = 0;
        }
        replace(_from, _to, nodes) {
          let node = nodes[0];
          if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
            if (node instanceof HeightMapGap)
              node = new HeightMapText(node.length, this.height);
            else
              node.height = this.height;
            if (!this.outdated)
              node.outdated = false;
            return node;
          } else {
            return HeightMap.of(nodes);
          }
        }
        updateHeight(oracle, offset2 = 0, force = false, measured) {
          if (measured && measured.from <= offset2 && measured.more)
            this.setHeight(oracle, measured.heights[measured.index++]);
          else if (force || this.outdated)
            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
          this.outdated = false;
          return this;
        }
        toString() {
          return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
      };
      HeightMapGap = class extends HeightMap {
        constructor(length) {
          super(length, 0);
        }
        heightMetrics(oracle, offset2) {
          let firstLine = oracle.doc.lineAt(offset2).number, lastLine = oracle.doc.lineAt(offset2 + this.length).number;
          let lines = lastLine - firstLine + 1;
          let perLine, perChar = 0;
          if (oracle.lineWrapping) {
            let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
            perLine = totalPerLine / lines;
            perChar = (this.height - totalPerLine) / (this.length - lines - 1);
          } else {
            perLine = this.height / lines;
          }
          return { firstLine, lastLine, perLine, perChar };
        }
        blockAt(height, oracle, top3, offset2) {
          let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset2);
          if (oracle.lineWrapping) {
            let guess = offset2 + Math.round(Math.max(0, Math.min(1, (height - top3) / this.height)) * this.length);
            let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
            let lineTop = Math.max(top3, height - lineHeight / 2);
            return new BlockInfo(line.from, line.length, lineTop, lineHeight, BlockType.Text);
          } else {
            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top3) / perLine)));
            let { from: from3, length } = oracle.doc.line(firstLine + line);
            return new BlockInfo(from3, length, top3 + perLine * line, perLine, BlockType.Text);
          }
        }
        lineAt(value, type7, oracle, top3, offset2) {
          if (type7 == QueryType.ByHeight)
            return this.blockAt(value, oracle, top3, offset2);
          if (type7 == QueryType.ByPosNoHeight) {
            let { from: from3, to } = oracle.doc.lineAt(value);
            return new BlockInfo(from3, to - from3, 0, 0, BlockType.Text);
          }
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset2);
          let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
          let linesAbove = line.number - firstLine;
          let lineTop = top3 + perLine * linesAbove + perChar * (line.from - offset2 - linesAbove);
          return new BlockInfo(line.from, line.length, Math.max(top3, Math.min(lineTop, top3 + this.height - lineHeight)), lineHeight, BlockType.Text);
        }
        forEachLine(from3, to, oracle, top3, offset2, f) {
          from3 = Math.max(from3, offset2);
          to = Math.min(to, offset2 + this.length);
          let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset2);
          for (let pos = from3, lineTop = top3; pos <= to; ) {
            let line = oracle.doc.lineAt(pos);
            if (pos == from3) {
              let linesAbove = line.number - firstLine;
              lineTop += perLine * linesAbove + perChar * (from3 - offset2 - linesAbove);
            }
            let lineHeight = perLine + perChar * line.length;
            f(new BlockInfo(line.from, line.length, lineTop, lineHeight, BlockType.Text));
            lineTop += lineHeight;
            pos = line.to + 1;
          }
        }
        replace(from3, to, nodes) {
          let after = this.length - to;
          if (after > 0) {
            let last = nodes[nodes.length - 1];
            if (last instanceof HeightMapGap)
              nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
            else
              nodes.push(null, new HeightMapGap(after - 1));
          }
          if (from3 > 0) {
            let first = nodes[0];
            if (first instanceof HeightMapGap)
              nodes[0] = new HeightMapGap(from3 + first.length);
            else
              nodes.unshift(new HeightMapGap(from3 - 1), null);
          }
          return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
          result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from3, result) {
          result.push(null, new HeightMapGap(this.length - from3 - 1));
        }
        updateHeight(oracle, offset2 = 0, force = false, measured) {
          let end2 = offset2 + this.length;
          if (measured && measured.from <= offset2 + this.length && measured.more) {
            let nodes = [], pos = Math.max(offset2, measured.from), singleHeight = -1;
            if (measured.from > offset2)
              nodes.push(new HeightMapGap(measured.from - offset2 - 1).updateHeight(oracle, offset2));
            while (pos <= end2 && measured.more) {
              let len = oracle.doc.lineAt(pos).length;
              if (nodes.length)
                nodes.push(null);
              let height = measured.heights[measured.index++];
              if (singleHeight == -1)
                singleHeight = height;
              else if (Math.abs(height - singleHeight) >= Epsilon)
                singleHeight = -2;
              let line = new HeightMapText(len, height);
              line.outdated = false;
              nodes.push(line);
              pos += len + 1;
            }
            if (pos <= end2)
              nodes.push(null, new HeightMapGap(end2 - pos).updateHeight(oracle, pos));
            let result = HeightMap.of(nodes);
            if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset2).perLine) >= Epsilon)
              oracle.heightChanged = true;
            return result;
          } else if (force || this.outdated) {
            this.setHeight(oracle, oracle.heightForGap(offset2, offset2 + this.length));
            this.outdated = false;
          }
          return this;
        }
        toString() {
          return `gap(${this.length})`;
        }
      };
      HeightMapBranch = class extends HeightMap {
        constructor(left, brk, right) {
          super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 : 0));
          this.left = left;
          this.right = right;
          this.size = left.size + right.size;
        }
        get break() {
          return this.flags & 1;
        }
        blockAt(height, oracle, top3, offset2) {
          let mid = top3 + this.left.height;
          return height < mid ? this.left.blockAt(height, oracle, top3, offset2) : this.right.blockAt(height, oracle, mid, offset2 + this.left.length + this.break);
        }
        lineAt(value, type7, oracle, top3, offset2) {
          let rightTop = top3 + this.left.height, rightOffset = offset2 + this.left.length + this.break;
          let left = type7 == QueryType.ByHeight ? value < rightTop : value < rightOffset;
          let base4 = left ? this.left.lineAt(value, type7, oracle, top3, offset2) : this.right.lineAt(value, type7, oracle, rightTop, rightOffset);
          if (this.break || (left ? base4.to < rightOffset : base4.from > rightOffset))
            return base4;
          let subQuery = type7 == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
          if (left)
            return base4.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
          else
            return this.left.lineAt(rightOffset, subQuery, oracle, top3, offset2).join(base4);
        }
        forEachLine(from3, to, oracle, top3, offset2, f) {
          let rightTop = top3 + this.left.height, rightOffset = offset2 + this.left.length + this.break;
          if (this.break) {
            if (from3 < rightOffset)
              this.left.forEachLine(from3, to, oracle, top3, offset2, f);
            if (to >= rightOffset)
              this.right.forEachLine(from3, to, oracle, rightTop, rightOffset, f);
          } else {
            let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top3, offset2);
            if (from3 < mid.from)
              this.left.forEachLine(from3, mid.from - 1, oracle, top3, offset2, f);
            if (mid.to >= from3 && mid.from <= to)
              f(mid);
            if (to > mid.to)
              this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
          }
        }
        replace(from3, to, nodes) {
          let rightStart = this.left.length + this.break;
          if (to < rightStart)
            return this.balanced(this.left.replace(from3, to, nodes), this.right);
          if (from3 > this.left.length)
            return this.balanced(this.left, this.right.replace(from3 - rightStart, to - rightStart, nodes));
          let result = [];
          if (from3 > 0)
            this.decomposeLeft(from3, result);
          let left = result.length;
          for (let node of nodes)
            result.push(node);
          if (from3 > 0)
            mergeGaps(result, left - 1);
          if (to < this.length) {
            let right = result.length;
            this.decomposeRight(to, result);
            mergeGaps(result, right);
          }
          return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
          let left = this.left.length;
          if (to <= left)
            return this.left.decomposeLeft(to, result);
          result.push(this.left);
          if (this.break) {
            left++;
            if (to >= left)
              result.push(null);
          }
          if (to > left)
            this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from3, result) {
          let left = this.left.length, right = left + this.break;
          if (from3 >= right)
            return this.right.decomposeRight(from3 - right, result);
          if (from3 < left)
            this.left.decomposeRight(from3, result);
          if (this.break && from3 < right)
            result.push(null);
          result.push(this.right);
        }
        balanced(left, right) {
          if (left.size > 2 * right.size || right.size > 2 * left.size)
            return HeightMap.of(this.break ? [left, null, right] : [left, right]);
          this.left = left;
          this.right = right;
          this.height = left.height + right.height;
          this.outdated = left.outdated || right.outdated;
          this.size = left.size + right.size;
          this.length = left.length + this.break + right.length;
          return this;
        }
        updateHeight(oracle, offset2 = 0, force = false, measured) {
          let { left, right } = this, rightStart = offset2 + left.length + this.break, rebalance = null;
          if (measured && measured.from <= offset2 + left.length && measured.more)
            rebalance = left = left.updateHeight(oracle, offset2, force, measured);
          else
            left.updateHeight(oracle, offset2, force);
          if (measured && measured.from <= rightStart + right.length && measured.more)
            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
          else
            right.updateHeight(oracle, rightStart, force);
          if (rebalance)
            return this.balanced(left, right);
          this.height = this.left.height + this.right.height;
          this.outdated = false;
          return this;
        }
        toString() {
          return this.left + (this.break ? " " : "-") + this.right;
        }
      };
      relevantWidgetHeight = 5;
      NodeBuilder = class {
        constructor(pos, oracle) {
          this.pos = pos;
          this.oracle = oracle;
          this.nodes = [];
          this.lineStart = -1;
          this.lineEnd = -1;
          this.covering = null;
          this.writtenTo = pos;
        }
        get isCovered() {
          return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
          if (this.lineStart > -1) {
            let end2 = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
            if (last instanceof HeightMapText)
              last.length += end2 - this.pos;
            else if (end2 > this.pos || !this.isCovered)
              this.nodes.push(new HeightMapText(end2 - this.pos, -1));
            this.writtenTo = end2;
            if (to > end2) {
              this.nodes.push(null);
              this.writtenTo++;
              this.lineStart = -1;
            }
          }
          this.pos = to;
        }
        point(from3, to, deco) {
          if (from3 < to || deco.heightRelevant) {
            let height = deco.widget ? deco.widget.estimatedHeight : 0;
            if (height < 0)
              height = this.oracle.lineHeight;
            let len = to - from3;
            if (deco.block) {
              this.addBlock(new HeightMapBlock(len, height, deco.type));
            } else if (len || height >= relevantWidgetHeight) {
              this.addLineDeco(height, len);
            }
          } else if (to > from3) {
            this.span(from3, to);
          }
          if (this.lineEnd > -1 && this.lineEnd < this.pos)
            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
          if (this.lineStart > -1)
            return;
          let { from: from3, to } = this.oracle.doc.lineAt(this.pos);
          this.lineStart = from3;
          this.lineEnd = to;
          if (this.writtenTo < from3) {
            if (this.writtenTo < from3 - 1 || this.nodes[this.nodes.length - 1] == null)
              this.nodes.push(this.blankContent(this.writtenTo, from3 - 1));
            this.nodes.push(null);
          }
          if (this.pos > from3)
            this.nodes.push(new HeightMapText(this.pos - from3, -1));
          this.writtenTo = this.pos;
        }
        blankContent(from3, to) {
          let gap = new HeightMapGap(to - from3);
          if (this.oracle.doc.lineAt(from3).to == to)
            gap.flags |= 4;
          return gap;
        }
        ensureLine() {
          this.enterLine();
          let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
          if (last instanceof HeightMapText)
            return last;
          let line = new HeightMapText(0, -1);
          this.nodes.push(line);
          return line;
        }
        addBlock(block2) {
          this.enterLine();
          if (block2.type == BlockType.WidgetAfter && !this.isCovered)
            this.ensureLine();
          this.nodes.push(block2);
          this.writtenTo = this.pos = this.pos + block2.length;
          if (block2.type != BlockType.WidgetBefore)
            this.covering = block2;
        }
        addLineDeco(height, length) {
          let line = this.ensureLine();
          line.length += length;
          line.collapsed += length;
          line.widgetHeight = Math.max(line.widgetHeight, height);
          this.writtenTo = this.pos = this.pos + length;
        }
        finish(from3) {
          let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
          if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
            this.nodes.push(new HeightMapText(0, -1));
          else if (this.writtenTo < this.pos || last == null)
            this.nodes.push(this.blankContent(this.writtenTo, this.pos));
          let pos = from3;
          for (let node of this.nodes) {
            if (node instanceof HeightMapText)
              node.updateHeight(this.oracle, pos);
            pos += node ? node.length : 1;
          }
          return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations2, from3, to) {
          let builder = new NodeBuilder(from3, oracle);
          RangeSet.spans(decorations2, from3, to, builder, 0);
          return builder.finish(from3);
        }
      };
      DecorationComparator = class {
        constructor() {
          this.changes = [];
        }
        compareRange() {
        }
        comparePoint(from3, to, a2, b) {
          if (from3 < to || a2 && a2.heightRelevant || b && b.heightRelevant)
            addRange(from3, to, this.changes, 5);
        }
      };
      LineGap = class {
        constructor(from3, to, size) {
          this.from = from3;
          this.to = to;
          this.size = size;
        }
        static same(a2, b) {
          if (a2.length != b.length)
            return false;
          for (let i = 0; i < a2.length; i++) {
            let gA = a2[i], gB = b[i];
            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
              return false;
          }
          return true;
        }
        draw(wrapping) {
          return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
        }
      };
      LineGapWidget = class extends WidgetType {
        constructor(size, vertical) {
          super();
          this.size = size;
          this.vertical = vertical;
        }
        eq(other) {
          return other.size == this.size && other.vertical == this.vertical;
        }
        toDOM() {
          let elt2 = document.createElement("div");
          if (this.vertical) {
            elt2.style.height = this.size + "px";
          } else {
            elt2.style.width = this.size + "px";
            elt2.style.height = "2px";
            elt2.style.display = "inline-block";
          }
          return elt2;
        }
        get estimatedHeight() {
          return this.vertical ? this.size : -1;
        }
      };
      ViewState = class {
        constructor(state) {
          this.state = state;
          this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
          this.inView = true;
          this.paddingTop = 0;
          this.paddingBottom = 0;
          this.contentDOMWidth = 0;
          this.contentDOMHeight = 0;
          this.editorHeight = 0;
          this.editorWidth = 0;
          this.scaler = IdScaler;
          this.scrollTarget = null;
          this.printing = false;
          this.mustMeasureContent = true;
          this.defaultTextDirection = Direction.LTR;
          this.visibleRanges = [];
          this.mustEnforceCursorAssoc = false;
          let guessWrapping = state.facet(contentAttributes).some((v) => typeof v != "function" && v.class == "cm-lineWrapping");
          this.heightOracle = new HeightOracle(guessWrapping);
          this.stateDeco = state.facet(decorations).filter((d3) => typeof d3 != "function");
          this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
          this.viewport = this.getViewport(0, null);
          this.updateViewportLines();
          this.updateForViewport();
          this.lineGaps = this.ensureLineGaps([]);
          this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(false)));
          this.computeVisibleRanges();
        }
        updateForViewport() {
          let viewports = [this.viewport], { main } = this.state.selection;
          for (let i = 0; i <= 1; i++) {
            let pos = i ? main.head : main.anchor;
            if (!viewports.some(({ from: from3, to }) => pos >= from3 && pos <= to)) {
              let { from: from3, to } = this.lineBlockAt(pos);
              viewports.push(new Viewport(from3, to));
            }
          }
          this.viewports = viewports.sort((a2, b) => a2.from - b.from);
          this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        }
        updateViewportLines() {
          this.viewportLines = [];
          this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block2) => {
            this.viewportLines.push(this.scaler.scale == 1 ? block2 : scaleBlock(block2, this.scaler));
          });
        }
        update(update, scrollTarget = null) {
          this.state = update.state;
          let prevDeco = this.stateDeco;
          this.stateDeco = this.state.facet(decorations).filter((d3) => typeof d3 != "function");
          let contentChanges = update.changedRanges;
          let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
          let prevHeight = this.heightMap.height;
          this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
          if (this.heightMap.height != prevHeight)
            update.flags |= 2;
          let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
          if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) || !this.viewportIsAppropriate(viewport))
            viewport = this.getViewport(0, scrollTarget);
          let updateLines = !update.changes.empty || update.flags & 2 || viewport.from != this.viewport.from || viewport.to != this.viewport.to;
          this.viewport = viewport;
          this.updateForViewport();
          if (updateLines)
            this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
          update.flags |= this.computeVisibleRanges();
          if (scrollTarget)
            this.scrollTarget = scrollTarget;
          if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
            this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
          let dom = view.contentDOM, style2 = window.getComputedStyle(dom);
          let oracle = this.heightOracle;
          let whiteSpace = style2.whiteSpace;
          this.defaultTextDirection = style2.direction == "rtl" ? Direction.RTL : Direction.LTR;
          let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
          let domRect = dom.getBoundingClientRect();
          let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
          this.contentDOMHeight = domRect.height;
          this.mustMeasureContent = false;
          let result = 0, bias = 0;
          let paddingTop = parseInt(style2.paddingTop) || 0, paddingBottom = parseInt(style2.paddingBottom) || 0;
          if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
            this.paddingTop = paddingTop;
            this.paddingBottom = paddingBottom;
            result |= 8 | 2;
          }
          if (this.editorWidth != view.scrollDOM.clientWidth) {
            if (oracle.lineWrapping)
              measureContent = true;
            this.editorWidth = view.scrollDOM.clientWidth;
            result |= 8;
          }
          let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
          let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
          this.pixelViewport = pixelViewport;
          let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
          if (inView != this.inView) {
            this.inView = inView;
            if (inView)
              measureContent = true;
          }
          if (!this.inView && !this.scrollTarget)
            return 0;
          let contentWidth = domRect.width;
          if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
            this.contentDOMWidth = domRect.width;
            this.editorHeight = view.scrollDOM.clientHeight;
            result |= 8;
          }
          if (measureContent) {
            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
            if (oracle.mustRefreshForHeights(lineHeights))
              refresh = true;
            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
              let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
              refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
              if (refresh) {
                view.docView.minWidth = 0;
                result |= 8;
              }
            }
            if (dTop > 0 && dBottom > 0)
              bias = Math.max(dTop, dBottom);
            else if (dTop < 0 && dBottom < 0)
              bias = Math.min(dTop, dBottom);
            oracle.heightChanged = false;
            for (let vp of this.viewports) {
              let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
              this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
            }
            if (oracle.heightChanged)
              result |= 2;
          }
          let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
          if (viewportChange)
            this.viewport = this.getViewport(bias, this.scrollTarget);
          this.updateForViewport();
          if (result & 2 || viewportChange)
            this.updateViewportLines();
          if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
          result |= this.computeVisibleRanges();
          if (this.mustEnforceCursorAssoc) {
            this.mustEnforceCursorAssoc = false;
            view.docView.enforceCursorAssoc();
          }
          return result;
        }
        get visibleTop() {
          return this.scaler.fromDOM(this.pixelViewport.top);
        }
        get visibleBottom() {
          return this.scaler.fromDOM(this.pixelViewport.bottom);
        }
        getViewport(bias, scrollTarget) {
          let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
          let map = this.heightMap, oracle = this.heightOracle;
          let { visibleTop, visibleBottom } = this;
          let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
          if (scrollTarget) {
            let { head } = scrollTarget.range;
            if (head < viewport.from || head > viewport.to) {
              let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
              let block2 = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
              if (scrollTarget.y == "center")
                topPos = (block2.top + block2.bottom) / 2 - viewHeight / 2;
              else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                topPos = block2.top;
              else
                topPos = block2.bottom - viewHeight;
              viewport = new Viewport(map.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
            }
          }
          return viewport;
        }
        mapViewport(viewport, changes) {
          let from3 = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
          return new Viewport(this.heightMap.lineAt(from3, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from: from3, to }, bias = 0) {
          if (!this.inView)
            return true;
          let { top: top3 } = this.heightMap.lineAt(from3, QueryType.ByPos, this.heightOracle, 0, 0);
          let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
          let { visibleTop, visibleBottom } = this;
          return (from3 == 0 || top3 <= visibleTop - Math.max(10, Math.min(
            -bias,
            250
            /* VP.MaxCoverMargin */
          ))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10, Math.min(
            bias,
            250
            /* VP.MaxCoverMargin */
          ))) && (top3 > visibleTop - 2 * 1e3 && bottom < visibleBottom + 2 * 1e3);
        }
        mapLineGaps(gaps, changes) {
          if (!gaps.length || changes.empty)
            return gaps;
          let mapped = [];
          for (let gap of gaps)
            if (!changes.touchesRange(gap.from, gap.to))
              mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
          return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current, mayMeasure) {
          let wrapping = this.heightOracle.lineWrapping;
          let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
          if (this.defaultTextDirection != Direction.LTR && !wrapping)
            return [];
          let gaps = [];
          let addGap = (from3, to, line, structure) => {
            if (to - from3 < halfMargin)
              return;
            let sel = this.state.selection.main, avoid = [sel.from];
            if (!sel.empty)
              avoid.push(sel.to);
            for (let pos of avoid) {
              if (pos > from3 && pos < to) {
                addGap(from3, pos - 10, line, structure);
                addGap(pos + 10, to, line, structure);
                return;
              }
            }
            let gap = find(current, (gap2) => gap2.from >= line.from && gap2.to <= line.to && Math.abs(gap2.from - from3) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos) => gap2.from < pos && gap2.to > pos));
            if (!gap) {
              if (to < line.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to && r2.to >= to)) {
                let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                if (lineStart > from3)
                  to = lineStart;
              }
              gap = new LineGap(from3, to, this.gapSize(line, from3, to, structure));
            }
            gaps.push(gap);
          };
          for (let line of this.viewportLines) {
            if (line.length < doubleMargin)
              continue;
            let structure = lineStructure(line.from, line.to, this.stateDeco);
            if (structure.total < doubleMargin)
              continue;
            let target = this.scrollTarget ? this.scrollTarget.range.head : null;
            let viewFrom, viewTo;
            if (wrapping) {
              let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
              let top3, bot;
              if (target != null) {
                let targetFrac = findFraction(structure, target);
                let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                top3 = targetFrac - spaceFrac;
                bot = targetFrac + spaceFrac;
              } else {
                top3 = (this.visibleTop - line.top - marginHeight) / line.height;
                bot = (this.visibleBottom - line.top + marginHeight) / line.height;
              }
              viewFrom = findPosition(structure, top3);
              viewTo = findPosition(structure, bot);
            } else {
              let totalWidth = structure.total * this.heightOracle.charWidth;
              let marginWidth = margin * this.heightOracle.charWidth;
              let left, right;
              if (target != null) {
                let targetFrac = findFraction(structure, target);
                let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
                left = targetFrac - spaceFrac;
                right = targetFrac + spaceFrac;
              } else {
                left = (this.pixelViewport.left - marginWidth) / totalWidth;
                right = (this.pixelViewport.right + marginWidth) / totalWidth;
              }
              viewFrom = findPosition(structure, left);
              viewTo = findPosition(structure, right);
            }
            if (viewFrom > line.from)
              addGap(line.from, viewFrom, line, structure);
            if (viewTo < line.to)
              addGap(viewTo, line.to, line, structure);
          }
          return gaps;
        }
        gapSize(line, from3, to, structure) {
          let fraction = findFraction(structure, to) - findFraction(structure, from3);
          if (this.heightOracle.lineWrapping) {
            return line.height * fraction;
          } else {
            return structure.total * this.heightOracle.charWidth * fraction;
          }
        }
        updateLineGaps(gaps) {
          if (!LineGap.same(gaps, this.lineGaps)) {
            this.lineGaps = gaps;
            this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this.heightOracle.lineWrapping)));
          }
        }
        computeVisibleRanges() {
          let deco = this.stateDeco;
          if (this.lineGaps.length)
            deco = deco.concat(this.lineGapDeco);
          let ranges = [];
          RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
            span(from3, to) {
              ranges.push({ from: from3, to });
            },
            point() {
            }
          }, 20);
          let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r2, i) => r2.from != ranges[i].from || r2.to != ranges[i].to);
          this.visibleRanges = ranges;
          return changed ? 4 : 0;
        }
        lineBlockAt(pos) {
          return pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos && b.to >= pos) || scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
          return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
        }
        elementAtHeight(height) {
          return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
        }
        get docHeight() {
          return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
          return this.docHeight + this.paddingTop + this.paddingBottom;
        }
      };
      Viewport = class {
        constructor(from3, to) {
          this.from = from3;
          this.to = to;
        }
      };
      IdScaler = {
        toDOM(n2) {
          return n2;
        },
        fromDOM(n2) {
          return n2;
        },
        scale: 1
      };
      BigScaler = class {
        constructor(oracle, heightMap, viewports) {
          let vpHeight = 0, base4 = 0, domBase = 0;
          this.viewports = viewports.map(({ from: from3, to }) => {
            let top3 = heightMap.lineAt(from3, QueryType.ByPos, oracle, 0, 0).top;
            let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
            vpHeight += bottom - top3;
            return { from: from3, to, top: top3, bottom, domTop: 0, domBottom: 0 };
          });
          this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
          for (let obj of this.viewports) {
            obj.domTop = domBase + (obj.top - base4) * this.scale;
            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
            base4 = obj.bottom;
          }
        }
        toDOM(n2) {
          for (let i = 0, base4 = 0, domBase = 0; ; i++) {
            let vp = i < this.viewports.length ? this.viewports[i] : null;
            if (!vp || n2 < vp.top)
              return domBase + (n2 - base4) * this.scale;
            if (n2 <= vp.bottom)
              return vp.domTop + (n2 - vp.top);
            base4 = vp.bottom;
            domBase = vp.domBottom;
          }
        }
        fromDOM(n2) {
          for (let i = 0, base4 = 0, domBase = 0; ; i++) {
            let vp = i < this.viewports.length ? this.viewports[i] : null;
            if (!vp || n2 < vp.domTop)
              return base4 + (n2 - domBase) / this.scale;
            if (n2 <= vp.domBottom)
              return vp.top + (n2 - vp.domTop);
            base4 = vp.bottom;
            domBase = vp.domBottom;
          }
        }
      };
      theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
      darkTheme = /* @__PURE__ */ Facet.define({ combine: (values2) => values2.indexOf(true) > -1 });
      baseThemeID = /* @__PURE__ */ StyleModule.newName();
      baseLightID = /* @__PURE__ */ StyleModule.newName();
      baseDarkID = /* @__PURE__ */ StyleModule.newName();
      lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
      baseTheme$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
        "&": {
          position: "relative !important",
          boxSizing: "border-box",
          "&.cm-focused": {
            // Provide a simple default outline to make sure a focused
            // editor is visually distinct. Can't leave the default behavior
            // because that will apply to the content element, which is
            // inside the scrollable container and doesn't include the
            // gutters. We also can't use an 'auto' outline, since those
            // are, for some reason, drawn behind the element content, which
            // will cause things like the active line background to cover
            // the outline (#297).
            outline: "1px dotted #212121"
          },
          display: "flex !important",
          flexDirection: "column"
        },
        ".cm-scroller": {
          display: "flex !important",
          alignItems: "flex-start !important",
          fontFamily: "monospace",
          lineHeight: 1.4,
          height: "100%",
          overflowX: "auto",
          position: "relative",
          zIndex: 0
        },
        ".cm-content": {
          margin: 0,
          flexGrow: 2,
          flexShrink: 0,
          display: "block",
          whiteSpace: "pre",
          wordWrap: "normal",
          boxSizing: "border-box",
          padding: "4px 0",
          outline: "none",
          "&[contenteditable=true]": {
            WebkitUserModify: "read-write-plaintext-only"
          }
        },
        ".cm-lineWrapping": {
          whiteSpace_fallback: "pre-wrap",
          whiteSpace: "break-spaces",
          wordBreak: "break-word",
          overflowWrap: "anywhere",
          flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
          display: "block",
          padding: "0 2px 0 6px"
        },
        ".cm-layer": {
          position: "absolute",
          left: 0,
          top: 0,
          contain: "size style",
          "& > *": {
            position: "absolute"
          }
        },
        "&light .cm-selectionBackground": {
          background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
          background: "#222"
        },
        "&light.cm-focused .cm-selectionBackground": {
          background: "#d7d4f0"
        },
        "&dark.cm-focused .cm-selectionBackground": {
          background: "#233"
        },
        ".cm-cursorLayer": {
          pointerEvents: "none"
        },
        "&.cm-focused .cm-cursorLayer": {
          animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
          borderLeft: "1.2px solid black",
          marginLeft: "-0.6px",
          pointerEvents: "none"
        },
        ".cm-cursor": {
          display: "none"
        },
        "&dark .cm-cursor": {
          borderLeftColor: "#444"
        },
        ".cm-dropCursor": {
          position: "absolute"
        },
        "&.cm-focused .cm-cursor": {
          display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
        "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
          flexShrink: 0,
          display: "flex",
          height: "100%",
          boxSizing: "border-box",
          left: 0,
          zIndex: 200
        },
        "&light .cm-gutters": {
          backgroundColor: "#f5f5f5",
          color: "#6c6c6c",
          borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
          backgroundColor: "#333338",
          color: "#ccc"
        },
        ".cm-gutter": {
          display: "flex !important",
          flexDirection: "column",
          flexShrink: 0,
          boxSizing: "border-box",
          minHeight: "100%",
          overflow: "hidden"
        },
        ".cm-gutterElement": {
          boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
          padding: "0 3px 0 5px",
          minWidth: "20px",
          textAlign: "right",
          whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
          backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
          backgroundColor: "#222227"
        },
        ".cm-panels": {
          boxSizing: "border-box",
          position: "sticky",
          left: 0,
          right: 0
        },
        "&light .cm-panels": {
          backgroundColor: "#f5f5f5",
          color: "black"
        },
        "&light .cm-panels-top": {
          borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
          borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
          backgroundColor: "#333338",
          color: "white"
        },
        ".cm-tab": {
          display: "inline-block",
          overflow: "hidden",
          verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
          verticalAlign: "text-top",
          height: "1em",
          width: 0,
          display: "inline"
        },
        ".cm-placeholder": {
          color: "#888",
          display: "inline-block",
          verticalAlign: "top"
        },
        ".cm-highlightSpace:before": {
          content: "attr(data-display)",
          position: "absolute",
          pointerEvents: "none",
          color: "#888"
        },
        ".cm-highlightTab": {
          backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
          backgroundSize: "auto 100%",
          backgroundPosition: "right 90%",
          backgroundRepeat: "no-repeat"
        },
        ".cm-trailingSpace": {
          backgroundColor: "#ff332255"
        },
        ".cm-button": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          padding: ".2em 1em",
          borderRadius: "1px"
        },
        "&light .cm-button": {
          backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
          }
        },
        "&dark .cm-button": {
          backgroundImage: "linear-gradient(#393939, #111)",
          border: "1px solid #888",
          "&:active": {
            backgroundImage: "linear-gradient(#111, #333)"
          }
        },
        ".cm-textfield": {
          verticalAlign: "middle",
          color: "inherit",
          fontSize: "70%",
          border: "1px solid silver",
          padding: ".2em .5em"
        },
        "&light .cm-textfield": {
          backgroundColor: "white"
        },
        "&dark .cm-textfield": {
          border: "1px solid #555",
          backgroundColor: "inherit"
        }
      }, lightDarkIDs);
      DOMChange = class {
        constructor(view, start2, end2, typeOver) {
          this.typeOver = typeOver;
          this.bounds = null;
          this.text = "";
          let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
          if (view.state.readOnly && start2 > -1) {
            this.newSel = null;
          } else if (start2 > -1 && (this.bounds = view.docView.domBoundsAround(start2, end2, 0))) {
            let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
            let reader = new DOMReader(selPoints, view.state);
            reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
            this.text = reader.text;
            this.newSel = selectionFromPoints(selPoints, this.bounds.from);
          } else {
            let domSel = view.observer.selectionRange;
            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
            this.newSel = EditorSelection.single(anchor, head);
          }
        }
      };
      observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
      };
      useCharData = browser.ie && browser.ie_version <= 11;
      DOMObserver = class {
        constructor(view) {
          this.view = view;
          this.active = false;
          this.selectionRange = new DOMSelectionState();
          this.selectionChanged = false;
          this.delayedFlush = -1;
          this.resizeTimeout = -1;
          this.queue = [];
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
          this.lastChange = 0;
          this.scrollTargets = [];
          this.intersection = null;
          this.resizeScroll = null;
          this.resizeContent = null;
          this.intersecting = false;
          this.gapIntersection = null;
          this.gaps = [];
          this.parentCheck = -1;
          this.dom = view.contentDOM;
          this.observer = new MutationObserver((mutations) => {
            for (let mut of mutations)
              this.queue.push(mut);
            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
              this.flushSoon();
            else
              this.flush();
          });
          if (useCharData)
            this.onCharData = (event) => {
              this.queue.push({
                target: event.target,
                type: "characterData",
                oldValue: event.prevValue
              });
              this.flushSoon();
            };
          this.onSelectionChange = this.onSelectionChange.bind(this);
          this.onResize = this.onResize.bind(this);
          this.onPrint = this.onPrint.bind(this);
          this.onScroll = this.onScroll.bind(this);
          if (typeof ResizeObserver == "function") {
            this.resizeScroll = new ResizeObserver(() => {
              var _a2;
              if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
                this.onResize();
            });
            this.resizeScroll.observe(view.scrollDOM);
            this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
            this.resizeContent.observe(view.contentDOM);
          }
          this.addWindowListeners(this.win = view.win);
          this.start();
          if (typeof IntersectionObserver == "function") {
            this.intersection = new IntersectionObserver((entries) => {
              if (this.parentCheck < 0)
                this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
              if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
                this.intersecting = !this.intersecting;
                if (this.intersecting != this.view.inView)
                  this.onScrollChanged(document.createEvent("Event"));
              }
            }, {});
            this.intersection.observe(this.dom);
            this.gapIntersection = new IntersectionObserver((entries) => {
              if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                this.onScrollChanged(document.createEvent("Event"));
            }, {});
          }
          this.listenForScroll();
          this.readSelectionRange();
        }
        onScrollChanged(e) {
          this.view.inputState.runScrollHandlers(this.view, e);
          if (this.intersecting)
            this.view.measure();
        }
        onScroll(e) {
          if (this.intersecting)
            this.flush(false);
          this.onScrollChanged(e);
        }
        onResize() {
          if (this.resizeTimeout < 0)
            this.resizeTimeout = setTimeout(() => {
              this.resizeTimeout = -1;
              this.view.requestMeasure();
            }, 50);
        }
        onPrint() {
          this.view.viewState.printing = true;
          this.view.measure();
          setTimeout(() => {
            this.view.viewState.printing = false;
            this.view.requestMeasure();
          }, 500);
        }
        updateGaps(gaps) {
          if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
            this.gapIntersection.disconnect();
            for (let gap of gaps)
              this.gapIntersection.observe(gap);
            this.gaps = gaps;
          }
        }
        onSelectionChange(event) {
          let wasChanged = this.selectionChanged;
          if (!this.readSelectionRange() || this.delayedAndroidKey)
            return;
          let { view } = this, sel = this.selectionRange;
          if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
            return;
          let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
          if (context && context.ignoreEvent(event)) {
            if (!wasChanged)
              this.selectionChanged = false;
            return;
          }
          if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
          sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
            this.flushSoon();
          else
            this.flush(false);
        }
        readSelectionRange() {
          let { view } = this;
          let range = browser.safari && view.root.nodeType == 11 && deepActiveElement(this.dom.ownerDocument) == this.dom && safariSelectionRangeHack(this.view) || getSelection(view.root);
          if (!range || this.selectionRange.eq(range))
            return false;
          let local = hasSelection(this.dom, range);
          if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
            this.view.inputState.lastFocusTime = 0;
            view.docView.updateSelection();
            return false;
          }
          this.selectionRange.setRange(range);
          if (local)
            this.selectionChanged = true;
          return true;
        }
        setSelectionRange(anchor, head) {
          this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
          this.selectionChanged = false;
        }
        clearSelectionRange() {
          this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
          this.parentCheck = -1;
          let i = 0, changed = null;
          for (let dom = this.dom; dom; ) {
            if (dom.nodeType == 1) {
              if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                i++;
              else if (!changed)
                changed = this.scrollTargets.slice(0, i);
              if (changed)
                changed.push(dom);
              dom = dom.assignedSlot || dom.parentNode;
            } else if (dom.nodeType == 11) {
              dom = dom.host;
            } else {
              break;
            }
          }
          if (i < this.scrollTargets.length && !changed)
            changed = this.scrollTargets.slice(0, i);
          if (changed) {
            for (let dom of this.scrollTargets)
              dom.removeEventListener("scroll", this.onScroll);
            for (let dom of this.scrollTargets = changed)
              dom.addEventListener("scroll", this.onScroll);
          }
        }
        ignore(f) {
          if (!this.active)
            return f();
          try {
            this.stop();
            return f();
          } finally {
            this.start();
            this.clear();
          }
        }
        start() {
          if (this.active)
            return;
          this.observer.observe(this.dom, observeOptions);
          if (useCharData)
            this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.active = true;
        }
        stop() {
          if (!this.active)
            return;
          this.active = false;
          this.observer.disconnect();
          if (useCharData)
            this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
          this.processRecords();
          this.queue.length = 0;
          this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
          var _a2;
          if (!this.delayedAndroidKey) {
            let flush = () => {
              let key2 = this.delayedAndroidKey;
              if (key2) {
                this.clearDelayedAndroidKey();
                if (!this.flush() && key2.force)
                  dispatchKey(this.dom, key2.key, key2.keyCode);
              }
            };
            this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
          }
          if (!this.delayedAndroidKey || key == "Enter")
            this.delayedAndroidKey = {
              key,
              keyCode,
              // Only run the key handler when no changes are detected if
              // this isn't coming right after another change, in which case
              // it is probably part of a weird chain of updates, and should
              // be ignored if it returns the DOM to its previous state.
              force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
            };
        }
        clearDelayedAndroidKey() {
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
          this.delayedAndroidKey = null;
          this.flushingAndroidKey = -1;
        }
        flushSoon() {
          if (this.delayedFlush < 0)
            this.delayedFlush = this.view.win.requestAnimationFrame(() => {
              this.delayedFlush = -1;
              this.flush();
            });
        }
        forceFlush() {
          if (this.delayedFlush >= 0) {
            this.view.win.cancelAnimationFrame(this.delayedFlush);
            this.delayedFlush = -1;
          }
          this.flush();
        }
        processRecords() {
          let records = this.queue;
          for (let mut of this.observer.takeRecords())
            records.push(mut);
          if (records.length)
            this.queue = [];
          let from3 = -1, to = -1, typeOver = false;
          for (let record of records) {
            let range = this.readMutation(record);
            if (!range)
              continue;
            if (range.typeOver)
              typeOver = true;
            if (from3 == -1) {
              ({ from: from3, to } = range);
            } else {
              from3 = Math.min(range.from, from3);
              to = Math.max(range.to, to);
            }
          }
          return { from: from3, to, typeOver };
        }
        readChange() {
          let { from: from3, to, typeOver } = this.processRecords();
          let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
          if (from3 < 0 && !newSel)
            return null;
          if (from3 > -1)
            this.lastChange = Date.now();
          this.view.inputState.lastFocusTime = 0;
          this.selectionChanged = false;
          return new DOMChange(this.view, from3, to, typeOver);
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
          if (this.delayedFlush >= 0 || this.delayedAndroidKey)
            return false;
          if (readSelection)
            this.readSelectionRange();
          let domChange = this.readChange();
          if (!domChange)
            return false;
          let startState = this.view.state;
          let handled = applyDOMChange(this.view, domChange);
          if (this.view.state == startState)
            this.view.update([]);
          return handled;
        }
        readMutation(rec) {
          let cView = this.view.docView.nearest(rec.target);
          if (!cView || cView.ignoreMutation(rec))
            return null;
          cView.markDirty(rec.type == "attributes");
          if (rec.type == "attributes")
            cView.dirty |= 4;
          if (rec.type == "childList") {
            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
            return {
              from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
              to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
              typeOver: false
            };
          } else if (rec.type == "characterData") {
            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
          } else {
            return null;
          }
        }
        setWindow(win) {
          if (win != this.win) {
            this.removeWindowListeners(this.win);
            this.win = win;
            this.addWindowListeners(this.win);
          }
        }
        addWindowListeners(win) {
          win.addEventListener("resize", this.onResize);
          win.addEventListener("beforeprint", this.onPrint);
          win.addEventListener("scroll", this.onScroll);
          win.document.addEventListener("selectionchange", this.onSelectionChange);
        }
        removeWindowListeners(win) {
          win.removeEventListener("scroll", this.onScroll);
          win.removeEventListener("resize", this.onResize);
          win.removeEventListener("beforeprint", this.onPrint);
          win.document.removeEventListener("selectionchange", this.onSelectionChange);
        }
        destroy() {
          var _a2, _b2, _c, _d;
          this.stop();
          (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
          (_b2 = this.gapIntersection) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
          (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
          (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
          for (let dom of this.scrollTargets)
            dom.removeEventListener("scroll", this.onScroll);
          this.removeWindowListeners(this.win);
          clearTimeout(this.parentCheck);
          clearTimeout(this.resizeTimeout);
          this.win.cancelAnimationFrame(this.delayedFlush);
          this.win.cancelAnimationFrame(this.flushingAndroidKey);
        }
      };
      EditorView = class {
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
          this.plugins = [];
          this.pluginMap = /* @__PURE__ */ new Map();
          this.editorAttrs = {};
          this.contentAttrs = {};
          this.bidiCache = [];
          this.destroyed = false;
          this.updateState = 2;
          this.measureScheduled = -1;
          this.measureRequests = [];
          this.contentDOM = document.createElement("div");
          this.scrollDOM = document.createElement("div");
          this.scrollDOM.tabIndex = -1;
          this.scrollDOM.className = "cm-scroller";
          this.scrollDOM.appendChild(this.contentDOM);
          this.announceDOM = document.createElement("div");
          this.announceDOM.style.cssText = "position: fixed; top: -10000px";
          this.announceDOM.setAttribute("aria-live", "polite");
          this.dom = document.createElement("div");
          this.dom.appendChild(this.announceDOM);
          this.dom.appendChild(this.scrollDOM);
          this._dispatch = config.dispatch || ((tr) => this.update([tr]));
          this.dispatch = this.dispatch.bind(this);
          this._root = config.root || getRoot(config.parent) || document;
          this.viewState = new ViewState(config.state || EditorState.create(config));
          this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
          for (let plugin of this.plugins)
            plugin.update(this);
          this.observer = new DOMObserver(this);
          this.inputState = new InputState(this);
          this.inputState.ensureHandlers(this, this.plugins);
          this.docView = new DocView(this);
          this.mountStyles();
          this.updateAttrs();
          this.updateState = 0;
          this.requestMeasure();
          if (config.parent)
            config.parent.appendChild(this.dom);
        }
        /**
        The current editor state.
        */
        get state() {
          return this.viewState.state;
        }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() {
          return this.viewState.viewport;
        }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() {
          return this.viewState.visibleRanges;
        }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() {
          return this.viewState.inView;
        }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() {
          return this.inputState.composing > 0;
        }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() {
          return this.inputState.composing >= 0;
        }
        /**
        The document or shadow root that the view lives in.
        */
        get root() {
          return this._root;
        }
        /**
        @internal
        */
        get win() {
          return this.dom.ownerDocument.defaultView || window;
        }
        dispatch(...input) {
          this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0] : this.state.update(...input));
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
          if (this.updateState != 0)
            throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
          let redrawn = false, attrsChanged = false, update;
          let state = this.state;
          for (let tr of transactions) {
            if (tr.startState != state)
              throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
            state = tr.state;
          }
          if (this.destroyed) {
            this.viewState.state = state;
            return;
          }
          let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
          if (transactions.some((tr) => tr.annotation(isFocusChange))) {
            this.inputState.notifiedFocused = focus;
            focusFlag = 1;
          } else if (focus != this.inputState.notifiedFocused) {
            this.inputState.notifiedFocused = focus;
            dispatchFocus = focusChangeTransaction(state, focus);
            if (!dispatchFocus)
              focusFlag = 1;
          }
          let pendingKey = this.observer.delayedAndroidKey, domChange = null;
          if (pendingKey) {
            this.observer.clearDelayedAndroidKey();
            domChange = this.observer.readChange();
            if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
              domChange = null;
          } else {
            this.observer.clear();
          }
          if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
            return this.setState(state);
          update = ViewUpdate.create(this, state, transactions);
          update.flags |= focusFlag;
          let scrollTarget = this.viewState.scrollTarget;
          try {
            this.updateState = 2;
            for (let tr of transactions) {
              if (scrollTarget)
                scrollTarget = scrollTarget.map(tr.changes);
              if (tr.scrollIntoView) {
                let { main } = tr.state.selection;
                scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
              }
              for (let e of tr.effects)
                if (e.is(scrollIntoView))
                  scrollTarget = e.value;
            }
            this.viewState.update(update, scrollTarget);
            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
            if (!update.empty) {
              this.updatePlugins(update);
              this.inputState.update(update);
            }
            redrawn = this.docView.update(update);
            if (this.state.facet(styleModule) != this.styleModules)
              this.mountStyles();
            attrsChanged = this.updateAttrs();
            this.showAnnouncements(transactions);
            this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
          } finally {
            this.updateState = 0;
          }
          if (update.startState.facet(theme) != update.state.facet(theme))
            this.viewState.mustMeasureContent = true;
          if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
            this.requestMeasure();
          if (!update.empty)
            for (let listener of this.state.facet(updateListener))
              listener(update);
          if (dispatchFocus || domChange)
            Promise.resolve().then(() => {
              if (dispatchFocus && this.state == dispatchFocus.startState)
                this.dispatch(dispatchFocus);
              if (domChange) {
                if (!applyDOMChange(this, domChange) && pendingKey.force)
                  dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
              }
            });
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
          if (this.updateState != 0)
            throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
          if (this.destroyed) {
            this.viewState.state = newState;
            return;
          }
          this.updateState = 2;
          let hadFocus = this.hasFocus;
          try {
            for (let plugin of this.plugins)
              plugin.destroy(this);
            this.viewState = new ViewState(newState);
            this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
            this.pluginMap.clear();
            for (let plugin of this.plugins)
              plugin.update(this);
            this.docView = new DocView(this);
            this.inputState.ensureHandlers(this, this.plugins);
            this.mountStyles();
            this.updateAttrs();
            this.bidiCache = [];
          } finally {
            this.updateState = 0;
          }
          if (hadFocus)
            this.focus();
          this.requestMeasure();
        }
        updatePlugins(update) {
          let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
          if (prevSpecs != specs) {
            let newPlugins = [];
            for (let spec of specs) {
              let found = prevSpecs.indexOf(spec);
              if (found < 0) {
                newPlugins.push(new PluginInstance(spec));
              } else {
                let plugin = this.plugins[found];
                plugin.mustUpdate = update;
                newPlugins.push(plugin);
              }
            }
            for (let plugin of this.plugins)
              if (plugin.mustUpdate != update)
                plugin.destroy(this);
            this.plugins = newPlugins;
            this.pluginMap.clear();
            this.inputState.ensureHandlers(this, this.plugins);
          } else {
            for (let p of this.plugins)
              p.mustUpdate = update;
          }
          for (let i = 0; i < this.plugins.length; i++)
            this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure(flush = true) {
          if (this.destroyed)
            return;
          if (this.measureScheduled > -1)
            this.win.cancelAnimationFrame(this.measureScheduled);
          this.measureScheduled = 0;
          if (flush)
            this.observer.forceFlush();
          let updated = null;
          let { scrollHeight, scrollTop, clientHeight } = this.scrollDOM;
          let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;
          try {
            for (let i = 0; ; i++) {
              this.updateState = 1;
              let oldViewport = this.viewport;
              let refBlock = this.viewState.lineBlockAtHeight(refHeight);
              let changed = this.viewState.measure(this);
              if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                break;
              if (i > 5) {
                console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
                break;
              }
              let measuring = [];
              if (!(changed & 4))
                [this.measureRequests, measuring] = [measuring, this.measureRequests];
              let measured = measuring.map((m) => {
                try {
                  return m.read(this);
                } catch (e) {
                  logException(this.state, e);
                  return BadMeasure;
                }
              });
              let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
              update.flags |= changed;
              if (!updated)
                updated = update;
              else
                updated.flags |= changed;
              this.updateState = 2;
              if (!update.empty) {
                this.updatePlugins(update);
                this.inputState.update(update);
                this.updateAttrs();
                redrawn = this.docView.update(update);
              }
              for (let i2 = 0; i2 < measuring.length; i2++)
                if (measured[i2] != BadMeasure) {
                  try {
                    let m = measuring[i2];
                    if (m.write)
                      m.write(measured[i2], this);
                  } catch (e) {
                    logException(this.state, e);
                  }
                }
              if (this.viewState.editorHeight) {
                if (this.viewState.scrollTarget) {
                  this.docView.scrollIntoView(this.viewState.scrollTarget);
                  this.viewState.scrollTarget = null;
                  scrolled = true;
                } else {
                  let diff2 = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;
                  if (diff2 > 1 || diff2 < -1) {
                    this.scrollDOM.scrollTop += diff2;
                    scrolled = true;
                  }
                }
              }
              if (redrawn)
                this.docView.updateSelection(true);
              if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && !scrolled && this.measureRequests.length == 0)
                break;
            }
          } finally {
            this.updateState = 0;
            this.measureScheduled = -1;
          }
          if (updated && !updated.empty)
            for (let listener of this.state.facet(updateListener))
              listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
          return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
        }
        updateAttrs() {
          let editorAttrs = attrsFromFacet(this, editorAttributes, {
            class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
          });
          let contentAttrs = {
            spellcheck: "false",
            autocorrect: "off",
            autocapitalize: "off",
            translate: "no",
            contenteditable: !this.state.facet(editable) ? "false" : "true",
            class: "cm-content",
            style: `${browser.tabSize}: ${this.state.tabSize}`,
            role: "textbox",
            "aria-multiline": "true"
          };
          if (this.state.readOnly)
            contentAttrs["aria-readonly"] = "true";
          attrsFromFacet(this, contentAttributes, contentAttrs);
          let changed = this.observer.ignore(() => {
            let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
            let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
            return changedContent || changedEditor;
          });
          this.editorAttrs = editorAttrs;
          this.contentAttrs = contentAttrs;
          return changed;
        }
        showAnnouncements(trs) {
          let first = true;
          for (let tr of trs)
            for (let effect of tr.effects)
              if (effect.is(EditorView.announce)) {
                if (first)
                  this.announceDOM.textContent = "";
                first = false;
                let div = this.announceDOM.appendChild(document.createElement("div"));
                div.textContent = effect.value;
              }
        }
        mountStyles() {
          this.styleModules = this.state.facet(styleModule);
          StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse());
        }
        readMeasured() {
          if (this.updateState == 2)
            throw new Error("Reading the editor layout isn't allowed during an update");
          if (this.updateState == 0 && this.measureScheduled > -1)
            this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
          if (this.measureScheduled < 0)
            this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
          if (request) {
            if (this.measureRequests.indexOf(request) > -1)
              return;
            if (request.key != null)
              for (let i = 0; i < this.measureRequests.length; i++) {
                if (this.measureRequests[i].key === request.key) {
                  this.measureRequests[i] = request;
                  return;
                }
              }
            this.measureRequests.push(request);
          }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
          let known = this.pluginMap.get(plugin);
          if (known === void 0 || known && known.spec != plugin)
            this.pluginMap.set(plugin, known = this.plugins.find((p) => p.spec == plugin) || null);
          return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
          return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
          return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
        */
        elementAtHeight(height) {
          this.readMeasured();
          return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height, again interpreted relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
        */
        lineBlockAtHeight(height) {
          this.readMeasured();
          return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
          return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
          return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
          return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start2, forward, by) {
          return skipAtoms(this, start2, moveByChar(this, start2, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start2, forward) {
          return skipAtoms(this, start2, moveByChar(this, start2, forward, (initial) => byGroup(this, start2.head, initial)));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start2, forward, includeWrap = true) {
          return moveToLineBoundary(this, start2, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start2, forward, distance) {
          return skipAtoms(this, start2, moveVertically(this, start2, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
          return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset2 = 0) {
          return this.docView.posFromDOM(node, offset2);
        }
        posAtCoords(coords, precise = true) {
          this.readMeasured();
          return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
          this.readMeasured();
          let rect = this.docView.coordsAt(pos, side);
          if (!rect || rect.left == rect.right)
            return rect;
          let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
          let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
          return flattenRect(rect, span.dir == Direction.LTR == side > 0);
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() {
          return this.viewState.heightOracle.charWidth;
        }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() {
          return this.viewState.heightOracle.lineHeight;
        }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() {
          return this.viewState.defaultTextDirection;
        }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
          let perLine = this.state.facet(perLineTextDirection);
          if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
            return this.textDirection;
          this.readMeasured();
          return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() {
          return this.viewState.heightOracle.lineWrapping;
        }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
          if (line.length > MaxBidiLine)
            return trivialOrder(line.length);
          let dir = this.textDirectionAt(line.from);
          for (let entry of this.bidiCache)
            if (entry.from == line.from && entry.dir == dir)
              return entry.order;
          let order = computeOrder(line.text, dir);
          this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
          return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
          var _a2;
          return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
          this.observer.ignore(() => {
            focusPreventScroll(this.contentDOM);
            this.docView.updateSelection();
          });
        }
        /**
        Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
        necessary when moving the editor's existing DOM to a new window or shadow root.
        */
        setRoot(root) {
          if (this._root != root) {
            this._root = root;
            this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
            this.mountStyles();
          }
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
          for (let plugin of this.plugins)
            plugin.destroy(this);
          this.plugins = [];
          this.inputState.destroy();
          this.dom.remove();
          this.observer.destroy();
          if (this.measureScheduled > -1)
            this.win.cancelAnimationFrame(this.measureScheduled);
          this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
          return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers2) {
          return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
          let prefix2 = StyleModule.newName();
          let result = [theme.of(prefix2), styleModule.of(buildTheme(`.${prefix2}`, spec))];
          if (options && options.dark)
            result.push(darkTheme.of(true));
          return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
          return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
          var _a2;
          let content3 = dom.querySelector(".cm-content");
          let cView = content3 && ContentView.get(content3) || ContentView.get(dom);
          return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
        }
      };
      EditorView.styleModule = styleModule;
      EditorView.inputHandler = inputHandler;
      EditorView.focusChangeEffect = focusChangeEffect;
      EditorView.perLineTextDirection = perLineTextDirection;
      EditorView.exceptionSink = exceptionSink;
      EditorView.updateListener = updateListener;
      EditorView.editable = editable;
      EditorView.mouseSelectionStyle = mouseSelectionStyle;
      EditorView.dragMovesSelection = dragMovesSelection$1;
      EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
      EditorView.decorations = decorations;
      EditorView.atomicRanges = atomicRanges;
      EditorView.scrollMargins = scrollMargins;
      EditorView.darkTheme = darkTheme;
      EditorView.contentAttributes = contentAttributes;
      EditorView.editorAttributes = editorAttributes;
      EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
      EditorView.announce = /* @__PURE__ */ StateEffect.define();
      MaxBidiLine = 4096;
      BadMeasure = {};
      CachedOrder = class {
        constructor(from3, to, dir, order) {
          this.from = from3;
          this.to = to;
          this.dir = dir;
          this.order = order;
        }
        static update(cache3, changes) {
          if (changes.empty)
            return cache3;
          let result = [], lastDir = cache3.length ? cache3[cache3.length - 1].dir : Direction.LTR;
          for (let i = Math.max(0, cache3.length - 10); i < cache3.length; i++) {
            let entry = cache3[i];
            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
              result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
          }
          return result;
        }
      };
      currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
      handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
        keydown(event, view) {
          return runHandlers(getKeymap(view.state), event, view, "editor");
        }
      }));
      keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
      Keymaps = /* @__PURE__ */ new WeakMap();
      storedPrefix = null;
      PrefixTimeout = 4e3;
      CanHidePrimary = !browser.ios;
      themeSpec = {
        ".cm-line": {
          "& ::selection": { backgroundColor: "transparent !important" },
          "&::selection": { backgroundColor: "transparent !important" }
        }
      };
      if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
      UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
      baseTheme = /* @__PURE__ */ EditorView.baseTheme({
        ".cm-tooltip": {
          zIndex: 100,
          boxSizing: "border-box"
        },
        "&light .cm-tooltip": {
          border: "1px solid #bbb",
          backgroundColor: "#f5f5f5"
        },
        "&light .cm-tooltip-section:not(:first-child)": {
          borderTop: "1px solid #bbb"
        },
        "&dark .cm-tooltip": {
          backgroundColor: "#333338",
          color: "white"
        },
        ".cm-tooltip-arrow": {
          height: `${7}px`,
          width: `${7 * 2}px`,
          position: "absolute",
          zIndex: -1,
          overflow: "hidden",
          "&:before, &:after": {
            content: "''",
            position: "absolute",
            width: 0,
            height: 0,
            borderLeft: `${7}px solid transparent`,
            borderRight: `${7}px solid transparent`
          },
          ".cm-tooltip-above &": {
            bottom: `-${7}px`,
            "&:before": {
              borderTop: `${7}px solid #bbb`
            },
            "&:after": {
              borderTop: `${7}px solid #f5f5f5`,
              bottom: "1px"
            }
          },
          ".cm-tooltip-below &": {
            top: `-${7}px`,
            "&:before": {
              borderBottom: `${7}px solid #bbb`
            },
            "&:after": {
              borderBottom: `${7}px solid #f5f5f5`,
              top: "1px"
            }
          }
        },
        "&dark .cm-tooltip .cm-tooltip-arrow": {
          "&:before": {
            borderTopColor: "#333338",
            borderBottomColor: "#333338"
          },
          "&:after": {
            borderTopColor: "transparent",
            borderBottomColor: "transparent"
          }
        }
      });
      GutterMarker = class extends RangeValue {
        /**
        @internal
        */
        compare(other) {
          return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) {
          return false;
        }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) {
        }
      };
      GutterMarker.prototype.elementClass = "";
      GutterMarker.prototype.toDOM = void 0;
      GutterMarker.prototype.mapMode = MapMode.TrackBefore;
      GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
      GutterMarker.prototype.point = true;
    }
  });

  // node_modules/@lezer/common/dist/index.js
  function checkSide(side, pos, from3, to) {
    switch (side) {
      case -2:
        return from3 < pos;
      case -1:
        return to >= pos && from3 < pos;
      case 0:
        return from3 < pos && to > pos;
      case 1:
        return from3 <= pos && to > pos;
      case 2:
        return to > pos;
      case 4:
        return true;
    }
  }
  function enterUnfinishedNodesBefore(node, pos) {
    let scan = node.childBefore(pos);
    while (scan) {
      let last = scan.lastChild;
      if (!last || last.to != scan.to)
        break;
      if (last.type.isError && last.from == last.to) {
        node = scan;
        scan = last.prevSibling;
      } else {
        scan = last;
      }
    }
    return node;
  }
  function resolveNode(node, pos, side, overlays) {
    var _a2;
    while (node.from == node.to || (side < 1 ? node.from >= pos : node.from > pos) || (side > -1 ? node.to <= pos : node.to < pos)) {
      let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
      if (!parent)
        return node;
      node = parent;
    }
    let mode = overlays ? 0 : IterMode.IgnoreOverlays;
    if (overlays)
      for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
        if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
          node = parent;
      }
    for (; ; ) {
      let inner = node.enter(pos, side, mode);
      if (!inner)
        return node;
      node = inner;
    }
  }
  function getChildren(node, type7, before, after) {
    let cur = node.cursor(), result = [];
    if (!cur.firstChild())
      return result;
    if (before != null) {
      while (!cur.type.is(before))
        if (!cur.nextSibling())
          return result;
    }
    for (; ; ) {
      if (after != null && cur.type.is(after))
        return result;
      if (cur.type.is(type7))
        result.push(cur.node);
      if (!cur.nextSibling())
        return after == null ? result : [];
    }
  }
  function matchNodeContext(node, context, i = context.length - 1) {
    for (let p = node.parent; i >= 0; p = p.parent) {
      if (!p)
        return false;
      if (!p.type.isAnonymous) {
        if (context[i] && context[i] != p.name)
          return false;
        i--;
      }
    }
    return true;
  }
  function hasChild(tree) {
    return tree.children.some((ch2) => ch2 instanceof TreeBuffer || !ch2.type.isAnonymous || hasChild(ch2));
  }
  function buildTree(data2) {
    var _a2;
    let { buffer, nodeSet: nodeSet2, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet2.types.length } = data2;
    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
    let types8 = nodeSet2.types;
    let contextHash = 0, lookAhead = 0;
    function takeNode(parentStart, minPos, children2, positions2, inRepeat) {
      let { id: id2, start: start2, end: end2, size } = cursor;
      let lookAheadAtStart = lookAhead;
      while (size < 0) {
        cursor.next();
        if (size == -1) {
          let node2 = reused[id2];
          children2.push(node2);
          positions2.push(start2 - parentStart);
          return;
        } else if (size == -3) {
          contextHash = id2;
          return;
        } else if (size == -4) {
          lookAhead = id2;
          return;
        } else {
          throw new RangeError(`Unrecognized record size: ${size}`);
        }
      }
      let type7 = types8[id2], node, buffer2;
      let startPos = start2 - parentStart;
      if (end2 - start2 <= maxBufferLength && (buffer2 = findBufferSize(cursor.pos - minPos, inRepeat))) {
        let data3 = new Uint16Array(buffer2.size - buffer2.skip);
        let endPos = cursor.pos - buffer2.size, index = data3.length;
        while (cursor.pos > endPos)
          index = copyToBuffer(buffer2.start, data3, index);
        node = new TreeBuffer(data3, end2 - buffer2.start, nodeSet2);
        startPos = buffer2.start - parentStart;
      } else {
        let endPos = cursor.pos - size;
        cursor.next();
        let localChildren = [], localPositions = [];
        let localInRepeat = id2 >= minRepeatType ? id2 : -1;
        let lastGroup = 0, lastEnd = end2;
        while (cursor.pos > endPos) {
          if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
            if (cursor.end <= lastEnd - maxBufferLength) {
              makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
              lastGroup = localChildren.length;
              lastEnd = cursor.end;
            }
            cursor.next();
          } else {
            takeNode(start2, endPos, localChildren, localPositions, localInRepeat);
          }
        }
        if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
          makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, start2, lastEnd, localInRepeat, lookAheadAtStart);
        localChildren.reverse();
        localPositions.reverse();
        if (localInRepeat > -1 && lastGroup > 0) {
          let make = makeBalanced(type7);
          node = balanceRange(type7, localChildren, localPositions, 0, localChildren.length, 0, end2 - start2, make, make);
        } else {
          node = makeTree(type7, localChildren, localPositions, end2 - start2, lookAheadAtStart - end2);
        }
      }
      children2.push(node);
      positions2.push(startPos);
    }
    function makeBalanced(type7) {
      return (children2, positions2, length2) => {
        let lookAhead2 = 0, lastI = children2.length - 1, last, lookAheadProp;
        if (lastI >= 0 && (last = children2[lastI]) instanceof Tree) {
          if (!lastI && last.type == type7 && last.length == length2)
            return last;
          if (lookAheadProp = last.prop(NodeProp.lookAhead))
            lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
        }
        return makeTree(type7, children2, positions2, length2, lookAhead2);
      };
    }
    function makeRepeatLeaf(children2, positions2, base4, i, from3, to, type7, lookAhead2) {
      let localChildren = [], localPositions = [];
      while (children2.length > i) {
        localChildren.push(children2.pop());
        localPositions.push(positions2.pop() + base4 - from3);
      }
      children2.push(makeTree(nodeSet2.types[type7], localChildren, localPositions, to - from3, lookAhead2 - to));
      positions2.push(from3 - base4);
    }
    function makeTree(type7, children2, positions2, length2, lookAhead2 = 0, props) {
      if (contextHash) {
        let pair2 = [NodeProp.contextHash, contextHash];
        props = props ? [pair2].concat(props) : [pair2];
      }
      if (lookAhead2 > 25) {
        let pair2 = [NodeProp.lookAhead, lookAhead2];
        props = props ? [pair2].concat(props) : [pair2];
      }
      return new Tree(type7, children2, positions2, length2, props);
    }
    function findBufferSize(maxSize, inRepeat) {
      let fork = cursor.fork();
      let size = 0, start2 = 0, skip = 0, minStart = fork.end - maxBufferLength;
      let result = { size: 0, start: 0, skip: 0 };
      scan:
        for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
          let nodeSize2 = fork.size;
          if (fork.id == inRepeat && nodeSize2 >= 0) {
            result.size = size;
            result.start = start2;
            result.skip = skip;
            skip += 4;
            size += 4;
            fork.next();
            continue;
          }
          let startPos = fork.pos - nodeSize2;
          if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
            break;
          let localSkipped = fork.id >= minRepeatType ? 4 : 0;
          let nodeStart = fork.start;
          fork.next();
          while (fork.pos > startPos) {
            if (fork.size < 0) {
              if (fork.size == -3)
                localSkipped += 4;
              else
                break scan;
            } else if (fork.id >= minRepeatType) {
              localSkipped += 4;
            }
            fork.next();
          }
          start2 = nodeStart;
          size += nodeSize2;
          skip += localSkipped;
        }
      if (inRepeat < 0 || size == maxSize) {
        result.size = size;
        result.start = start2;
        result.skip = skip;
      }
      return result.size > 4 ? result : void 0;
    }
    function copyToBuffer(bufferStart, buffer2, index) {
      let { id: id2, start: start2, end: end2, size } = cursor;
      cursor.next();
      if (size >= 0 && id2 < minRepeatType) {
        let startIndex = index;
        if (size > 4) {
          let endPos = cursor.pos - (size - 4);
          while (cursor.pos > endPos)
            index = copyToBuffer(bufferStart, buffer2, index);
        }
        buffer2[--index] = startIndex;
        buffer2[--index] = end2 - bufferStart;
        buffer2[--index] = start2 - bufferStart;
        buffer2[--index] = id2;
      } else if (size == -3) {
        contextHash = id2;
      } else if (size == -4) {
        lookAhead = id2;
      }
      return index;
    }
    let children = [], positions = [];
    while (cursor.pos > 0)
      takeNode(data2.start || 0, data2.bufferStart || 0, children, positions, -1);
    let length = (_a2 = data2.length) !== null && _a2 !== void 0 ? _a2 : children.length ? positions[0] + children[0].length : 0;
    return new Tree(types8[data2.topID], children.reverse(), positions.reverse(), length);
  }
  function nodeSize(balanceType, node) {
    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
      return 1;
    let size = nodeSizeCache.get(node);
    if (size == null) {
      size = 1;
      for (let child of node.children) {
        if (child.type != balanceType || !(child instanceof Tree)) {
          size = 1;
          break;
        }
        size += nodeSize(balanceType, child);
      }
      nodeSizeCache.set(node, size);
    }
    return size;
  }
  function balanceRange(balanceType, children, positions, from3, to, start2, length, mkTop, mkTree) {
    let total = 0;
    for (let i = from3; i < to; i++)
      total += nodeSize(balanceType, children[i]);
    let maxChild = Math.ceil(
      total * 1.5 / 8
      /* Balance.BranchFactor */
    );
    let localChildren = [], localPositions = [];
    function divide(children2, positions2, from4, to2, offset2) {
      for (let i = from4; i < to2; ) {
        let groupFrom = i, groupStart = positions2[i], groupSize = nodeSize(balanceType, children2[i]);
        i++;
        for (; i < to2; i++) {
          let nextSize = nodeSize(balanceType, children2[i]);
          if (groupSize + nextSize >= maxChild)
            break;
          groupSize += nextSize;
        }
        if (i == groupFrom + 1) {
          if (groupSize > maxChild) {
            let only = children2[groupFrom];
            divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset2);
            continue;
          }
          localChildren.push(children2[groupFrom]);
        } else {
          let length2 = positions2[i - 1] + children2[i - 1].length - groupStart;
          localChildren.push(balanceRange(balanceType, children2, positions2, groupFrom, i, groupStart, length2, null, mkTree));
        }
        localPositions.push(groupStart + offset2 - start2);
      }
    }
    divide(children, positions, from3, to, 0);
    return (mkTop || mkTree)(localChildren, localPositions, length);
  }
  function parseMixed(nest) {
    return (parse2, input, fragments, ranges) => new MixedParse(parse2, nest, input, fragments, ranges);
  }
  function checkCover(covered, from3, to) {
    for (let range of covered) {
      if (range.from >= to)
        break;
      if (range.to > from3)
        return range.from <= from3 && range.to >= to ? 2 : 1;
    }
    return 0;
  }
  function sliceBuf(buf, startI, endI, nodes, positions, off) {
    if (startI < endI) {
      let from3 = buf.buffer[startI + 1];
      nodes.push(buf.slice(startI, endI, from3));
      positions.push(from3 - off);
    }
  }
  function materialize(cursor) {
    let { node } = cursor, depth = 0;
    do {
      cursor.parent();
      depth++;
    } while (!cursor.tree);
    let i = 0, base4 = cursor.tree, off = 0;
    for (; ; i++) {
      off = base4.positions[i] + cursor.from;
      if (off <= node.from && off + base4.children[i].length >= node.to)
        break;
    }
    let buf = base4.children[i], b = buf.buffer;
    function split(startI, endI, type7, innerOffset, length) {
      let i2 = startI;
      while (b[i2 + 2] + off <= node.from)
        i2 = b[i2 + 3];
      let children = [], positions = [];
      sliceBuf(buf, startI, i2, children, positions, innerOffset);
      let from3 = b[i2 + 1], to = b[i2 + 2];
      let isTarget = from3 + off == node.from && to + off == node.to && b[i2] == node.type.id;
      children.push(isTarget ? node.toTree() : split(i2 + 4, b[i2 + 3], buf.set.types[b[i2]], from3, to - from3));
      positions.push(from3 - innerOffset);
      sliceBuf(buf, b[i2 + 3], endI, children, positions, innerOffset);
      return new Tree(type7, children, positions, length);
    }
    base4.children[i] = split(0, b.length, NodeType.none, 0, buf.length);
    for (let d3 = 0; d3 <= depth; d3++)
      cursor.childAfter(node.from);
  }
  function punchRanges(outer, ranges) {
    let copy = null, current = ranges;
    for (let i = 1, j = 0; i < outer.length; i++) {
      let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
      for (; j < current.length; j++) {
        let r2 = current[j];
        if (r2.from >= gapTo)
          break;
        if (r2.to <= gapFrom)
          continue;
        if (!copy)
          current = copy = ranges.slice();
        if (r2.from < gapFrom) {
          copy[j] = new Range2(r2.from, gapFrom);
          if (r2.to > gapTo)
            copy.splice(j + 1, 0, new Range2(gapTo, r2.to));
        } else if (r2.to > gapTo) {
          copy[j--] = new Range2(gapTo, r2.to);
        } else {
          copy.splice(j--, 1);
        }
      }
    }
    return current;
  }
  function findCoverChanges(a2, b, from3, to) {
    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
    let result = [];
    for (; ; ) {
      let nextA = iA == a2.length ? 1e9 : inA ? a2[iA].to : a2[iA].from;
      let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
      if (inA != inB) {
        let start2 = Math.max(pos, from3), end2 = Math.min(nextA, nextB, to);
        if (start2 < end2)
          result.push(new Range2(start2, end2));
      }
      pos = Math.min(nextA, nextB);
      if (pos == 1e9)
        break;
      if (nextA == pos) {
        if (!inA)
          inA = true;
        else {
          inA = false;
          iA++;
        }
      }
      if (nextB == pos) {
        if (!inB)
          inB = true;
        else {
          inB = false;
          iB++;
        }
      }
    }
    return result;
  }
  function enterFragments(mounts, ranges) {
    let result = [];
    for (let { pos, mount, frag } of mounts) {
      let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
      let from3 = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
      if (mount.overlay) {
        let overlay = mount.overlay.map((r2) => new Range2(r2.from + pos, r2.to + pos));
        let changes = findCoverChanges(ranges, overlay, from3, to);
        for (let i = 0, pos2 = from3; ; i++) {
          let last = i == changes.length, end2 = last ? to : changes[i].from;
          if (end2 > pos2)
            result.push(new TreeFragment(pos2, end2, mount.tree, -startPos, frag.from >= pos2 || frag.openStart, frag.to <= end2 || frag.openEnd));
          if (last)
            break;
          pos2 = changes[i].to;
        }
      } else {
        result.push(new TreeFragment(from3, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
      }
    }
    return result;
  }
  var DefaultBufferLength, nextPropID, Range2, NodeProp, MountedTree, noProps, NodeType, NodeSet, CachedNode, CachedInnerNode, IterMode, Tree, FlatBufferCursor, TreeBuffer, TreeNode, BufferContext, BufferNode, TreeCursor, nodeSizeCache, NodeWeakMap, TreeFragment, Parser, StringInput, InnerParse, ActiveOverlay, stoppedInner, MixedParse, StructureCursor, FragmentCursor;
  var init_dist3 = __esm({
    "node_modules/@lezer/common/dist/index.js"() {
      DefaultBufferLength = 1024;
      nextPropID = 0;
      Range2 = class {
        constructor(from3, to) {
          this.from = from3;
          this.to = to;
        }
      };
      NodeProp = class {
        /// Create a new node prop type.
        constructor(config = {}) {
          this.id = nextPropID++;
          this.perNode = !!config.perNode;
          this.deserialize = config.deserialize || (() => {
            throw new Error("This node type doesn't define a deserialize function");
          });
        }
        /// This is meant to be used with
        /// [`NodeSet.extend`](#common.NodeSet.extend) or
        /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
        /// prop values for each node type in the set. Takes a [match
        /// object](#common.NodeType^match) or function that returns undefined
        /// if the node type doesn't get this prop, and the prop's value if
        /// it does.
        add(match3) {
          if (this.perNode)
            throw new RangeError("Can't add per-node props to node types");
          if (typeof match3 != "function")
            match3 = NodeType.match(match3);
          return (type7) => {
            let result = match3(type7);
            return result === void 0 ? null : [this, result];
          };
        }
      };
      NodeProp.closedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
      NodeProp.openedBy = new NodeProp({ deserialize: (str) => str.split(" ") });
      NodeProp.group = new NodeProp({ deserialize: (str) => str.split(" ") });
      NodeProp.contextHash = new NodeProp({ perNode: true });
      NodeProp.lookAhead = new NodeProp({ perNode: true });
      NodeProp.mounted = new NodeProp({ perNode: true });
      MountedTree = class {
        constructor(tree, overlay, parser14) {
          this.tree = tree;
          this.overlay = overlay;
          this.parser = parser14;
        }
      };
      noProps = /* @__PURE__ */ Object.create(null);
      NodeType = class {
        /// @internal
        constructor(name2, props, id2, flags = 0) {
          this.name = name2;
          this.props = props;
          this.id = id2;
          this.flags = flags;
        }
        /// Define a node type.
        static define(spec) {
          let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
          let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
          let type7 = new NodeType(spec.name || "", props, spec.id, flags);
          if (spec.props)
            for (let src of spec.props) {
              if (!Array.isArray(src))
                src = src(type7);
              if (src) {
                if (src[0].perNode)
                  throw new RangeError("Can't store a per-node prop on a node type");
                props[src[0].id] = src[1];
              }
            }
          return type7;
        }
        /// Retrieves a node prop for this type. Will return `undefined` if
        /// the prop isn't present on this node.
        prop(prop) {
          return this.props[prop.id];
        }
        /// True when this is the top node of a grammar.
        get isTop() {
          return (this.flags & 1) > 0;
        }
        /// True when this node is produced by a skip rule.
        get isSkipped() {
          return (this.flags & 2) > 0;
        }
        /// Indicates whether this is an error node.
        get isError() {
          return (this.flags & 4) > 0;
        }
        /// When true, this node type doesn't correspond to a user-declared
        /// named node, for example because it is used to cache repetition.
        get isAnonymous() {
          return (this.flags & 8) > 0;
        }
        /// Returns true when this node's name or one of its
        /// [groups](#common.NodeProp^group) matches the given string.
        is(name2) {
          if (typeof name2 == "string") {
            if (this.name == name2)
              return true;
            let group = this.prop(NodeProp.group);
            return group ? group.indexOf(name2) > -1 : false;
          }
          return this.id == name2;
        }
        /// Create a function from node types to arbitrary values by
        /// specifying an object whose property names are node or
        /// [group](#common.NodeProp^group) names. Often useful with
        /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        /// names, separated by spaces, in a single property name to map
        /// multiple node names to a single value.
        static match(map) {
          let direct = /* @__PURE__ */ Object.create(null);
          for (let prop in map)
            for (let name2 of prop.split(" "))
              direct[name2] = map[prop];
          return (node) => {
            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
              let found = direct[i < 0 ? node.name : groups[i]];
              if (found)
                return found;
            }
          };
        }
      };
      NodeType.none = new NodeType(
        "",
        /* @__PURE__ */ Object.create(null),
        0,
        8
        /* NodeFlag.Anonymous */
      );
      NodeSet = class {
        /// Create a set with the given types. The `id` property of each
        /// type should correspond to its position within the array.
        constructor(types8) {
          this.types = types8;
          for (let i = 0; i < types8.length; i++)
            if (types8[i].id != i)
              throw new RangeError("Node type ids should correspond to array positions when creating a node set");
        }
        /// Create a copy of this set with some node properties added. The
        /// arguments to this method can be created with
        /// [`NodeProp.add`](#common.NodeProp.add).
        extend(...props) {
          let newTypes = [];
          for (let type7 of this.types) {
            let newProps = null;
            for (let source of props) {
              let add2 = source(type7);
              if (add2) {
                if (!newProps)
                  newProps = Object.assign({}, type7.props);
                newProps[add2[0].id] = add2[1];
              }
            }
            newTypes.push(newProps ? new NodeType(type7.name, newProps, type7.id, type7.flags) : type7);
          }
          return new NodeSet(newTypes);
        }
      };
      CachedNode = /* @__PURE__ */ new WeakMap();
      CachedInnerNode = /* @__PURE__ */ new WeakMap();
      (function(IterMode2) {
        IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
        IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
      })(IterMode || (IterMode = {}));
      Tree = class {
        /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        constructor(type7, children, positions, length, props) {
          this.type = type7;
          this.children = children;
          this.positions = positions;
          this.length = length;
          this.props = null;
          if (props && props.length) {
            this.props = /* @__PURE__ */ Object.create(null);
            for (let [prop, value] of props)
              this.props[typeof prop == "number" ? prop : prop.id] = value;
          }
        }
        /// @internal
        toString() {
          let mounted = this.prop(NodeProp.mounted);
          if (mounted && !mounted.overlay)
            return mounted.tree.toString();
          let children = "";
          for (let ch2 of this.children) {
            let str = ch2.toString();
            if (str) {
              if (children)
                children += ",";
              children += str;
            }
          }
          return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
        }
        /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
        /// the tree. Mode can be used to [control](#common.IterMode) which
        /// nodes the cursor visits.
        cursor(mode = 0) {
          return new TreeCursor(this.topNode, mode);
        }
        /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
        /// at the given position and side (see
        /// [`moveTo`](#common.TreeCursor.moveTo).
        cursorAt(pos, side = 0, mode = 0) {
          let scope = CachedNode.get(this) || this.topNode;
          let cursor = new TreeCursor(scope);
          cursor.moveTo(pos, side);
          CachedNode.set(this, cursor._tree);
          return cursor;
        }
        /// Get a [syntax node](#common.SyntaxNode) object for the top of the
        /// tree.
        get topNode() {
          return new TreeNode(this, 0, 0, null);
        }
        /// Get the [syntax node](#common.SyntaxNode) at the given position.
        /// If `side` is -1, this will move into nodes that end at the
        /// position. If 1, it'll move into nodes that start at the
        /// position. With 0, it'll only enter nodes that cover the position
        /// from both sides.
        ///
        /// Note that this will not enter
        /// [overlays](#common.MountedTree.overlay), and you often want
        /// [`resolveInner`](#common.Tree.resolveInner) instead.
        resolve(pos, side = 0) {
          let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
          CachedNode.set(this, node);
          return node;
        }
        /// Like [`resolve`](#common.Tree.resolve), but will enter
        /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        /// pointing into the innermost overlaid tree at the given position
        /// (with parent links going through all parent structure, including
        /// the host trees).
        resolveInner(pos, side = 0) {
          let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
          CachedInnerNode.set(this, node);
          return node;
        }
        /// Iterate over the tree and its children, calling `enter` for any
        /// node that touches the `from`/`to` region (if given) before
        /// running over such a node's children, and `leave` (if given) when
        /// leaving the node. When `enter` returns `false`, that node will
        /// not have its children iterated over (or `leave` called).
        iterate(spec) {
          let { enter, leave, from: from3 = 0, to = this.length } = spec;
          for (let c2 = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous); ; ) {
            let entered = false;
            if (c2.from <= to && c2.to >= from3 && (c2.type.isAnonymous || enter(c2) !== false)) {
              if (c2.firstChild())
                continue;
              entered = true;
            }
            for (; ; ) {
              if (entered && leave && !c2.type.isAnonymous)
                leave(c2);
              if (c2.nextSibling())
                break;
              if (!c2.parent())
                return;
              entered = true;
            }
          }
        }
        /// Get the value of the given [node prop](#common.NodeProp) for this
        /// node. Works with both per-node and per-type props.
        prop(prop) {
          return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
        }
        /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
        /// format that can be passed to the [`Tree`](#common.Tree)
        /// constructor.
        get propValues() {
          let result = [];
          if (this.props)
            for (let id2 in this.props)
              result.push([+id2, this.props[id2]]);
          return result;
        }
        /// Balance the direct children of this tree, producing a copy of
        /// which may have children grouped into subtrees with type
        /// [`NodeType.none`](#common.NodeType^none).
        balance(config = {}) {
          return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /// Build a tree from a postfix-ordered buffer of node information,
        /// or a cursor over such a buffer.
        static build(data2) {
          return buildTree(data2);
        }
      };
      Tree.empty = new Tree(NodeType.none, [], [], 0);
      FlatBufferCursor = class {
        constructor(buffer, index) {
          this.buffer = buffer;
          this.index = index;
        }
        get id() {
          return this.buffer[this.index - 4];
        }
        get start() {
          return this.buffer[this.index - 3];
        }
        get end() {
          return this.buffer[this.index - 2];
        }
        get size() {
          return this.buffer[this.index - 1];
        }
        get pos() {
          return this.index;
        }
        next() {
          this.index -= 4;
        }
        fork() {
          return new FlatBufferCursor(this.buffer, this.index);
        }
      };
      TreeBuffer = class {
        /// Create a tree buffer.
        constructor(buffer, length, set2) {
          this.buffer = buffer;
          this.length = length;
          this.set = set2;
        }
        /// @internal
        get type() {
          return NodeType.none;
        }
        /// @internal
        toString() {
          let result = [];
          for (let index = 0; index < this.buffer.length; ) {
            result.push(this.childString(index));
            index = this.buffer[index + 3];
          }
          return result.join(",");
        }
        /// @internal
        childString(index) {
          let id2 = this.buffer[index], endIndex = this.buffer[index + 3];
          let type7 = this.set.types[id2], result = type7.name;
          if (/\W/.test(result) && !type7.isError)
            result = JSON.stringify(result);
          index += 4;
          if (endIndex == index)
            return result;
          let children = [];
          while (index < endIndex) {
            children.push(this.childString(index));
            index = this.buffer[index + 3];
          }
          return result + "(" + children.join(",") + ")";
        }
        /// @internal
        findChild(startIndex, endIndex, dir, pos, side) {
          let { buffer } = this, pick2 = -1;
          for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
              pick2 = i;
              if (dir > 0)
                break;
            }
          }
          return pick2;
        }
        /// @internal
        slice(startI, endI, from3) {
          let b = this.buffer;
          let copy = new Uint16Array(endI - startI), len = 0;
          for (let i = startI, j = 0; i < endI; ) {
            copy[j++] = b[i++];
            copy[j++] = b[i++] - from3;
            let to = copy[j++] = b[i++] - from3;
            copy[j++] = b[i++] - startI;
            len = Math.max(len, to);
          }
          return new TreeBuffer(copy, len, this.set);
        }
      };
      TreeNode = class {
        constructor(_tree, from3, index, _parent) {
          this._tree = _tree;
          this.from = from3;
          this.index = index;
          this._parent = _parent;
        }
        get type() {
          return this._tree.type;
        }
        get name() {
          return this._tree.type.name;
        }
        get to() {
          return this.from + this._tree.length;
        }
        nextChild(i, dir, pos, side, mode = 0) {
          for (let parent = this; ; ) {
            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
              let next2 = children[i], start2 = positions[i] + parent.from;
              if (!checkSide(side, pos, start2, start2 + next2.length))
                continue;
              if (next2 instanceof TreeBuffer) {
                if (mode & IterMode.ExcludeBuffers)
                  continue;
                let index = next2.findChild(0, next2.buffer.length, dir, pos - start2, side);
                if (index > -1)
                  return new BufferNode(new BufferContext(parent, next2, i, start2), null, index);
              } else if (mode & IterMode.IncludeAnonymous || (!next2.type.isAnonymous || hasChild(next2))) {
                let mounted;
                if (!(mode & IterMode.IgnoreMounts) && next2.props && (mounted = next2.prop(NodeProp.mounted)) && !mounted.overlay)
                  return new TreeNode(mounted.tree, start2, i, parent);
                let inner = new TreeNode(next2, start2, i, parent);
                return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next2.children.length - 1 : 0, dir, pos, side);
              }
            }
            if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
              return null;
            if (parent.index >= 0)
              i = parent.index + dir;
            else
              i = dir < 0 ? -1 : parent._parent._tree.children.length;
            parent = parent._parent;
            if (!parent)
              return null;
          }
        }
        get firstChild() {
          return this.nextChild(
            0,
            1,
            0,
            4
            /* Side.DontCare */
          );
        }
        get lastChild() {
          return this.nextChild(
            this._tree.children.length - 1,
            -1,
            0,
            4
            /* Side.DontCare */
          );
        }
        childAfter(pos) {
          return this.nextChild(
            0,
            1,
            pos,
            2
            /* Side.After */
          );
        }
        childBefore(pos) {
          return this.nextChild(
            this._tree.children.length - 1,
            -1,
            pos,
            -2
            /* Side.Before */
          );
        }
        enter(pos, side, mode = 0) {
          let mounted;
          if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
            let rPos = pos - this.from;
            for (let { from: from3, to } of mounted.overlay) {
              if ((side > 0 ? from3 <= rPos : from3 < rPos) && (side < 0 ? to >= rPos : to > rPos))
                return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
            }
          }
          return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
          let val = this;
          while (val.type.isAnonymous && val._parent)
            val = val._parent;
          return val;
        }
        get parent() {
          return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(
            this.index + 1,
            1,
            0,
            4
            /* Side.DontCare */
          ) : null;
        }
        get prevSibling() {
          return this._parent && this.index >= 0 ? this._parent.nextChild(
            this.index - 1,
            -1,
            0,
            4
            /* Side.DontCare */
          ) : null;
        }
        cursor(mode = 0) {
          return new TreeCursor(this, mode);
        }
        get tree() {
          return this._tree;
        }
        toTree() {
          return this._tree;
        }
        resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) {
          return enterUnfinishedNodesBefore(this, pos);
        }
        getChild(type7, before = null, after = null) {
          let r2 = getChildren(this, type7, before, after);
          return r2.length ? r2[0] : null;
        }
        getChildren(type7, before = null, after = null) {
          return getChildren(this, type7, before, after);
        }
        /// @internal
        toString() {
          return this._tree.toString();
        }
        get node() {
          return this;
        }
        matchContext(context) {
          return matchNodeContext(this, context);
        }
      };
      BufferContext = class {
        constructor(parent, buffer, index, start2) {
          this.parent = parent;
          this.buffer = buffer;
          this.index = index;
          this.start = start2;
        }
      };
      BufferNode = class {
        get name() {
          return this.type.name;
        }
        get from() {
          return this.context.start + this.context.buffer.buffer[this.index + 1];
        }
        get to() {
          return this.context.start + this.context.buffer.buffer[this.index + 2];
        }
        constructor(context, _parent, index) {
          this.context = context;
          this._parent = _parent;
          this.index = index;
          this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        child(dir, pos, side) {
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() {
          return this.child(
            1,
            0,
            4
            /* Side.DontCare */
          );
        }
        get lastChild() {
          return this.child(
            -1,
            0,
            4
            /* Side.DontCare */
          );
        }
        childAfter(pos) {
          return this.child(
            1,
            pos,
            2
            /* Side.After */
          );
        }
        childBefore(pos) {
          return this.child(
            -1,
            pos,
            -2
            /* Side.Before */
          );
        }
        enter(pos, side, mode = 0) {
          if (mode & IterMode.ExcludeBuffers)
            return null;
          let { buffer } = this.context;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
          return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
          return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
          return this._parent ? null : this.context.parent.nextChild(
            this.context.index + dir,
            dir,
            0,
            4
            /* Side.DontCare */
          );
        }
        get nextSibling() {
          let { buffer } = this.context;
          let after = buffer.buffer[this.index + 3];
          if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
            return new BufferNode(this.context, this._parent, after);
          return this.externalSibling(1);
        }
        get prevSibling() {
          let { buffer } = this.context;
          let parentStart = this._parent ? this._parent.index + 4 : 0;
          if (this.index == parentStart)
            return this.externalSibling(-1);
          return new BufferNode(this.context, this._parent, buffer.findChild(
            parentStart,
            this.index,
            -1,
            0,
            4
            /* Side.DontCare */
          ));
        }
        cursor(mode = 0) {
          return new TreeCursor(this, mode);
        }
        get tree() {
          return null;
        }
        toTree() {
          let children = [], positions = [];
          let { buffer } = this.context;
          let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
          if (endI > startI) {
            let from3 = buffer.buffer[this.index + 1];
            children.push(buffer.slice(startI, endI, from3));
            positions.push(0);
          }
          return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
          return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
          return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) {
          return enterUnfinishedNodesBefore(this, pos);
        }
        /// @internal
        toString() {
          return this.context.buffer.childString(this.index);
        }
        getChild(type7, before = null, after = null) {
          let r2 = getChildren(this, type7, before, after);
          return r2.length ? r2[0] : null;
        }
        getChildren(type7, before = null, after = null) {
          return getChildren(this, type7, before, after);
        }
        get node() {
          return this;
        }
        matchContext(context) {
          return matchNodeContext(this, context);
        }
      };
      TreeCursor = class {
        /// Shorthand for `.type.name`.
        get name() {
          return this.type.name;
        }
        /// @internal
        constructor(node, mode = 0) {
          this.mode = mode;
          this.buffer = null;
          this.stack = [];
          this.index = 0;
          this.bufferNode = null;
          if (node instanceof TreeNode) {
            this.yieldNode(node);
          } else {
            this._tree = node.context.parent;
            this.buffer = node.context;
            for (let n2 = node._parent; n2; n2 = n2._parent)
              this.stack.unshift(n2.index);
            this.bufferNode = node;
            this.yieldBuf(node.index);
          }
        }
        yieldNode(node) {
          if (!node)
            return false;
          this._tree = node;
          this.type = node.type;
          this.from = node.from;
          this.to = node.to;
          return true;
        }
        yieldBuf(index, type7) {
          this.index = index;
          let { start: start2, buffer } = this.buffer;
          this.type = type7 || buffer.set.types[buffer.buffer[index]];
          this.from = start2 + buffer.buffer[index + 1];
          this.to = start2 + buffer.buffer[index + 2];
          return true;
        }
        yield(node) {
          if (!node)
            return false;
          if (node instanceof TreeNode) {
            this.buffer = null;
            return this.yieldNode(node);
          }
          this.buffer = node.context;
          return this.yieldBuf(node.index, node.type);
        }
        /// @internal
        toString() {
          return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /// @internal
        enterChild(dir, pos, side) {
          if (!this.buffer)
            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
          let { buffer } = this.buffer;
          let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
          if (index < 0)
            return false;
          this.stack.push(this.index);
          return this.yieldBuf(index);
        }
        /// Move the cursor to this node's first child. When this returns
        /// false, the node has no child, and the cursor has not been moved.
        firstChild() {
          return this.enterChild(
            1,
            0,
            4
            /* Side.DontCare */
          );
        }
        /// Move the cursor to this node's last child.
        lastChild() {
          return this.enterChild(
            -1,
            0,
            4
            /* Side.DontCare */
          );
        }
        /// Move the cursor to the first child that ends after `pos`.
        childAfter(pos) {
          return this.enterChild(
            1,
            pos,
            2
            /* Side.After */
          );
        }
        /// Move to the last child that starts before `pos`.
        childBefore(pos) {
          return this.enterChild(
            -1,
            pos,
            -2
            /* Side.Before */
          );
        }
        /// Move the cursor to the child around `pos`. If side is -1 the
        /// child may end at that position, when 1 it may start there. This
        /// will also enter [overlaid](#common.MountedTree.overlay)
        /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        /// set to false.
        enter(pos, side, mode = this.mode) {
          if (!this.buffer)
            return this.yield(this._tree.enter(pos, side, mode));
          return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /// Move to the node's parent node, if this isn't the top node.
        parent() {
          if (!this.buffer)
            return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
          if (this.stack.length)
            return this.yieldBuf(this.stack.pop());
          let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
          this.buffer = null;
          return this.yieldNode(parent);
        }
        /// @internal
        sibling(dir) {
          if (!this.buffer)
            return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
          let { buffer } = this.buffer, d3 = this.stack.length - 1;
          if (dir < 0) {
            let parentStart = d3 < 0 ? 0 : this.stack[d3] + 4;
            if (this.index != parentStart)
              return this.yieldBuf(buffer.findChild(
                parentStart,
                this.index,
                -1,
                0,
                4
                /* Side.DontCare */
              ));
          } else {
            let after = buffer.buffer[this.index + 3];
            if (after < (d3 < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d3] + 3]))
              return this.yieldBuf(after);
          }
          return d3 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
        }
        /// Move to this node's next sibling, if any.
        nextSibling() {
          return this.sibling(1);
        }
        /// Move to this node's previous sibling, if any.
        prevSibling() {
          return this.sibling(-1);
        }
        atLastNode(dir) {
          let index, parent, { buffer } = this;
          if (buffer) {
            if (dir > 0) {
              if (this.index < buffer.buffer.buffer.length)
                return false;
            } else {
              for (let i = 0; i < this.index; i++)
                if (buffer.buffer.buffer[i + 3] < this.index)
                  return false;
            }
            ({ index, parent } = buffer);
          } else {
            ({ index, _parent: parent } = this._tree);
          }
          for (; parent; { index, _parent: parent } = parent) {
            if (index > -1)
              for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                let child = parent._tree.children[i];
                if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
                  return false;
              }
          }
          return true;
        }
        move(dir, enter) {
          if (enter && this.enterChild(
            dir,
            0,
            4
            /* Side.DontCare */
          ))
            return true;
          for (; ; ) {
            if (this.sibling(dir))
              return true;
            if (this.atLastNode(dir) || !this.parent())
              return false;
          }
        }
        /// Move to the next node in a
        /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
        /// traversal, going from a node to its first child or, if the
        /// current node is empty or `enter` is false, its next sibling or
        /// the next sibling of the first parent node that has one.
        next(enter = true) {
          return this.move(1, enter);
        }
        /// Move to the next node in a last-to-first pre-order traveral. A
        /// node is followed by its last child or, if it has none, its
        /// previous sibling or the previous sibling of the first parent
        /// node that has one.
        prev(enter = true) {
          return this.move(-1, enter);
        }
        /// Move the cursor to the innermost node that covers `pos`. If
        /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        /// it will enter nodes that start at `pos`.
        moveTo(pos, side = 0) {
          while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos))
            if (!this.parent())
              break;
          while (this.enterChild(1, pos, side)) {
          }
          return this;
        }
        /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
        /// position.
        get node() {
          if (!this.buffer)
            return this._tree;
          let cache3 = this.bufferNode, result = null, depth = 0;
          if (cache3 && cache3.context == this.buffer) {
            scan:
              for (let index = this.index, d3 = this.stack.length; d3 >= 0; ) {
                for (let c2 = cache3; c2; c2 = c2._parent)
                  if (c2.index == index) {
                    if (index == this.index)
                      return c2;
                    result = c2;
                    depth = d3 + 1;
                    break scan;
                  }
                index = this.stack[--d3];
              }
          }
          for (let i = depth; i < this.stack.length; i++)
            result = new BufferNode(this.buffer, result, this.stack[i]);
          return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /// Get the [tree](#common.Tree) that represents the current node, if
        /// any. Will return null when the node is in a [tree
        /// buffer](#common.TreeBuffer).
        get tree() {
          return this.buffer ? null : this._tree._tree;
        }
        /// Iterate over the current node and all its descendants, calling
        /// `enter` when entering a node and `leave`, if given, when leaving
        /// one. When `enter` returns `false`, any children of that node are
        /// skipped, and `leave` isn't called for it.
        iterate(enter, leave) {
          for (let depth = 0; ; ) {
            let mustLeave = false;
            if (this.type.isAnonymous || enter(this) !== false) {
              if (this.firstChild()) {
                depth++;
                continue;
              }
              if (!this.type.isAnonymous)
                mustLeave = true;
            }
            for (; ; ) {
              if (mustLeave && leave)
                leave(this);
              mustLeave = this.type.isAnonymous;
              if (this.nextSibling())
                break;
              if (!depth)
                return;
              this.parent();
              depth--;
              mustLeave = true;
            }
          }
        }
        /// Test whether the current node matches a given context—a sequence
        /// of direct parent node names. Empty strings in the context array
        /// are treated as wildcards.
        matchContext(context) {
          if (!this.buffer)
            return matchNodeContext(this.node, context);
          let { buffer } = this.buffer, { types: types8 } = buffer.set;
          for (let i = context.length - 1, d3 = this.stack.length - 1; i >= 0; d3--) {
            if (d3 < 0)
              return matchNodeContext(this.node, context, i);
            let type7 = types8[buffer.buffer[this.stack[d3]]];
            if (!type7.isAnonymous) {
              if (context[i] && context[i] != type7.name)
                return false;
              i--;
            }
          }
          return true;
        }
      };
      nodeSizeCache = /* @__PURE__ */ new WeakMap();
      NodeWeakMap = class {
        constructor() {
          this.map = /* @__PURE__ */ new WeakMap();
        }
        setBuffer(buffer, index, value) {
          let inner = this.map.get(buffer);
          if (!inner)
            this.map.set(buffer, inner = /* @__PURE__ */ new Map());
          inner.set(index, value);
        }
        getBuffer(buffer, index) {
          let inner = this.map.get(buffer);
          return inner && inner.get(index);
        }
        /// Set the value for this syntax node.
        set(node, value) {
          if (node instanceof BufferNode)
            this.setBuffer(node.context.buffer, node.index, value);
          else if (node instanceof TreeNode)
            this.map.set(node.tree, value);
        }
        /// Retrieve value for this syntax node, if it exists in the map.
        get(node) {
          return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index) : node instanceof TreeNode ? this.map.get(node.tree) : void 0;
        }
        /// Set the value for the node that a cursor currently points to.
        cursorSet(cursor, value) {
          if (cursor.buffer)
            this.setBuffer(cursor.buffer.buffer, cursor.index, value);
          else
            this.map.set(cursor.tree, value);
        }
        /// Retrieve the value for the node that a cursor currently points
        /// to.
        cursorGet(cursor) {
          return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
        }
      };
      TreeFragment = class {
        /// Construct a tree fragment. You'll usually want to use
        /// [`addTree`](#common.TreeFragment^addTree) and
        /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        /// calling this directly.
        constructor(from3, to, tree, offset2, openStart = false, openEnd = false) {
          this.from = from3;
          this.to = to;
          this.tree = tree;
          this.offset = offset2;
          this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
        }
        /// Whether the start of the fragment represents the start of a
        /// parse, or the end of a change. (In the second case, it may not
        /// be safe to reuse some nodes at the start, depending on the
        /// parsing algorithm.)
        get openStart() {
          return (this.open & 1) > 0;
        }
        /// Whether the end of the fragment represents the end of a
        /// full-document parse, or the start of a change.
        get openEnd() {
          return (this.open & 2) > 0;
        }
        /// Create a set of fragments from a freshly parsed tree, or update
        /// an existing set of fragments by replacing the ones that overlap
        /// with a tree with content from the new tree. When `partial` is
        /// true, the parse is treated as incomplete, and the resulting
        /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        /// true.
        static addTree(tree, fragments = [], partial = false) {
          let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
          for (let f of fragments)
            if (f.to > tree.length)
              result.push(f);
          return result;
        }
        /// Apply a set of edits to an array of fragments, removing or
        /// splitting fragments as necessary to remove edited ranges, and
        /// adjusting offsets for fragments that moved.
        static applyChanges(fragments, changes, minGap = 128) {
          if (!changes.length)
            return fragments;
          let result = [];
          let fI = 1, nextF = fragments.length ? fragments[0] : null;
          for (let cI = 0, pos = 0, off = 0; ; cI++) {
            let nextC = cI < changes.length ? changes[cI] : null;
            let nextPos = nextC ? nextC.fromA : 1e9;
            if (nextPos - pos >= minGap)
              while (nextF && nextF.from < nextPos) {
                let cut = nextF;
                if (pos >= cut.from || nextPos <= cut.to || off) {
                  let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                  cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                }
                if (cut)
                  result.push(cut);
                if (nextF.to > nextPos)
                  break;
                nextF = fI < fragments.length ? fragments[fI++] : null;
              }
            if (!nextC)
              break;
            pos = nextC.toA;
            off = nextC.toA - nextC.toB;
          }
          return result;
        }
      };
      Parser = class {
        /// Start a parse, returning a [partial parse](#common.PartialParse)
        /// object. [`fragments`](#common.TreeFragment) can be passed in to
        /// make the parse incremental.
        ///
        /// By default, the entire input is parsed. You can pass `ranges`,
        /// which should be a sorted array of non-empty, non-overlapping
        /// ranges, to parse only those ranges. The tree returned in that
        /// case will start at `ranges[0].from`.
        startParse(input, fragments, ranges) {
          if (typeof input == "string")
            input = new StringInput(input);
          ranges = !ranges ? [new Range2(0, input.length)] : ranges.length ? ranges.map((r2) => new Range2(r2.from, r2.to)) : [new Range2(0, 0)];
          return this.createParse(input, fragments || [], ranges);
        }
        /// Run a full parse, returning the resulting tree.
        parse(input, fragments, ranges) {
          let parse2 = this.startParse(input, fragments, ranges);
          for (; ; ) {
            let done = parse2.advance();
            if (done)
              return done;
          }
        }
      };
      StringInput = class {
        constructor(string3) {
          this.string = string3;
        }
        get length() {
          return this.string.length;
        }
        chunk(from3) {
          return this.string.slice(from3);
        }
        get lineChunks() {
          return false;
        }
        read(from3, to) {
          return this.string.slice(from3, to);
        }
      };
      InnerParse = class {
        constructor(parser14, parse2, overlay, target, ranges) {
          this.parser = parser14;
          this.parse = parse2;
          this.overlay = overlay;
          this.target = target;
          this.ranges = ranges;
        }
      };
      ActiveOverlay = class {
        constructor(parser14, predicate, mounts, index, start2, target, prev) {
          this.parser = parser14;
          this.predicate = predicate;
          this.mounts = mounts;
          this.index = index;
          this.start = start2;
          this.target = target;
          this.prev = prev;
          this.depth = 0;
          this.ranges = [];
        }
      };
      stoppedInner = new NodeProp({ perNode: true });
      MixedParse = class {
        constructor(base4, nest, input, fragments, ranges) {
          this.nest = nest;
          this.input = input;
          this.fragments = fragments;
          this.ranges = ranges;
          this.inner = [];
          this.innerDone = 0;
          this.baseTree = null;
          this.stoppedAt = null;
          this.baseParse = base4;
        }
        advance() {
          if (this.baseParse) {
            let done2 = this.baseParse.advance();
            if (!done2)
              return null;
            this.baseParse = null;
            this.baseTree = done2;
            this.startInner();
            if (this.stoppedAt != null)
              for (let inner2 of this.inner)
                inner2.parse.stopAt(this.stoppedAt);
          }
          if (this.innerDone == this.inner.length) {
            let result = this.baseTree;
            if (this.stoppedAt != null)
              result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
            return result;
          }
          let inner = this.inner[this.innerDone], done = inner.parse.advance();
          if (done) {
            this.innerDone++;
            let props = Object.assign(/* @__PURE__ */ Object.create(null), inner.target.props);
            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
            inner.target.props = props;
          }
          return null;
        }
        get parsedPos() {
          if (this.baseParse)
            return 0;
          let pos = this.input.length;
          for (let i = this.innerDone; i < this.inner.length; i++) {
            if (this.inner[i].ranges[0].from < pos)
              pos = Math.min(pos, this.inner[i].parse.parsedPos);
          }
          return pos;
        }
        stopAt(pos) {
          this.stoppedAt = pos;
          if (this.baseParse)
            this.baseParse.stopAt(pos);
          else
            for (let i = this.innerDone; i < this.inner.length; i++)
              this.inner[i].parse.stopAt(pos);
        }
        startInner() {
          let fragmentCursor = new FragmentCursor(this.fragments);
          let overlay = null;
          let covered = null;
          let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
          scan:
            for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt; ) {
              let enter = true, range;
              if (fragmentCursor.hasNode(cursor)) {
                if (overlay) {
                  let match3 = overlay.mounts.find((m) => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                  if (match3)
                    for (let r2 of match3.mount.overlay) {
                      let from3 = r2.from + match3.pos, to = r2.to + match3.pos;
                      if (from3 >= cursor.from && to <= cursor.to && !overlay.ranges.some((r3) => r3.from < to && r3.to > from3))
                        overlay.ranges.push({ from: from3, to });
                    }
                }
                enter = false;
              } else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                enter = isCovered != 2;
              } else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                if (!cursor.tree)
                  materialize(cursor);
                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                if (typeof nest.overlay == "function") {
                  overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                } else {
                  let ranges = punchRanges(this.ranges, nest.overlay || [new Range2(cursor.from, cursor.to)]);
                  if (ranges.length)
                    this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map((r2) => new Range2(r2.from - cursor.from, r2.to - cursor.from)) : null, cursor.tree, ranges));
                  if (!nest.overlay)
                    enter = false;
                  else if (ranges.length)
                    covered = { ranges, depth: 0, prev: covered };
                }
              } else if (overlay && (range = overlay.predicate(cursor))) {
                if (range === true)
                  range = new Range2(cursor.from, cursor.to);
                if (range.from < range.to)
                  overlay.ranges.push(range);
              }
              if (enter && cursor.firstChild()) {
                if (overlay)
                  overlay.depth++;
                if (covered)
                  covered.depth++;
              } else {
                for (; ; ) {
                  if (cursor.nextSibling())
                    break;
                  if (!cursor.parent())
                    break scan;
                  if (overlay && !--overlay.depth) {
                    let ranges = punchRanges(this.ranges, overlay.ranges);
                    if (ranges.length)
                      this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map((r2) => new Range2(r2.from - overlay.start, r2.to - overlay.start)), overlay.target, ranges));
                    overlay = overlay.prev;
                  }
                  if (covered && !--covered.depth)
                    covered = covered.prev;
                }
              }
            }
        }
      };
      StructureCursor = class {
        constructor(root, offset2) {
          this.offset = offset2;
          this.done = false;
          this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
        }
        // Move to the first node (in pre-order) that starts at or after `pos`.
        moveTo(pos) {
          let { cursor } = this, p = pos - this.offset;
          while (!this.done && cursor.from < p) {
            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers))
              ;
            else if (!cursor.next(false))
              this.done = true;
          }
        }
        hasNode(cursor) {
          this.moveTo(cursor.from);
          if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
            for (let tree = this.cursor.tree; ; ) {
              if (tree == cursor.tree)
                return true;
              if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                tree = tree.children[0];
              else
                break;
            }
          }
          return false;
        }
      };
      FragmentCursor = class {
        constructor(fragments) {
          var _a2;
          this.fragments = fragments;
          this.curTo = 0;
          this.fragI = 0;
          if (fragments.length) {
            let first = this.curFrag = fragments[0];
            this.curTo = (_a2 = first.tree.prop(stoppedInner)) !== null && _a2 !== void 0 ? _a2 : first.to;
            this.inner = new StructureCursor(first.tree, -first.offset);
          } else {
            this.curFrag = this.inner = null;
          }
        }
        hasNode(node) {
          while (this.curFrag && node.from >= this.curTo)
            this.nextFrag();
          return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
        }
        nextFrag() {
          var _a2;
          this.fragI++;
          if (this.fragI == this.fragments.length) {
            this.curFrag = this.inner = null;
          } else {
            let frag = this.curFrag = this.fragments[this.fragI];
            this.curTo = (_a2 = frag.tree.prop(stoppedInner)) !== null && _a2 !== void 0 ? _a2 : frag.to;
            this.inner = new StructureCursor(frag.tree, -frag.offset);
          }
        }
        findMounts(pos, parser14) {
          var _a2;
          let result = [];
          if (this.inner) {
            this.inner.cursor.moveTo(pos, 1);
            for (let pos2 = this.inner.cursor.node; pos2; pos2 = pos2.parent) {
              let mount = (_a2 = pos2.tree) === null || _a2 === void 0 ? void 0 : _a2.prop(NodeProp.mounted);
              if (mount && mount.parser == parser14) {
                for (let i = this.fragI; i < this.fragments.length; i++) {
                  let frag = this.fragments[i];
                  if (frag.from >= pos2.to)
                    break;
                  if (frag.tree == this.curFrag.tree)
                    result.push({
                      frag,
                      pos: pos2.from - frag.offset,
                      mount
                    });
                }
              }
            }
          }
          return result;
        }
      };
    }
  });

  // node_modules/@lezer/highlight/dist/index.js
  function sameArray2(a2, b) {
    return a2.length == b.length && a2.every((x, i) => x == b[i]);
  }
  function powerSet(array2) {
    let sets = [[]];
    for (let i = 0; i < array2.length; i++) {
      for (let j = 0, e = sets.length; j < e; j++) {
        sets.push(sets[j].concat(array2[i]));
      }
    }
    return sets.sort((a2, b) => b.length - a2.length);
  }
  function styleTags(spec) {
    let byName = /* @__PURE__ */ Object.create(null);
    for (let prop in spec) {
      let tags3 = spec[prop];
      if (!Array.isArray(tags3))
        tags3 = [tags3];
      for (let part of prop.split(" "))
        if (part) {
          let pieces = [], mode = 2, rest = part;
          for (let pos = 0; ; ) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1;
              break;
            }
            let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m)
              throw new RangeError("Invalid path: " + part);
            pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
            pos += m[0].length;
            if (pos == part.length)
              break;
            let next2 = part[pos++];
            if (pos == part.length && next2 == "!") {
              mode = 0;
              break;
            }
            if (next2 != "/")
              throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          let last = pieces.length - 1, inner = pieces[last];
          if (!inner)
            throw new RangeError("Invalid path: " + part);
          let rule = new Rule(tags3, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
    }
    return ruleNodeProp.add(byName);
  }
  function tagHighlighter(tags3, options) {
    let map = /* @__PURE__ */ Object.create(null);
    for (let style2 of tags3) {
      if (!Array.isArray(style2.tag))
        map[style2.tag.id] = style2.class;
      else
        for (let tag of style2.tag)
          map[tag.id] = style2.class;
    }
    let { scope, all = null } = options || {};
    return {
      style: (tags4) => {
        let cls = all;
        for (let tag of tags4) {
          for (let sub of tag.set) {
            let tagClass = map[sub.id];
            if (tagClass) {
              cls = cls ? cls + " " + tagClass : tagClass;
              break;
            }
          }
        }
        return cls;
      },
      scope
    };
  }
  var nextTagID, Tag, nextModifierID, Modifier, ruleNodeProp, Rule, t, comment, name, typeName, propertyName, literal, string, number, content, heading, keyword, operator, punctuation, bracket, meta, tags, classHighlighter;
  var init_dist4 = __esm({
    "node_modules/@lezer/highlight/dist/index.js"() {
      init_dist3();
      nextTagID = 0;
      Tag = class {
        /**
        @internal
        */
        constructor(set2, base4, modified) {
          this.set = set2;
          this.base = base4;
          this.modified = modified;
          this.id = nextTagID++;
        }
        /**
        Define a new tag. If `parent` is given, the tag is treated as a
        sub-tag of that parent, and
        [highlighters](#highlight.tagHighlighter) that don't mention
        this tag will try to fall back to the parent tag (or grandparent
        tag, etc).
        */
        static define(parent) {
          if (parent === null || parent === void 0 ? void 0 : parent.base)
            throw new Error("Can not derive from a modified tag");
          let tag = new Tag([], null, []);
          tag.set.push(tag);
          if (parent)
            for (let t2 of parent.set)
              tag.set.push(t2);
          return tag;
        }
        /**
        Define a tag _modifier_, which is a function that, given a tag,
        will return a tag that is a subtag of the original. Applying the
        same modifier to a twice tag will return the same value (`m1(t1)
        == m1(t1)`) and applying multiple modifiers will, regardless or
        order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        
        When multiple modifiers are applied to a given base tag, each
        smaller set of modifiers is registered as a parent, so that for
        example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        `m1(m3(t1)`, and so on.
        */
        static defineModifier() {
          let mod = new Modifier();
          return (tag) => {
            if (tag.modified.indexOf(mod) > -1)
              return tag;
            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a2, b) => a2.id - b.id));
          };
        }
      };
      nextModifierID = 0;
      Modifier = class {
        constructor() {
          this.instances = [];
          this.id = nextModifierID++;
        }
        static get(base4, mods) {
          if (!mods.length)
            return base4;
          let exists = mods[0].instances.find((t2) => t2.base == base4 && sameArray2(mods, t2.modified));
          if (exists)
            return exists;
          let set2 = [], tag = new Tag(set2, base4, mods);
          for (let m of mods)
            m.instances.push(tag);
          let configs = powerSet(mods);
          for (let parent of base4.set)
            if (!parent.modified.length)
              for (let config of configs)
                set2.push(Modifier.get(parent, config));
          return tag;
        }
      };
      ruleNodeProp = new NodeProp();
      Rule = class {
        constructor(tags3, mode, context, next2) {
          this.tags = tags3;
          this.mode = mode;
          this.context = context;
          this.next = next2;
        }
        get opaque() {
          return this.mode == 0;
        }
        get inherit() {
          return this.mode == 1;
        }
        sort(other) {
          if (!other || other.depth < this.depth) {
            this.next = other;
            return this;
          }
          other.next = this.sort(other.next);
          return other;
        }
        get depth() {
          return this.context ? this.context.length : 0;
        }
      };
      Rule.empty = new Rule([], 2, null);
      t = Tag.define;
      comment = t();
      name = t();
      typeName = t(name);
      propertyName = t(name);
      literal = t();
      string = t(literal);
      number = t(literal);
      content = t();
      heading = t(content);
      keyword = t();
      operator = t();
      punctuation = t();
      bracket = t(punctuation);
      meta = t();
      tags = {
        /**
        A comment.
        */
        comment,
        /**
        A line [comment](#highlight.tags.comment).
        */
        lineComment: t(comment),
        /**
        A block [comment](#highlight.tags.comment).
        */
        blockComment: t(comment),
        /**
        A documentation [comment](#highlight.tags.comment).
        */
        docComment: t(comment),
        /**
        Any kind of identifier.
        */
        name,
        /**
        The [name](#highlight.tags.name) of a variable.
        */
        variableName: t(name),
        /**
        A type [name](#highlight.tags.name).
        */
        typeName,
        /**
        A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        */
        tagName: t(typeName),
        /**
        A property or field [name](#highlight.tags.name).
        */
        propertyName,
        /**
        An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        */
        attributeName: t(propertyName),
        /**
        The [name](#highlight.tags.name) of a class.
        */
        className: t(name),
        /**
        A label [name](#highlight.tags.name).
        */
        labelName: t(name),
        /**
        A namespace [name](#highlight.tags.name).
        */
        namespace: t(name),
        /**
        The [name](#highlight.tags.name) of a macro.
        */
        macroName: t(name),
        /**
        A literal value.
        */
        literal,
        /**
        A string [literal](#highlight.tags.literal).
        */
        string,
        /**
        A documentation [string](#highlight.tags.string).
        */
        docString: t(string),
        /**
        A character literal (subtag of [string](#highlight.tags.string)).
        */
        character: t(string),
        /**
        An attribute value (subtag of [string](#highlight.tags.string)).
        */
        attributeValue: t(string),
        /**
        A number [literal](#highlight.tags.literal).
        */
        number,
        /**
        An integer [number](#highlight.tags.number) literal.
        */
        integer: t(number),
        /**
        A floating-point [number](#highlight.tags.number) literal.
        */
        float: t(number),
        /**
        A boolean [literal](#highlight.tags.literal).
        */
        bool: t(literal),
        /**
        Regular expression [literal](#highlight.tags.literal).
        */
        regexp: t(literal),
        /**
        An escape [literal](#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: t(literal),
        /**
        A color [literal](#highlight.tags.literal).
        */
        color: t(literal),
        /**
        A URL [literal](#highlight.tags.literal).
        */
        url: t(literal),
        /**
        A language keyword.
        */
        keyword,
        /**
        The [keyword](#highlight.tags.keyword) for the self or this
        object.
        */
        self: t(keyword),
        /**
        The [keyword](#highlight.tags.keyword) for null.
        */
        null: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) denoting some atomic value.
        */
        atom: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that represents a unit.
        */
        unit: t(keyword),
        /**
        A modifier [keyword](#highlight.tags.keyword).
        */
        modifier: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: t(keyword),
        /**
        A control-flow related [keyword](#highlight.tags.keyword).
        */
        controlKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) related to defining or
        interfacing with modules.
        */
        moduleKeyword: t(keyword),
        /**
        An operator.
        */
        operator,
        /**
        An [operator](#highlight.tags.operator) that dereferences something.
        */
        derefOperator: t(operator),
        /**
        Arithmetic-related [operator](#highlight.tags.operator).
        */
        arithmeticOperator: t(operator),
        /**
        Logical [operator](#highlight.tags.operator).
        */
        logicOperator: t(operator),
        /**
        Bit [operator](#highlight.tags.operator).
        */
        bitwiseOperator: t(operator),
        /**
        Comparison [operator](#highlight.tags.operator).
        */
        compareOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that updates its operand.
        */
        updateOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that defines something.
        */
        definitionOperator: t(operator),
        /**
        Type-related [operator](#highlight.tags.operator).
        */
        typeOperator: t(operator),
        /**
        Control-flow [operator](#highlight.tags.operator).
        */
        controlOperator: t(operator),
        /**
        Program or markup punctuation.
        */
        punctuation,
        /**
        [Punctuation](#highlight.tags.punctuation) that separates
        things.
        */
        separator: t(punctuation),
        /**
        Bracket-style [punctuation](#highlight.tags.punctuation).
        */
        bracket,
        /**
        Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: t(bracket),
        /**
        Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: t(bracket),
        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        paren: t(bracket),
        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        brace: t(bracket),
        /**
        Content, for example plain text in XML or markup documents.
        */
        content,
        /**
        [Content](#highlight.tags.content) that represents a heading.
        */
        heading,
        /**
        A level 1 [heading](#highlight.tags.heading).
        */
        heading1: t(heading),
        /**
        A level 2 [heading](#highlight.tags.heading).
        */
        heading2: t(heading),
        /**
        A level 3 [heading](#highlight.tags.heading).
        */
        heading3: t(heading),
        /**
        A level 4 [heading](#highlight.tags.heading).
        */
        heading4: t(heading),
        /**
        A level 5 [heading](#highlight.tags.heading).
        */
        heading5: t(heading),
        /**
        A level 6 [heading](#highlight.tags.heading).
        */
        heading6: t(heading),
        /**
        A prose separator (such as a horizontal rule).
        */
        contentSeparator: t(content),
        /**
        [Content](#highlight.tags.content) that represents a list.
        */
        list: t(content),
        /**
        [Content](#highlight.tags.content) that represents a quote.
        */
        quote: t(content),
        /**
        [Content](#highlight.tags.content) that is emphasized.
        */
        emphasis: t(content),
        /**
        [Content](#highlight.tags.content) that is styled strong.
        */
        strong: t(content),
        /**
        [Content](#highlight.tags.content) that is part of a link.
        */
        link: t(content),
        /**
        [Content](#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: t(content),
        /**
        [Content](#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: t(content),
        /**
        Inserted text in a change-tracking format.
        */
        inserted: t(),
        /**
        Deleted text.
        */
        deleted: t(),
        /**
        Changed text.
        */
        changed: t(),
        /**
        An invalid or unsyntactic element.
        */
        invalid: t(),
        /**
        Metadata or meta-instruction.
        */
        meta,
        /**
        [Metadata](#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: t(meta),
        /**
        [Metadata](#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: t(meta),
        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](#highlight.tags.meta).
        */
        processingInstruction: t(meta),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](#highlight.tags.name) tags.
        */
        definition: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](#highlight.tags.variableName).
        */
        constant: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) used to indicate that
        a [variable](#highlight.tags.variableName) or [property
        name](#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        function: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that can be applied to
        [names](#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates a given
        [names](#highlight.tags.name) is local to some scope.
        */
        local: Tag.defineModifier(),
        /**
        A generic variant [modifier](#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](#highlight.tags.string) and
        [variable name](#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: Tag.defineModifier()
      };
      classHighlighter = tagHighlighter([
        { tag: tags.link, class: "tok-link" },
        { tag: tags.heading, class: "tok-heading" },
        { tag: tags.emphasis, class: "tok-emphasis" },
        { tag: tags.strong, class: "tok-strong" },
        { tag: tags.keyword, class: "tok-keyword" },
        { tag: tags.atom, class: "tok-atom" },
        { tag: tags.bool, class: "tok-bool" },
        { tag: tags.url, class: "tok-url" },
        { tag: tags.labelName, class: "tok-labelName" },
        { tag: tags.inserted, class: "tok-inserted" },
        { tag: tags.deleted, class: "tok-deleted" },
        { tag: tags.literal, class: "tok-literal" },
        { tag: tags.string, class: "tok-string" },
        { tag: tags.number, class: "tok-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
        { tag: tags.variableName, class: "tok-variableName" },
        { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
        { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
        { tag: tags.special(tags.variableName), class: "tok-variableName2" },
        { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags.typeName, class: "tok-typeName" },
        { tag: tags.namespace, class: "tok-namespace" },
        { tag: tags.className, class: "tok-className" },
        { tag: tags.macroName, class: "tok-macroName" },
        { tag: tags.propertyName, class: "tok-propertyName" },
        { tag: tags.operator, class: "tok-operator" },
        { tag: tags.comment, class: "tok-comment" },
        { tag: tags.meta, class: "tok-meta" },
        { tag: tags.invalid, class: "tok-invalid" },
        { tag: tags.punctuation, class: "tok-punctuation" }
      ]);
    }
  });

  // node_modules/@codemirror/language/dist/index.js
  function defineLanguageFacet(baseData) {
    return Facet.define({
      combine: baseData ? (values2) => values2.concat(baseData) : void 0
    });
  }
  function topNodeAt(state, pos, side) {
    let topLang = state.facet(language), tree = syntaxTree(state).topNode;
    if (!topLang || topLang.allowsNesting) {
      for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
        if (node.type.isTop)
          tree = node;
    }
    return tree;
  }
  function syntaxTree(state) {
    let field = state.field(Language.state, false);
    return field ? field.tree : Tree.empty;
  }
  function cutFragments(fragments, from3, to) {
    return TreeFragment.applyChanges(fragments, [{ fromA: from3, toA: to, fromB: from3, toB: to }]);
  }
  function getIndentUnit(state) {
    let unit = state.facet(indentUnit);
    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
  }
  function bracketedAligned(context) {
    let tree = context.node;
    let openToken = tree.childAfter(tree.from), last = tree.lastChild;
    if (!openToken)
      return null;
    let sim = context.options.simulateBreak;
    let openLine = context.state.doc.lineAt(openToken.from);
    let lineEnd2 = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
    for (let pos = openToken.to; ; ) {
      let next2 = tree.childAfter(pos);
      if (!next2 || next2 == last)
        return null;
      if (!next2.type.isSkipped)
        return next2.from < lineEnd2 ? openToken : null;
      pos = next2.to;
    }
  }
  function delimitedIndent({ closing: closing3, align = true, units = 1 }) {
    return (context) => delimitedStrategy(context, align, units, closing3);
  }
  function delimitedStrategy(context, align, units, closing3, closedAt) {
    let after = context.textAfter, space5 = after.match(/^\s*/)[0].length;
    let closed = closing3 && after.slice(space5, space5 + closing3.length) == closing3 || closedAt == context.pos + space5;
    let aligned = align ? bracketedAligned(context) : null;
    if (aligned)
      return closed ? context.column(aligned.from) : context.column(aligned.to);
    return context.baseIndent + (closed ? 0 : context.unit * units);
  }
  function continuedIndent({ except, units = 1 } = {}) {
    return (context) => {
      let matchExcept = except && except.test(context.textAfter);
      return context.baseIndent + (matchExcept ? 0 : units * context.unit);
    };
  }
  function foldInside(node) {
    let first = node.firstChild, last = node.lastChild;
    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
  }
  function countCol(string3, end2, tabSize, startIndex = 0, startValue = 0) {
    if (end2 == null) {
      end2 = string3.search(/[^\s\u00a0]/);
      if (end2 == -1)
        end2 = string3.length;
    }
    let n2 = startValue;
    for (let i = startIndex; i < end2; i++) {
      if (string3.charCodeAt(i) == 9)
        n2 += tabSize - n2 % tabSize;
      else
        n2++;
    }
    return n2;
  }
  function fullParser(spec) {
    return {
      name: spec.name || "",
      token: spec.token,
      blankLine: spec.blankLine || (() => {
      }),
      startState: spec.startState || (() => true),
      copyState: spec.copyState || defaultCopyState,
      indent: spec.indent || (() => null),
      languageData: spec.languageData || {},
      tokenTable: spec.tokenTable || noTokens
    };
  }
  function defaultCopyState(state) {
    if (typeof state != "object")
      return state;
    let newState = {};
    for (let prop in state) {
      let val = state[prop];
      newState[prop] = val instanceof Array ? val.slice() : val;
    }
    return newState;
  }
  function findState(lang, tree, off, startPos, before) {
    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
    if (state)
      return { state: lang.streamParser.copyState(state), pos: off + tree.length };
    for (let i = tree.children.length - 1; i >= 0; i--) {
      let child = tree.children[i], pos = off + tree.positions[i];
      let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
      if (found)
        return found;
    }
    return null;
  }
  function cutTree(lang, tree, from3, to, inside2) {
    if (inside2 && from3 <= 0 && to >= tree.length)
      return tree;
    if (!inside2 && tree.type == lang.topNode)
      inside2 = true;
    for (let i = tree.children.length - 1; i >= 0; i--) {
      let pos = tree.positions[i], child = tree.children[i], inner;
      if (pos < to && child instanceof Tree) {
        if (!(inner = cutTree(lang, child, from3 - pos, to - pos, inside2)))
          break;
        return !inside2 ? inner : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
      }
    }
    return null;
  }
  function findStartInFragments(lang, fragments, startPos, editorState) {
    for (let f of fragments) {
      let from3 = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
      let found = from3 <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
      if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
        return { state: found.state, tree };
    }
    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
  }
  function readToken(token, stream, state) {
    stream.start = stream.pos;
    for (let i = 0; i < 10; i++) {
      let result = token(stream, state);
      if (stream.pos > stream.start)
        return result;
    }
    throw new Error("Stream parser failed to advance stream.");
  }
  function warnForPart(part, msg) {
    if (warned.indexOf(part) > -1)
      return;
    warned.push(part);
    console.warn(msg);
  }
  function createTokenType(extra, tagStr) {
    let tag = null;
    for (let part of tagStr.split(".")) {
      let value = extra[part] || tags[part];
      if (!value) {
        warnForPart(part, `Unknown highlighting tag ${part}`);
      } else if (typeof value == "function") {
        if (!tag)
          warnForPart(part, `Modifier ${part} used at start of tag`);
        else
          tag = value(tag);
      } else {
        if (tag)
          warnForPart(part, `Tag ${part} used as modifier`);
        else
          tag = value;
      }
    }
    if (!tag)
      return 0;
    let name2 = tagStr.replace(/ /g, "_"), type7 = NodeType.define({
      id: typeArray.length,
      name: name2,
      props: [styleTags({ [name2]: tag })]
    });
    typeArray.push(type7);
    return type7.id;
  }
  function docID(data2) {
    let type7 = NodeType.define({ id: typeArray.length, name: "Document", props: [languageDataProp.add(() => data2)] });
    typeArray.push(type7);
    return type7;
  }
  var _a, languageDataProp, sublanguageProp, Language, LRLanguage, DocInput, currentContext, ParseContext, LanguageState, requestIdle, isInputPending, parseWorker, language, LanguageSupport, LanguageDescription, indentService, indentUnit, indentNodeProp, flatIndent, foldService, foldNodeProp, HighlightStyle, defaultHighlightStyle, bracketMatchingHandle, StringStream, IndentedFrom, StreamLanguage, Parse, noTokens, typeArray, nodeSet, warned, defaultTable, TokenTable, defaultTokenTable;
  var init_dist5 = __esm({
    "node_modules/@codemirror/language/dist/index.js"() {
      init_dist3();
      init_dist();
      init_dist2();
      init_dist4();
      init_style_mod();
      languageDataProp = /* @__PURE__ */ new NodeProp();
      sublanguageProp = /* @__PURE__ */ new NodeProp();
      Language = class {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(data2, parser14, extraExtensions = [], name2 = "") {
          this.data = data2;
          this.name = name2;
          if (!EditorState.prototype.hasOwnProperty("tree"))
            Object.defineProperty(EditorState.prototype, "tree", { get() {
              return syntaxTree(this);
            } });
          this.parser = parser14;
          this.extension = [
            language.of(this),
            EditorState.languageData.of((state, pos, side) => {
              let top3 = topNodeAt(state, pos, side), data3 = top3.type.prop(languageDataProp);
              if (!data3)
                return [];
              let base4 = state.facet(data3), sub = top3.type.prop(sublanguageProp);
              if (sub) {
                let innerNode = top3.resolve(pos - top3.from, side);
                for (let sublang of sub)
                  if (sublang.test(innerNode, state)) {
                    let data4 = state.facet(sublang.facet);
                    return sublang.type == "replace" ? data4 : data4.concat(base4);
                  }
              }
              return base4;
            })
          ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
          return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
          let lang = state.facet(language);
          if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
            return [{ from: 0, to: state.doc.length }];
          if (!lang || !lang.allowsNesting)
            return [];
          let result = [];
          let explore = (tree, from3) => {
            if (tree.prop(languageDataProp) == this.data) {
              result.push({ from: from3, to: from3 + tree.length });
              return;
            }
            let mount = tree.prop(NodeProp.mounted);
            if (mount) {
              if (mount.tree.prop(languageDataProp) == this.data) {
                if (mount.overlay)
                  for (let r2 of mount.overlay)
                    result.push({ from: r2.from + from3, to: r2.to + from3 });
                else
                  result.push({ from: from3, to: from3 + tree.length });
                return;
              } else if (mount.overlay) {
                let size = result.length;
                explore(mount.tree, mount.overlay[0].from + from3);
                if (result.length > size)
                  return;
              }
            }
            for (let i = 0; i < tree.children.length; i++) {
              let ch2 = tree.children[i];
              if (ch2 instanceof Tree)
                explore(ch2, tree.positions[i] + from3);
            }
          };
          explore(syntaxTree(state), 0);
          return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() {
          return true;
        }
      };
      Language.setState = /* @__PURE__ */ StateEffect.define();
      LRLanguage = class extends Language {
        constructor(data2, parser14, name2) {
          super(data2, parser14, [], name2);
          this.parser = parser14;
        }
        /**
        Define a language from a parser.
        */
        static define(spec) {
          let data2 = defineLanguageFacet(spec.languageData);
          return new LRLanguage(data2, spec.parser.configure({
            props: [languageDataProp.add((type7) => type7.isTop ? data2 : void 0)]
          }), spec.name);
        }
        /**
        Create a new instance of this language with a reconfigured
        version of its parser and optionally a new name.
        */
        configure(options, name2) {
          return new LRLanguage(this.data, this.parser.configure(options), name2 || this.name);
        }
        get allowsNesting() {
          return this.parser.hasWrappers();
        }
      };
      DocInput = class {
        constructor(doc2) {
          this.doc = doc2;
          this.cursorPos = 0;
          this.string = "";
          this.cursor = doc2.iter();
        }
        get length() {
          return this.doc.length;
        }
        syncTo(pos) {
          this.string = this.cursor.next(pos - this.cursorPos).value;
          this.cursorPos = pos + this.string.length;
          return this.cursorPos - this.string.length;
        }
        chunk(pos) {
          this.syncTo(pos);
          return this.string;
        }
        get lineChunks() {
          return true;
        }
        read(from3, to) {
          let stringStart = this.cursorPos - this.string.length;
          if (from3 < stringStart || to >= this.cursorPos)
            return this.doc.sliceString(from3, to);
          else
            return this.string.slice(from3 - stringStart, to - stringStart);
        }
      };
      currentContext = null;
      ParseContext = class {
        constructor(parser14, state, fragments = [], tree, treeLen, viewport, skipped, scheduleOn) {
          this.parser = parser14;
          this.state = state;
          this.fragments = fragments;
          this.tree = tree;
          this.treeLen = treeLen;
          this.viewport = viewport;
          this.skipped = skipped;
          this.scheduleOn = scheduleOn;
          this.parse = null;
          this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser14, state, viewport) {
          return new ParseContext(parser14, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
          return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
          if (upto != null && upto >= this.state.doc.length)
            upto = void 0;
          if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
            this.takeTree();
            return true;
          }
          return this.withContext(() => {
            var _a2;
            if (typeof until == "number") {
              let endTime = Date.now() + until;
              until = () => Date.now() > endTime;
            }
            if (!this.parse)
              this.parse = this.startParse();
            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
              this.parse.stopAt(upto);
            for (; ; ) {
              let done = this.parse.advance();
              if (done) {
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
                this.tree = done;
                this.parse = null;
                if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                  this.parse = this.startParse();
                else
                  return true;
              }
              if (until())
                return false;
            }
          });
        }
        /**
        @internal
        */
        takeTree() {
          let pos, tree;
          if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
              this.parse.stopAt(pos);
            this.withContext(() => {
              while (!(tree = this.parse.advance())) {
              }
            });
            this.treeLen = pos;
            this.tree = tree;
            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
            this.parse = null;
          }
        }
        withContext(f) {
          let prev = currentContext;
          currentContext = this;
          try {
            return f();
          } finally {
            currentContext = prev;
          }
        }
        withoutTempSkipped(fragments) {
          for (let r2; r2 = this.tempSkipped.pop(); )
            fragments = cutFragments(fragments, r2.from, r2.to);
          return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
          let { fragments, tree, treeLen, viewport, skipped } = this;
          this.takeTree();
          if (!changes.empty) {
            let ranges = [];
            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
            fragments = TreeFragment.applyChanges(fragments, ranges);
            tree = Tree.empty;
            treeLen = 0;
            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
            if (this.skipped.length) {
              skipped = [];
              for (let r2 of this.skipped) {
                let from3 = changes.mapPos(r2.from, 1), to = changes.mapPos(r2.to, -1);
                if (from3 < to)
                  skipped.push({ from: from3, to });
              }
            }
          }
          return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
          if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
            return false;
          this.viewport = viewport;
          let startLen = this.skipped.length;
          for (let i = 0; i < this.skipped.length; i++) {
            let { from: from3, to } = this.skipped[i];
            if (from3 < viewport.to && to > viewport.from) {
              this.fragments = cutFragments(this.fragments, from3, to);
              this.skipped.splice(i--, 1);
            }
          }
          if (this.skipped.length >= startLen)
            return false;
          this.reset();
          return true;
        }
        /**
        @internal
        */
        reset() {
          if (this.parse) {
            this.takeTree();
            this.parse = null;
          }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from3, to) {
          this.skipped.push({ from: from3, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
          return new class extends Parser {
            createParse(input, fragments, ranges) {
              let from3 = ranges[0].from, to = ranges[ranges.length - 1].to;
              let parser14 = {
                parsedPos: from3,
                advance() {
                  let cx2 = currentContext;
                  if (cx2) {
                    for (let r2 of ranges)
                      cx2.tempSkipped.push(r2);
                    if (until)
                      cx2.scheduleOn = cx2.scheduleOn ? Promise.all([cx2.scheduleOn, until]) : until;
                  }
                  this.parsedPos = to;
                  return new Tree(NodeType.none, [], [], to - from3);
                },
                stoppedAt: null,
                stopAt() {
                }
              };
              return parser14;
            }
          }();
        }
        /**
        @internal
        */
        isDone(upto) {
          upto = Math.min(upto, this.state.doc.length);
          let frags = this.fragments;
          return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() {
          return currentContext;
        }
      };
      LanguageState = class {
        constructor(context) {
          this.context = context;
          this.tree = context.tree;
        }
        apply(tr) {
          if (!tr.docChanged && this.tree == this.context.tree)
            return this;
          let newCx = this.context.changes(tr.changes, tr.state);
          let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
          if (!newCx.work(20, upto))
            newCx.takeTree();
          return new LanguageState(newCx);
        }
        static init(state) {
          let vpTo = Math.min(3e3, state.doc.length);
          let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
          if (!parseState.work(20, vpTo))
            parseState.takeTree();
          return new LanguageState(parseState);
        }
      };
      Language.state = /* @__PURE__ */ StateField.define({
        create: LanguageState.init,
        update(value, tr) {
          for (let e of tr.effects)
            if (e.is(Language.setState))
              return e.value;
          if (tr.startState.facet(language) != tr.state.facet(language))
            return LanguageState.init(tr.state);
          return value.apply(tr);
        }
      });
      requestIdle = (callback) => {
        let timeout = setTimeout(
          () => callback(),
          500
          /* Work.MaxPause */
        );
        return () => clearTimeout(timeout);
      };
      if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
          let idle = -1, timeout = setTimeout(
            () => {
              idle = requestIdleCallback(callback, {
                timeout: 500 - 100
                /* Work.MinPause */
              });
            },
            100
            /* Work.MinPause */
          );
          return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
      isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
      parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
          this.view = view;
          this.working = null;
          this.workScheduled = 0;
          this.chunkEnd = -1;
          this.chunkBudget = -1;
          this.work = this.work.bind(this);
          this.scheduleWork();
        }
        update(update) {
          let cx2 = this.view.state.field(Language.state).context;
          if (cx2.updateViewport(update.view.viewport) || this.view.viewport.to > cx2.treeLen)
            this.scheduleWork();
          if (update.docChanged) {
            if (this.view.hasFocus)
              this.chunkBudget += 50;
            this.scheduleWork();
          }
          this.checkAsyncSchedule(cx2);
        }
        scheduleWork() {
          if (this.working)
            return;
          let { state } = this.view, field = state.field(Language.state);
          if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
            this.working = requestIdle(this.work);
        }
        work(deadline) {
          this.working = null;
          let now2 = Date.now();
          if (this.chunkEnd < now2 && (this.chunkEnd < 0 || this.view.hasFocus)) {
            this.chunkEnd = now2 + 3e4;
            this.chunkBudget = 3e3;
          }
          if (this.chunkBudget <= 0)
            return;
          let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
          if (field.tree == field.context.tree && field.context.isDone(
            vpTo + 1e5
            /* Work.MaxParseAhead */
          ))
            return;
          let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
          let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
          let done = field.context.work(() => {
            return isInputPending && isInputPending() || Date.now() > endTime;
          }, vpTo + (viewportFirst ? 0 : 1e5));
          this.chunkBudget -= Date.now() - now2;
          if (done || this.chunkBudget <= 0) {
            field.context.takeTree();
            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
          }
          if (this.chunkBudget > 0 && !(done && !viewportFirst))
            this.scheduleWork();
          this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx2) {
          if (cx2.scheduleOn) {
            this.workScheduled++;
            cx2.scheduleOn.then(() => this.scheduleWork()).catch((err) => logException(this.view.state, err)).then(() => this.workScheduled--);
            cx2.scheduleOn = null;
          }
        }
        destroy() {
          if (this.working)
            this.working();
        }
        isWorking() {
          return !!(this.working || this.workScheduled > 0);
        }
      }, {
        eventHandlers: { focus() {
          this.scheduleWork();
        } }
      });
      language = /* @__PURE__ */ Facet.define({
        combine(languages2) {
          return languages2.length ? languages2[0] : null;
        },
        enables: (language2) => [
          Language.state,
          parseWorker,
          EditorView.contentAttributes.compute([language2], (state) => {
            let lang = state.facet(language2);
            return lang && lang.name ? { "data-language": lang.name } : {};
          })
        ]
      });
      LanguageSupport = class {
        /**
        Create a language support object.
        */
        constructor(language2, support = []) {
          this.language = language2;
          this.support = support;
          this.extension = [language2, support];
        }
      };
      LanguageDescription = class {
        constructor(name2, alias, extensions, filename, loadFunc, support = void 0) {
          this.name = name2;
          this.alias = alias;
          this.extensions = extensions;
          this.filename = filename;
          this.loadFunc = loadFunc;
          this.support = support;
          this.loading = null;
        }
        /**
        Start loading the the language. Will return a promise that
        resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
        object when the language successfully loads.
        */
        load() {
          return this.loading || (this.loading = this.loadFunc().then((support) => this.support = support, (err) => {
            this.loading = null;
            throw err;
          }));
        }
        /**
        Create a language description.
        */
        static of(spec) {
          let { load, support } = spec;
          if (!load) {
            if (!support)
              throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
            load = () => Promise.resolve(support);
          }
          return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map((s2) => s2.toLowerCase()), spec.extensions || [], spec.filename, load, support);
        }
        /**
        Look for a language in the given array of descriptions that
        matches the filename. Will first match
        [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
        and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
        and return the first language that matches.
        */
        static matchFilename(descs, filename) {
          for (let d3 of descs)
            if (d3.filename && d3.filename.test(filename))
              return d3;
          let ext = /\.([^.]+)$/.exec(filename);
          if (ext) {
            for (let d3 of descs)
              if (d3.extensions.indexOf(ext[1]) > -1)
                return d3;
          }
          return null;
        }
        /**
        Look for a language whose name or alias matches the the given
        name (case-insensitively). If `fuzzy` is true, and no direct
        matchs is found, this'll also search for a language whose name
        or alias occurs in the string (for names shorter than three
        characters, only when surrounded by non-word characters).
        */
        static matchLanguageName(descs, name2, fuzzy = true) {
          name2 = name2.toLowerCase();
          for (let d3 of descs)
            if (d3.alias.some((a2) => a2 == name2))
              return d3;
          if (fuzzy)
            for (let d3 of descs)
              for (let a2 of d3.alias) {
                let found = name2.indexOf(a2);
                if (found > -1 && (a2.length > 2 || !/\w/.test(name2[found - 1]) && !/\w/.test(name2[found + a2.length])))
                  return d3;
              }
          return null;
        }
      };
      indentService = /* @__PURE__ */ Facet.define();
      indentUnit = /* @__PURE__ */ Facet.define({
        combine: (values2) => {
          if (!values2.length)
            return "  ";
          let unit = values2[0];
          if (!unit || /\S/.test(unit) || Array.from(unit).some((e) => e != unit[0]))
            throw new Error("Invalid indent unit: " + JSON.stringify(values2[0]));
          return unit;
        }
      });
      indentNodeProp = /* @__PURE__ */ new NodeProp();
      flatIndent = (context) => context.baseIndent;
      foldService = /* @__PURE__ */ Facet.define();
      foldNodeProp = /* @__PURE__ */ new NodeProp();
      HighlightStyle = class {
        constructor(specs, options) {
          this.specs = specs;
          let modSpec;
          function def(spec) {
            let cls = StyleModule.newName();
            (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
            return cls;
          }
          const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
          const scopeOpt = options.scope;
          this.scope = scopeOpt instanceof Language ? (type7) => type7.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type7) => type7 == scopeOpt : void 0;
          this.style = tagHighlighter(specs.map((style2) => ({
            tag: style2.tag,
            class: style2.class || def(Object.assign({}, style2, { tag: null }))
          })), {
            all
          }).style;
          this.module = modSpec ? new StyleModule(modSpec) : null;
          this.themeType = options.themeType;
        }
        /**
        Create a highlighter style that associates the given styles to
        the given tags. The specs must be objects that hold a style tag
        or array of tags in their `tag` property, and either a single
        `class` property providing a static CSS class (for highlighter
        that rely on external styling), or a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
        set of CSS properties (which define the styling for those tags).
        
        The CSS rules created for a highlighter will be emitted in the
        order of the spec's properties. That means that for elements that
        have multiple tags associated with them, styles defined further
        down in the list will have a higher CSS precedence than styles
        defined earlier.
        */
        static define(specs, options) {
          return new HighlightStyle(specs, options || {});
        }
      };
      defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
        {
          tag: tags.meta,
          color: "#404740"
        },
        {
          tag: tags.link,
          textDecoration: "underline"
        },
        {
          tag: tags.heading,
          textDecoration: "underline",
          fontWeight: "bold"
        },
        {
          tag: tags.emphasis,
          fontStyle: "italic"
        },
        {
          tag: tags.strong,
          fontWeight: "bold"
        },
        {
          tag: tags.strikethrough,
          textDecoration: "line-through"
        },
        {
          tag: tags.keyword,
          color: "#708"
        },
        {
          tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
          color: "#219"
        },
        {
          tag: [tags.literal, tags.inserted],
          color: "#164"
        },
        {
          tag: [tags.string, tags.deleted],
          color: "#a11"
        },
        {
          tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
          color: "#e40"
        },
        {
          tag: /* @__PURE__ */ tags.definition(tags.variableName),
          color: "#00f"
        },
        {
          tag: /* @__PURE__ */ tags.local(tags.variableName),
          color: "#30a"
        },
        {
          tag: [tags.typeName, tags.namespace],
          color: "#085"
        },
        {
          tag: tags.className,
          color: "#167"
        },
        {
          tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
          color: "#256"
        },
        {
          tag: /* @__PURE__ */ tags.definition(tags.propertyName),
          color: "#00c"
        },
        {
          tag: tags.comment,
          color: "#940"
        },
        {
          tag: tags.invalid,
          color: "#f00"
        }
      ]);
      bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
      StringStream = class {
        /**
        Create a stream.
        */
        constructor(string3, tabSize, indentUnit2, overrideIndent) {
          this.string = string3;
          this.tabSize = tabSize;
          this.indentUnit = indentUnit2;
          this.overrideIndent = overrideIndent;
          this.pos = 0;
          this.start = 0;
          this.lastColumnPos = 0;
          this.lastColumnValue = 0;
        }
        /**
        True if we are at the end of the line.
        */
        eol() {
          return this.pos >= this.string.length;
        }
        /**
        True if we are at the start of the line.
        */
        sol() {
          return this.pos == 0;
        }
        /**
        Get the next code unit after the current position, or undefined
        if we're at the end of the line.
        */
        peek() {
          return this.string.charAt(this.pos) || void 0;
        }
        /**
        Read the next code unit and advance `this.pos`.
        */
        next() {
          if (this.pos < this.string.length)
            return this.string.charAt(this.pos++);
        }
        /**
        Match the next character against the given string, regular
        expression, or predicate. Consume and return it if it matches.
        */
        eat(match3) {
          let ch2 = this.string.charAt(this.pos);
          let ok;
          if (typeof match3 == "string")
            ok = ch2 == match3;
          else
            ok = ch2 && (match3 instanceof RegExp ? match3.test(ch2) : match3(ch2));
          if (ok) {
            ++this.pos;
            return ch2;
          }
        }
        /**
        Continue matching characters that match the given string,
        regular expression, or predicate function. Return true if any
        characters were consumed.
        */
        eatWhile(match3) {
          let start2 = this.pos;
          while (this.eat(match3)) {
          }
          return this.pos > start2;
        }
        /**
        Consume whitespace ahead of `this.pos`. Return true if any was
        found.
        */
        eatSpace() {
          let start2 = this.pos;
          while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
            ++this.pos;
          return this.pos > start2;
        }
        /**
        Move to the end of the line.
        */
        skipToEnd() {
          this.pos = this.string.length;
        }
        /**
        Move to directly before the given character, if found on the
        current line.
        */
        skipTo(ch2) {
          let found = this.string.indexOf(ch2, this.pos);
          if (found > -1) {
            this.pos = found;
            return true;
          }
        }
        /**
        Move back `n` characters.
        */
        backUp(n2) {
          this.pos -= n2;
        }
        /**
        Get the column position at `this.pos`.
        */
        column() {
          if (this.lastColumnPos < this.start) {
            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
            this.lastColumnPos = this.start;
          }
          return this.lastColumnValue;
        }
        /**
        Get the indentation column of the current line.
        */
        indentation() {
          var _a2;
          return (_a2 = this.overrideIndent) !== null && _a2 !== void 0 ? _a2 : countCol(this.string, null, this.tabSize);
        }
        /**
        Match the input against the given string or regular expression
        (which should start with a `^`). Return true or the regexp match
        if it matches.
        
        Unless `consume` is set to `false`, this will move `this.pos`
        past the matched text.
        
        When matching a string `caseInsensitive` can be set to true to
        make the match case-insensitive.
        */
        match(pattern, consume, caseInsensitive) {
          if (typeof pattern == "string") {
            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
            let substr = this.string.substr(this.pos, pattern.length);
            if (cased(substr) == cased(pattern)) {
              if (consume !== false)
                this.pos += pattern.length;
              return true;
            } else
              return null;
          } else {
            let match3 = this.string.slice(this.pos).match(pattern);
            if (match3 && match3.index > 0)
              return null;
            if (match3 && consume !== false)
              this.pos += match3[0].length;
            return match3;
          }
        }
        /**
        Get the current token.
        */
        current() {
          return this.string.slice(this.start, this.pos);
        }
      };
      IndentedFrom = /* @__PURE__ */ new WeakMap();
      StreamLanguage = class extends Language {
        constructor(parser14) {
          let data2 = defineLanguageFacet(parser14.languageData);
          let p = fullParser(parser14), self;
          let impl = new class extends Parser {
            createParse(input, fragments, ranges) {
              return new Parse(self, input, fragments, ranges);
            }
          }();
          super(data2, impl, [indentService.of((cx2, pos) => this.getIndent(cx2, pos))], parser14.name);
          this.topNode = docID(data2);
          self = this;
          this.streamParser = p;
          this.stateAfter = new NodeProp({ perNode: true });
          this.tokenTable = parser14.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
        }
        /**
        Define a stream language.
        */
        static define(spec) {
          return new StreamLanguage(spec);
        }
        getIndent(cx2, pos) {
          let tree = syntaxTree(cx2.state), at = tree.resolve(pos);
          while (at && at.type != this.topNode)
            at = at.parent;
          if (!at)
            return null;
          let from3 = void 0;
          let { overrideIndentation } = cx2.options;
          if (overrideIndentation) {
            from3 = IndentedFrom.get(cx2.state);
            if (from3 != null && from3 < pos - 1e4)
              from3 = void 0;
          }
          let start2 = findState(this, tree, 0, at.from, from3 !== null && from3 !== void 0 ? from3 : pos), statePos, state;
          if (start2) {
            state = start2.state;
            statePos = start2.pos + 1;
          } else {
            state = this.streamParser.startState(cx2.unit);
            statePos = 0;
          }
          if (pos - statePos > 1e4)
            return null;
          while (statePos < pos) {
            let line2 = cx2.state.doc.lineAt(statePos), end2 = Math.min(pos, line2.to);
            if (line2.length) {
              let indentation2 = overrideIndentation ? overrideIndentation(line2.from) : -1;
              let stream = new StringStream(line2.text, cx2.state.tabSize, cx2.unit, indentation2 < 0 ? void 0 : indentation2);
              while (stream.pos < end2 - line2.from)
                readToken(this.streamParser.token, stream, state);
            } else {
              this.streamParser.blankLine(state, cx2.unit);
            }
            if (end2 == pos)
              break;
            statePos = line2.to + 1;
          }
          let line = cx2.lineAt(pos);
          if (overrideIndentation && from3 == null)
            IndentedFrom.set(cx2.state, line.from);
          return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx2);
        }
        get allowsNesting() {
          return false;
        }
      };
      Parse = class {
        constructor(lang, input, fragments, ranges) {
          this.lang = lang;
          this.input = input;
          this.fragments = fragments;
          this.ranges = ranges;
          this.stoppedAt = null;
          this.chunks = [];
          this.chunkPos = [];
          this.chunk = [];
          this.chunkReused = void 0;
          this.rangeIndex = 0;
          this.to = ranges[ranges.length - 1].to;
          let context = ParseContext.get(), from3 = ranges[0].from;
          let { state, tree } = findStartInFragments(lang, fragments, from3, context === null || context === void 0 ? void 0 : context.state);
          this.state = state;
          this.parsedPos = this.chunkStart = from3 + tree.length;
          for (let i = 0; i < tree.children.length; i++) {
            this.chunks.push(tree.children[i]);
            this.chunkPos.push(tree.positions[i]);
          }
          if (context && this.parsedPos < context.viewport.from - 1e5) {
            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
            context.skipUntilInView(this.parsedPos, context.viewport.from);
            this.parsedPos = context.viewport.from;
          }
          this.moveRangeIndex();
        }
        advance() {
          let context = ParseContext.get();
          let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
          let end2 = Math.min(
            parseEnd,
            this.chunkStart + 2048
            /* C.ChunkSize */
          );
          if (context)
            end2 = Math.min(end2, context.viewport.to);
          while (this.parsedPos < end2)
            this.parseLine(context);
          if (this.chunkStart < this.parsedPos)
            this.finishChunk();
          if (this.parsedPos >= parseEnd)
            return this.finish();
          if (context && this.parsedPos >= context.viewport.to) {
            context.skipUntilInView(this.parsedPos, parseEnd);
            return this.finish();
          }
          return null;
        }
        stopAt(pos) {
          this.stoppedAt = pos;
        }
        lineAfter(pos) {
          let chunk = this.input.chunk(pos);
          if (!this.input.lineChunks) {
            let eol2 = chunk.indexOf("\n");
            if (eol2 > -1)
              chunk = chunk.slice(0, eol2);
          } else if (chunk == "\n") {
            chunk = "";
          }
          return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
        }
        nextLine() {
          let from3 = this.parsedPos, line = this.lineAfter(from3), end2 = from3 + line.length;
          for (let index = this.rangeIndex; ; ) {
            let rangeEnd = this.ranges[index].to;
            if (rangeEnd >= end2)
              break;
            line = line.slice(0, rangeEnd - (end2 - line.length));
            index++;
            if (index == this.ranges.length)
              break;
            let rangeStart = this.ranges[index].from;
            let after = this.lineAfter(rangeStart);
            line += after;
            end2 = rangeStart + after.length;
          }
          return { line, end: end2 };
        }
        skipGapsTo(pos, offset2, side) {
          for (; ; ) {
            let end2 = this.ranges[this.rangeIndex].to, offPos = pos + offset2;
            if (side > 0 ? end2 > offPos : end2 >= offPos)
              break;
            let start2 = this.ranges[++this.rangeIndex].from;
            offset2 += start2 - end2;
          }
          return offset2;
        }
        moveRangeIndex() {
          while (this.ranges[this.rangeIndex].to < this.parsedPos)
            this.rangeIndex++;
        }
        emitToken(id2, from3, to, size, offset2) {
          if (this.ranges.length > 1) {
            offset2 = this.skipGapsTo(from3, offset2, 1);
            from3 += offset2;
            let len0 = this.chunk.length;
            offset2 = this.skipGapsTo(to, offset2, -1);
            to += offset2;
            size += this.chunk.length - len0;
          }
          this.chunk.push(id2, from3, to, size);
          return offset2;
        }
        parseLine(context) {
          let { line, end: end2 } = this.nextLine(), offset2 = 0, { streamParser } = this.lang;
          let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
          if (stream.eol()) {
            streamParser.blankLine(this.state, stream.indentUnit);
          } else {
            while (!stream.eol()) {
              let token = readToken(streamParser.token, stream, this.state);
              if (token)
                offset2 = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset2);
              if (stream.start > 1e4)
                break;
            }
          }
          this.parsedPos = end2;
          this.moveRangeIndex();
          if (this.parsedPos < this.to)
            this.parsedPos++;
        }
        finishChunk() {
          let tree = Tree.build({
            buffer: this.chunk,
            start: this.chunkStart,
            length: this.parsedPos - this.chunkStart,
            nodeSet,
            topID: 0,
            maxBufferLength: 2048,
            reused: this.chunkReused
          });
          tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
          this.chunks.push(tree);
          this.chunkPos.push(this.chunkStart - this.ranges[0].from);
          this.chunk = [];
          this.chunkReused = void 0;
          this.chunkStart = this.parsedPos;
        }
        finish() {
          return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
        }
      };
      noTokens = /* @__PURE__ */ Object.create(null);
      typeArray = [NodeType.none];
      nodeSet = /* @__PURE__ */ new NodeSet(typeArray);
      warned = [];
      defaultTable = /* @__PURE__ */ Object.create(null);
      for (let [legacyName, name2] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "tagName"],
        ["attribute", "attributeName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
      ])
        defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
      TokenTable = class {
        constructor(extra) {
          this.extra = extra;
          this.table = Object.assign(/* @__PURE__ */ Object.create(null), defaultTable);
        }
        resolve(tag) {
          return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
        }
      };
      defaultTokenTable = /* @__PURE__ */ new TokenTable(noTokens);
    }
  });

  // node_modules/@lezer/markdown/dist/index.js
  function skipForList(bl, cx2, line) {
    if (line.pos == line.text.length || bl != cx2.block && line.indent >= cx2.stack[line.depth + 1].value + line.baseIndent)
      return true;
    if (line.indent >= line.baseIndent + 4)
      return false;
    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx2, false);
    return size > 0 && (bl.type != Type.BulletList || isHorizontalRule(line, cx2, false) < 0) && line.text.charCodeAt(line.pos + size - 1) == bl.value;
  }
  function space(ch2) {
    return ch2 == 32 || ch2 == 9 || ch2 == 10 || ch2 == 13;
  }
  function skipSpace(line, i = 0) {
    while (i < line.length && space(line.charCodeAt(i)))
      i++;
    return i;
  }
  function skipSpaceBack(line, i, to) {
    while (i > to && space(line.charCodeAt(i - 1)))
      i--;
    return i;
  }
  function isFencedCode(line) {
    if (line.next != 96 && line.next != 126)
      return -1;
    let pos = line.pos + 1;
    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
      pos++;
    if (pos < line.pos + 3)
      return -1;
    if (line.next == 96) {
      for (let i = pos; i < line.text.length; i++)
        if (line.text.charCodeAt(i) == 96)
          return -1;
    }
    return pos;
  }
  function isBlockquote(line) {
    return line.next != 62 ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
  }
  function isHorizontalRule(line, cx2, breaking) {
    if (line.next != 42 && line.next != 45 && line.next != 95)
      return -1;
    let count = 1;
    for (let pos = line.pos + 1; pos < line.text.length; pos++) {
      let ch2 = line.text.charCodeAt(pos);
      if (ch2 == line.next)
        count++;
      else if (!space(ch2))
        return -1;
    }
    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx2.stack.length)
      return -1;
    return count < 3 ? -1 : 1;
  }
  function inList(cx2, type7) {
    for (let i = cx2.stack.length - 1; i >= 0; i--)
      if (cx2.stack[i].type == type7)
        return true;
    return false;
  }
  function isBulletList(line, cx2, breaking) {
    return (line.next == 45 || line.next == 43 || line.next == 42) && (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) && (!breaking || inList(cx2, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
  }
  function isOrderedList(line, cx2, breaking) {
    let pos = line.pos, next2 = line.next;
    for (; ; ) {
      if (next2 >= 48 && next2 <= 57)
        pos++;
      else
        break;
      if (pos == line.text.length)
        return -1;
      next2 = line.text.charCodeAt(pos);
    }
    if (pos == line.pos || pos > line.pos + 9 || next2 != 46 && next2 != 41 || pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1)) || breaking && !inList(cx2, Type.OrderedList) && (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49))
      return -1;
    return pos + 1 - line.pos;
  }
  function isAtxHeading(line) {
    if (line.next != 35)
      return -1;
    let pos = line.pos + 1;
    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
      pos++;
    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
      return -1;
    let size = pos - line.pos;
    return size > 6 ? -1 : size;
  }
  function isSetextUnderline(line) {
    if (line.next != 45 && line.next != 61 || line.indent >= line.baseIndent + 4)
      return -1;
    let pos = line.pos + 1;
    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
      pos++;
    let end2 = pos;
    while (pos < line.text.length && space(line.text.charCodeAt(pos)))
      pos++;
    return pos == line.text.length ? end2 : -1;
  }
  function isHTMLBlock(line, _cx, breaking) {
    if (line.next != 60)
      return -1;
    let rest = line.text.slice(line.pos);
    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
      if (HTMLBlockStyle[i][0].test(rest))
        return i;
    return -1;
  }
  function getListIndent(line, pos) {
    let indentAfter = line.countIndent(pos, line.pos, line.indent);
    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
  }
  function addCodeText(marks, from3, to) {
    let last = marks.length - 1;
    if (last >= 0 && marks[last].to == from3 && marks[last].type == Type.CodeText)
      marks[last].to = to;
    else
      marks.push(elt(Type.CodeText, from3, to));
  }
  function lineEnd(text, pos) {
    for (; pos < text.length; pos++) {
      let next2 = text.charCodeAt(pos);
      if (next2 == 10)
        break;
      if (!space(next2))
        return -1;
    }
    return pos;
  }
  function injectGaps(ranges, rangeI, tree, offset2, dont) {
    if (dont.has(tree.tree))
      return tree.tree;
    let rangeEnd = ranges[rangeI].to;
    let children = [], positions = [], start2 = tree.from + offset2;
    function movePastNext(upto, inclusive) {
      while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
        let size = ranges[rangeI + 1].from - rangeEnd;
        offset2 += size;
        upto += size;
        rangeI++;
        rangeEnd = ranges[rangeI].to;
      }
    }
    for (let ch2 = tree.firstChild; ch2; ch2 = ch2.nextSibling) {
      movePastNext(ch2.from + offset2, true);
      let from3 = ch2.from + offset2, node;
      if (ch2.to + offset2 > rangeEnd) {
        node = injectGaps(ranges, rangeI, ch2, offset2, dont);
        movePastNext(ch2.to + offset2, false);
      } else {
        node = ch2.toTree();
      }
      children.push(node);
      positions.push(from3 - start2);
    }
    movePastNext(tree.to + offset2, false);
    return new Tree(tree.type, children, positions, tree.to + offset2 - start2, tree.tree ? tree.tree.propValues : void 0);
  }
  function nonEmpty(a2) {
    return a2 != null && a2.length > 0;
  }
  function resolveConfig(spec) {
    if (!Array.isArray(spec))
      return spec;
    if (spec.length == 0)
      return null;
    let conf = resolveConfig(spec[0]);
    if (spec.length == 1)
      return conf;
    let rest = resolveConfig(spec.slice(1));
    if (!rest || !conf)
      return conf || rest;
    let conc = (a2, b) => (a2 || none2).concat(b || none2);
    let wrapA = conf.wrap, wrapB = rest.wrap;
    return {
      props: conc(conf.props, rest.props),
      defineNodes: conc(conf.defineNodes, rest.defineNodes),
      parseBlock: conc(conf.parseBlock, rest.parseBlock),
      parseInline: conc(conf.parseInline, rest.parseInline),
      remove: conc(conf.remove, rest.remove),
      wrap: !wrapA ? wrapB : !wrapB ? wrapA : (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
    };
  }
  function findName(names, name2) {
    let found = names.indexOf(name2);
    if (found < 0)
      throw new RangeError(`Position specified relative to unknown parser ${name2}`);
    return found;
  }
  function elt(type7, from3, to, children) {
    return new Element(type7, from3, to, children);
  }
  function finishLink(cx2, content3, type7, start2, startPos) {
    let { text } = cx2, next2 = cx2.char(startPos), endPos = startPos;
    content3.unshift(elt(Type.LinkMark, start2, start2 + (type7 == Type.Image ? 2 : 1)));
    content3.push(elt(Type.LinkMark, startPos - 1, startPos));
    if (next2 == 40) {
      let pos = cx2.skipSpace(startPos + 1);
      let dest = parseURL(text, pos - cx2.offset, cx2.offset), title;
      if (dest) {
        pos = cx2.skipSpace(dest.to);
        title = parseLinkTitle(text, pos - cx2.offset, cx2.offset);
        if (title)
          pos = cx2.skipSpace(title.to);
      }
      if (cx2.char(pos) == 41) {
        content3.push(elt(Type.LinkMark, startPos, startPos + 1));
        endPos = pos + 1;
        if (dest)
          content3.push(dest);
        if (title)
          content3.push(title);
        content3.push(elt(Type.LinkMark, pos, endPos));
      }
    } else if (next2 == 91) {
      let label = parseLinkLabel(text, startPos - cx2.offset, cx2.offset, false);
      if (label) {
        content3.push(label);
        endPos = label.to;
      }
    }
    return elt(type7, start2, endPos, content3);
  }
  function parseURL(text, start2, offset2) {
    let next2 = text.charCodeAt(start2);
    if (next2 == 60) {
      for (let pos = start2 + 1; pos < text.length; pos++) {
        let ch2 = text.charCodeAt(pos);
        if (ch2 == 62)
          return elt(Type.URL, start2 + offset2, pos + 1 + offset2);
        if (ch2 == 60 || ch2 == 10)
          return false;
      }
      return null;
    } else {
      let depth = 0, pos = start2;
      for (let escaped = false; pos < text.length; pos++) {
        let ch2 = text.charCodeAt(pos);
        if (space(ch2)) {
          break;
        } else if (escaped) {
          escaped = false;
        } else if (ch2 == 40) {
          depth++;
        } else if (ch2 == 41) {
          if (!depth)
            break;
          depth--;
        } else if (ch2 == 92) {
          escaped = true;
        }
      }
      return pos > start2 ? elt(Type.URL, start2 + offset2, pos + offset2) : pos == text.length ? null : false;
    }
  }
  function parseLinkTitle(text, start2, offset2) {
    let next2 = text.charCodeAt(start2);
    if (next2 != 39 && next2 != 34 && next2 != 40)
      return false;
    let end2 = next2 == 40 ? 41 : next2;
    for (let pos = start2 + 1, escaped = false; pos < text.length; pos++) {
      let ch2 = text.charCodeAt(pos);
      if (escaped)
        escaped = false;
      else if (ch2 == end2)
        return elt(Type.LinkTitle, start2 + offset2, pos + 1 + offset2);
      else if (ch2 == 92)
        escaped = true;
    }
    return null;
  }
  function parseLinkLabel(text, start2, offset2, requireNonWS) {
    for (let escaped = false, pos = start2 + 1, end2 = Math.min(text.length, pos + 999); pos < end2; pos++) {
      let ch2 = text.charCodeAt(pos);
      if (escaped)
        escaped = false;
      else if (ch2 == 93)
        return requireNonWS ? false : elt(Type.LinkLabel, start2 + offset2, pos + 1 + offset2);
      else {
        if (requireNonWS && !space(ch2))
          requireNonWS = false;
        if (ch2 == 91)
          return false;
        else if (ch2 == 92)
          escaped = true;
      }
    }
    return null;
  }
  function injectMarks(elements, marks) {
    if (!marks.length)
      return elements;
    if (!elements.length)
      return marks;
    let elts = elements.slice(), eI = 0;
    for (let mark of marks) {
      while (eI < elts.length && elts[eI].to < mark.to)
        eI++;
      if (eI < elts.length && elts[eI].from < mark.from) {
        let e = elts[eI];
        if (e instanceof Element)
          elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));
      } else {
        elts.splice(eI++, 0, mark);
      }
    }
    return elts;
  }
  function leftOverSpace(node, from3, to) {
    let ranges = [];
    for (let n2 = node.firstChild, pos = from3; ; n2 = n2.nextSibling) {
      let nextPos = n2 ? n2.from : to;
      if (nextPos > pos)
        ranges.push({ from: pos, to: nextPos });
      if (!n2)
        break;
      pos = n2.to;
    }
    return ranges;
  }
  function parseCode(config) {
    let { codeParser, htmlParser } = config;
    let wrap = parseMixed((node, input) => {
      let id2 = node.type.id;
      if (codeParser && (id2 == Type.CodeBlock || id2 == Type.FencedCode)) {
        let info = "";
        if (id2 == Type.FencedCode) {
          let infoNode = node.node.getChild(Type.CodeInfo);
          if (infoNode)
            info = input.read(infoNode.from, infoNode.to);
        }
        let parser14 = codeParser(info);
        if (parser14)
          return { parser: parser14, overlay: (node2) => node2.type.id == Type.CodeText };
      } else if (htmlParser && (id2 == Type.HTMLBlock || id2 == Type.HTMLTag)) {
        return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
      }
      return null;
    });
    return { wrap };
  }
  function parseRow(cx2, line, startI = 0, elts, offset2 = 0) {
    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
    let parseCell = () => {
      elts.push(cx2.elt("TableCell", offset2 + cellStart, offset2 + cellEnd, cx2.parser.parseInline(line.slice(cellStart, cellEnd), offset2 + cellStart)));
    };
    for (let i = startI; i < line.length; i++) {
      let next2 = line.charCodeAt(i);
      if (next2 == 124 && !esc) {
        if (!first || cellStart > -1)
          count++;
        first = false;
        if (elts) {
          if (cellStart > -1)
            parseCell();
          elts.push(cx2.elt("TableDelimiter", i + offset2, i + offset2 + 1));
        }
        cellStart = cellEnd = -1;
      } else if (esc || next2 != 32 && next2 != 9) {
        if (cellStart < 0)
          cellStart = i;
        cellEnd = i + 1;
      }
      esc = !esc && next2 == 92;
    }
    if (cellStart > -1) {
      count++;
      if (elts)
        parseCell();
    }
    return count;
  }
  function hasPipe(str, start2) {
    for (let i = start2; i < str.length; i++) {
      let next2 = str.charCodeAt(i);
      if (next2 == 124)
        return true;
      if (next2 == 92)
        i++;
    }
    return false;
  }
  function parseSubSuper(ch2, node, mark) {
    return (cx2, next2, pos) => {
      if (next2 != ch2 || cx2.char(pos + 1) == ch2)
        return -1;
      let elts = [cx2.elt(mark, pos, pos + 1)];
      for (let i = pos + 1; i < cx2.end; i++) {
        let next3 = cx2.char(i);
        if (next3 == ch2)
          return cx2.addElement(cx2.elt(node, pos, i + 1, elts.concat(cx2.elt(mark, i, i + 1))));
        if (next3 == 92)
          elts.push(cx2.elt("Escape", i, i++ + 2));
        if (space(next3))
          break;
      }
      return -1;
    };
  }
  var CompositeBlock, Type, LeafBlock, Line2, DefaultSkipMarkup, EmptyLine, CommentEnd, ProcessingEnd, HTMLBlockStyle, DefaultBlockParsers, LinkReferenceParser, SetextHeadingParser, DefaultLeafBlocks, DefaultEndLeaf, scanLineResult, BlockContext, MarkdownParser, nodeTypes, none2, Buffer2, Element, TreeElement, EmphasisUnderscore, EmphasisAsterisk, LinkStart, ImageStart, InlineDelimiter, Escapable, Punctuation, DefaultInline, InlineContext, NotLast, FragmentCursor2, markdownHighlighting, parser, StrikethroughDelim, Strikethrough, delimiterLine, TableParser, Table, TaskParser, TaskList, GFM, Superscript, Subscript, Emoji;
  var init_dist6 = __esm({
    "node_modules/@lezer/markdown/dist/index.js"() {
      init_dist3();
      init_dist4();
      CompositeBlock = class {
        constructor(type7, value, from3, hash3, end2, children, positions) {
          this.type = type7;
          this.value = value;
          this.from = from3;
          this.hash = hash3;
          this.end = end2;
          this.children = children;
          this.positions = positions;
          this.hashProp = [[NodeProp.contextHash, hash3]];
        }
        static create(type7, value, from3, parentHash, end2) {
          let hash3 = parentHash + (parentHash << 8) + type7 + (value << 4) | 0;
          return new CompositeBlock(type7, value, from3, hash3, end2, [], []);
        }
        addChild(child, pos) {
          if (child.prop(NodeProp.contextHash) != this.hash)
            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
          this.children.push(child);
          this.positions.push(pos);
        }
        toTree(nodeSet2, end2 = this.end) {
          let last = this.children.length - 1;
          if (last >= 0)
            end2 = Math.max(end2, this.positions[last] + this.children[last].length + this.from);
          let tree = new Tree(nodeSet2.types[this.type], this.children, this.positions, end2 - this.from).balance({
            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
          });
          return tree;
        }
      };
      (function(Type3) {
        Type3[Type3["Document"] = 1] = "Document";
        Type3[Type3["CodeBlock"] = 2] = "CodeBlock";
        Type3[Type3["FencedCode"] = 3] = "FencedCode";
        Type3[Type3["Blockquote"] = 4] = "Blockquote";
        Type3[Type3["HorizontalRule"] = 5] = "HorizontalRule";
        Type3[Type3["BulletList"] = 6] = "BulletList";
        Type3[Type3["OrderedList"] = 7] = "OrderedList";
        Type3[Type3["ListItem"] = 8] = "ListItem";
        Type3[Type3["ATXHeading1"] = 9] = "ATXHeading1";
        Type3[Type3["ATXHeading2"] = 10] = "ATXHeading2";
        Type3[Type3["ATXHeading3"] = 11] = "ATXHeading3";
        Type3[Type3["ATXHeading4"] = 12] = "ATXHeading4";
        Type3[Type3["ATXHeading5"] = 13] = "ATXHeading5";
        Type3[Type3["ATXHeading6"] = 14] = "ATXHeading6";
        Type3[Type3["SetextHeading1"] = 15] = "SetextHeading1";
        Type3[Type3["SetextHeading2"] = 16] = "SetextHeading2";
        Type3[Type3["HTMLBlock"] = 17] = "HTMLBlock";
        Type3[Type3["LinkReference"] = 18] = "LinkReference";
        Type3[Type3["Paragraph"] = 19] = "Paragraph";
        Type3[Type3["CommentBlock"] = 20] = "CommentBlock";
        Type3[Type3["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
        Type3[Type3["Escape"] = 22] = "Escape";
        Type3[Type3["Entity"] = 23] = "Entity";
        Type3[Type3["HardBreak"] = 24] = "HardBreak";
        Type3[Type3["Emphasis"] = 25] = "Emphasis";
        Type3[Type3["StrongEmphasis"] = 26] = "StrongEmphasis";
        Type3[Type3["Link"] = 27] = "Link";
        Type3[Type3["Image"] = 28] = "Image";
        Type3[Type3["InlineCode"] = 29] = "InlineCode";
        Type3[Type3["HTMLTag"] = 30] = "HTMLTag";
        Type3[Type3["Comment"] = 31] = "Comment";
        Type3[Type3["ProcessingInstruction"] = 32] = "ProcessingInstruction";
        Type3[Type3["URL"] = 33] = "URL";
        Type3[Type3["HeaderMark"] = 34] = "HeaderMark";
        Type3[Type3["QuoteMark"] = 35] = "QuoteMark";
        Type3[Type3["ListMark"] = 36] = "ListMark";
        Type3[Type3["LinkMark"] = 37] = "LinkMark";
        Type3[Type3["EmphasisMark"] = 38] = "EmphasisMark";
        Type3[Type3["CodeMark"] = 39] = "CodeMark";
        Type3[Type3["CodeText"] = 40] = "CodeText";
        Type3[Type3["CodeInfo"] = 41] = "CodeInfo";
        Type3[Type3["LinkTitle"] = 42] = "LinkTitle";
        Type3[Type3["LinkLabel"] = 43] = "LinkLabel";
      })(Type || (Type = {}));
      LeafBlock = class {
        /// @internal
        constructor(start2, content3) {
          this.start = start2;
          this.content = content3;
          this.marks = [];
          this.parsers = [];
        }
      };
      Line2 = class {
        constructor() {
          this.text = "";
          this.baseIndent = 0;
          this.basePos = 0;
          this.depth = 0;
          this.markers = [];
          this.pos = 0;
          this.indent = 0;
          this.next = -1;
        }
        /// @internal
        forward() {
          if (this.basePos > this.pos)
            this.forwardInner();
        }
        /// @internal
        forwardInner() {
          let newPos = this.skipSpace(this.basePos);
          this.indent = this.countIndent(newPos, this.pos, this.indent);
          this.pos = newPos;
          this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
        }
        /// Skip whitespace after the given position, return the position of
        /// the next non-space character or the end of the line if there's
        /// only space after `from`.
        skipSpace(from3) {
          return skipSpace(this.text, from3);
        }
        /// @internal
        reset(text) {
          this.text = text;
          this.baseIndent = this.basePos = this.pos = this.indent = 0;
          this.forwardInner();
          this.depth = 1;
          while (this.markers.length)
            this.markers.pop();
        }
        /// Move the line's base position forward to the given position.
        /// This should only be called by composite [block
        /// parsers](#BlockParser.parse) or [markup skipping
        /// functions](#NodeSpec.composite).
        moveBase(to) {
          this.basePos = to;
          this.baseIndent = this.countIndent(to, this.pos, this.indent);
        }
        /// Move the line's base position forward to the given _column_.
        moveBaseColumn(indent5) {
          this.baseIndent = indent5;
          this.basePos = this.findColumn(indent5);
        }
        /// Store a composite-block-level marker. Should be called from
        /// [markup skipping functions](#NodeSpec.composite) when they
        /// consume any non-whitespace characters.
        addMarker(elt2) {
          this.markers.push(elt2);
        }
        /// Find the column position at `to`, optionally starting at a given
        /// position and column.
        countIndent(to, from3 = 0, indent5 = 0) {
          for (let i = from3; i < to; i++)
            indent5 += this.text.charCodeAt(i) == 9 ? 4 - indent5 % 4 : 1;
          return indent5;
        }
        /// Find the position corresponding to the given column.
        findColumn(goal) {
          let i = 0;
          for (let indent5 = 0; i < this.text.length && indent5 < goal; i++)
            indent5 += this.text.charCodeAt(i) == 9 ? 4 - indent5 % 4 : 1;
          return i;
        }
        /// @internal
        scrub() {
          if (!this.baseIndent)
            return this.text;
          let result = "";
          for (let i = 0; i < this.basePos; i++)
            result += " ";
          return result + this.text.slice(this.basePos);
        }
      };
      DefaultSkipMarkup = {
        [Type.Blockquote](bl, cx2, line) {
          if (line.next != 62)
            return false;
          line.markers.push(elt(Type.QuoteMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + 1));
          line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
          bl.end = cx2.lineStart + line.text.length;
          return true;
        },
        [Type.ListItem](bl, _cx, line) {
          if (line.indent < line.baseIndent + bl.value && line.next > -1)
            return false;
          line.moveBaseColumn(line.baseIndent + bl.value);
          return true;
        },
        [Type.OrderedList]: skipForList,
        [Type.BulletList]: skipForList,
        [Type.Document]() {
          return true;
        }
      };
      EmptyLine = /^[ \t]*$/;
      CommentEnd = /-->/;
      ProcessingEnd = /\?>/;
      HTMLBlockStyle = [
        [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
        [/^\s*<!--/, CommentEnd],
        [/^\s*<\?/, ProcessingEnd],
        [/^\s*<![A-Z]/, />/],
        [/^\s*<!\[CDATA\[/, /\]\]>/],
        [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
        [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
      ];
      DefaultBlockParsers = {
        LinkReference: void 0,
        IndentedCode(cx2, line) {
          let base4 = line.baseIndent + 4;
          if (line.indent < base4)
            return false;
          let start2 = line.findColumn(base4);
          let from3 = cx2.lineStart + start2, to = cx2.lineStart + line.text.length;
          let marks = [], pendingMarks = [];
          addCodeText(marks, from3, to);
          while (cx2.nextLine() && line.depth >= cx2.stack.length) {
            if (line.pos == line.text.length) {
              addCodeText(pendingMarks, cx2.lineStart - 1, cx2.lineStart);
              for (let m of line.markers)
                pendingMarks.push(m);
            } else if (line.indent < base4) {
              break;
            } else {
              if (pendingMarks.length) {
                for (let m of pendingMarks) {
                  if (m.type == Type.CodeText)
                    addCodeText(marks, m.from, m.to);
                  else
                    marks.push(m);
                }
                pendingMarks = [];
              }
              addCodeText(marks, cx2.lineStart - 1, cx2.lineStart);
              for (let m of line.markers)
                marks.push(m);
              to = cx2.lineStart + line.text.length;
              let codeStart = cx2.lineStart + line.findColumn(line.baseIndent + 4);
              if (codeStart < to)
                addCodeText(marks, codeStart, to);
            }
          }
          if (pendingMarks.length) {
            pendingMarks = pendingMarks.filter((m) => m.type != Type.CodeText);
            if (pendingMarks.length)
              line.markers = pendingMarks.concat(line.markers);
          }
          cx2.addNode(cx2.buffer.writeElements(marks, -from3).finish(Type.CodeBlock, to - from3), from3);
          return true;
        },
        FencedCode(cx2, line) {
          let fenceEnd = isFencedCode(line);
          if (fenceEnd < 0)
            return false;
          let from3 = cx2.lineStart + line.pos, ch2 = line.next, len = fenceEnd - line.pos;
          let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
          let marks = [elt(Type.CodeMark, from3, from3 + len)];
          if (infoFrom < infoTo)
            marks.push(elt(Type.CodeInfo, cx2.lineStart + infoFrom, cx2.lineStart + infoTo));
          for (let first = true; cx2.nextLine() && line.depth >= cx2.stack.length; first = false) {
            let i = line.pos;
            if (line.indent - line.baseIndent < 4)
              while (i < line.text.length && line.text.charCodeAt(i) == ch2)
                i++;
            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
              for (let m of line.markers)
                marks.push(m);
              marks.push(elt(Type.CodeMark, cx2.lineStart + line.pos, cx2.lineStart + i));
              cx2.nextLine();
              break;
            } else {
              if (!first)
                addCodeText(marks, cx2.lineStart - 1, cx2.lineStart);
              for (let m of line.markers)
                marks.push(m);
              let textStart = cx2.lineStart + line.basePos, textEnd = cx2.lineStart + line.text.length;
              if (textStart < textEnd)
                addCodeText(marks, textStart, textEnd);
            }
          }
          cx2.addNode(cx2.buffer.writeElements(marks, -from3).finish(Type.FencedCode, cx2.prevLineEnd() - from3), from3);
          return true;
        },
        Blockquote(cx2, line) {
          let size = isBlockquote(line);
          if (size < 0)
            return false;
          cx2.startContext(Type.Blockquote, line.pos);
          cx2.addNode(Type.QuoteMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + 1);
          line.moveBase(line.pos + size);
          return null;
        },
        HorizontalRule(cx2, line) {
          if (isHorizontalRule(line, cx2, false) < 0)
            return false;
          let from3 = cx2.lineStart + line.pos;
          cx2.nextLine();
          cx2.addNode(Type.HorizontalRule, from3);
          return true;
        },
        BulletList(cx2, line) {
          let size = isBulletList(line, cx2, false);
          if (size < 0)
            return false;
          if (cx2.block.type != Type.BulletList)
            cx2.startContext(Type.BulletList, line.basePos, line.next);
          let newBase = getListIndent(line, line.pos + 1);
          cx2.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx2.addNode(Type.ListMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
        },
        OrderedList(cx2, line) {
          let size = isOrderedList(line, cx2, false);
          if (size < 0)
            return false;
          if (cx2.block.type != Type.OrderedList)
            cx2.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
          let newBase = getListIndent(line, line.pos + size);
          cx2.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);
          cx2.addNode(Type.ListMark, cx2.lineStart + line.pos, cx2.lineStart + line.pos + size);
          line.moveBaseColumn(newBase);
          return null;
        },
        ATXHeading(cx2, line) {
          let size = isAtxHeading(line);
          if (size < 0)
            return false;
          let off = line.pos, from3 = cx2.lineStart + off;
          let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
          while (after > off && line.text.charCodeAt(after - 1) == line.next)
            after--;
          if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))
            after = line.text.length;
          let buf = cx2.buffer.write(Type.HeaderMark, 0, size).writeElements(cx2.parser.parseInline(line.text.slice(off + size + 1, after), from3 + size + 1), -from3);
          if (after < line.text.length)
            buf.write(Type.HeaderMark, after - off, endOfSpace - off);
          let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);
          cx2.nextLine();
          cx2.addNode(node, from3);
          return true;
        },
        HTMLBlock(cx2, line) {
          let type7 = isHTMLBlock(line, cx2, false);
          if (type7 < 0)
            return false;
          let from3 = cx2.lineStart + line.pos, end2 = HTMLBlockStyle[type7][1];
          let marks = [], trailing = end2 != EmptyLine;
          while (!end2.test(line.text) && cx2.nextLine()) {
            if (line.depth < cx2.stack.length) {
              trailing = false;
              break;
            }
            for (let m of line.markers)
              marks.push(m);
          }
          if (trailing)
            cx2.nextLine();
          let nodeType = end2 == CommentEnd ? Type.CommentBlock : end2 == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;
          let to = cx2.prevLineEnd();
          cx2.addNode(cx2.buffer.writeElements(marks, -from3).finish(nodeType, to - from3), from3);
          return true;
        },
        SetextHeading: void 0
        // Specifies relative precedence for block-continue function
      };
      LinkReferenceParser = class {
        constructor(leaf) {
          this.stage = 0;
          this.elts = [];
          this.pos = 0;
          this.start = leaf.start;
          this.advance(leaf.content);
        }
        nextLine(cx2, line, leaf) {
          if (this.stage == -1)
            return false;
          let content3 = leaf.content + "\n" + line.scrub();
          let finish = this.advance(content3);
          if (finish > -1 && finish < content3.length)
            return this.complete(cx2, leaf, finish);
          return false;
        }
        finish(cx2, leaf) {
          if ((this.stage == 2 || this.stage == 3) && skipSpace(leaf.content, this.pos) == leaf.content.length)
            return this.complete(cx2, leaf, leaf.content.length);
          return false;
        }
        complete(cx2, leaf, len) {
          cx2.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));
          return true;
        }
        nextStage(elt2) {
          if (elt2) {
            this.pos = elt2.to - this.start;
            this.elts.push(elt2);
            this.stage++;
            return true;
          }
          if (elt2 === false)
            this.stage = -1;
          return false;
        }
        advance(content3) {
          for (; ; ) {
            if (this.stage == -1) {
              return -1;
            } else if (this.stage == 0) {
              if (!this.nextStage(parseLinkLabel(content3, this.pos, this.start, true)))
                return -1;
              if (content3.charCodeAt(this.pos) != 58)
                return this.stage = -1;
              this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));
              this.pos++;
            } else if (this.stage == 1) {
              if (!this.nextStage(parseURL(content3, skipSpace(content3, this.pos), this.start)))
                return -1;
            } else if (this.stage == 2) {
              let skip = skipSpace(content3, this.pos), end2 = 0;
              if (skip > this.pos) {
                let title = parseLinkTitle(content3, skip, this.start);
                if (title) {
                  let titleEnd = lineEnd(content3, title.to - this.start);
                  if (titleEnd > 0) {
                    this.nextStage(title);
                    end2 = titleEnd;
                  }
                }
              }
              if (!end2)
                end2 = lineEnd(content3, this.pos);
              return end2 > 0 && end2 < content3.length ? end2 : -1;
            } else {
              return lineEnd(content3, this.pos);
            }
          }
        }
      };
      SetextHeadingParser = class {
        nextLine(cx2, line, leaf) {
          let underline = line.depth < cx2.stack.length ? -1 : isSetextUnderline(line);
          let next2 = line.next;
          if (underline < 0)
            return false;
          let underlineMark = elt(Type.HeaderMark, cx2.lineStart + line.pos, cx2.lineStart + underline);
          cx2.nextLine();
          cx2.addLeafElement(leaf, elt(next2 == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx2.prevLineEnd(), [
            ...cx2.parser.parseInline(leaf.content, leaf.start),
            underlineMark
          ]));
          return true;
        }
        finish() {
          return false;
        }
      };
      DefaultLeafBlocks = {
        LinkReference(_, leaf) {
          return leaf.content.charCodeAt(0) == 91 ? new LinkReferenceParser(leaf) : null;
        },
        SetextHeading() {
          return new SetextHeadingParser();
        }
      };
      DefaultEndLeaf = [
        (_, line) => isAtxHeading(line) >= 0,
        (_, line) => isFencedCode(line) >= 0,
        (_, line) => isBlockquote(line) >= 0,
        (p, line) => isBulletList(line, p, true) >= 0,
        (p, line) => isOrderedList(line, p, true) >= 0,
        (p, line) => isHorizontalRule(line, p, true) >= 0,
        (p, line) => isHTMLBlock(line, p, true) >= 0
      ];
      scanLineResult = { text: "", end: 0 };
      BlockContext = class {
        /// @internal
        constructor(parser14, input, fragments, ranges) {
          this.parser = parser14;
          this.input = input;
          this.ranges = ranges;
          this.line = new Line2();
          this.atEnd = false;
          this.dontInject = /* @__PURE__ */ new Set();
          this.stoppedAt = null;
          this.rangeI = 0;
          this.to = ranges[ranges.length - 1].to;
          this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
          this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);
          this.stack = [this.block];
          this.fragments = fragments.length ? new FragmentCursor2(fragments, input) : null;
          this.readLine();
        }
        get parsedPos() {
          return this.absoluteLineStart;
        }
        advance() {
          if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
            return this.finish();
          let { line } = this;
          for (; ; ) {
            while (line.depth < this.stack.length)
              this.finishContext();
            for (let mark of line.markers)
              this.addNode(mark.type, mark.from, mark.to);
            if (line.pos < line.text.length)
              break;
            if (!this.nextLine())
              return this.finish();
          }
          if (this.fragments && this.reuseFragment(line.basePos))
            return null;
          start:
            for (; ; ) {
              for (let type7 of this.parser.blockParsers)
                if (type7) {
                  let result = type7(this, line);
                  if (result != false) {
                    if (result == true)
                      return null;
                    line.forward();
                    continue start;
                  }
                }
              break;
            }
          let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
          for (let parse2 of this.parser.leafBlockParsers)
            if (parse2) {
              let parser14 = parse2(this, leaf);
              if (parser14)
                leaf.parsers.push(parser14);
            }
          lines:
            while (this.nextLine()) {
              if (line.pos == line.text.length)
                break;
              if (line.indent < line.baseIndent + 4) {
                for (let stop of this.parser.endLeafBlock)
                  if (stop(this, line, leaf))
                    break lines;
              }
              for (let parser14 of leaf.parsers)
                if (parser14.nextLine(this, line, leaf))
                  return null;
              leaf.content += "\n" + line.scrub();
              for (let m of line.markers)
                leaf.marks.push(m);
            }
          this.finishLeaf(leaf);
          return null;
        }
        stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
            throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
        }
        reuseFragment(start2) {
          if (!this.fragments.moveTo(this.absoluteLineStart + start2, this.absoluteLineStart) || !this.fragments.matches(this.block.hash))
            return false;
          let taken = this.fragments.takeNodes(this);
          if (!taken)
            return false;
          let withoutGaps = taken, end2 = this.absoluteLineStart + taken;
          for (let i = 1; i < this.ranges.length; i++) {
            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
            if (gapFrom >= this.lineStart && gapTo < end2)
              withoutGaps -= gapTo - gapFrom;
          }
          this.lineStart += withoutGaps;
          this.absoluteLineStart += taken;
          this.moveRangeI();
          if (this.absoluteLineStart < this.to) {
            this.lineStart++;
            this.absoluteLineStart++;
            this.readLine();
          } else {
            this.atEnd = true;
            this.readLine();
          }
          return true;
        }
        /// The number of parent blocks surrounding the current block.
        get depth() {
          return this.stack.length;
        }
        /// Get the type of the parent block at the given depth. When no
        /// depth is passed, return the type of the innermost parent.
        parentType(depth = this.depth - 1) {
          return this.parser.nodeSet.types[this.stack[depth].type];
        }
        /// Move to the next input line. This should only be called by
        /// (non-composite) [block parsers](#BlockParser.parse) that consume
        /// the line directly, or leaf block parser
        /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
        /// consume the current line (and return true).
        nextLine() {
          this.lineStart += this.line.text.length;
          if (this.absoluteLineEnd >= this.to) {
            this.absoluteLineStart = this.absoluteLineEnd;
            this.atEnd = true;
            this.readLine();
            return false;
          } else {
            this.lineStart++;
            this.absoluteLineStart = this.absoluteLineEnd + 1;
            this.moveRangeI();
            this.readLine();
            return true;
          }
        }
        moveRangeI() {
          while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
            this.rangeI++;
            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
          }
        }
        /// @internal
        scanLine(start2) {
          let r2 = scanLineResult;
          r2.end = start2;
          if (start2 >= this.to) {
            r2.text = "";
          } else {
            r2.text = this.lineChunkAt(start2);
            r2.end += r2.text.length;
            if (this.ranges.length > 1) {
              let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
              while (this.ranges[rangeI].to < r2.end) {
                rangeI++;
                let nextFrom = this.ranges[rangeI].from;
                let after = this.lineChunkAt(nextFrom);
                r2.end = nextFrom + after.length;
                r2.text = r2.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                textOffset = r2.end - r2.text.length;
              }
            }
          }
          return r2;
        }
        /// @internal
        readLine() {
          let { line } = this, { text, end: end2 } = this.scanLine(this.absoluteLineStart);
          this.absoluteLineEnd = end2;
          line.reset(text);
          for (; line.depth < this.stack.length; line.depth++) {
            let cx2 = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx2.type];
            if (!handler)
              throw new Error("Unhandled block context " + Type[cx2.type]);
            if (!handler(cx2, this, line))
              break;
            line.forward();
          }
        }
        lineChunkAt(pos) {
          let next2 = this.input.chunk(pos), text;
          if (!this.input.lineChunks) {
            let eol2 = next2.indexOf("\n");
            text = eol2 < 0 ? next2 : next2.slice(0, eol2);
          } else {
            text = next2 == "\n" ? "" : next2;
          }
          return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
        }
        /// The end position of the previous line.
        prevLineEnd() {
          return this.atEnd ? this.lineStart : this.lineStart - 1;
        }
        /// @internal
        startContext(type7, start2, value = 0) {
          this.block = CompositeBlock.create(type7, value, this.lineStart + start2, this.block.hash, this.lineStart + this.line.text.length);
          this.stack.push(this.block);
        }
        /// Start a composite block. Should only be called from [block
        /// parser functions](#BlockParser.parse) that return null.
        startComposite(type7, start2, value = 0) {
          this.startContext(this.parser.getNodeType(type7), start2, value);
        }
        /// @internal
        addNode(block2, from3, to) {
          if (typeof block2 == "number")
            block2 = new Tree(this.parser.nodeSet.types[block2], none2, none2, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from3);
          this.block.addChild(block2, from3 - this.block.from);
        }
        /// Add a block element. Can be called by [block
        /// parsers](#BlockParser.parse).
        addElement(elt2) {
          this.block.addChild(elt2.toTree(this.parser.nodeSet), elt2.from - this.block.from);
        }
        /// Add a block element from a [leaf parser](#LeafBlockParser). This
        /// makes sure any extra composite block markup (such as blockquote
        /// markers) inside the block are also added to the syntax tree.
        addLeafElement(leaf, elt2) {
          this.addNode(this.buffer.writeElements(injectMarks(elt2.children, leaf.marks), -elt2.from).finish(elt2.type, elt2.to - elt2.from), elt2.from);
        }
        /// @internal
        finishContext() {
          let cx2 = this.stack.pop();
          let top3 = this.stack[this.stack.length - 1];
          top3.addChild(cx2.toTree(this.parser.nodeSet), cx2.from - top3.from);
          this.block = top3;
        }
        finish() {
          while (this.stack.length > 1)
            this.finishContext();
          return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
        }
        addGaps(tree) {
          return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
        }
        /// @internal
        finishLeaf(leaf) {
          for (let parser14 of leaf.parsers)
            if (parser14.finish(this, leaf))
              return;
          let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
          this.addNode(this.buffer.writeElements(inline, -leaf.start).finish(Type.Paragraph, leaf.content.length), leaf.start);
        }
        elt(type7, from3, to, children) {
          if (typeof type7 == "string")
            return elt(this.parser.getNodeType(type7), from3, to, children);
          return new TreeElement(type7, from3);
        }
        /// @internal
        get buffer() {
          return new Buffer2(this.parser.nodeSet);
        }
      };
      MarkdownParser = class extends Parser {
        /// @internal
        constructor(nodeSet2, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers) {
          super();
          this.nodeSet = nodeSet2;
          this.blockParsers = blockParsers;
          this.leafBlockParsers = leafBlockParsers;
          this.blockNames = blockNames;
          this.endLeafBlock = endLeafBlock;
          this.skipContextMarkup = skipContextMarkup;
          this.inlineParsers = inlineParsers;
          this.inlineNames = inlineNames;
          this.wrappers = wrappers;
          this.nodeTypes = /* @__PURE__ */ Object.create(null);
          for (let t2 of nodeSet2.types)
            this.nodeTypes[t2.name] = t2.id;
        }
        createParse(input, fragments, ranges) {
          let parse2 = new BlockContext(this, input, fragments, ranges);
          for (let w of this.wrappers)
            parse2 = w(parse2, input, fragments, ranges);
          return parse2;
        }
        /// Reconfigure the parser.
        configure(spec) {
          let config = resolveConfig(spec);
          if (!config)
            return this;
          let { nodeSet: nodeSet2, skipContextMarkup } = this;
          let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
          if (nonEmpty(config.defineNodes)) {
            skipContextMarkup = Object.assign({}, skipContextMarkup);
            let nodeTypes2 = nodeSet2.types.slice(), styles2;
            for (let s2 of config.defineNodes) {
              let { name: name2, block: block2, composite, style: style2 } = typeof s2 == "string" ? { name: s2 } : s2;
              if (nodeTypes2.some((t2) => t2.name == name2))
                continue;
              if (composite)
                skipContextMarkup[nodeTypes2.length] = (bl, cx2, line) => composite(cx2, line, bl.value);
              let id2 = nodeTypes2.length;
              let group = composite ? ["Block", "BlockContext"] : !block2 ? void 0 : id2 >= Type.ATXHeading1 && id2 <= Type.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
              nodeTypes2.push(NodeType.define({
                id: id2,
                name: name2,
                props: group && [[NodeProp.group, group]]
              }));
              if (style2) {
                if (!styles2)
                  styles2 = {};
                if (Array.isArray(style2) || style2 instanceof Tag)
                  styles2[name2] = style2;
                else
                  Object.assign(styles2, style2);
              }
            }
            nodeSet2 = new NodeSet(nodeTypes2);
            if (styles2)
              nodeSet2 = nodeSet2.extend(styleTags(styles2));
          }
          if (nonEmpty(config.props))
            nodeSet2 = nodeSet2.extend(...config.props);
          if (nonEmpty(config.remove)) {
            for (let rm of config.remove) {
              let block2 = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
              if (block2 > -1)
                blockParsers[block2] = leafBlockParsers[block2] = void 0;
              if (inline > -1)
                inlineParsers[inline] = void 0;
            }
          }
          if (nonEmpty(config.parseBlock)) {
            for (let spec2 of config.parseBlock) {
              let found = blockNames.indexOf(spec2.name);
              if (found > -1) {
                blockParsers[found] = spec2.parse;
                leafBlockParsers[found] = spec2.leaf;
              } else {
                let pos = spec2.before ? findName(blockNames, spec2.before) : spec2.after ? findName(blockNames, spec2.after) + 1 : blockNames.length - 1;
                blockParsers.splice(pos, 0, spec2.parse);
                leafBlockParsers.splice(pos, 0, spec2.leaf);
                blockNames.splice(pos, 0, spec2.name);
              }
              if (spec2.endLeaf)
                endLeafBlock.push(spec2.endLeaf);
            }
          }
          if (nonEmpty(config.parseInline)) {
            for (let spec2 of config.parseInline) {
              let found = inlineNames.indexOf(spec2.name);
              if (found > -1) {
                inlineParsers[found] = spec2.parse;
              } else {
                let pos = spec2.before ? findName(inlineNames, spec2.before) : spec2.after ? findName(inlineNames, spec2.after) + 1 : inlineNames.length - 1;
                inlineParsers.splice(pos, 0, spec2.parse);
                inlineNames.splice(pos, 0, spec2.name);
              }
            }
          }
          if (config.wrap)
            wrappers = wrappers.concat(config.wrap);
          return new MarkdownParser(nodeSet2, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
        }
        /// @internal
        getNodeType(name2) {
          let found = this.nodeTypes[name2];
          if (found == null)
            throw new RangeError(`Unknown node type '${name2}'`);
          return found;
        }
        /// Parse the given piece of inline text at the given offset,
        /// returning an array of [`Element`](#Element) objects representing
        /// the inline content.
        parseInline(text, offset2) {
          let cx2 = new InlineContext(this, text, offset2);
          outer:
            for (let pos = offset2; pos < cx2.end; ) {
              let next2 = cx2.char(pos);
              for (let token of this.inlineParsers)
                if (token) {
                  let result = token(cx2, next2, pos);
                  if (result >= 0) {
                    pos = result;
                    continue outer;
                  }
                }
              pos++;
            }
          return cx2.resolveMarkers(0);
        }
      };
      nodeTypes = [NodeType.none];
      for (let i = 1, name2; name2 = Type[i]; i++) {
        nodeTypes[i] = NodeType.define({
          id: i,
          name: name2,
          props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
        });
      }
      none2 = [];
      Buffer2 = class {
        constructor(nodeSet2) {
          this.nodeSet = nodeSet2;
          this.content = [];
          this.nodes = [];
        }
        write(type7, from3, to, children = 0) {
          this.content.push(type7, from3, to, 4 + children * 4);
          return this;
        }
        writeElements(elts, offset2 = 0) {
          for (let e of elts)
            e.writeTo(this, offset2);
          return this;
        }
        finish(type7, length) {
          return Tree.build({
            buffer: this.content,
            nodeSet: this.nodeSet,
            reused: this.nodes,
            topID: type7,
            length
          });
        }
      };
      Element = class {
        /// @internal
        constructor(type7, from3, to, children = none2) {
          this.type = type7;
          this.from = from3;
          this.to = to;
          this.children = children;
        }
        /// @internal
        writeTo(buf, offset2) {
          let startOff = buf.content.length;
          buf.writeElements(this.children, offset2);
          buf.content.push(this.type, this.from + offset2, this.to + offset2, buf.content.length + 4 - startOff);
        }
        /// @internal
        toTree(nodeSet2) {
          return new Buffer2(nodeSet2).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
        }
      };
      TreeElement = class {
        constructor(tree, from3) {
          this.tree = tree;
          this.from = from3;
        }
        get to() {
          return this.from + this.tree.length;
        }
        get type() {
          return this.tree.type.id;
        }
        get children() {
          return none2;
        }
        writeTo(buf, offset2) {
          buf.nodes.push(this.tree);
          buf.content.push(buf.nodes.length - 1, this.from + offset2, this.to + offset2, -1);
        }
        toTree() {
          return this.tree;
        }
      };
      EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
      EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
      LinkStart = {};
      ImageStart = {};
      InlineDelimiter = class {
        constructor(type7, from3, to, side) {
          this.type = type7;
          this.from = from3;
          this.to = to;
          this.side = side;
        }
      };
      Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
      Punctuation = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
      try {
        Punctuation = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
      } catch (_) {
      }
      DefaultInline = {
        Escape(cx2, next2, start2) {
          if (next2 != 92 || start2 == cx2.end - 1)
            return -1;
          let escaped = cx2.char(start2 + 1);
          for (let i = 0; i < Escapable.length; i++)
            if (Escapable.charCodeAt(i) == escaped)
              return cx2.append(elt(Type.Escape, start2, start2 + 2));
          return -1;
        },
        Entity(cx2, next2, start2) {
          if (next2 != 38)
            return -1;
          let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx2.slice(start2 + 1, start2 + 31));
          return m ? cx2.append(elt(Type.Entity, start2, start2 + 1 + m[0].length)) : -1;
        },
        InlineCode(cx2, next2, start2) {
          if (next2 != 96 || start2 && cx2.char(start2 - 1) == 96)
            return -1;
          let pos = start2 + 1;
          while (pos < cx2.end && cx2.char(pos) == 96)
            pos++;
          let size = pos - start2, curSize = 0;
          for (; pos < cx2.end; pos++) {
            if (cx2.char(pos) == 96) {
              curSize++;
              if (curSize == size && cx2.char(pos + 1) != 96)
                return cx2.append(elt(Type.InlineCode, start2, pos + 1, [
                  elt(Type.CodeMark, start2, start2 + size),
                  elt(Type.CodeMark, pos + 1 - size, pos + 1)
                ]));
            } else {
              curSize = 0;
            }
          }
          return -1;
        },
        HTMLTag(cx2, next2, start2) {
          if (next2 != 60 || start2 == cx2.end - 1)
            return -1;
          let after = cx2.slice(start2 + 1, cx2.end);
          let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
          if (url)
            return cx2.append(elt(Type.URL, start2, start2 + 1 + url[0].length));
          let comment3 = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
          if (comment3)
            return cx2.append(elt(Type.Comment, start2, start2 + 1 + comment3[0].length));
          let procInst = /^\?[^]*?\?>/.exec(after);
          if (procInst)
            return cx2.append(elt(Type.ProcessingInstruction, start2, start2 + 1 + procInst[0].length));
          let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
          if (!m)
            return -1;
          return cx2.append(elt(Type.HTMLTag, start2, start2 + 1 + m[0].length));
        },
        Emphasis(cx2, next2, start2) {
          if (next2 != 95 && next2 != 42)
            return -1;
          let pos = start2 + 1;
          while (cx2.char(pos) == next2)
            pos++;
          let before = cx2.slice(start2 - 1, start2), after = cx2.slice(pos, pos + 1);
          let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
          let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
          let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
          let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
          let canOpen = leftFlanking && (next2 == 42 || !rightFlanking || pBefore);
          let canClose = rightFlanking && (next2 == 42 || !leftFlanking || pAfter);
          return cx2.append(new InlineDelimiter(next2 == 95 ? EmphasisUnderscore : EmphasisAsterisk, start2, pos, (canOpen ? 1 : 0) | (canClose ? 2 : 0)));
        },
        HardBreak(cx2, next2, start2) {
          if (next2 == 92 && cx2.char(start2 + 1) == 10)
            return cx2.append(elt(Type.HardBreak, start2, start2 + 2));
          if (next2 == 32) {
            let pos = start2 + 1;
            while (cx2.char(pos) == 32)
              pos++;
            if (cx2.char(pos) == 10 && pos >= start2 + 2)
              return cx2.append(elt(Type.HardBreak, start2, pos + 1));
          }
          return -1;
        },
        Link(cx2, next2, start2) {
          return next2 == 91 ? cx2.append(new InlineDelimiter(
            LinkStart,
            start2,
            start2 + 1,
            1
            /* Open */
          )) : -1;
        },
        Image(cx2, next2, start2) {
          return next2 == 33 && cx2.char(start2 + 1) == 91 ? cx2.append(new InlineDelimiter(
            ImageStart,
            start2,
            start2 + 2,
            1
            /* Open */
          )) : -1;
        },
        LinkEnd(cx2, next2, start2) {
          if (next2 != 93)
            return -1;
          for (let i = cx2.parts.length - 1; i >= 0; i--) {
            let part = cx2.parts[i];
            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
              if (!part.side || cx2.skipSpace(part.to) == start2 && !/[(\[]/.test(cx2.slice(start2 + 1, start2 + 2))) {
                cx2.parts[i] = null;
                return -1;
              }
              let content3 = cx2.takeContent(i);
              let link = cx2.parts[i] = finishLink(cx2, content3, part.type == LinkStart ? Type.Link : Type.Image, part.from, start2 + 1);
              if (part.type == LinkStart)
                for (let j = 0; j < i; j++) {
                  let p = cx2.parts[j];
                  if (p instanceof InlineDelimiter && p.type == LinkStart)
                    p.side = 0;
                }
              return link.to;
            }
          }
          return -1;
        }
      };
      InlineContext = class {
        /// @internal
        constructor(parser14, text, offset2) {
          this.parser = parser14;
          this.text = text;
          this.offset = offset2;
          this.parts = [];
        }
        /// Get the character code at the given (document-relative)
        /// position.
        char(pos) {
          return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset);
        }
        /// The position of the end of this inline section.
        get end() {
          return this.offset + this.text.length;
        }
        /// Get a substring of this inline section. Again uses
        /// document-relative positions.
        slice(from3, to) {
          return this.text.slice(from3 - this.offset, to - this.offset);
        }
        /// @internal
        append(elt2) {
          this.parts.push(elt2);
          return elt2.to;
        }
        /// Add a [delimiter](#DelimiterType) at this given position. `open`
        /// and `close` indicate whether this delimiter is opening, closing,
        /// or both. Returns the end of the delimiter, for convenient
        /// returning from [parse functions](#InlineParser.parse).
        addDelimiter(type7, from3, to, open, close) {
          return this.append(new InlineDelimiter(type7, from3, to, (open ? 1 : 0) | (close ? 2 : 0)));
        }
        /// Add an inline element. Returns the end of the element.
        addElement(elt2) {
          return this.append(elt2);
        }
        /// Resolve markers between this.parts.length and from, wrapping matched markers in the
        /// appropriate node and updating the content of this.parts. @internal
        resolveMarkers(from3) {
          for (let i = from3; i < this.parts.length; i++) {
            let close = this.parts[i];
            if (!(close instanceof InlineDelimiter && close.type.resolve && close.side & 2))
              continue;
            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
            let closeSize = close.to - close.from;
            let open, j = i - 1;
            for (; j >= from3; j--) {
              let part = this.parts[j];
              if (part instanceof InlineDelimiter && part.side & 1 && part.type == close.type && // Ignore emphasis delimiters where the character count doesn't match
              !(emp && (close.side & 1 || part.side & 2) && (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
                open = part;
                break;
              }
            }
            if (!open)
              continue;
            let type7 = close.type.resolve, content3 = [];
            let start2 = open.from, end2 = close.to;
            if (emp) {
              let size = Math.min(2, open.to - open.from, closeSize);
              start2 = open.to - size;
              end2 = close.from + size;
              type7 = size == 1 ? "Emphasis" : "StrongEmphasis";
            }
            if (open.type.mark)
              content3.push(this.elt(open.type.mark, start2, open.to));
            for (let k = j + 1; k < i; k++) {
              if (this.parts[k] instanceof Element)
                content3.push(this.parts[k]);
              this.parts[k] = null;
            }
            if (close.type.mark)
              content3.push(this.elt(close.type.mark, close.from, end2));
            let element2 = this.elt(type7, start2, end2, content3);
            this.parts[j] = emp && open.from != start2 ? new InlineDelimiter(open.type, open.from, start2, open.side) : null;
            let keep = this.parts[i] = emp && close.to != end2 ? new InlineDelimiter(close.type, end2, close.to, close.side) : null;
            if (keep)
              this.parts.splice(i, 0, element2);
            else
              this.parts[i] = element2;
          }
          let result = [];
          for (let i = from3; i < this.parts.length; i++) {
            let part = this.parts[i];
            if (part instanceof Element)
              result.push(part);
          }
          return result;
        }
        /// Find an opening delimiter of the given type. Returns `null` if
        /// no delimiter is found, or an index that can be passed to
        /// [`takeContent`](#InlineContext.takeContent) otherwise.
        findOpeningDelimiter(type7) {
          for (let i = this.parts.length - 1; i >= 0; i--) {
            let part = this.parts[i];
            if (part instanceof InlineDelimiter && part.type == type7)
              return i;
          }
          return null;
        }
        /// Remove all inline elements and delimiters starting from the
        /// given index (which you should get from
        /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
        /// resolve delimiters inside of them, and return them as an array
        /// of elements.
        takeContent(startIndex) {
          let content3 = this.resolveMarkers(startIndex);
          this.parts.length = startIndex;
          return content3;
        }
        /// Skip space after the given (document) position, returning either
        /// the position of the next non-space character or the end of the
        /// section.
        skipSpace(from3) {
          return skipSpace(this.text, from3 - this.offset) + this.offset;
        }
        elt(type7, from3, to, children) {
          if (typeof type7 == "string")
            return elt(this.parser.getNodeType(type7), from3, to, children);
          return new TreeElement(type7, from3);
        }
      };
      NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];
      FragmentCursor2 = class {
        constructor(fragments, input) {
          this.fragments = fragments;
          this.input = input;
          this.i = 0;
          this.fragment = null;
          this.fragmentEnd = -1;
          this.cursor = null;
          if (fragments.length)
            this.fragment = fragments[this.i++];
        }
        nextFragment() {
          this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
          this.cursor = null;
          this.fragmentEnd = -1;
        }
        moveTo(pos, lineStart) {
          while (this.fragment && this.fragment.to <= pos)
            this.nextFragment();
          if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
            return false;
          if (this.fragmentEnd < 0) {
            let end2 = this.fragment.to;
            while (end2 > 0 && this.input.read(end2 - 1, end2) != "\n")
              end2--;
            this.fragmentEnd = end2 ? end2 - 1 : 0;
          }
          let c2 = this.cursor;
          if (!c2) {
            c2 = this.cursor = this.fragment.tree.cursor();
            c2.firstChild();
          }
          let rPos = pos + this.fragment.offset;
          while (c2.to <= rPos)
            if (!c2.parent())
              return false;
          for (; ; ) {
            if (c2.from >= rPos)
              return this.fragment.from <= lineStart;
            if (!c2.childAfter(rPos))
              return false;
          }
        }
        matches(hash3) {
          let tree = this.cursor.tree;
          return tree && tree.prop(NodeProp.contextHash) == hash3;
        }
        takeNodes(cx2) {
          let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
          let start2 = cx2.absoluteLineStart, end2 = start2, blockI = cx2.block.children.length;
          let prevEnd = end2, prevI = blockI;
          for (; ; ) {
            if (cur.to - off > fragEnd) {
              if (cur.type.isAnonymous && cur.firstChild())
                continue;
              break;
            }
            cx2.dontInject.add(cur.tree);
            cx2.addNode(cur.tree, cur.from - off);
            if (cur.type.is("Block")) {
              if (NotLast.indexOf(cur.type.id) < 0) {
                end2 = cur.to - off;
                blockI = cx2.block.children.length;
              } else {
                end2 = prevEnd;
                blockI = prevI;
                prevEnd = cur.to - off;
                prevI = cx2.block.children.length;
              }
            }
            if (!cur.nextSibling())
              break;
          }
          while (cx2.block.children.length > blockI) {
            cx2.block.children.pop();
            cx2.block.positions.pop();
          }
          return end2 - start2;
        }
      };
      markdownHighlighting = styleTags({
        "Blockquote/...": tags.quote,
        HorizontalRule: tags.contentSeparator,
        "ATXHeading1/... SetextHeading1/...": tags.heading1,
        "ATXHeading2/... SetextHeading2/...": tags.heading2,
        "ATXHeading3/...": tags.heading3,
        "ATXHeading4/...": tags.heading4,
        "ATXHeading5/...": tags.heading5,
        "ATXHeading6/...": tags.heading6,
        "Comment CommentBlock": tags.comment,
        Escape: tags.escape,
        Entity: tags.character,
        "Emphasis/...": tags.emphasis,
        "StrongEmphasis/...": tags.strong,
        "Link/... Image/...": tags.link,
        "OrderedList/... BulletList/...": tags.list,
        "BlockQuote/...": tags.quote,
        "InlineCode CodeText": tags.monospace,
        URL: tags.url,
        "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags.processingInstruction,
        "CodeInfo LinkLabel": tags.labelName,
        LinkTitle: tags.string,
        Paragraph: tags.content
      });
      parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map((n2) => DefaultBlockParsers[n2]), Object.keys(DefaultBlockParsers).map((n2) => DefaultLeafBlocks[n2]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map((n2) => DefaultInline[n2]), Object.keys(DefaultInline), []);
      StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
      Strikethrough = {
        defineNodes: [{
          name: "Strikethrough",
          style: { "Strikethrough/...": tags.strikethrough }
        }, {
          name: "StrikethroughMark",
          style: tags.processingInstruction
        }],
        parseInline: [{
          name: "Strikethrough",
          parse(cx2, next2, pos) {
            if (next2 != 126 || cx2.char(pos + 1) != 126 || cx2.char(pos + 2) == 126)
              return -1;
            let before = cx2.slice(pos - 1, pos), after = cx2.slice(pos + 2, pos + 3);
            let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
            let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);
            return cx2.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
          },
          after: "Emphasis"
        }]
      };
      delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
      TableParser = class {
        constructor() {
          this.rows = null;
        }
        nextLine(cx2, line, leaf) {
          if (this.rows == null) {
            this.rows = false;
            let lineText;
            if ((line.next == 45 || line.next == 58 || line.next == 124) && delimiterLine.test(lineText = line.text.slice(line.pos))) {
              let firstRow = [], firstCount = parseRow(cx2, leaf.content, 0, firstRow, leaf.start);
              if (firstCount == parseRow(cx2, lineText, line.pos))
                this.rows = [
                  cx2.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                  cx2.elt("TableDelimiter", cx2.lineStart + line.pos, cx2.lineStart + line.text.length)
                ];
            }
          } else if (this.rows) {
            let content3 = [];
            parseRow(cx2, line.text, line.pos, content3, cx2.lineStart);
            this.rows.push(cx2.elt("TableRow", cx2.lineStart + line.pos, cx2.lineStart + line.text.length, content3));
          }
          return false;
        }
        finish(cx2, leaf) {
          if (!this.rows)
            return false;
          cx2.addLeafElement(leaf, cx2.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
          return true;
        }
      };
      Table = {
        defineNodes: [
          { name: "Table", block: true },
          { name: "TableHeader", style: { "TableHeader/...": tags.heading } },
          "TableRow",
          { name: "TableCell", style: tags.content },
          { name: "TableDelimiter", style: tags.processingInstruction }
        ],
        parseBlock: [{
          name: "Table",
          leaf(_, leaf) {
            return hasPipe(leaf.content, 0) ? new TableParser() : null;
          },
          endLeaf(cx2, line, leaf) {
            if (leaf.parsers.some((p) => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
              return false;
            let next2 = cx2.scanLine(cx2.absoluteLineEnd + 1).text;
            return delimiterLine.test(next2) && parseRow(cx2, line.text, line.basePos) == parseRow(cx2, next2, line.basePos);
          },
          before: "SetextHeading"
        }]
      };
      TaskParser = class {
        nextLine() {
          return false;
        }
        finish(cx2, leaf) {
          cx2.addLeafElement(leaf, cx2.elt("Task", leaf.start, leaf.start + leaf.content.length, [
            cx2.elt("TaskMarker", leaf.start, leaf.start + 3),
            ...cx2.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
          ]));
          return true;
        }
      };
      TaskList = {
        defineNodes: [
          { name: "Task", block: true, style: tags.list },
          { name: "TaskMarker", style: tags.atom }
        ],
        parseBlock: [{
          name: "TaskList",
          leaf(cx2, leaf) {
            return /^\[[ xX]\]/.test(leaf.content) && cx2.parentType().name == "ListItem" ? new TaskParser() : null;
          },
          after: "SetextHeading"
        }]
      };
      GFM = [Table, TaskList, Strikethrough];
      Superscript = {
        defineNodes: [
          { name: "Superscript", style: tags.special(tags.content) },
          { name: "SuperscriptMark", style: tags.processingInstruction }
        ],
        parseInline: [{
          name: "Superscript",
          parse: parseSubSuper(94, "Superscript", "SuperscriptMark")
        }]
      };
      Subscript = {
        defineNodes: [
          { name: "Subscript", style: tags.special(tags.content) },
          { name: "SubscriptMark", style: tags.processingInstruction }
        ],
        parseInline: [{
          name: "Subscript",
          parse: parseSubSuper(126, "Subscript", "SubscriptMark")
        }]
      };
      Emoji = {
        defineNodes: [{ name: "Emoji", style: tags.character }],
        parseInline: [{
          name: "Emoji",
          parse(cx2, next2, pos) {
            let match3;
            if (next2 != 58 || !(match3 = /^[a-zA-Z_0-9]+:/.exec(cx2.slice(pos + 1, cx2.end))))
              return -1;
            return cx2.addElement(cx2.elt("Emoji", pos, pos + 1 + match3[0].length));
          }
        }]
      };
    }
  });

  // node_modules/@lezer/lr/dist/index.js
  function decodeArray(input, Type3 = Uint16Array) {
    if (typeof input != "string")
      return input;
    let array2 = null;
    for (let pos = 0, out = 0; pos < input.length; ) {
      let value = 0;
      for (; ; ) {
        let next2 = input.charCodeAt(pos++), stop = false;
        if (next2 == 126) {
          value = 65535;
          break;
        }
        if (next2 >= 92)
          next2--;
        if (next2 >= 34)
          next2--;
        let digit = next2 - 32;
        if (digit >= 46) {
          digit -= 46;
          stop = true;
        }
        value += digit;
        if (stop)
          break;
        value *= 46;
      }
      if (array2)
        array2[out++] = value;
      else
        array2 = new Type3(value);
    }
    return array2;
  }
  function readToken2(data2, input, stack, group, precTable, precOffset) {
    let state = 0, groupMask = 1 << group, { dialect: dialect2 } = stack.p.parser;
    scan:
      for (; ; ) {
        if ((groupMask & data2[state]) == 0)
          break;
        let accEnd = data2[state + 1];
        for (let i = state + 3; i < accEnd; i += 2)
          if ((data2[i + 1] & groupMask) > 0) {
            let term = data2[i];
            if (dialect2.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {
              input.acceptToken(term);
              break;
            }
          }
        let next2 = input.next, low = 0, high = data2[state + 2];
        if (input.next < 0 && high > low && data2[accEnd + high * 3 - 3] == 65535 && data2[accEnd + high * 3 - 3] == 65535) {
          state = data2[accEnd + high * 3 - 1];
          continue scan;
        }
        for (; low < high; ) {
          let mid = low + high >> 1;
          let index = accEnd + mid + (mid << 1);
          let from3 = data2[index], to = data2[index + 1] || 65536;
          if (next2 < from3)
            high = mid;
          else if (next2 >= to)
            low = mid + 1;
          else {
            state = data2[index + 2];
            input.advance();
            continue scan;
          }
        }
        break;
      }
  }
  function findOffset(data2, start2, term) {
    for (let i = start2, next2; (next2 = data2[i]) != 65535; i++)
      if (next2 == term)
        return i - start2;
    return -1;
  }
  function overrides(token, prev, tableData, tableOffset) {
    let iPrev = findOffset(tableData, tableOffset, prev);
    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
  }
  function cutAt(tree, pos, side) {
    let cursor = tree.cursor(IterMode.IncludeAnonymous);
    cursor.moveTo(pos);
    for (; ; ) {
      if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
        for (; ; ) {
          if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
            return side < 0 ? Math.max(0, Math.min(
              cursor.to - 1,
              pos - 25
              /* Safety.Margin */
            )) : Math.min(tree.length, Math.max(
              cursor.from + 1,
              pos + 25
              /* Safety.Margin */
            ));
          if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
            break;
          if (!cursor.parent())
            return side < 0 ? 0 : tree.length;
        }
    }
  }
  function pushStackDedup(stack, newStacks) {
    for (let i = 0; i < newStacks.length; i++) {
      let other = newStacks[i];
      if (other.pos == stack.pos && other.sameState(stack)) {
        if (newStacks[i].score < stack.score)
          newStacks[i] = stack;
        return;
      }
    }
    newStacks.push(stack);
  }
  function pair(data2, off) {
    return data2[off] | data2[off + 1] << 16;
  }
  function findFinished(stacks) {
    let best = null;
    for (let stack of stacks) {
      let stopped = stack.p.stoppedAt;
      if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(
        stack.state,
        2
        /* StateFlag.Accepting */
      ) && (!best || best.score < stack.score))
        best = stack;
    }
    return best;
  }
  function getSpecializer(spec) {
    if (spec.external) {
      let mask = spec.extend ? 1 : 0;
      return (value, stack) => spec.external(value, stack) << 1 | mask;
    }
    return spec.get;
  }
  var Stack, StackContext, Recover, SimulatedStack, StackBufferCursor, CachedToken, nullToken, InputStream, TokenGroup, LocalTokenGroup, ExternalTokenizer, verbose, stackIDs, Safety, FragmentCursor3, TokenCache, Rec, Parse2, Dialect, id, ContextTracker, LRParser;
  var init_dist7 = __esm({
    "node_modules/@lezer/lr/dist/index.js"() {
      init_dist3();
      Stack = class {
        /// @internal
        constructor(p, stack, state, reducePos, pos, score, buffer, bufferBase, curContext, lookAhead = 0, parent) {
          this.p = p;
          this.stack = stack;
          this.state = state;
          this.reducePos = reducePos;
          this.pos = pos;
          this.score = score;
          this.buffer = buffer;
          this.bufferBase = bufferBase;
          this.curContext = curContext;
          this.lookAhead = lookAhead;
          this.parent = parent;
        }
        /// @internal
        toString() {
          return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
        }
        // Start an empty stack
        /// @internal
        static start(p, state, pos = 0) {
          let cx2 = p.parser.context;
          return new Stack(p, [], state, pos, pos, 0, [], 0, cx2 ? new StackContext(cx2, cx2.start) : null, 0, null);
        }
        /// The stack's current [context](#lr.ContextTracker) value, if
        /// any. Its type will depend on the context tracker's type
        /// parameter, or it will be `null` if there is no context
        /// tracker.
        get context() {
          return this.curContext ? this.curContext.context : null;
        }
        // Push a state onto the stack, tracking its start position as well
        // as the buffer base at that point.
        /// @internal
        pushState(state, start2) {
          this.stack.push(this.state, start2, this.bufferBase + this.buffer.length);
          this.state = state;
        }
        // Apply a reduce action
        /// @internal
        reduce(action) {
          var _a2;
          let depth = action >> 19, type7 = action & 65535;
          let { parser: parser14 } = this.p;
          let dPrec = parser14.dynamicPrecedence(type7);
          if (dPrec)
            this.score += dPrec;
          if (depth == 0) {
            this.pushState(parser14.getGoto(this.state, type7, true), this.reducePos);
            if (type7 < parser14.minRepeatTerm)
              this.storeNode(type7, this.reducePos, this.reducePos, 4, true);
            this.reduceContext(type7, this.reducePos);
            return;
          }
          let base4 = this.stack.length - (depth - 1) * 3 - (action & 262144 ? 6 : 0);
          let start2 = base4 ? this.stack[base4 - 2] : this.p.ranges[0].from, size = this.reducePos - start2;
          if (size >= 2e3 && !((_a2 = this.p.parser.nodeSet.types[type7]) === null || _a2 === void 0 ? void 0 : _a2.isAnonymous)) {
            if (start2 == this.p.lastBigReductionStart) {
              this.p.bigReductionCount++;
              this.p.lastBigReductionSize = size;
            } else if (this.p.lastBigReductionSize < size) {
              this.p.bigReductionCount = 1;
              this.p.lastBigReductionStart = start2;
              this.p.lastBigReductionSize = size;
            }
          }
          let bufferBase = base4 ? this.stack[base4 - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
          if (type7 < parser14.minRepeatTerm || action & 131072) {
            let pos = parser14.stateFlag(
              this.state,
              1
              /* StateFlag.Skipped */
            ) ? this.pos : this.reducePos;
            this.storeNode(type7, start2, pos, count + 4, true);
          }
          if (action & 262144) {
            this.state = this.stack[base4];
          } else {
            let baseStateID = this.stack[base4 - 3];
            this.state = parser14.getGoto(baseStateID, type7, true);
          }
          while (this.stack.length > base4)
            this.stack.pop();
          this.reduceContext(type7, start2);
        }
        // Shift a value into the buffer
        /// @internal
        storeNode(term, start2, end2, size = 4, isReduce = false) {
          if (term == 0 && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
            let cur = this, top3 = this.buffer.length;
            if (top3 == 0 && cur.parent) {
              top3 = cur.bufferBase - cur.parent.bufferBase;
              cur = cur.parent;
            }
            if (top3 > 0 && cur.buffer[top3 - 4] == 0 && cur.buffer[top3 - 1] > -1) {
              if (start2 == end2)
                return;
              if (cur.buffer[top3 - 2] >= start2) {
                cur.buffer[top3 - 2] = end2;
                return;
              }
            }
          }
          if (!isReduce || this.pos == end2) {
            this.buffer.push(term, start2, end2, size);
          } else {
            let index = this.buffer.length;
            if (index > 0 && this.buffer[index - 4] != 0)
              while (index > 0 && this.buffer[index - 2] > end2) {
                this.buffer[index] = this.buffer[index - 4];
                this.buffer[index + 1] = this.buffer[index - 3];
                this.buffer[index + 2] = this.buffer[index - 2];
                this.buffer[index + 3] = this.buffer[index - 1];
                index -= 4;
                if (size > 4)
                  size -= 4;
              }
            this.buffer[index] = term;
            this.buffer[index + 1] = start2;
            this.buffer[index + 2] = end2;
            this.buffer[index + 3] = size;
          }
        }
        // Apply a shift action
        /// @internal
        shift(action, next2, nextEnd) {
          let start2 = this.pos;
          if (action & 131072) {
            this.pushState(action & 65535, this.pos);
          } else if ((action & 262144) == 0) {
            let nextState = action, { parser: parser14 } = this.p;
            if (nextEnd > this.pos || next2 <= parser14.maxNode) {
              this.pos = nextEnd;
              if (!parser14.stateFlag(
                nextState,
                1
                /* StateFlag.Skipped */
              ))
                this.reducePos = nextEnd;
            }
            this.pushState(nextState, start2);
            this.shiftContext(next2, start2);
            if (next2 <= parser14.maxNode)
              this.buffer.push(next2, start2, nextEnd, 4);
          } else {
            this.pos = nextEnd;
            this.shiftContext(next2, start2);
            if (next2 <= this.p.parser.maxNode)
              this.buffer.push(next2, start2, nextEnd, 4);
          }
        }
        // Apply an action
        /// @internal
        apply(action, next2, nextEnd) {
          if (action & 65536)
            this.reduce(action);
          else
            this.shift(action, next2, nextEnd);
        }
        // Add a prebuilt (reused) node into the buffer.
        /// @internal
        useNode(value, next2) {
          let index = this.p.reused.length - 1;
          if (index < 0 || this.p.reused[index] != value) {
            this.p.reused.push(value);
            index++;
          }
          let start2 = this.pos;
          this.reducePos = this.pos = start2 + value.length;
          this.pushState(next2, start2);
          this.buffer.push(
            index,
            start2,
            this.reducePos,
            -1
            /* size == -1 means this is a reused value */
          );
          if (this.curContext)
            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
        }
        // Split the stack. Due to the buffer sharing and the fact
        // that `this.stack` tends to stay quite shallow, this isn't very
        // expensive.
        /// @internal
        split() {
          let parent = this;
          let off = parent.buffer.length;
          while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
            off -= 4;
          let buffer = parent.buffer.slice(off), base4 = parent.bufferBase + off;
          while (parent && base4 == parent.bufferBase)
            parent = parent.parent;
          return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base4, this.curContext, this.lookAhead, parent);
        }
        // Try to recover from an error by 'deleting' (ignoring) one token.
        /// @internal
        recoverByDelete(next2, nextEnd) {
          let isNode = next2 <= this.p.parser.maxNode;
          if (isNode)
            this.storeNode(next2, this.pos, nextEnd, 4);
          this.storeNode(0, this.pos, nextEnd, isNode ? 8 : 4);
          this.pos = this.reducePos = nextEnd;
          this.score -= 190;
        }
        /// Check if the given term would be able to be shifted (optionally
        /// after some reductions) on this stack. This can be useful for
        /// external tokenizers that want to make sure they only provide a
        /// given token when it applies.
        canShift(term) {
          for (let sim = new SimulatedStack(this); ; ) {
            let action = this.p.parser.stateSlot(
              sim.state,
              4
              /* ParseState.DefaultReduce */
            ) || this.p.parser.hasAction(sim.state, term);
            if (action == 0)
              return false;
            if ((action & 65536) == 0)
              return true;
            sim.reduce(action);
          }
        }
        // Apply up to Recover.MaxNext recovery actions that conceptually
        // inserts some missing token or rule.
        /// @internal
        recoverByInsert(next2) {
          if (this.stack.length >= 300)
            return [];
          let nextStates = this.p.parser.nextStates(this.state);
          if (nextStates.length > 4 << 1 || this.stack.length >= 120) {
            let best = [];
            for (let i = 0, s2; i < nextStates.length; i += 2) {
              if ((s2 = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s2, next2))
                best.push(nextStates[i], s2);
            }
            if (this.stack.length < 120)
              for (let i = 0; best.length < 4 << 1 && i < nextStates.length; i += 2) {
                let s2 = nextStates[i + 1];
                if (!best.some((v, i2) => i2 & 1 && v == s2))
                  best.push(nextStates[i], s2);
              }
            nextStates = best;
          }
          let result = [];
          for (let i = 0; i < nextStates.length && result.length < 4; i += 2) {
            let s2 = nextStates[i + 1];
            if (s2 == this.state)
              continue;
            let stack = this.split();
            stack.pushState(s2, this.pos);
            stack.storeNode(0, stack.pos, stack.pos, 4, true);
            stack.shiftContext(nextStates[i], this.pos);
            stack.score -= 200;
            result.push(stack);
          }
          return result;
        }
        // Force a reduce, if possible. Return false if that can't
        // be done.
        /// @internal
        forceReduce() {
          let reduce = this.p.parser.stateSlot(
            this.state,
            5
            /* ParseState.ForcedReduce */
          );
          if ((reduce & 65536) == 0)
            return false;
          let { parser: parser14 } = this.p;
          if (!parser14.validAction(this.state, reduce)) {
            let depth = reduce >> 19, term = reduce & 65535;
            let target = this.stack.length - depth * 3;
            if (target < 0 || parser14.getGoto(this.stack[target], term, false) < 0)
              return false;
            this.storeNode(0, this.reducePos, this.reducePos, 4, true);
            this.score -= 100;
          }
          this.reducePos = this.pos;
          this.reduce(reduce);
          return true;
        }
        /// @internal
        forceAll() {
          while (!this.p.parser.stateFlag(
            this.state,
            2
            /* StateFlag.Accepting */
          )) {
            if (!this.forceReduce()) {
              this.storeNode(0, this.pos, this.pos, 4, true);
              break;
            }
          }
          return this;
        }
        /// Check whether this state has no further actions (assumed to be a direct descendant of the
        /// top state, since any other states must be able to continue
        /// somehow). @internal
        get deadEnd() {
          if (this.stack.length != 3)
            return false;
          let { parser: parser14 } = this.p;
          return parser14.data[parser14.stateSlot(
            this.state,
            1
            /* ParseState.Actions */
          )] == 65535 && !parser14.stateSlot(
            this.state,
            4
            /* ParseState.DefaultReduce */
          );
        }
        /// Restart the stack (put it back in its start state). Only safe
        /// when this.stack.length == 3 (state is directly below the top
        /// state). @internal
        restart() {
          this.state = this.stack[0];
          this.stack.length = 0;
        }
        /// @internal
        sameState(other) {
          if (this.state != other.state || this.stack.length != other.stack.length)
            return false;
          for (let i = 0; i < this.stack.length; i += 3)
            if (this.stack[i] != other.stack[i])
              return false;
          return true;
        }
        /// Get the parser used by this stack.
        get parser() {
          return this.p.parser;
        }
        /// Test whether a given dialect (by numeric ID, as exported from
        /// the terms file) is enabled.
        dialectEnabled(dialectID) {
          return this.p.parser.dialect.flags[dialectID];
        }
        shiftContext(term, start2) {
          if (this.curContext)
            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start2)));
        }
        reduceContext(term, start2) {
          if (this.curContext)
            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start2)));
        }
        /// @internal
        emitContext() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -3)
            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);
        }
        /// @internal
        emitLookAhead() {
          let last = this.buffer.length - 1;
          if (last < 0 || this.buffer[last] != -4)
            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);
        }
        updateContext(context) {
          if (context != this.curContext.context) {
            let newCx = new StackContext(this.curContext.tracker, context);
            if (newCx.hash != this.curContext.hash)
              this.emitContext();
            this.curContext = newCx;
          }
        }
        /// @internal
        setLookAhead(lookAhead) {
          if (lookAhead > this.lookAhead) {
            this.emitLookAhead();
            this.lookAhead = lookAhead;
          }
        }
        /// @internal
        close() {
          if (this.curContext && this.curContext.tracker.strict)
            this.emitContext();
          if (this.lookAhead > 0)
            this.emitLookAhead();
        }
      };
      StackContext = class {
        constructor(tracker, context) {
          this.tracker = tracker;
          this.context = context;
          this.hash = tracker.strict ? tracker.hash(context) : 0;
        }
      };
      (function(Recover2) {
        Recover2[Recover2["Insert"] = 200] = "Insert";
        Recover2[Recover2["Delete"] = 190] = "Delete";
        Recover2[Recover2["Reduce"] = 100] = "Reduce";
        Recover2[Recover2["MaxNext"] = 4] = "MaxNext";
        Recover2[Recover2["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
        Recover2[Recover2["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
        Recover2[Recover2["MinBigReduction"] = 2e3] = "MinBigReduction";
      })(Recover || (Recover = {}));
      SimulatedStack = class {
        constructor(start2) {
          this.start = start2;
          this.state = start2.state;
          this.stack = start2.stack;
          this.base = this.stack.length;
        }
        reduce(action) {
          let term = action & 65535, depth = action >> 19;
          if (depth == 0) {
            if (this.stack == this.start.stack)
              this.stack = this.stack.slice();
            this.stack.push(this.state, 0, 0);
            this.base += 3;
          } else {
            this.base -= (depth - 1) * 3;
          }
          let goto2 = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
          this.state = goto2;
        }
      };
      StackBufferCursor = class {
        constructor(stack, pos, index) {
          this.stack = stack;
          this.pos = pos;
          this.index = index;
          this.buffer = stack.buffer;
          if (this.index == 0)
            this.maybeNext();
        }
        static create(stack, pos = stack.bufferBase + stack.buffer.length) {
          return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
        }
        maybeNext() {
          let next2 = this.stack.parent;
          if (next2 != null) {
            this.index = this.stack.bufferBase - next2.bufferBase;
            this.stack = next2;
            this.buffer = next2.buffer;
          }
        }
        get id() {
          return this.buffer[this.index - 4];
        }
        get start() {
          return this.buffer[this.index - 3];
        }
        get end() {
          return this.buffer[this.index - 2];
        }
        get size() {
          return this.buffer[this.index - 1];
        }
        next() {
          this.index -= 4;
          this.pos -= 4;
          if (this.index == 0)
            this.maybeNext();
        }
        fork() {
          return new StackBufferCursor(this.stack, this.pos, this.index);
        }
      };
      CachedToken = class {
        constructor() {
          this.start = -1;
          this.value = -1;
          this.end = -1;
          this.extended = -1;
          this.lookAhead = 0;
          this.mask = 0;
          this.context = 0;
        }
      };
      nullToken = new CachedToken();
      InputStream = class {
        /// @internal
        constructor(input, ranges) {
          this.input = input;
          this.ranges = ranges;
          this.chunk = "";
          this.chunkOff = 0;
          this.chunk2 = "";
          this.chunk2Pos = 0;
          this.next = -1;
          this.token = nullToken;
          this.rangeIndex = 0;
          this.pos = this.chunkPos = ranges[0].from;
          this.range = ranges[0];
          this.end = ranges[ranges.length - 1].to;
          this.readNext();
        }
        /// @internal
        resolveOffset(offset2, assoc) {
          let range = this.range, index = this.rangeIndex;
          let pos = this.pos + offset2;
          while (pos < range.from) {
            if (!index)
              return null;
            let next2 = this.ranges[--index];
            pos -= range.from - next2.to;
            range = next2;
          }
          while (assoc < 0 ? pos > range.to : pos >= range.to) {
            if (index == this.ranges.length - 1)
              return null;
            let next2 = this.ranges[++index];
            pos += next2.from - range.to;
            range = next2;
          }
          return pos;
        }
        /// @internal
        clipPos(pos) {
          if (pos >= this.range.from && pos < this.range.to)
            return pos;
          for (let range of this.ranges)
            if (range.to > pos)
              return Math.max(pos, range.from);
          return this.end;
        }
        /// Look at a code unit near the stream position. `.peek(0)` equals
        /// `.next`, `.peek(-1)` gives you the previous character, and so
        /// on.
        ///
        /// Note that looking around during tokenizing creates dependencies
        /// on potentially far-away content, which may reduce the
        /// effectiveness incremental parsing—when looking forward—or even
        /// cause invalid reparses when looking backward more than 25 code
        /// units, since the library does not track lookbehind.
        peek(offset2) {
          let idx = this.chunkOff + offset2, pos, result;
          if (idx >= 0 && idx < this.chunk.length) {
            pos = this.pos + offset2;
            result = this.chunk.charCodeAt(idx);
          } else {
            let resolved = this.resolveOffset(offset2, 1);
            if (resolved == null)
              return -1;
            pos = resolved;
            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
              result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
            } else {
              let i = this.rangeIndex, range = this.range;
              while (range.to <= pos)
                range = this.ranges[++i];
              this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
              if (pos + this.chunk2.length > range.to)
                this.chunk2 = this.chunk2.slice(0, range.to - pos);
              result = this.chunk2.charCodeAt(0);
            }
          }
          if (pos >= this.token.lookAhead)
            this.token.lookAhead = pos + 1;
          return result;
        }
        /// Accept a token. By default, the end of the token is set to the
        /// current stream position, but you can pass an offset (relative to
        /// the stream position) to change that.
        acceptToken(token, endOffset = 0) {
          let end2 = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
          if (end2 == null || end2 < this.token.start)
            throw new RangeError("Token end out of bounds");
          this.token.value = token;
          this.token.end = end2;
        }
        getChunk() {
          if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
            let { chunk, chunkPos } = this;
            this.chunk = this.chunk2;
            this.chunkPos = this.chunk2Pos;
            this.chunk2 = chunk;
            this.chunk2Pos = chunkPos;
            this.chunkOff = this.pos - this.chunkPos;
          } else {
            this.chunk2 = this.chunk;
            this.chunk2Pos = this.chunkPos;
            let nextChunk = this.input.chunk(this.pos);
            let end2 = this.pos + nextChunk.length;
            this.chunk = end2 > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
            this.chunkPos = this.pos;
            this.chunkOff = 0;
          }
        }
        readNext() {
          if (this.chunkOff >= this.chunk.length) {
            this.getChunk();
            if (this.chunkOff == this.chunk.length)
              return this.next = -1;
          }
          return this.next = this.chunk.charCodeAt(this.chunkOff);
        }
        /// Move the stream forward N (defaults to 1) code units. Returns
        /// the new value of [`next`](#lr.InputStream.next).
        advance(n2 = 1) {
          this.chunkOff += n2;
          while (this.pos + n2 >= this.range.to) {
            if (this.rangeIndex == this.ranges.length - 1)
              return this.setDone();
            n2 -= this.range.to - this.pos;
            this.range = this.ranges[++this.rangeIndex];
            this.pos = this.range.from;
          }
          this.pos += n2;
          if (this.pos >= this.token.lookAhead)
            this.token.lookAhead = this.pos + 1;
          return this.readNext();
        }
        setDone() {
          this.pos = this.chunkPos = this.end;
          this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
          this.chunk = "";
          return this.next = -1;
        }
        /// @internal
        reset(pos, token) {
          if (token) {
            this.token = token;
            token.start = pos;
            token.lookAhead = pos + 1;
            token.value = token.extended = -1;
          } else {
            this.token = nullToken;
          }
          if (this.pos != pos) {
            this.pos = pos;
            if (pos == this.end) {
              this.setDone();
              return this;
            }
            while (pos < this.range.from)
              this.range = this.ranges[--this.rangeIndex];
            while (pos >= this.range.to)
              this.range = this.ranges[++this.rangeIndex];
            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
              this.chunkOff = pos - this.chunkPos;
            } else {
              this.chunk = "";
              this.chunkOff = 0;
            }
            this.readNext();
          }
          return this;
        }
        /// @internal
        read(from3, to) {
          if (from3 >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
            return this.chunk.slice(from3 - this.chunkPos, to - this.chunkPos);
          if (from3 >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
            return this.chunk2.slice(from3 - this.chunk2Pos, to - this.chunk2Pos);
          if (from3 >= this.range.from && to <= this.range.to)
            return this.input.read(from3, to);
          let result = "";
          for (let r2 of this.ranges) {
            if (r2.from >= to)
              break;
            if (r2.to > from3)
              result += this.input.read(Math.max(r2.from, from3), Math.min(r2.to, to));
          }
          return result;
        }
      };
      TokenGroup = class {
        constructor(data2, id2) {
          this.data = data2;
          this.id = id2;
        }
        token(input, stack) {
          let { parser: parser14 } = stack.p;
          readToken2(this.data, input, stack, this.id, parser14.data, parser14.tokenPrecTable);
        }
      };
      TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
      LocalTokenGroup = class {
        constructor(data2, precTable, elseToken) {
          this.precTable = precTable;
          this.elseToken = elseToken;
          this.data = typeof data2 == "string" ? decodeArray(data2) : data2;
        }
        token(input, stack) {
          let start2 = input.pos, cur;
          for (; ; ) {
            cur = input.pos;
            readToken2(this.data, input, stack, 0, this.data, this.precTable);
            if (input.token.value > -1)
              break;
            if (this.elseToken == null)
              return;
            if (input.next < 0)
              break;
            input.advance();
            input.reset(cur + 1, input.token);
          }
          if (cur > start2) {
            input.reset(start2, input.token);
            input.acceptToken(this.elseToken, cur - start2);
          }
        }
      };
      LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
      ExternalTokenizer = class {
        /// Create a tokenizer. The first argument is the function that,
        /// given an input stream, scans for the types of tokens it
        /// recognizes at the stream's position, and calls
        /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
        /// one.
        constructor(token, options = {}) {
          this.token = token;
          this.contextual = !!options.contextual;
          this.fallback = !!options.fallback;
          this.extend = !!options.extend;
        }
      };
      verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
      stackIDs = null;
      (function(Safety2) {
        Safety2[Safety2["Margin"] = 25] = "Margin";
      })(Safety || (Safety = {}));
      FragmentCursor3 = class {
        constructor(fragments, nodeSet2) {
          this.fragments = fragments;
          this.nodeSet = nodeSet2;
          this.i = 0;
          this.fragment = null;
          this.safeFrom = -1;
          this.safeTo = -1;
          this.trees = [];
          this.start = [];
          this.index = [];
          this.nextFragment();
        }
        nextFragment() {
          let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
          if (fr) {
            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
            while (this.trees.length) {
              this.trees.pop();
              this.start.pop();
              this.index.pop();
            }
            this.trees.push(fr.tree);
            this.start.push(-fr.offset);
            this.index.push(0);
            this.nextStart = this.safeFrom;
          } else {
            this.nextStart = 1e9;
          }
        }
        // `pos` must be >= any previously given `pos` for this cursor
        nodeAt(pos) {
          if (pos < this.nextStart)
            return null;
          while (this.fragment && this.safeTo <= pos)
            this.nextFragment();
          if (!this.fragment)
            return null;
          for (; ; ) {
            let last = this.trees.length - 1;
            if (last < 0) {
              this.nextFragment();
              return null;
            }
            let top3 = this.trees[last], index = this.index[last];
            if (index == top3.children.length) {
              this.trees.pop();
              this.start.pop();
              this.index.pop();
              continue;
            }
            let next2 = top3.children[index];
            let start2 = this.start[last] + top3.positions[index];
            if (start2 > pos) {
              this.nextStart = start2;
              return null;
            }
            if (next2 instanceof Tree) {
              if (start2 == pos) {
                if (start2 < this.safeFrom)
                  return null;
                let end2 = start2 + next2.length;
                if (end2 <= this.safeTo) {
                  let lookAhead = next2.prop(NodeProp.lookAhead);
                  if (!lookAhead || end2 + lookAhead < this.fragment.to)
                    return next2;
                }
              }
              this.index[last]++;
              if (start2 + next2.length >= Math.max(this.safeFrom, pos)) {
                this.trees.push(next2);
                this.start.push(start2);
                this.index.push(0);
              }
            } else {
              this.index[last]++;
              this.nextStart = start2 + next2.length;
            }
          }
        }
      };
      TokenCache = class {
        constructor(parser14, stream) {
          this.stream = stream;
          this.tokens = [];
          this.mainToken = null;
          this.actions = [];
          this.tokens = parser14.tokenizers.map((_) => new CachedToken());
        }
        getActions(stack) {
          let actionIndex = 0;
          let main = null;
          let { parser: parser14 } = stack.p, { tokenizers } = parser14;
          let mask = parser14.stateSlot(
            stack.state,
            3
            /* ParseState.TokenizerMask */
          );
          let context = stack.curContext ? stack.curContext.hash : 0;
          let lookAhead = 0;
          for (let i = 0; i < tokenizers.length; i++) {
            if ((1 << i & mask) == 0)
              continue;
            let tokenizer2 = tokenizers[i], token = this.tokens[i];
            if (main && !tokenizer2.fallback)
              continue;
            if (tokenizer2.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
              this.updateCachedToken(token, tokenizer2, stack);
              token.mask = mask;
              token.context = context;
            }
            if (token.lookAhead > token.end + 25)
              lookAhead = Math.max(token.lookAhead, lookAhead);
            if (token.value != 0) {
              let startIndex = actionIndex;
              if (token.extended > -1)
                actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
              actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
              if (!tokenizer2.extend) {
                main = token;
                if (actionIndex > startIndex)
                  break;
              }
            }
          }
          while (this.actions.length > actionIndex)
            this.actions.pop();
          if (lookAhead)
            stack.setLookAhead(lookAhead);
          if (!main && stack.pos == this.stream.end) {
            main = new CachedToken();
            main.value = stack.p.parser.eofTerm;
            main.start = main.end = stack.pos;
            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
          }
          this.mainToken = main;
          return this.actions;
        }
        getMainToken(stack) {
          if (this.mainToken)
            return this.mainToken;
          let main = new CachedToken(), { pos, p } = stack;
          main.start = pos;
          main.end = Math.min(pos + 1, p.stream.end);
          main.value = pos == p.stream.end ? p.parser.eofTerm : 0;
          return main;
        }
        updateCachedToken(token, tokenizer2, stack) {
          let start2 = this.stream.clipPos(stack.pos);
          tokenizer2.token(this.stream.reset(start2, token), stack);
          if (token.value > -1) {
            let { parser: parser14 } = stack.p;
            for (let i = 0; i < parser14.specialized.length; i++)
              if (parser14.specialized[i] == token.value) {
                let result = parser14.specializers[i](this.stream.read(token.start, token.end), stack);
                if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                  if ((result & 1) == 0)
                    token.value = result >> 1;
                  else
                    token.extended = result >> 1;
                  break;
                }
              }
          } else {
            token.value = 0;
            token.end = this.stream.clipPos(start2 + 1);
          }
        }
        putAction(action, token, end2, index) {
          for (let i = 0; i < index; i += 3)
            if (this.actions[i] == action)
              return index;
          this.actions[index++] = action;
          this.actions[index++] = token;
          this.actions[index++] = end2;
          return index;
        }
        addActions(stack, token, end2, index) {
          let { state } = stack, { parser: parser14 } = stack.p, { data: data2 } = parser14;
          for (let set2 = 0; set2 < 2; set2++) {
            for (let i = parser14.stateSlot(
              state,
              set2 ? 2 : 1
              /* ParseState.Actions */
            ); ; i += 3) {
              if (data2[i] == 65535) {
                if (data2[i + 1] == 1) {
                  i = pair(data2, i + 2);
                } else {
                  if (index == 0 && data2[i + 1] == 2)
                    index = this.putAction(pair(data2, i + 2), token, end2, index);
                  break;
                }
              }
              if (data2[i] == token)
                index = this.putAction(pair(data2, i + 1), token, end2, index);
            }
          }
          return index;
        }
      };
      (function(Rec2) {
        Rec2[Rec2["Distance"] = 5] = "Distance";
        Rec2[Rec2["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
        Rec2[Rec2["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
        Rec2[Rec2["ForceReduceLimit"] = 10] = "ForceReduceLimit";
        Rec2[Rec2["CutDepth"] = 15e3] = "CutDepth";
        Rec2[Rec2["CutTo"] = 9e3] = "CutTo";
        Rec2[Rec2["MaxLeftAssociativeReductionCount"] = 300] = "MaxLeftAssociativeReductionCount";
        Rec2[Rec2["MaxStackCount"] = 12] = "MaxStackCount";
      })(Rec || (Rec = {}));
      Parse2 = class {
        constructor(parser14, input, fragments, ranges) {
          this.parser = parser14;
          this.input = input;
          this.ranges = ranges;
          this.recovering = 0;
          this.nextStackID = 9812;
          this.minStackPos = 0;
          this.reused = [];
          this.stoppedAt = null;
          this.lastBigReductionStart = -1;
          this.lastBigReductionSize = 0;
          this.bigReductionCount = 0;
          this.stream = new InputStream(input, ranges);
          this.tokens = new TokenCache(parser14, this.stream);
          this.topTerm = parser14.top[1];
          let { from: from3 } = ranges[0];
          this.stacks = [Stack.start(this, parser14.top[0], from3)];
          this.fragments = fragments.length && this.stream.end - from3 > parser14.bufferLength * 4 ? new FragmentCursor3(fragments, parser14.nodeSet) : null;
        }
        get parsedPos() {
          return this.minStackPos;
        }
        // Move the parser forward. This will process all parse stacks at
        // `this.pos` and try to advance them to a further position. If no
        // stack for such a position is found, it'll start error-recovery.
        //
        // When the parse is finished, this will return a syntax tree. When
        // not, it returns `null`.
        advance() {
          let stacks = this.stacks, pos = this.minStackPos;
          let newStacks = this.stacks = [];
          let stopped, stoppedTokens;
          if (this.bigReductionCount > 300 && stacks.length == 1) {
            let [s2] = stacks;
            while (s2.forceReduce() && s2.stack.length && s2.stack[s2.stack.length - 2] >= this.lastBigReductionStart) {
            }
            this.bigReductionCount = this.lastBigReductionSize = 0;
          }
          for (let i = 0; i < stacks.length; i++) {
            let stack = stacks[i];
            for (; ; ) {
              this.tokens.mainToken = null;
              if (stack.pos > pos) {
                newStacks.push(stack);
              } else if (this.advanceStack(stack, newStacks, stacks)) {
                continue;
              } else {
                if (!stopped) {
                  stopped = [];
                  stoppedTokens = [];
                }
                stopped.push(stack);
                let tok = this.tokens.getMainToken(stack);
                stoppedTokens.push(tok.value, tok.end);
              }
              break;
            }
          }
          if (!newStacks.length) {
            let finished = stopped && findFinished(stopped);
            if (finished)
              return this.stackToTree(finished);
            if (this.parser.strict) {
              if (verbose && stopped)
                console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
              throw new SyntaxError("No parse at " + pos);
            }
            if (!this.recovering)
              this.recovering = 5;
          }
          if (this.recovering && stopped) {
            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);
            if (finished)
              return this.stackToTree(finished.forceAll());
          }
          if (this.recovering) {
            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3;
            if (newStacks.length > maxRemaining) {
              newStacks.sort((a2, b) => b.score - a2.score);
              while (newStacks.length > maxRemaining)
                newStacks.pop();
            }
            if (newStacks.some((s2) => s2.reducePos > pos))
              this.recovering--;
          } else if (newStacks.length > 1) {
            outer:
              for (let i = 0; i < newStacks.length - 1; i++) {
                let stack = newStacks[i];
                for (let j = i + 1; j < newStacks.length; j++) {
                  let other = newStacks[j];
                  if (stack.sameState(other) || stack.buffer.length > 500 && other.buffer.length > 500) {
                    if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {
                      newStacks.splice(j--, 1);
                    } else {
                      newStacks.splice(i--, 1);
                      continue outer;
                    }
                  }
                }
              }
            if (newStacks.length > 12)
              newStacks.splice(
                12,
                newStacks.length - 12
                /* Rec.MaxStackCount */
              );
          }
          this.minStackPos = newStacks[0].pos;
          for (let i = 1; i < newStacks.length; i++)
            if (newStacks[i].pos < this.minStackPos)
              this.minStackPos = newStacks[i].pos;
          return null;
        }
        stopAt(pos) {
          if (this.stoppedAt != null && this.stoppedAt < pos)
            throw new RangeError("Can't move stoppedAt forward");
          this.stoppedAt = pos;
        }
        // Returns an updated version of the given stack, or null if the
        // stack can't advance normally. When `split` and `stacks` are
        // given, stacks split off by ambiguous operations will be pushed to
        // `split`, or added to `stacks` if they move `pos` forward.
        advanceStack(stack, stacks, split) {
          let start2 = stack.pos, { parser: parser14 } = this;
          let base4 = verbose ? this.stackID(stack) + " -> " : "";
          if (this.stoppedAt != null && start2 > this.stoppedAt)
            return stack.forceReduce() ? stack : null;
          if (this.fragments) {
            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
            for (let cached = this.fragments.nodeAt(start2); cached; ) {
              let match3 = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser14.getGoto(stack.state, cached.type.id) : -1;
              if (match3 > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                stack.useNode(cached, match3);
                if (verbose)
                  console.log(base4 + this.stackID(stack) + ` (via reuse of ${parser14.getName(cached.type.id)})`);
                return true;
              }
              if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                break;
              let inner = cached.children[0];
              if (inner instanceof Tree && cached.positions[0] == 0)
                cached = inner;
              else
                break;
            }
          }
          let defaultReduce = parser14.stateSlot(
            stack.state,
            4
            /* ParseState.DefaultReduce */
          );
          if (defaultReduce > 0) {
            stack.reduce(defaultReduce);
            if (verbose)
              console.log(base4 + this.stackID(stack) + ` (via always-reduce ${parser14.getName(
                defaultReduce & 65535
                /* Action.ValueMask */
              )})`);
            return true;
          }
          if (stack.stack.length >= 15e3) {
            while (stack.stack.length > 9e3 && stack.forceReduce()) {
            }
          }
          let actions = this.tokens.getActions(stack);
          for (let i = 0; i < actions.length; ) {
            let action = actions[i++], term = actions[i++], end2 = actions[i++];
            let last = i == actions.length || !split;
            let localStack = last ? stack : stack.split();
            localStack.apply(action, term, end2);
            if (verbose)
              console.log(base4 + this.stackID(localStack) + ` (via ${(action & 65536) == 0 ? "shift" : `reduce of ${parser14.getName(
                action & 65535
                /* Action.ValueMask */
              )}`} for ${parser14.getName(term)} @ ${start2}${localStack == stack ? "" : ", split"})`);
            if (last)
              return true;
            else if (localStack.pos > start2)
              stacks.push(localStack);
            else
              split.push(localStack);
          }
          return false;
        }
        // Advance a given stack forward as far as it will go. Returns the
        // (possibly updated) stack if it got stuck, or null if it moved
        // forward and was given to `pushStackDedup`.
        advanceFully(stack, newStacks) {
          let pos = stack.pos;
          for (; ; ) {
            if (!this.advanceStack(stack, null, null))
              return false;
            if (stack.pos > pos) {
              pushStackDedup(stack, newStacks);
              return true;
            }
          }
        }
        runRecovery(stacks, tokens2, newStacks) {
          let finished = null, restarted = false;
          for (let i = 0; i < stacks.length; i++) {
            let stack = stacks[i], token = tokens2[i << 1], tokenEnd = tokens2[(i << 1) + 1];
            let base4 = verbose ? this.stackID(stack) + " -> " : "";
            if (stack.deadEnd) {
              if (restarted)
                continue;
              restarted = true;
              stack.restart();
              if (verbose)
                console.log(base4 + this.stackID(stack) + " (restarted)");
              let done = this.advanceFully(stack, newStacks);
              if (done)
                continue;
            }
            let force = stack.split(), forceBase = base4;
            for (let j = 0; force.forceReduce() && j < 10; j++) {
              if (verbose)
                console.log(forceBase + this.stackID(force) + " (via force-reduce)");
              let done = this.advanceFully(force, newStacks);
              if (done)
                break;
              if (verbose)
                forceBase = this.stackID(force) + " -> ";
            }
            for (let insert2 of stack.recoverByInsert(token)) {
              if (verbose)
                console.log(base4 + this.stackID(insert2) + " (via recover-insert)");
              this.advanceFully(insert2, newStacks);
            }
            if (this.stream.end > stack.pos) {
              if (tokenEnd == stack.pos) {
                tokenEnd++;
                token = 0;
              }
              stack.recoverByDelete(token, tokenEnd);
              if (verbose)
                console.log(base4 + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
              pushStackDedup(stack, newStacks);
            } else if (!finished || finished.score < stack.score) {
              finished = stack;
            }
          }
          return finished;
        }
        // Convert the stack's buffer to a syntax tree.
        stackToTree(stack) {
          stack.close();
          return Tree.build({
            buffer: StackBufferCursor.create(stack),
            nodeSet: this.parser.nodeSet,
            topID: this.topTerm,
            maxBufferLength: this.parser.bufferLength,
            reused: this.reused,
            start: this.ranges[0].from,
            length: stack.pos - this.ranges[0].from,
            minRepeatType: this.parser.minRepeatTerm
          });
        }
        stackID(stack) {
          let id2 = (stackIDs || (stackIDs = /* @__PURE__ */ new WeakMap())).get(stack);
          if (!id2)
            stackIDs.set(stack, id2 = String.fromCodePoint(this.nextStackID++));
          return id2 + stack;
        }
      };
      Dialect = class {
        constructor(source, flags, disabled) {
          this.source = source;
          this.flags = flags;
          this.disabled = disabled;
        }
        allows(term) {
          return !this.disabled || this.disabled[term] == 0;
        }
      };
      id = (x) => x;
      ContextTracker = class {
        /// Define a context tracker.
        constructor(spec) {
          this.start = spec.start;
          this.shift = spec.shift || id;
          this.reduce = spec.reduce || id;
          this.reuse = spec.reuse || id;
          this.hash = spec.hash || (() => 0);
          this.strict = spec.strict !== false;
        }
      };
      LRParser = class extends Parser {
        /// @internal
        constructor(spec) {
          super();
          this.wrappers = [];
          if (spec.version != 14)
            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14})`);
          let nodeNames = spec.nodeNames.split(" ");
          this.minRepeatTerm = nodeNames.length;
          for (let i = 0; i < spec.repeatNodeCount; i++)
            nodeNames.push("");
          let topTerms = Object.keys(spec.topRules).map((r2) => spec.topRules[r2][1]);
          let nodeProps = [];
          for (let i = 0; i < nodeNames.length; i++)
            nodeProps.push([]);
          function setProp(nodeID, prop, value) {
            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
          }
          if (spec.nodeProps)
            for (let propSpec of spec.nodeProps) {
              let prop = propSpec[0];
              if (typeof prop == "string")
                prop = NodeProp[prop];
              for (let i = 1; i < propSpec.length; ) {
                let next2 = propSpec[i++];
                if (next2 >= 0) {
                  setProp(next2, prop, propSpec[i++]);
                } else {
                  let value = propSpec[i + -next2];
                  for (let j = -next2; j > 0; j--)
                    setProp(propSpec[i++], prop, value);
                  i++;
                }
              }
            }
          this.nodeSet = new NodeSet(nodeNames.map((name2, i) => NodeType.define({
            name: i >= this.minRepeatTerm ? void 0 : name2,
            id: i,
            props: nodeProps[i],
            top: topTerms.indexOf(i) > -1,
            error: i == 0,
            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
          })));
          if (spec.propSources)
            this.nodeSet = this.nodeSet.extend(...spec.propSources);
          this.strict = false;
          this.bufferLength = DefaultBufferLength;
          let tokenArray = decodeArray(spec.tokenData);
          this.context = spec.context;
          this.specializerSpecs = spec.specialized || [];
          this.specialized = new Uint16Array(this.specializerSpecs.length);
          for (let i = 0; i < this.specializerSpecs.length; i++)
            this.specialized[i] = this.specializerSpecs[i].term;
          this.specializers = this.specializerSpecs.map(getSpecializer);
          this.states = decodeArray(spec.states, Uint32Array);
          this.data = decodeArray(spec.stateData);
          this.goto = decodeArray(spec.goto);
          this.maxTerm = spec.maxTerm;
          this.tokenizers = spec.tokenizers.map((value) => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
          this.topRules = spec.topRules;
          this.dialects = spec.dialects || {};
          this.dynamicPrecedences = spec.dynamicPrecedences || null;
          this.tokenPrecTable = spec.tokenPrec;
          this.termNames = spec.termNames || null;
          this.maxNode = this.nodeSet.types.length - 1;
          this.dialect = this.parseDialect();
          this.top = this.topRules[Object.keys(this.topRules)[0]];
        }
        createParse(input, fragments, ranges) {
          let parse2 = new Parse2(this, input, fragments, ranges);
          for (let w of this.wrappers)
            parse2 = w(parse2, input, fragments, ranges);
          return parse2;
        }
        /// Get a goto table entry @internal
        getGoto(state, term, loose = false) {
          let table = this.goto;
          if (term >= table[0])
            return -1;
          for (let pos = table[term + 1]; ; ) {
            let groupTag = table[pos++], last = groupTag & 1;
            let target = table[pos++];
            if (last && loose)
              return target;
            for (let end2 = pos + (groupTag >> 1); pos < end2; pos++)
              if (table[pos] == state)
                return target;
            if (last)
              return -1;
          }
        }
        /// Check if this state has an action for a given terminal @internal
        hasAction(state, terminal) {
          let data2 = this.data;
          for (let set2 = 0; set2 < 2; set2++) {
            for (let i = this.stateSlot(
              state,
              set2 ? 2 : 1
              /* ParseState.Actions */
            ), next2; ; i += 3) {
              if ((next2 = data2[i]) == 65535) {
                if (data2[i + 1] == 1)
                  next2 = data2[i = pair(data2, i + 2)];
                else if (data2[i + 1] == 2)
                  return pair(data2, i + 2);
                else
                  break;
              }
              if (next2 == terminal || next2 == 0)
                return pair(data2, i + 1);
            }
          }
          return 0;
        }
        /// @internal
        stateSlot(state, slot) {
          return this.states[state * 6 + slot];
        }
        /// @internal
        stateFlag(state, flag) {
          return (this.stateSlot(
            state,
            0
            /* ParseState.Flags */
          ) & flag) > 0;
        }
        /// @internal
        validAction(state, action) {
          if (action == this.stateSlot(
            state,
            4
            /* ParseState.DefaultReduce */
          ))
            return true;
          for (let i = this.stateSlot(
            state,
            1
            /* ParseState.Actions */
          ); ; i += 3) {
            if (this.data[i] == 65535) {
              if (this.data[i + 1] == 1)
                i = pair(this.data, i + 2);
              else
                return false;
            }
            if (action == pair(this.data, i + 1))
              return true;
          }
        }
        /// Get the states that can follow this one through shift actions or
        /// goto jumps. @internal
        nextStates(state) {
          let result = [];
          for (let i = this.stateSlot(
            state,
            1
            /* ParseState.Actions */
          ); ; i += 3) {
            if (this.data[i] == 65535) {
              if (this.data[i + 1] == 1)
                i = pair(this.data, i + 2);
              else
                break;
            }
            if ((this.data[i + 2] & 65536 >> 16) == 0) {
              let value = this.data[i + 1];
              if (!result.some((v, i2) => i2 & 1 && v == value))
                result.push(this.data[i], value);
            }
          }
          return result;
        }
        /// Configure the parser. Returns a new parser instance that has the
        /// given settings modified. Settings not provided in `config` are
        /// kept from the original parser.
        configure(config) {
          let copy = Object.assign(Object.create(LRParser.prototype), this);
          if (config.props)
            copy.nodeSet = this.nodeSet.extend(...config.props);
          if (config.top) {
            let info = this.topRules[config.top];
            if (!info)
              throw new RangeError(`Invalid top rule name ${config.top}`);
            copy.top = info;
          }
          if (config.tokenizers)
            copy.tokenizers = this.tokenizers.map((t2) => {
              let found = config.tokenizers.find((r2) => r2.from == t2);
              return found ? found.to : t2;
            });
          if (config.specializers) {
            copy.specializers = this.specializers.slice();
            copy.specializerSpecs = this.specializerSpecs.map((s2, i) => {
              let found = config.specializers.find((r2) => r2.from == s2.external);
              if (!found)
                return s2;
              let spec = Object.assign(Object.assign({}, s2), { external: found.to });
              copy.specializers[i] = getSpecializer(spec);
              return spec;
            });
          }
          if (config.contextTracker)
            copy.context = config.contextTracker;
          if (config.dialect)
            copy.dialect = this.parseDialect(config.dialect);
          if (config.strict != null)
            copy.strict = config.strict;
          if (config.wrap)
            copy.wrappers = copy.wrappers.concat(config.wrap);
          if (config.bufferLength != null)
            copy.bufferLength = config.bufferLength;
          return copy;
        }
        /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
        /// are registered for this parser.
        hasWrappers() {
          return this.wrappers.length > 0;
        }
        /// Returns the name associated with a given term. This will only
        /// work for all terms when the parser was generated with the
        /// `--names` option. By default, only the names of tagged terms are
        /// stored.
        getName(term) {
          return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
        }
        /// The eof term id is always allocated directly after the node
        /// types. @internal
        get eofTerm() {
          return this.maxNode + 1;
        }
        /// The type of top node produced by the parser.
        get topNode() {
          return this.nodeSet.types[this.top[1]];
        }
        /// @internal
        dynamicPrecedence(term) {
          let prec2 = this.dynamicPrecedences;
          return prec2 == null ? 0 : prec2[term] || 0;
        }
        /// @internal
        parseDialect(dialect2) {
          let values2 = Object.keys(this.dialects), flags = values2.map(() => false);
          if (dialect2)
            for (let part of dialect2.split(" ")) {
              let id2 = values2.indexOf(part);
              if (id2 >= 0)
                flags[id2] = true;
            }
          let disabled = null;
          for (let i = 0; i < values2.length; i++)
            if (!flags[i]) {
              for (let j = this.dialects[values2[i]], id2; (id2 = this.data[j++]) != 65535; )
                (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id2] = 1;
            }
          return new Dialect(dialect2, flags, disabled);
        }
        /// Used by the output of the parser generator. Not available to
        /// user code. @hide
        static deserialize(spec) {
          return new LRParser(spec);
        }
      };
    }
  });

  // node_modules/@lezer/html/dist/index.es.js
  function nameChar(ch2) {
    return ch2 == 45 || ch2 == 46 || ch2 == 58 || ch2 >= 65 && ch2 <= 90 || ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
  }
  function isSpace(ch2) {
    return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
  }
  function tagNameAfter(input, offset2) {
    let pos = input.pos + offset2;
    if (cachedPos == pos && cachedInput == input)
      return cachedName;
    let next2 = input.peek(offset2);
    while (isSpace(next2))
      next2 = input.peek(++offset2);
    let name2 = "";
    for (; ; ) {
      if (!nameChar(next2))
        break;
      name2 += String.fromCharCode(next2);
      next2 = input.peek(++offset2);
    }
    cachedInput = input;
    cachedPos = pos;
    return cachedName = name2 ? name2.toLowerCase() : next2 == question || next2 == bang ? void 0 : null;
  }
  function ElementContext(name2, parent) {
    this.name = name2;
    this.parent = parent;
    this.hash = parent ? parent.hash : 0;
    for (let i = 0; i < name2.length; i++)
      this.hash += (this.hash << 4) + name2.charCodeAt(i) + (name2.charCodeAt(i) << 8);
  }
  function inForeignElement(context) {
    for (; context; context = context.parent)
      if (context.name == "svg" || context.name == "math")
        return true;
    return false;
  }
  function contentTokenizer(tag, textToken, endToken) {
    let lastState = 2 + tag.length;
    return new ExternalTokenizer((input) => {
      for (let state = 0, matchedLen = 0, i = 0; ; i++) {
        if (input.next < 0) {
          if (i)
            input.acceptToken(textToken);
          break;
        }
        if (state == 0 && input.next == lessThan || state == 1 && input.next == slash || state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
          state++;
          matchedLen++;
        } else if ((state == 2 || state == lastState) && isSpace(input.next)) {
          matchedLen++;
        } else if (state == lastState && input.next == greaterThan) {
          if (i > matchedLen)
            input.acceptToken(textToken, -matchedLen);
          else
            input.acceptToken(endToken, -(matchedLen - 2));
          break;
        } else if ((input.next == 10 || input.next == 13) && i) {
          input.acceptToken(textToken, 1);
          break;
        } else {
          state = matchedLen = 0;
        }
        input.advance();
      }
    });
  }
  function getAttrs(openTag, input) {
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let att of openTag.getChildren(Attribute)) {
      let name2 = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
      if (name2)
        attrs[input.read(name2.from, name2.to)] = !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
    }
    return attrs;
  }
  function findTagName(openTag, input) {
    let tagNameNode = openTag.getChild(TagName);
    return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " ";
  }
  function maybeNest(node, input, tags3) {
    let attrs;
    for (let tag of tags3) {
      if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))
        return { parser: tag.parser };
    }
    return null;
  }
  function configureNesting(tags3 = [], attributes2 = []) {
    let script = [], style2 = [], textarea = [], other = [];
    for (let tag of tags3) {
      let array2 = tag.tag == "script" ? script : tag.tag == "style" ? style2 : tag.tag == "textarea" ? textarea : other;
      array2.push(tag);
    }
    let attrs = attributes2.length ? /* @__PURE__ */ Object.create(null) : null;
    for (let attr of attributes2)
      (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);
    return parseMixed((node, input) => {
      let id2 = node.type.id;
      if (id2 == ScriptText)
        return maybeNest(node, input, script);
      if (id2 == StyleText)
        return maybeNest(node, input, style2);
      if (id2 == TextareaText)
        return maybeNest(node, input, textarea);
      if (id2 == OpenTag && other.length) {
        let n2 = node.node, tagName2 = findTagName(n2, input), attrs2;
        for (let tag of other) {
          if (tag.tag == tagName2 && (!tag.attrs || tag.attrs(attrs2 || (attrs2 = getAttrs(n2, input))))) {
            let close = n2.parent.lastChild;
            return { parser: tag.parser, overlay: [{ from: node.to, to: close.type.id == CloseTag ? close.from : n2.parent.to }] };
          }
        }
      }
      if (attrs && id2 == Attribute) {
        let n2 = node.node, nameNode;
        if (nameNode = n2.firstChild) {
          let matches = attrs[input.read(nameNode.from, nameNode.to)];
          if (matches)
            for (let attr of matches) {
              if (attr.tagName && attr.tagName != findTagName(n2.parent, input))
                continue;
              let value = n2.lastChild;
              if (value.type.id == AttributeValue) {
                let from3 = value.from + 1;
                let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);
                if (to > from3)
                  return { parser: attr.parser, overlay: [{ from: from3, to }] };
              } else if (value.type.id == UnquotedAttributeValue) {
                return { parser: attr.parser, overlay: [{ from: value.from, to: value.to }] };
              }
            }
        }
      }
      return null;
    });
  }
  var scriptText, StartCloseScriptTag, styleText, StartCloseStyleTag, textareaText, StartCloseTextareaTag, EndTag, SelfClosingEndTag, StartTag, StartScriptTag, StartStyleTag, StartTextareaTag, StartSelfClosingTag, StartCloseTag, NoMatchStartCloseTag, MismatchedStartCloseTag, missingCloseTag, IncompleteCloseTag, commentContent$1, Element2, TagName, Attribute, AttributeName, AttributeValue, UnquotedAttributeValue, ScriptText, StyleText, TextareaText, OpenTag, CloseTag, Dialect_noMatch, Dialect_selfClosing, selfClosers, implicitlyClosed, closeOnOpen, cachedName, cachedInput, cachedPos, lessThan, greaterThan, slash, question, bang, dash, startTagTerms, elementContext, tagStart, commentContent, endTag, scriptTokens, styleTokens, textareaTokens, htmlHighlighting, parser2;
  var init_index_es2 = __esm({
    "node_modules/@lezer/html/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      init_dist3();
      scriptText = 54;
      StartCloseScriptTag = 1;
      styleText = 55;
      StartCloseStyleTag = 2;
      textareaText = 56;
      StartCloseTextareaTag = 3;
      EndTag = 4;
      SelfClosingEndTag = 5;
      StartTag = 6;
      StartScriptTag = 7;
      StartStyleTag = 8;
      StartTextareaTag = 9;
      StartSelfClosingTag = 10;
      StartCloseTag = 11;
      NoMatchStartCloseTag = 12;
      MismatchedStartCloseTag = 13;
      missingCloseTag = 57;
      IncompleteCloseTag = 14;
      commentContent$1 = 58;
      Element2 = 20;
      TagName = 22;
      Attribute = 23;
      AttributeName = 24;
      AttributeValue = 26;
      UnquotedAttributeValue = 27;
      ScriptText = 28;
      StyleText = 31;
      TextareaText = 34;
      OpenTag = 36;
      CloseTag = 37;
      Dialect_noMatch = 0;
      Dialect_selfClosing = 1;
      selfClosers = {
        area: true,
        base: true,
        br: true,
        col: true,
        command: true,
        embed: true,
        frame: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true,
        menuitem: true
      };
      implicitlyClosed = {
        dd: true,
        li: true,
        optgroup: true,
        option: true,
        p: true,
        rp: true,
        rt: true,
        tbody: true,
        td: true,
        tfoot: true,
        th: true,
        tr: true
      };
      closeOnOpen = {
        dd: { dd: true, dt: true },
        dt: { dd: true, dt: true },
        li: { li: true },
        option: { option: true, optgroup: true },
        optgroup: { optgroup: true },
        p: {
          address: true,
          article: true,
          aside: true,
          blockquote: true,
          dir: true,
          div: true,
          dl: true,
          fieldset: true,
          footer: true,
          form: true,
          h1: true,
          h2: true,
          h3: true,
          h4: true,
          h5: true,
          h6: true,
          header: true,
          hgroup: true,
          hr: true,
          menu: true,
          nav: true,
          ol: true,
          p: true,
          pre: true,
          section: true,
          table: true,
          ul: true
        },
        rp: { rp: true, rt: true },
        rt: { rp: true, rt: true },
        tbody: { tbody: true, tfoot: true },
        td: { td: true, th: true },
        tfoot: { tbody: true },
        th: { td: true, th: true },
        thead: { tbody: true, tfoot: true },
        tr: { tr: true }
      };
      cachedName = null;
      cachedInput = null;
      cachedPos = 0;
      lessThan = 60;
      greaterThan = 62;
      slash = 47;
      question = 63;
      bang = 33;
      dash = 45;
      startTagTerms = [StartTag, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];
      elementContext = new ContextTracker({
        start: null,
        shift(context, term, stack, input) {
          return startTagTerms.indexOf(term) > -1 ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
        },
        reduce(context, term) {
          return term == Element2 && context ? context.parent : context;
        },
        reuse(context, node, stack, input) {
          let type7 = node.type.id;
          return type7 == StartTag || type7 == OpenTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context;
        },
        hash(context) {
          return context ? context.hash : 0;
        },
        strict: false
      });
      tagStart = new ExternalTokenizer((input, stack) => {
        if (input.next != lessThan) {
          if (input.next < 0 && stack.context)
            input.acceptToken(missingCloseTag);
          return;
        }
        input.advance();
        let close = input.next == slash;
        if (close)
          input.advance();
        let name2 = tagNameAfter(input, 0);
        if (name2 === void 0)
          return;
        if (!name2)
          return input.acceptToken(close ? IncompleteCloseTag : StartTag);
        let parent = stack.context ? stack.context.name : null;
        if (close) {
          if (name2 == parent)
            return input.acceptToken(StartCloseTag);
          if (parent && implicitlyClosed[parent])
            return input.acceptToken(missingCloseTag, -2);
          if (stack.dialectEnabled(Dialect_noMatch))
            return input.acceptToken(NoMatchStartCloseTag);
          for (let cx2 = stack.context; cx2; cx2 = cx2.parent)
            if (cx2.name == name2)
              return;
          input.acceptToken(MismatchedStartCloseTag);
        } else {
          if (name2 == "script")
            return input.acceptToken(StartScriptTag);
          if (name2 == "style")
            return input.acceptToken(StartStyleTag);
          if (name2 == "textarea")
            return input.acceptToken(StartTextareaTag);
          if (selfClosers.hasOwnProperty(name2))
            return input.acceptToken(StartSelfClosingTag);
          if (parent && closeOnOpen[parent] && closeOnOpen[parent][name2])
            input.acceptToken(missingCloseTag, -1);
          else
            input.acceptToken(StartTag);
        }
      }, { contextual: true });
      commentContent = new ExternalTokenizer((input) => {
        for (let dashes = 0, i = 0; ; i++) {
          if (input.next < 0) {
            if (i)
              input.acceptToken(commentContent$1);
            break;
          }
          if (input.next == dash) {
            dashes++;
          } else if (input.next == greaterThan && dashes >= 2) {
            if (i > 3)
              input.acceptToken(commentContent$1, -2);
            break;
          } else {
            dashes = 0;
          }
          input.advance();
        }
      });
      endTag = new ExternalTokenizer((input, stack) => {
        if (input.next == slash && input.peek(1) == greaterThan) {
          let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
          input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
        } else if (input.next == greaterThan) {
          input.acceptToken(EndTag, 1);
        }
      });
      scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);
      styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);
      textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);
      htmlHighlighting = styleTags({
        "Text RawText": tags.content,
        "StartTag StartCloseTag SelfClosingEndTag EndTag": tags.angleBracket,
        TagName: tags.tagName,
        "MismatchedCloseTag/TagName": [tags.tagName, tags.invalid],
        AttributeName: tags.attributeName,
        "AttributeValue UnquotedAttributeValue": tags.attributeValue,
        Is: tags.definitionOperator,
        "EntityReference CharacterReference": tags.character,
        Comment: tags.blockComment,
        ProcessingInst: tags.processingInstruction,
        DoctypeDecl: tags.documentMeta
      });
      parser2 = LRParser.deserialize({
        version: 14,
        states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%WQ&rO,59fO%`Q&rO,59iO%hQ&rO,59lO%sQ&rO,59nOOOa'#D^'#D^O%{OaO'#CxO&WOaO,59[OOOb'#D_'#D_O&`ObO'#C{O&kObO,59[OOOd'#D`'#D`O&sOdO'#DOO'OOdO,59[OOO`'#Da'#DaO'WO!rO,59[O'_Q#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'dO$fO,59oOOO`,59o,59oO'lQ#|O,59qO'qQ#|O,59rOOO`-E7W-E7WO'vQ&rO'#CsOOQW'#DZ'#DZO(UQ&rO1G.wOOOa1G.w1G.wO(^Q&rO1G/QOOOb1G/Q1G/QO(fQ&rO1G/TOOOd1G/T1G/TO(nQ&rO1G/WOOO`1G/W1G/WOOO`1G/Y1G/YO(yQ&rO1G/YOOOa-E7[-E7[O)RQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)WQ#tO'#C|OOOd-E7^-E7^O)]Q#tO'#DPOOO`-E7_-E7_O)bQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O)gQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rOOO`7+$t7+$tO)rQ#|O,59eO)wQ#|O,59hO)|Q#|O,59kOOO`1G/X1G/XO*RO7[O'#CvO*dOMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O*uO7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+WOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
        stateData: "+s~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OhyO~OS!OOhyO~OS!QOhyO~OS!SOT!TOhyO~OS!TOhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXhgXTgX~OS!fOhyO~OS!gOhyO~OS!hOhyO~OS!iOT!jOhyO~OS!jOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
        goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{}!P!R!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!UeZ!e{}!P!R!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
        nodeNames: "\u26A0 StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
        maxTerm: 67,
        context: elementContext,
        nodeProps: [
          ["closedBy", -10, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, "EndTag", 6, "EndTag SelfClosingEndTag", -4, 21, 30, 33, 36, "CloseTag"],
          ["openedBy", 4, "StartTag StartCloseTag", 5, "StartTag", -4, 29, 32, 35, 37, "OpenTag"],
          ["group", -9, 14, 17, 18, 19, 20, 39, 40, 41, 42, "Entity", 16, "Entity TextContent", -3, 28, 31, 34, "TextContent Entity"]
        ],
        propSources: [htmlHighlighting],
        skippedNodes: [0],
        repeatNodeCount: 9,
        tokenData: "#%g!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs4ysv-_vw5iwxJ^x}-_}!OKP!O!P-_!P!Q$q!Q![-_![!]!!O!]!^-_!^!_!&W!_!`#$o!`!a&X!a!c-_!c!}!!O!}#R-_#R#S!!O#S#T3V#T#o!!O#o#s-_#s$f$q$f%W-_%W%o!!O%o%p-_%p&a!!O&a&b-_&b1p!!O1p4U-_4U4d!!O4d4e-_4e$IS!!O$IS$I`-_$I`$Ib!!O$Ib$Kh-_$Kh%#t!!O%#t&/x-_&/x&Et!!O&Et&FV-_&FV;'S!!O;'S;:j!&Q;:j;=`4s<%l?&r-_?&r?Ah!!O?Ah?BY$q?BY?Mn!!O?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_1n!_!a&X!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/echSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0uXhSqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0pS1eP;=`<%l0p[1kP;=`<%l/^!U1wbhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!U3SP;=`<%l1n!V3bchS`P!a`!cpOq&Xqr3Vrs&}sv3Vvw0pwx(tx!P3V!P!Q&X!Q!^3V!^!_1n!_!a&X!a#s3V#s$f&X$f;'S3V;'S;=`4m<%l?Ah3V?Ah?BY&X?BY?Mn3V?MnO&X!V4pP;=`<%l3V!_4vP;=`<%l-_!Z5SV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_5rjhSkWc!ROX7dXZ8qZ[7d[^8q^p7dqr:crs8qst@Ttw:cwx8qx!P:c!P!Q7d!Q!]:c!]!^/^!^!_=p!_!a8q!a#S:c#S#T=p#T#s:c#s$f7d$f;'S:c;'S;=`?}<%l?Ah:c?Ah?BY7d?BY?Mn:c?MnO7d!Z7ibkWOX7dXZ8qZ[7d[^8q^p7dqr7drs8qst+Ptw7dwx8qx!]7d!]!^9f!^!a8q!a#S7d#S#T8q#T;'S7d;'S;=`:]<%lO7d!R8tVOp8qqs8qt!]8q!]!^9Z!^;'S8q;'S;=`9`<%lO8q!R9`Oa!R!R9cP;=`<%l8q!Z9mYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z:`P;=`<%l7d!_:jjhSkWOX7dXZ8qZ[7d[^8q^p7dqr:crs8qst/^tw:cwx8qx!P:c!P!Q7d!Q!]:c!]!^<[!^!_=p!_!a8q!a#S:c#S#T=p#T#s:c#s$f7d$f;'S:c;'S;=`?}<%l?Ah:c?Ah?BY7d?BY?Mn:c?MnO7d!_<echSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V=udhSOp8qqr=prs8qst0ptw=pwx8qx!P=p!P!Q8q!Q!]=p!]!^?T!^!_=p!_!a8q!a#s=p#s$f8q$f;'S=p;'S;=`?w<%l?Ah=p?Ah?BY8q?BY?Mn=p?MnO8q!V?[XhSa!Rqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0p!V?zP;=`<%l=p!_@QP;=`<%l:c!_@[ihSkWOXAyXZCTZ[Ay[^CT^pAyqrDrrsCTswDrwxCTx!PDr!P!QAy!Q!]Dr!]!^/^!^!_G|!_!aCT!a#SDr#S#TG|#T#sDr#s$fAy$f;'SDr;'S;=`JW<%l?AhDr?Ah?BYAy?BY?MnDr?MnOAy!ZBOakWOXAyXZCTZ[Ay[^CT^pAyqrAyrsCTswAywxCTx!]Ay!]!^Cu!^!aCT!a#SAy#S#TCT#T;'SAy;'S;=`Dl<%lOAy!RCWUOpCTq!]CT!]!^Cj!^;'SCT;'S;=`Co<%lOCT!RCoOb!R!RCrP;=`<%lCT!ZC|YkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZDoP;=`<%lAy!_DyihSkWOXAyXZCTZ[Ay[^CT^pAyqrDrrsCTswDrwxCTx!PDr!P!QAy!Q!]Dr!]!^Fh!^!_G|!_!aCT!a#SDr#S#TG|#T#sDr#s$fAy$f;'SDr;'S;=`JW<%l?AhDr?Ah?BYAy?BY?MnDr?MnOAy!_FqchSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VHRchSOpCTqrG|rsCTswG|wxCTx!PG|!P!QCT!Q!]G|!]!^I^!^!_G|!_!aCT!a#sG|#s$fCT$f;'SG|;'S;=`JQ<%l?AhG|?Ah?BYCT?BY?MnG|?MnOCT!VIeXhSb!Rqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0p!VJTP;=`<%lG|!_JZP;=`<%lDr!ZJgW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aK^lhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMU!O!P-_!P!Q$q!Q!^-_!^!_1n!_!a&X!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aMckhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_1n!_!`&X!`!a! W!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!T! cX`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!a!!_!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!O!!O!O!P!!O!P!Q$q!Q![!!O![!]!!O!]!^-_!^!_1n!_!a&X!a!c-_!c!}!!O!}#R-_#R#S!!O#S#T3V#T#o!!O#o#s-_#s$f$q$f$}-_$}%O!!O%O%W-_%W%o!!O%o%p-_%p&a!!O&a&b-_&b1p!!O1p4U!!O4U4d!!O4d4e-_4e$IS!!O$IS$I`-_$I`$Ib!!O$Ib$Je-_$Je$Jg!!O$Jg$Kh-_$Kh%#t!!O%#t&/x-_&/x&Et!!O&Et&FV-_&FV;'S!!O;'S;:j!&Q;:j;=`4s<%l?&r-_?&r?Ah!!O?Ah?BY$q?BY?Mn!!O?MnO$q!a!&TP;=`<%l!!O!V!&achS!a`!cpOq*Vqr!'lrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!b!Ey!b#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!'uhhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex}1n}!O!)a!O!P1n!P!Q*V!Q!_1n!_!a*V!a!f1n!f!g!,]!g#W1n#W#X!<y#X#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!)jdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex}1n}!O!*x!O!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!+TbhS!a`!cp!dPOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!,fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!q1n!q!r!-t!r#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!-}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!e1n!e!f!/]!f#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!/fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!v1n!v!w!0t!w#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!0}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!{1n!{!|!2]!|#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!2fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!r1n!r!s!3t!s#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!3}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!g1n!g!h!5]!h#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!5fchS!a`!cpOq!6qqr!5]rs!7hsv!5]vw!;`wx!9[x!P!5]!P!Q!6q!Q!_!5]!_!`!6q!`!a!:j!a#s!5]#s$f!6q$f;'S!5];'S;=`!<s<%l?Ah!5]?Ah?BY!6q?BY?Mn!5]?MnO!6q!R!6xY!a`!cpOr!6qrs!7hsv!6qvw!8Swx!9[x!`!6q!`!a!:j!a;'S!6q;'S;=`!;Y<%lO!6qq!7mV!cpOv!7hvx!8Sx!`!7h!`!a!8q!a;'S!7h;'S;=`!9U<%lO!7hP!8VTO!`!8S!`!a!8f!a;'S!8S;'S;=`!8k<%lO!8SP!8kO{PP!8nP;=`<%l!8Sq!8xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!9XP;=`<%l!7ha!9aX!a`Or!9[rs!8Ssv!9[vw!8Sw!`!9[!`!a!9|!a;'S!9[;'S;=`!:d<%lO!9[a!:TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!:gP;=`<%l!9[!R!:sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;]P;=`<%l!6qT!;ebhSOq!8Sqr!;`rs!8Ssw!;`wx!8Sx!P!;`!P!Q!8S!Q!_!;`!_!`!8S!`!a!8f!a#s!;`#s$f!8S$f;'S!;`;'S;=`!<m<%l?Ah!;`?Ah?BY!8S?BY?Mn!;`?MnO!8ST!<pP;=`<%l!;`!V!<vP;=`<%l!5]!V!=SdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#c1n#c#d!>b#d#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!>kdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#V1n#V#W!?y#W#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!@SdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#h1n#h#i!Ab#i#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!AkdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#m1n#m#n!By#n#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!CSdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#d1n#d#e!Db#e#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!DkdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#X1n#X#Y!5]#Y#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!FSchS!a`!cpOq!G_qr!Eyrs!HUsv!Eyvw!Ncwx!Jvx!P!Ey!P!Q!G_!Q!_!Ey!_!a!G_!a!b##T!b#s!Ey#s$f!G_$f;'S!Ey;'S;=`#$i<%l?Ah!Ey?Ah?BY!G_?BY?Mn!Ey?MnO!G_!R!GfY!a`!cpOr!G_rs!HUsv!G_vw!Hpwx!Jvx!a!G_!a!b!Lv!b;'S!G_;'S;=`!N]<%lO!G_q!HZV!cpOv!HUvx!Hpx!a!HU!a!b!Iq!b;'S!HU;'S;=`!Jp<%lO!HUP!HsTO!a!Hp!a!b!IS!b;'S!Hp;'S;=`!Ik<%lO!HpP!IVTO!`!Hp!`!a!If!a;'S!Hp;'S;=`!Ik<%lO!HpP!IkOxPP!InP;=`<%l!Hpq!IvV!cpOv!HUvx!Hpx!`!HU!`!a!J]!a;'S!HU;'S;=`!Jp<%lO!HUq!JdS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!JsP;=`<%l!HUa!J{X!a`Or!Jvrs!Hpsv!Jvvw!Hpw!a!Jv!a!b!Kh!b;'S!Jv;'S;=`!Lp<%lO!Jva!KmX!a`Or!Jvrs!Hpsv!Jvvw!Hpw!`!Jv!`!a!LY!a;'S!Jv;'S;=`!Lp<%lO!Jva!LaT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!LsP;=`<%l!Jv!R!L}Y!a`!cpOr!G_rs!HUsv!G_vw!Hpwx!Jvx!`!G_!`!a!Mm!a;'S!G_;'S;=`!N]<%lO!G_!R!MvV!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!N`P;=`<%l!G_T!NhbhSOq!Hpqr!Ncrs!Hpsw!Ncwx!Hpx!P!Nc!P!Q!Hp!Q!_!Nc!_!a!Hp!a!b# p!b#s!Nc#s$f!Hp$f;'S!Nc;'S;=`#!}<%l?Ah!Nc?Ah?BY!Hp?BY?Mn!Nc?MnO!HpT# ubhSOq!Hpqr!Ncrs!Hpsw!Ncwx!Hpx!P!Nc!P!Q!Hp!Q!_!Nc!_!`!Hp!`!a!If!a#s!Nc#s$f!Hp$f;'S!Nc;'S;=`#!}<%l?Ah!Nc?Ah?BY!Hp?BY?Mn!Nc?MnO!HpT##QP;=`<%l!Nc!V##^chS!a`!cpOq!G_qr!Eyrs!HUsv!Eyvw!Ncwx!Jvx!P!Ey!P!Q!G_!Q!_!Ey!_!`!G_!`!a!Mm!a#s!Ey#s$f!G_$f;'S!Ey;'S;=`#$i<%l?Ah!Ey?Ah?BY!G_?BY?Mn!Ey?MnO!G_!V#$lP;=`<%l!Ey!V#$zXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
        tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent, 0, 1, 2, 3, 4, 5],
        topRules: { "Document": [0, 15] },
        dialects: { noMatch: 0, selfClosing: 485 },
        tokenPrec: 487
      });
    }
  });

  // node_modules/@lezer/css/dist/index.es.js
  function isAlpha(ch2) {
    return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
  }
  function isDigit(ch2) {
    return ch2 >= 48 && ch2 <= 57;
  }
  var descendantOp, Unit, callee, identifier, VariableName, space2, colon, parenL, underscore, bracketL, dash2, period, hash, percent, identifiers, descendant, unitToken, cssHighlighting, spec_callee, spec_AtKeyword, spec_identifier, parser3;
  var init_index_es3 = __esm({
    "node_modules/@lezer/css/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      descendantOp = 94;
      Unit = 1;
      callee = 95;
      identifier = 96;
      VariableName = 2;
      space2 = [
        9,
        10,
        11,
        12,
        13,
        32,
        133,
        160,
        5760,
        8192,
        8193,
        8194,
        8195,
        8196,
        8197,
        8198,
        8199,
        8200,
        8201,
        8202,
        8232,
        8233,
        8239,
        8287,
        12288
      ];
      colon = 58;
      parenL = 40;
      underscore = 95;
      bracketL = 91;
      dash2 = 45;
      period = 46;
      hash = 35;
      percent = 37;
      identifiers = new ExternalTokenizer((input, stack) => {
        for (let inside2 = false, dashes = 0, i = 0; ; i++) {
          let { next: next2 } = input;
          if (isAlpha(next2) || next2 == dash2 || next2 == underscore || inside2 && isDigit(next2)) {
            if (!inside2 && (next2 != dash2 || i > 0))
              inside2 = true;
            if (dashes === i && next2 == dash2)
              dashes++;
            input.advance();
          } else {
            if (inside2)
              input.acceptToken(next2 == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier);
            break;
          }
        }
      });
      descendant = new ExternalTokenizer((input) => {
        if (space2.includes(input.peek(-1))) {
          let { next: next2 } = input;
          if (isAlpha(next2) || next2 == underscore || next2 == hash || next2 == period || next2 == bracketL || next2 == colon || next2 == dash2)
            input.acceptToken(descendantOp);
        }
      });
      unitToken = new ExternalTokenizer((input) => {
        if (!space2.includes(input.peek(-1))) {
          let { next: next2 } = input;
          if (next2 == percent) {
            input.advance();
            input.acceptToken(Unit);
          }
          if (isAlpha(next2)) {
            do {
              input.advance();
            } while (isAlpha(input.next));
            input.acceptToken(Unit);
          }
        }
      });
      cssHighlighting = styleTags({
        "AtKeyword import charset namespace keyframes media supports": tags.definitionKeyword,
        "from to selector": tags.keyword,
        NamespaceName: tags.namespace,
        KeyframeName: tags.labelName,
        TagName: tags.tagName,
        ClassName: tags.className,
        PseudoClassName: tags.constant(tags.className),
        IdName: tags.labelName,
        "FeatureName PropertyName": tags.propertyName,
        AttributeName: tags.attributeName,
        NumberLiteral: tags.number,
        KeywordQuery: tags.keyword,
        UnaryQueryOp: tags.operatorKeyword,
        "CallTag ValueName": tags.atom,
        VariableName: tags.variableName,
        Callee: tags.operatorKeyword,
        Unit: tags.unit,
        "UniversalSelector NestingSelector": tags.definitionOperator,
        MatchOp: tags.compareOperator,
        "ChildOp SiblingOp, LogicOp": tags.logicOperator,
        BinOp: tags.arithmeticOperator,
        Important: tags.modifier,
        Comment: tags.blockComment,
        ParenthesizedContent: tags.special(tags.name),
        ColorLiteral: tags.color,
        StringLiteral: tags.string,
        ":": tags.punctuation,
        "PseudoOp #": tags.derefOperator,
        "; ,": tags.separator,
        "( )": tags.paren,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace
      });
      spec_callee = { __proto__: null, lang: 32, "nth-child": 32, "nth-last-child": 32, "nth-of-type": 32, "nth-last-of-type": 32, dir: 32, "host-context": 32, url: 60, "url-prefix": 60, domain: 60, regexp: 60, selector: 134 };
      spec_AtKeyword = { __proto__: null, "@import": 114, "@media": 138, "@charset": 142, "@namespace": 146, "@keyframes": 152, "@supports": 164 };
      spec_identifier = { __proto__: null, not: 128, only: 128, from: 158, to: 160 };
      parser3 = LRParser.deserialize({
        version: 14,
        states: "7WQYQ[OOO#_Q[OOOOQP'#Cd'#CdOOQP'#Cc'#CcO#fQ[O'#CfO$YQXO'#CaO$aQ[O'#ChO$lQ[O'#DPO$qQ[O'#DTOOQP'#Ed'#EdO$vQdO'#DeO%bQ[O'#DrO$vQdO'#DtO%sQ[O'#DvO&OQ[O'#DyO&TQ[O'#EPO&cQ[O'#EROOQS'#Ec'#EcOOQS'#ET'#ETQYQ[OOO&jQXO'#CdO'_QWO'#DaO'dQWO'#EjO'oQ[O'#EjQOQWOOOOQP'#Cg'#CgOOQP,59Q,59QO#fQ[O,59QO'yQ[O'#EWO(eQWO,58{O(mQ[O,59SO$lQ[O,59kO$qQ[O,59oO'yQ[O,59sO'yQ[O,59uO'yQ[O,59vO(xQ[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO)PQWO,59SO)UQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO)ZQ`O,59oOOQS'#Cp'#CpO$vQdO'#CqO)cQvO'#CsO*pQtO,5:POOQO'#Cx'#CxO)UQWO'#CwO+UQWO'#CyOOQS'#Eg'#EgOOQO'#Dh'#DhO+ZQ[O'#DoO+iQWO'#EkO&TQ[O'#DmO+wQWO'#DpOOQO'#El'#ElO(hQWO,5:^O+|QpO,5:`OOQS'#Dx'#DxO,UQWO,5:bO,ZQ[O,5:bOOQO'#D{'#D{O,cQWO,5:eO,hQWO,5:kO,pQWO,5:mOOQS-E8R-E8RO$vQdO,59{O,xQ[O'#EYO-VQWO,5;UO-VQWO,5;UOOQP1G.l1G.lO-|QXO,5:rOOQO-E8U-E8UOOQS1G.g1G.gOOQP1G.n1G.nO)PQWO1G.nO)UQWO1G.nOOQP1G/V1G/VO.ZQ`O1G/ZO.tQXO1G/_O/[QXO1G/aO/rQXO1G/bO0YQWO,59zO0_Q[O'#DOO0fQdO'#CoOOQP1G/Z1G/ZO$vQdO1G/ZO0mQpO,59]OOQS,59_,59_O$vQdO,59aO0uQWO1G/kOOQS,59c,59cO0zQ!bO,59eO1SQWO'#DhO1_QWO,5:TO1dQWO,5:ZO&TQ[O,5:VO&TQ[O'#EZO1lQWO,5;VO1wQWO,5:XO'yQ[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O2YQWO1G/|O2_QdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XO2mQtO1G/gOOQO,5:t,5:tO3TQ[O,5:tOOQO-E8W-E8WO3bQWO1G0pOOQP7+$Y7+$YOOQP7+$u7+$uO$vQdO7+$uOOQS1G/f1G/fO3mQXO'#EiO3tQWO,59jO3yQtO'#EUO4nQdO'#EfO4xQWO,59ZO4}QpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO5VQWO1G/PO$vQdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO5[QWO,5:uOOQO-E8X-E8XO5jQXO1G/vOOQS7+%h7+%hO5qQYO'#CsO(hQWO'#E[O5yQdO,5:hOOQS,5:h,5:hO6XQtO'#EXO$vQdO'#EXO7VQdO7+%ROOQO7+%R7+%ROOQO1G0`1G0`O7jQpO<<HaO7rQWO,5;TOOQP1G/U1G/UOOQS-E8S-E8SO$vQdO'#EVO7zQWO,5;QOOQT1G.u1G.uOOQP<<Ha<<HaOOQS7+$k7+$kO8SQdO7+%ZOOQO7+%b7+%bOOQS,5:v,5:vOOQS-E8Y-E8YOOQS1G0S1G0SO8ZQtO,5:sOOQS-E8V-E8VOOQO<<Hm<<HmOOQPAN={AN={O9XQdO,5:qOOQO-E8T-E8TOOQO<<Hu<<Hu",
        stateData: "9i~O#UOSROS~OUXOXXO]UO^UOtVOxWO!Y`O!ZYO!gZO!i[O!k]O!n^O!t_O#SQO#XSO~OQeOUXOXXO]UO^UOtVOxWO!Y`O!ZYO!gZO!i[O!k]O!n^O!t_O#SdO#XSO~O#P#^P~P!ZO#SiO~O]nO^nOplOtoOxpO|qO!PsO#QrO#XkO~O!RtO~P#kO`zO#RwO#SvO~O#S{O~O#S}O~OQ!WOb!QOf!WOh!WOn!VO#R!TO#S!PO#[!RO~Ob!YO!b![O!e!]O#S!XO!R#_P~Oh!bOn!VO#S!aO~O#S!dO~Ob!YO!b![O!e!]O#S!XO~O!W#_P~P%bO]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#QWX#XWX~O]!iO~O!W!jO#P#^X!Q#^X~O#P#^X!Q#^X~P!ZOUXOXXO]UO^UOtVOxWO#SQO#XSO~OplO!RtO~O`!sO#RwO#SvO~O!Q#^P~P!ZOb!zO~Ob!{O~Ov!|Oz!}O~OP#PObgXjgX!WgX!bgX!egX#SgXagXQgXfgXhgXngXpgX!VgX#PgX#RgX#[gXvgX!QgX~Ob!YOj#QO!b![O!e!]O#S!XO!W#_P~Ob#TO~Ob!YO!b![O!e!]O#S#UO~Op#YO!`#XO!R#_X!W#_X~Ob#]O~Oj#QO!W#_O~O!W#`O~Oh#aOn!VO~O!R#bO~O!RtO!`#XO~O!RtO!W#eO~O!W!|X#P!|X!Q!|X~P!ZO!W!jO#P#^a!Q#^a~O]nO^nOtoOxpO|qO!PsO#QrO#XkO~Op!za!R!zaa!za~P-bOv#lOz#mO~O]nO^nOtoOxpO#XkO~Op{i|{i!P{i!R{i#Q{ia{i~P.cOp}i|}i!P}i!R}i#Q}ia}i~P.cOp!Oi|!Oi!P!Oi!R!Oi#Q!Oia!Oi~P.cO!Q#nO~Oa#]P~P'yOa#YP~P$vOa#uOj#QO~O!W#wO~Oh#xOo#xO~O]!^Xa![X!`![X~O]#yO~Oa#zO!`#XO~Op#YO!R#_a!W#_a~O!`#XOp!aa!R!aa!W!aaa!aa~O!W$PO~O!Q$TO!q$RO!r$RO#[$QO~Oj#QOp$VO!V$XO!W!Ti#P!Ti!Q!Ti~P$vO!W!|a#P!|a!Q!|a~P!ZO!W!jO#P#^i!Q#^i~Oa#]X~P#kOa$]O~Oj#QOQ!xXa!xXb!xXf!xXh!xXn!xXp!xX#R!xX#S!xX#[!xX~Op$_Oa#YX~P$vOa$aO~Oj#QOv$bO~Oa$cO~O!`#XOp!}a!R!}a!W!}a~Oa$eO~P-bOP#PO!RgX~O!Q$hO!q$RO!r$RO#[$QO~Oj#QOQ!{Xb!{Xf!{Xh!{Xn!{Xp!{X!V!{X!W!{X#P!{X#R!{X#S!{X#[!{X!Q!{X~Op$VO!V$kO!W!Tq#P!Tq!Q!Tq~P$vOj#QOv$lO~OplOa#]a~Op$_Oa#Ya~Oa$oO~P$vOj#QOQ!{ab!{af!{ah!{an!{ap!{a!V!{a!W!{a#P!{a#R!{a#S!{a#[!{a!Q!{a~Oa!yap!ya~P$vOo#[j!Pj~",
        goto: ",`#aPPPPP#bP#k#zP#k$Z#kPP$aPPP$g$p$pP%SP$pP$p%j%|PPP&f&l#kP&rP#kP&xP#kP#k#kPPP'O'b'oPP#bPP'v'v(Q'vP'vP'v'vP#bP#bP#bP(T#bP(W(ZPP#bP#bP(^(m({)R)])c)m)sPPPPPP)y*SP*o*rP+h+k+q+z_aOPcgt!j#hkXOPcglqrst!j!z#]#hkROPcglqrst!j!z#]#hQjSR!mkQxUR!qnQ!qzQ#S!UR#k!sq!WY[!Q!i!{!}#Q#f#m#r#y$V$W$_$d$mp!WY[!Q!i!{!}#Q#f#m#r#y$V$W$_$d$mT$R#b$Sq!UY[!Q!i!{!}#Q#f#m#r#y$V$W$_$d$mp!WY[!Q!i!{!}#Q#f#m#r#y$V$W$_$d$mQ!b]R#a!cQyUR!rnQ!qyR#k!rQ|VR!toQ!OWR!upQuTQ!pmQ#^!_Q#d!fQ#e!gR$f$RSfPtQ!lgQ#g!jR$Y#hZePgt!j#ha!^Z_`!S!Y![#X#YR#V!YR!c]R!e^R#c!eQcOSgPtU!hcg#hR#h!jQ#r!{U$^#r$d$mQ$d#yR$m$_Q$`#rR$n$`QmTS!om$[R$[#oQ$W#fR$j$WQ!kfS#i!k#jR#j!lQ#Z!ZR#}#ZQ$S#bR$g$S_bOPcgt!j#h^TOPcgt!j#hQ!nlQ!vqQ!wrQ!xsQ#o!zR$O#]R#s!{Q!SYQ!`[Q#O!QQ#f!i[#q!{#r#y$_$d$mQ#t!}Q#v#QS$U#f$WQ$Z#mR$i$VR#p!zQhPR!ytQ!_ZQ!g`R#R!SU!ZZ`!SQ!f_Q#W!YQ#[![Q#{#XR#|#Y",
        nodeNames: "\u26A0 Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports AtRule Styles",
        maxTerm: 108,
        nodeProps: [
          ["openedBy", 17, "(", 48, "{"],
          ["closedBy", 18, ")", 49, "}"]
        ],
        propSources: [cssHighlighting],
        skippedNodes: [0, 3],
        repeatNodeCount: 8,
        tokenData: "Lq~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Cu![!]Dp!]!^El!^!_$}!_!`E}!`!aF`!a!b$}!b!cG[!c!}$}!}#OHt#O#P$}#P#QIV#Q#R6d#R#T$}#T#UIh#U#c$}#c#dJy#d#o$}#o#pK`#p#q6d#q#rKq#r#sLS#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`Lk<%lO$}W%QSOy%^z;'S%^;'S;=`%o<%lO%^W%cSoWOy%^z;'S%^;'S;=`%o<%lO%^W%rP;=`<%l%^~%zh#U~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#U~oWOX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^^)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^^)sUoWOy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^^*[UoWOy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^^*sUoWOy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^^+[UoWOy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^^+sUoWOy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^^,[UoWOy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^^,sUoWOy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^^-[UoWOy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^^-uS!VUoWOy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.R_/zYtPOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^^0oYoWOy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^^1dYoWOy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^^2ZYfUoWOy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^^3QYfUoWOy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^^3uYoWOy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^^4lYfUoWOy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^^5aYoWOy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^^6WSfUoWOy%^z;'S%^;'S;=`%o<%lO%^Y6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^Y7QSzQoWOy%^z;'S%^;'S;=`%o<%lO%^X7cSXPOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7o_9cSbVOy%^z;'S%^;'S;=`%o<%lO%^~9tOa~_9{UUPjSOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^_:fWjS!PPOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^^;TUoWOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^^;nYoW#[UOy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^^<cYoWOy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^=WUoWOy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^=qUoW#[UOy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^>[[oW#[UOy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^_?VSpVOy%^z;'S%^;'S;=`%o<%lO%^^?hWjSOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^_@VU#XPOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjSOy%^z{@}{;'S%^;'S;=`%o<%lO%^~ASUoWOy@}yzAfz{Bm{;'S@};'S;=`Co<%lO@}~AiTOzAfz{Ax{;'SAf;'S;=`Bg<%lOAf~A{VOzAfz{Ax{!PAf!P!QBb!Q;'SAf;'S;=`Bg<%lOAf~BgOR~~BjP;=`<%lAf~BrWoWOy@}yzAfz{Bm{!P@}!P!QC[!Q;'S@};'S;=`Co<%lO@}~CcSoWR~Oy%^z;'S%^;'S;=`%o<%lO%^~CrP;=`<%l@}^Cz[#[UOy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^XDuU]POy%^z![%^![!]EX!];'S%^;'S;=`%o<%lO%^XE`S^PoWOy%^z;'S%^;'S;=`%o<%lO%^_EqS!WVOy%^z;'S%^;'S;=`%o<%lO%^YFSSzQOy%^z;'S%^;'S;=`%o<%lO%^XFeU|POy%^z!`%^!`!aFw!a;'S%^;'S;=`%o<%lO%^XGOS|PoWOy%^z;'S%^;'S;=`%o<%lO%^XG_WOy%^z!c%^!c!}Gw!}#T%^#T#oGw#o;'S%^;'S;=`%o<%lO%^XHO[!YPoWOy%^z}%^}!OGw!O!Q%^!Q![Gw![!c%^!c!}Gw!}#T%^#T#oGw#o;'S%^;'S;=`%o<%lO%^XHySxPOy%^z;'S%^;'S;=`%o<%lO%^^I[SvUOy%^z;'S%^;'S;=`%o<%lO%^XIkUOy%^z#b%^#b#cI}#c;'S%^;'S;=`%o<%lO%^XJSUoWOy%^z#W%^#W#XJf#X;'S%^;'S;=`%o<%lO%^XJmS!`PoWOy%^z;'S%^;'S;=`%o<%lO%^XJ|UOy%^z#f%^#f#gJf#g;'S%^;'S;=`%o<%lO%^XKeS!RPOy%^z;'S%^;'S;=`%o<%lO%^_KvS!QVOy%^z;'S%^;'S;=`%o<%lO%^ZLXU!PPOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^WLnP;=`<%l$}",
        tokenizers: [descendant, unitToken, identifiers, 0, 1, 2, 3],
        topRules: { "StyleSheet": [0, 4], "Styles": [1, 84] },
        specialized: [{ term: 95, get: (value) => spec_callee[value] || -1 }, { term: 56, get: (value) => spec_AtKeyword[value] || -1 }, { term: 96, get: (value) => spec_identifier[value] || -1 }],
        tokenPrec: 1123
      });
    }
  });

  // node_modules/@codemirror/lang-css/dist/index.js
  var dist_exports = {};
  __export(dist_exports, {
    css: () => css,
    cssCompletionSource: () => cssCompletionSource,
    cssLanguage: () => cssLanguage
  });
  function properties() {
    if (!_properties && typeof document == "object" && document.body) {
      let { style: style2 } = document.body, names = [], seen = /* @__PURE__ */ new Set();
      for (let prop in style2)
        if (prop != "cssText" && prop != "cssFloat") {
          if (typeof style2[prop] == "string") {
            if (/[A-Z]/.test(prop))
              prop = prop.replace(/[A-Z]/g, (ch2) => "-" + ch2.toLowerCase());
            if (!seen.has(prop)) {
              names.push(prop);
              seen.add(prop);
            }
          }
        }
      _properties = names.sort().map((name2) => ({ type: "property", label: name2 }));
    }
    return _properties || [];
  }
  function isVarArg(node, doc2) {
    var _a2;
    if (node.name == "(" || node.type.isError)
      node = node.parent || node;
    if (node.name != "ArgList")
      return false;
    let callee2 = (_a2 = node.parent) === null || _a2 === void 0 ? void 0 : _a2.firstChild;
    if ((callee2 === null || callee2 === void 0 ? void 0 : callee2.name) != "Callee")
      return false;
    return doc2.sliceString(callee2.from, callee2.to) == "var";
  }
  function astTop(node) {
    for (let cur = node; ; ) {
      if (cur.type.isTop)
        return cur;
      if (!(cur = cur.parent))
        return node;
    }
  }
  function variableNames(doc2, node) {
    if (node.to - node.from > 4096) {
      let known = VariablesByNode.get(node);
      if (known)
        return known;
      let result = [], seen = /* @__PURE__ */ new Set(), cursor = node.cursor(IterMode.IncludeAnonymous);
      if (cursor.firstChild())
        do {
          for (let option of variableNames(doc2, cursor.node))
            if (!seen.has(option.label)) {
              seen.add(option.label);
              result.push(option);
            }
        } while (cursor.nextSibling());
      VariablesByNode.set(node, result);
      return result;
    } else {
      let result = [], seen = /* @__PURE__ */ new Set();
      node.cursor().iterate((node2) => {
        var _a2;
        if (node2.name == "VariableName" && node2.matchContext(declSelector) && ((_a2 = node2.node.nextSibling) === null || _a2 === void 0 ? void 0 : _a2.name) == ":") {
          let name2 = doc2.sliceString(node2.from, node2.to);
          if (!seen.has(name2)) {
            seen.add(name2);
            result.push({ label: name2, type: "variable" });
          }
        }
      });
      return result;
    }
  }
  function css() {
    return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
  }
  var _properties, pseudoClasses, values, tags2, identifier2, variable, VariablesByNode, declSelector, cssCompletionSource, cssLanguage;
  var init_dist8 = __esm({
    "node_modules/@codemirror/lang-css/dist/index.js"() {
      init_index_es3();
      init_dist5();
      init_dist3();
      _properties = null;
      pseudoClasses = /* @__PURE__ */ [
        "active",
        "after",
        "any-link",
        "autofill",
        "backdrop",
        "before",
        "checked",
        "cue",
        "default",
        "defined",
        "disabled",
        "empty",
        "enabled",
        "file-selector-button",
        "first",
        "first-child",
        "first-letter",
        "first-line",
        "first-of-type",
        "focus",
        "focus-visible",
        "focus-within",
        "fullscreen",
        "has",
        "host",
        "host-context",
        "hover",
        "in-range",
        "indeterminate",
        "invalid",
        "is",
        "lang",
        "last-child",
        "last-of-type",
        "left",
        "link",
        "marker",
        "modal",
        "not",
        "nth-child",
        "nth-last-child",
        "nth-last-of-type",
        "nth-of-type",
        "only-child",
        "only-of-type",
        "optional",
        "out-of-range",
        "part",
        "placeholder",
        "placeholder-shown",
        "read-only",
        "read-write",
        "required",
        "right",
        "root",
        "scope",
        "selection",
        "slotted",
        "target",
        "target-text",
        "valid",
        "visited",
        "where"
      ].map((name2) => ({ type: "class", label: name2 }));
      values = /* @__PURE__ */ [
        "above",
        "absolute",
        "activeborder",
        "additive",
        "activecaption",
        "after-white-space",
        "ahead",
        "alias",
        "all",
        "all-scroll",
        "alphabetic",
        "alternate",
        "always",
        "antialiased",
        "appworkspace",
        "asterisks",
        "attr",
        "auto",
        "auto-flow",
        "avoid",
        "avoid-column",
        "avoid-page",
        "avoid-region",
        "axis-pan",
        "background",
        "backwards",
        "baseline",
        "below",
        "bidi-override",
        "blink",
        "block",
        "block-axis",
        "bold",
        "bolder",
        "border",
        "border-box",
        "both",
        "bottom",
        "break",
        "break-all",
        "break-word",
        "bullets",
        "button",
        "button-bevel",
        "buttonface",
        "buttonhighlight",
        "buttonshadow",
        "buttontext",
        "calc",
        "capitalize",
        "caps-lock-indicator",
        "caption",
        "captiontext",
        "caret",
        "cell",
        "center",
        "checkbox",
        "circle",
        "cjk-decimal",
        "clear",
        "clip",
        "close-quote",
        "col-resize",
        "collapse",
        "color",
        "color-burn",
        "color-dodge",
        "column",
        "column-reverse",
        "compact",
        "condensed",
        "contain",
        "content",
        "contents",
        "content-box",
        "context-menu",
        "continuous",
        "copy",
        "counter",
        "counters",
        "cover",
        "crop",
        "cross",
        "crosshair",
        "currentcolor",
        "cursive",
        "cyclic",
        "darken",
        "dashed",
        "decimal",
        "decimal-leading-zero",
        "default",
        "default-button",
        "dense",
        "destination-atop",
        "destination-in",
        "destination-out",
        "destination-over",
        "difference",
        "disc",
        "discard",
        "disclosure-closed",
        "disclosure-open",
        "document",
        "dot-dash",
        "dot-dot-dash",
        "dotted",
        "double",
        "down",
        "e-resize",
        "ease",
        "ease-in",
        "ease-in-out",
        "ease-out",
        "element",
        "ellipse",
        "ellipsis",
        "embed",
        "end",
        "ethiopic-abegede-gez",
        "ethiopic-halehame-aa-er",
        "ethiopic-halehame-gez",
        "ew-resize",
        "exclusion",
        "expanded",
        "extends",
        "extra-condensed",
        "extra-expanded",
        "fantasy",
        "fast",
        "fill",
        "fill-box",
        "fixed",
        "flat",
        "flex",
        "flex-end",
        "flex-start",
        "footnotes",
        "forwards",
        "from",
        "geometricPrecision",
        "graytext",
        "grid",
        "groove",
        "hand",
        "hard-light",
        "help",
        "hidden",
        "hide",
        "higher",
        "highlight",
        "highlighttext",
        "horizontal",
        "hsl",
        "hsla",
        "hue",
        "icon",
        "ignore",
        "inactiveborder",
        "inactivecaption",
        "inactivecaptiontext",
        "infinite",
        "infobackground",
        "infotext",
        "inherit",
        "initial",
        "inline",
        "inline-axis",
        "inline-block",
        "inline-flex",
        "inline-grid",
        "inline-table",
        "inset",
        "inside",
        "intrinsic",
        "invert",
        "italic",
        "justify",
        "keep-all",
        "landscape",
        "large",
        "larger",
        "left",
        "level",
        "lighter",
        "lighten",
        "line-through",
        "linear",
        "linear-gradient",
        "lines",
        "list-item",
        "listbox",
        "listitem",
        "local",
        "logical",
        "loud",
        "lower",
        "lower-hexadecimal",
        "lower-latin",
        "lower-norwegian",
        "lowercase",
        "ltr",
        "luminosity",
        "manipulation",
        "match",
        "matrix",
        "matrix3d",
        "medium",
        "menu",
        "menutext",
        "message-box",
        "middle",
        "min-intrinsic",
        "mix",
        "monospace",
        "move",
        "multiple",
        "multiple_mask_images",
        "multiply",
        "n-resize",
        "narrower",
        "ne-resize",
        "nesw-resize",
        "no-close-quote",
        "no-drop",
        "no-open-quote",
        "no-repeat",
        "none",
        "normal",
        "not-allowed",
        "nowrap",
        "ns-resize",
        "numbers",
        "numeric",
        "nw-resize",
        "nwse-resize",
        "oblique",
        "opacity",
        "open-quote",
        "optimizeLegibility",
        "optimizeSpeed",
        "outset",
        "outside",
        "outside-shape",
        "overlay",
        "overline",
        "padding",
        "padding-box",
        "painted",
        "page",
        "paused",
        "perspective",
        "pinch-zoom",
        "plus-darker",
        "plus-lighter",
        "pointer",
        "polygon",
        "portrait",
        "pre",
        "pre-line",
        "pre-wrap",
        "preserve-3d",
        "progress",
        "push-button",
        "radial-gradient",
        "radio",
        "read-only",
        "read-write",
        "read-write-plaintext-only",
        "rectangle",
        "region",
        "relative",
        "repeat",
        "repeating-linear-gradient",
        "repeating-radial-gradient",
        "repeat-x",
        "repeat-y",
        "reset",
        "reverse",
        "rgb",
        "rgba",
        "ridge",
        "right",
        "rotate",
        "rotate3d",
        "rotateX",
        "rotateY",
        "rotateZ",
        "round",
        "row",
        "row-resize",
        "row-reverse",
        "rtl",
        "run-in",
        "running",
        "s-resize",
        "sans-serif",
        "saturation",
        "scale",
        "scale3d",
        "scaleX",
        "scaleY",
        "scaleZ",
        "screen",
        "scroll",
        "scrollbar",
        "scroll-position",
        "se-resize",
        "self-start",
        "self-end",
        "semi-condensed",
        "semi-expanded",
        "separate",
        "serif",
        "show",
        "single",
        "skew",
        "skewX",
        "skewY",
        "skip-white-space",
        "slide",
        "slider-horizontal",
        "slider-vertical",
        "sliderthumb-horizontal",
        "sliderthumb-vertical",
        "slow",
        "small",
        "small-caps",
        "small-caption",
        "smaller",
        "soft-light",
        "solid",
        "source-atop",
        "source-in",
        "source-out",
        "source-over",
        "space",
        "space-around",
        "space-between",
        "space-evenly",
        "spell-out",
        "square",
        "start",
        "static",
        "status-bar",
        "stretch",
        "stroke",
        "stroke-box",
        "sub",
        "subpixel-antialiased",
        "svg_masks",
        "super",
        "sw-resize",
        "symbolic",
        "symbols",
        "system-ui",
        "table",
        "table-caption",
        "table-cell",
        "table-column",
        "table-column-group",
        "table-footer-group",
        "table-header-group",
        "table-row",
        "table-row-group",
        "text",
        "text-bottom",
        "text-top",
        "textarea",
        "textfield",
        "thick",
        "thin",
        "threeddarkshadow",
        "threedface",
        "threedhighlight",
        "threedlightshadow",
        "threedshadow",
        "to",
        "top",
        "transform",
        "translate",
        "translate3d",
        "translateX",
        "translateY",
        "translateZ",
        "transparent",
        "ultra-condensed",
        "ultra-expanded",
        "underline",
        "unidirectional-pan",
        "unset",
        "up",
        "upper-latin",
        "uppercase",
        "url",
        "var",
        "vertical",
        "vertical-text",
        "view-box",
        "visible",
        "visibleFill",
        "visiblePainted",
        "visibleStroke",
        "visual",
        "w-resize",
        "wait",
        "wave",
        "wider",
        "window",
        "windowframe",
        "windowtext",
        "words",
        "wrap",
        "wrap-reverse",
        "x-large",
        "x-small",
        "xor",
        "xx-large",
        "xx-small"
      ].map((name2) => ({ type: "keyword", label: name2 })).concat(/* @__PURE__ */ [
        "aliceblue",
        "antiquewhite",
        "aqua",
        "aquamarine",
        "azure",
        "beige",
        "bisque",
        "black",
        "blanchedalmond",
        "blue",
        "blueviolet",
        "brown",
        "burlywood",
        "cadetblue",
        "chartreuse",
        "chocolate",
        "coral",
        "cornflowerblue",
        "cornsilk",
        "crimson",
        "cyan",
        "darkblue",
        "darkcyan",
        "darkgoldenrod",
        "darkgray",
        "darkgreen",
        "darkkhaki",
        "darkmagenta",
        "darkolivegreen",
        "darkorange",
        "darkorchid",
        "darkred",
        "darksalmon",
        "darkseagreen",
        "darkslateblue",
        "darkslategray",
        "darkturquoise",
        "darkviolet",
        "deeppink",
        "deepskyblue",
        "dimgray",
        "dodgerblue",
        "firebrick",
        "floralwhite",
        "forestgreen",
        "fuchsia",
        "gainsboro",
        "ghostwhite",
        "gold",
        "goldenrod",
        "gray",
        "grey",
        "green",
        "greenyellow",
        "honeydew",
        "hotpink",
        "indianred",
        "indigo",
        "ivory",
        "khaki",
        "lavender",
        "lavenderblush",
        "lawngreen",
        "lemonchiffon",
        "lightblue",
        "lightcoral",
        "lightcyan",
        "lightgoldenrodyellow",
        "lightgray",
        "lightgreen",
        "lightpink",
        "lightsalmon",
        "lightseagreen",
        "lightskyblue",
        "lightslategray",
        "lightsteelblue",
        "lightyellow",
        "lime",
        "limegreen",
        "linen",
        "magenta",
        "maroon",
        "mediumaquamarine",
        "mediumblue",
        "mediumorchid",
        "mediumpurple",
        "mediumseagreen",
        "mediumslateblue",
        "mediumspringgreen",
        "mediumturquoise",
        "mediumvioletred",
        "midnightblue",
        "mintcream",
        "mistyrose",
        "moccasin",
        "navajowhite",
        "navy",
        "oldlace",
        "olive",
        "olivedrab",
        "orange",
        "orangered",
        "orchid",
        "palegoldenrod",
        "palegreen",
        "paleturquoise",
        "palevioletred",
        "papayawhip",
        "peachpuff",
        "peru",
        "pink",
        "plum",
        "powderblue",
        "purple",
        "rebeccapurple",
        "red",
        "rosybrown",
        "royalblue",
        "saddlebrown",
        "salmon",
        "sandybrown",
        "seagreen",
        "seashell",
        "sienna",
        "silver",
        "skyblue",
        "slateblue",
        "slategray",
        "snow",
        "springgreen",
        "steelblue",
        "tan",
        "teal",
        "thistle",
        "tomato",
        "turquoise",
        "violet",
        "wheat",
        "white",
        "whitesmoke",
        "yellow",
        "yellowgreen"
      ].map((name2) => ({ type: "constant", label: name2 })));
      tags2 = /* @__PURE__ */ [
        "a",
        "abbr",
        "address",
        "article",
        "aside",
        "b",
        "bdi",
        "bdo",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "figcaption",
        "figure",
        "footer",
        "form",
        "header",
        "hgroup",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "label",
        "legend",
        "li",
        "main",
        "meter",
        "nav",
        "ol",
        "output",
        "p",
        "pre",
        "ruby",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "template",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "tr",
        "u",
        "ul"
      ].map((name2) => ({ type: "type", label: name2 }));
      identifier2 = /^(\w[\w-]*|-\w[\w-]*|)$/;
      variable = /^-(-[\w-]*)?$/;
      VariablesByNode = /* @__PURE__ */ new NodeWeakMap();
      declSelector = ["Declaration"];
      cssCompletionSource = (context) => {
        let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
        let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
        if (node.name == "PropertyName" || (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
          return { from: node.from, options: properties(), validFor: identifier2 };
        if (node.name == "ValueName")
          return { from: node.from, options: values, validFor: identifier2 };
        if (node.name == "PseudoClassName")
          return { from: node.from, options: pseudoClasses, validFor: identifier2 };
        if (node.name == "VariableName" || (context.explicit || isDash) && isVarArg(node, state.doc))
          return {
            from: node.name == "VariableName" ? node.from : pos,
            options: variableNames(state.doc, astTop(node)),
            validFor: variable
          };
        if (node.name == "TagName") {
          for (let { parent } = node; parent; parent = parent.parent)
            if (parent.name == "Block")
              return { from: node.from, options: properties(), validFor: identifier2 };
          return { from: node.from, options: tags2, validFor: identifier2 };
        }
        if (!context.explicit)
          return null;
        let above = node.resolve(pos), before = above.childBefore(pos);
        if (before && before.name == ":" && above.name == "PseudoClassSelector")
          return { from: pos, options: pseudoClasses, validFor: identifier2 };
        if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
          return { from: pos, options: values, validFor: identifier2 };
        if (above.name == "Block" || above.name == "Styles")
          return { from: pos, options: properties(), validFor: identifier2 };
        return null;
      };
      cssLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "css",
        parser: /* @__PURE__ */ parser3.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              Declaration: /* @__PURE__ */ continuedIndent()
            }),
            /* @__PURE__ */ foldNodeProp.add({
              Block: foldInside
            })
          ]
        }),
        languageData: {
          commentTokens: { block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*\}$/,
          wordChars: "-"
        }
      });
    }
  });

  // node_modules/@lezer/javascript/dist/index.es.js
  var noSemi, incdec, incdecPrefix, insertSemi, spaces, newline, LineComment, BlockComment, space3, braceR, semicolon, slash2, star, plus, minus, trackNewline, insertSemicolon, noSemicolon, incdecToken, jsHighlight, spec_identifier2, spec_word, spec_LessThan, parser4;
  var init_index_es4 = __esm({
    "node_modules/@lezer/javascript/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      noSemi = 301;
      incdec = 1;
      incdecPrefix = 2;
      insertSemi = 302;
      spaces = 304;
      newline = 305;
      LineComment = 3;
      BlockComment = 4;
      space3 = [
        9,
        10,
        11,
        12,
        13,
        32,
        133,
        160,
        5760,
        8192,
        8193,
        8194,
        8195,
        8196,
        8197,
        8198,
        8199,
        8200,
        8201,
        8202,
        8232,
        8233,
        8239,
        8287,
        12288
      ];
      braceR = 125;
      semicolon = 59;
      slash2 = 47;
      star = 42;
      plus = 43;
      minus = 45;
      trackNewline = new ContextTracker({
        start: false,
        shift(context, term) {
          return term == LineComment || term == BlockComment || term == spaces ? context : term == newline;
        },
        strict: false
      });
      insertSemicolon = new ExternalTokenizer((input, stack) => {
        let { next: next2 } = input;
        if ((next2 == braceR || next2 == -1 || stack.context) && stack.canShift(insertSemi))
          input.acceptToken(insertSemi);
      }, { contextual: true, fallback: true });
      noSemicolon = new ExternalTokenizer((input, stack) => {
        let { next: next2 } = input, after;
        if (space3.indexOf(next2) > -1)
          return;
        if (next2 == slash2 && ((after = input.peek(1)) == slash2 || after == star))
          return;
        if (next2 != braceR && next2 != semicolon && next2 != -1 && !stack.context && stack.canShift(noSemi))
          input.acceptToken(noSemi);
      }, { contextual: true });
      incdecToken = new ExternalTokenizer((input, stack) => {
        let { next: next2 } = input;
        if (next2 == plus || next2 == minus) {
          input.advance();
          if (next2 == input.next) {
            input.advance();
            let mayPostfix = !stack.context && stack.canShift(incdec);
            input.acceptToken(mayPostfix ? incdec : incdecPrefix);
          }
        }
      }, { contextual: true });
      jsHighlight = styleTags({
        "get set async static": tags.modifier,
        "for while do if else switch try catch finally return throw break continue default case": tags.controlKeyword,
        "in of await yield void typeof delete instanceof": tags.operatorKeyword,
        "let var const function class extends": tags.definitionKeyword,
        "import export from": tags.moduleKeyword,
        "with debugger as new": tags.keyword,
        TemplateString: tags.special(tags.string),
        super: tags.atom,
        BooleanLiteral: tags.bool,
        this: tags.self,
        null: tags.null,
        Star: tags.modifier,
        VariableName: tags.variableName,
        "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags.function(tags.variableName),
        VariableDefinition: tags.definition(tags.variableName),
        Label: tags.labelName,
        PropertyName: tags.propertyName,
        PrivatePropertyName: tags.special(tags.propertyName),
        "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
        "FunctionDeclaration/VariableDefinition": tags.function(tags.definition(tags.variableName)),
        "ClassDeclaration/VariableDefinition": tags.definition(tags.className),
        PropertyDefinition: tags.definition(tags.propertyName),
        PrivatePropertyDefinition: tags.definition(tags.special(tags.propertyName)),
        UpdateOp: tags.updateOperator,
        LineComment: tags.lineComment,
        BlockComment: tags.blockComment,
        Number: tags.number,
        String: tags.string,
        Escape: tags.escape,
        ArithOp: tags.arithmeticOperator,
        LogicOp: tags.logicOperator,
        BitOp: tags.bitwiseOperator,
        CompareOp: tags.compareOperator,
        RegExp: tags.regexp,
        Equals: tags.definitionOperator,
        Arrow: tags.function(tags.punctuation),
        ": Spread": tags.punctuation,
        "( )": tags.paren,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace,
        "InterpolationStart InterpolationEnd": tags.special(tags.brace),
        ".": tags.derefOperator,
        ", ;": tags.separator,
        "@": tags.meta,
        TypeName: tags.typeName,
        TypeDefinition: tags.definition(tags.typeName),
        "type enum interface implements namespace module declare": tags.definitionKeyword,
        "abstract global Privacy readonly override": tags.modifier,
        "is keyof unique infer": tags.operatorKeyword,
        JSXAttributeValue: tags.attributeValue,
        JSXText: tags.content,
        "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags.angleBracket,
        "JSXIdentifier JSXNameSpacedName": tags.tagName,
        "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags.attributeName,
        "JSXBuiltin/JSXIdentifier": tags.standard(tags.tagName)
      });
      spec_identifier2 = { __proto__: null, export: 14, as: 19, from: 27, default: 30, async: 35, function: 36, extends: 46, this: 50, true: 58, false: 58, null: 70, void: 74, typeof: 78, super: 96, new: 130, delete: 146, yield: 155, await: 159, class: 164, public: 219, private: 219, protected: 219, readonly: 221, instanceof: 240, satisfies: 243, in: 244, const: 246, import: 278, keyof: 333, unique: 337, infer: 343, is: 379, abstract: 399, implements: 401, type: 403, let: 406, var: 408, interface: 415, enum: 419, namespace: 425, module: 427, declare: 431, global: 435, for: 456, of: 465, while: 468, with: 472, do: 476, if: 480, else: 482, switch: 486, case: 492, try: 498, catch: 502, finally: 506, return: 510, throw: 514, break: 518, continue: 522, debugger: 526 };
      spec_word = { __proto__: null, async: 117, get: 119, set: 121, public: 181, private: 181, protected: 181, static: 183, abstract: 185, override: 187, readonly: 193, accessor: 195, new: 383 };
      spec_LessThan = { __proto__: null, "<": 137 };
      parser4 = LRParser.deserialize({
        version: 14,
        states: "$BhO`QUOOO%QQUOOO'TQWOOP(_OSOOO*mQ(CjO'#CfO*tOpO'#CgO+SO!bO'#CgO+bO07`O'#DZO-sQUO'#DaO.TQUO'#DlO%QQUO'#DvO0[QUO'#EOOOQ(CY'#EW'#EWO0rQSO'#ETOOQO'#I_'#I_O0zQSO'#GjOOQO'#Eh'#EhO1VQSO'#EgO1[QSO'#EgO3^Q(CjO'#JbO5}Q(CjO'#JcO6kQSO'#FVO6pQ#tO'#FnOOQ(CY'#F_'#F_O6{O&jO'#F_O7ZQ,UO'#FuO8qQSO'#FtOOQ(CY'#Jc'#JcOOQ(CW'#Jb'#JbOOQQ'#J|'#J|O8vQSO'#IOO8{Q(C[O'#IPOOQQ'#JO'#JOOOQQ'#IT'#ITQ`QUOOO%QQUO'#DnO9TQUO'#DzO%QQUO'#D|O9[QSO'#GjO9aQ,UO'#ClO9oQSO'#EfO9zQSO'#EqO:PQ,UO'#F^O:nQSO'#GjO:sQSO'#GnO;OQSO'#GnO;^QSO'#GqO;^QSO'#GrO;^QSO'#GtO9[QSO'#GwO;}QSO'#GzO=`QSO'#CbO=pQSO'#HXO=xQSO'#H_O=xQSO'#HaO`QUO'#HcO=xQSO'#HeO=xQSO'#HhO=}QSO'#HnO>SQ(C]O'#HtO%QQUO'#HvO>_Q(C]O'#HxO>jQ(C]O'#HzO8{Q(C[O'#H|O>uQ(CjO'#CfO?wQWO'#DfQOQSOOO@_QSO'#EPO9aQ,UO'#EfO@jQSO'#EfO@uQ`O'#F^OOQQ'#Cd'#CdOOQ(CW'#Dk'#DkOOQ(CW'#Jf'#JfO%QQUO'#JfOBOQWO'#E_OOQ(CW'#E^'#E^OBYQ(C`O'#E_OBtQWO'#ESOOQO'#Ji'#JiOCYQWO'#ESOCgQWO'#E_OC}QWO'#EeODQQWO'#E_O@}QWO'#E_OBtQWO'#E_PDkO?MpO'#C`POOO)CDm)CDmOOOO'#IU'#IUODvOpO,59ROOQ(CY,59R,59ROOOO'#IV'#IVOEUO!bO,59RO%QQUO'#D]OOOO'#IX'#IXOEdO07`O,59uOOQ(CY,59u,59uOErQUO'#IYOFVQSO'#JdOHXQbO'#JdO+pQUO'#JdOH`QSO,59{OHvQSO'#EhOITQSO'#JqOI`QSO'#JpOI`QSO'#JpOIhQSO,5;UOImQSO'#JoOOQ(CY,5:W,5:WOItQUO,5:WOKuQ(CjO,5:bOLfQSO,5:jOLkQSO'#JmOMeQ(C[O'#JnO:sQSO'#JmOMlQSO'#JmOMtQSO,5;TOMyQSO'#JmOOQ(CY'#Cf'#CfO%QQUO'#EOONmQ`O,5:oOOQO'#Jj'#JjOOQO-E<]-E<]O9[QSO,5=UO! TQSO,5=UO! YQUO,5;RO!#]Q,UO'#EcO!$pQSO,5;RO!&YQ,UO'#DpO!&aQUO'#DuO!&kQWO,5;[O!&sQWO,5;[O%QQUO,5;[OOQQ'#E}'#E}OOQQ'#FP'#FPO%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]O%QQUO,5;]OOQQ'#FT'#FTO!'RQUO,5;nOOQ(CY,5;s,5;sOOQ(CY,5;t,5;tO!)UQSO,5;tOOQ(CY,5;u,5;uO%QQUO'#IeO!)^Q(C[O,5<bO!#]Q,UO,5;]O!){Q,UO,5;]O%QQUO,5;qO!*SQ#tO'#FdO!+PQ#tO'#JuO!*kQ#tO'#JuO!+WQ#tO'#JuOOQO'#Ju'#JuO!+lQ#tO,5;|OOOO,5<Y,5<YO!+}QUO'#FpOOOO'#Id'#IdO6{O&jO,5;yO!,UQ#tO'#FrOOQ(CY,5;y,5;yO!,uQ7[O'#CrOOQ(CY'#Cv'#CvO!-YQSO'#CvO!-_O07`O'#CzO!-{Q,UO,5<_O!.SQSO,5<aO!/iQMhO'#GPO!/vQSO'#GQO!/{QSO'#GQO!0QQMhO'#GUO!1PQWO'#GYO!1rQ7[O'#J]OOQ(CY'#J]'#J]O!1|QSO'#J[O!2[QSO'#JZO!2dQSO'#CqOOQ(CY'#Ct'#CtOOQ(CY'#DO'#DOOOQ(CY'#DQ'#DQO0uQSO'#DSO!$uQ,UO'#FwO!$uQ,UO'#FyO!2lQSO'#F{O!2qQSO'#F|O!/{QSO'#GSO!$uQ,UO'#GXO!2vQSO'#EiO!3bQSO,5<`O`QUO,5>jOOQQ'#JW'#JWOOQQ,5>k,5>kOOQQ-E<R-E<RO!5aQ(CjO,5:YO!7}Q(CjO,5:fO%QQUO,5:fO!:hQ(CjO,5:hOOQ(CW'#Co'#CoO!;XQ,UO,5=UO!;gQ(C[O'#JXO8qQSO'#JXO=}QSO,59WO!;xQWO,59WO!<QQ,UO,59WO9aQ,UO,59WO!<]QSO,5;RO!<eQSO'#HWO!<vQSO'#KQO%QQUO,5;vO!=OQWO,5;xO!=TQSO,5=qO!=YQSO,5=qO!=_QSO,5=qO8{Q(C[O,5=qO!=mQSO'#EjO!>gQWO'#EkOOQ(CW'#Jo'#JoO!>nQ(C[O'#J}O8{Q(C[O,5=YO;^QSO,5=`OOQO'#Cr'#CrO!>yQWO,5=]O!?RQ,UO,5=^O!?^QSO,5=`O!?cQ`O,5=cO=}QSO'#G|O9[QSO'#HOO!?kQSO'#HOO9aQ,UO'#HRO!?pQSO'#HROOQQ,5=f,5=fO!?uQSO'#HSO!?}QSO'#ClO!@SQSO,58|O!@^QSO,58|O!BfQUO,58|OOQQ,58|,58|O!BsQ(C[O,58|O%QQUO,58|O!COQUO'#HZOOQQ'#H['#H[OOQQ'#H]'#H]O`QUO,5=sO!C`QSO,5=sO`QUO,5=yO`QUO,5={O!CeQSO,5=}O`QUO,5>PO!CjQSO,5>SO!CoQUO,5>YOOQQ,5>`,5>`O%QQUO,5>`O8{Q(C[O,5>bOOQQ,5>d,5>dO!GvQSO,5>dOOQQ,5>f,5>fO!GvQSO,5>fOOQQ,5>h,5>hO!G{QWO'#DXO%QQUO'#JfO!HjQWO'#JfO!IXQWO'#DgO!IjQWO'#DgO!K{QUO'#DgO!LSQSO'#JeO!L[QSO,5:QO!LaQSO'#ElO!LoQSO'#JrO!LwQSO,5;VO!L|QWO'#DgO!MZQWO'#EROOQ(CY,5:k,5:kO%QQUO,5:kO!MbQSO,5:kO=}QSO,5;QO!;xQWO,5;QO!<QQ,UO,5;QO9aQ,UO,5;QO!MjQSO,5@QO!MoQ!LQO,5:oO!NrQ(C`O,5:yOBtQWO,5:nO# ^QWO,5:nO# kQWO,5:yO#!RQWO,5:yO#!lQWO,5:yOBtQWO,5:yO=}QSO,5:nOOQ(CW'#Eb'#EbOOQO,5:y,5:yO%QQUO,5:yO##]Q(C[O,5:yO##hQ(C[O,5:yO!;xQWO,5:nOOQO,5;P,5;PO##vQ(C[O,5:yPOOO'#IS'#ISP#$[O?MpO,58zPOOO,58z,58zOOOO-E<S-E<SOOQ(CY1G.m1G.mOOOO-E<T-E<TO#$gQ`O,59wOOOO-E<V-E<VOOQ(CY1G/a1G/aO#$lQbO,5>tO+pQUO,5>tOOQO,5>z,5>zO#$vQUO'#IYOOQO-E<W-E<WO#%TQSO,5@OO#%]QbO,5@OO#%dQSO,5@[OOQ(CY1G/g1G/gO%QQUO,5@]O#%lQSO'#I`OOQO-E<^-E<^O#%dQSO,5@[OOQ(CW1G0p1G0pOOQ(CY1G/r1G/rOOQ(CY1G0U1G0UO#&QQSO,5@XO:sQSO,5@XO#&YQSO,5@XO%QQUO,5@YO#&hQ(C[O,5@YO#&yQ(C[O,5@YO#'QQSO'#IbO#&QQSO,5@XOOQ(CW1G0o1G0oO!&kQWO,5:qO!&vQWO,5:qOOQO,5:s,5:sO#'oQSO,5:sO#'wQ,UO1G2pO9[QSO1G2pOOQ(CY1G0m1G0mO#(VQ(CjO1G0mO#)[Q(ChO,5:}OOQ(CY'#GO'#GOO#)xQ(CjO'#J]O! YQUO1G0mO#,QQ,UO'#JgO#,[QSO,5:[O#,aQbO'#JhO%QQUO'#JhO#,kQSO,5:aOOQ(CY'#DX'#DXOOQ(CY1G0v1G0vO%QQUO1G0vOOQ(CY1G1`1G1`O#,pQSO1G0vO#/XQ(CjO1G0wO#/`Q(CjO1G0wO#1yQ(CjO1G0wO#2QQ(CjO1G0wO#4[Q(CjO1G0wO#4rQ(CjO1G0wO#7lQ(CjO1G0wO#7sQ(CjO1G0wO#:^Q(CjO1G0wO#:eQ(CjO1G0wO#<]Q(CjO1G0wO#?]Q$IUO'#CfO#AZQ$IUO1G1YO#CXQ$IUO'#JcO!)XQSO1G1`O#ClQ(CjO,5?POOQ(CW-E<c-E<cO#D`Q(CjO1G0wOOQ(CY1G0w1G0wO#FkQ(CjO1G1]O#G_Q#tO,5<QO#GgQ#tO,5<RO#GoQ#tO'#FiO#HWQSO'#FhOOQO'#Jv'#JvOOQO'#Ic'#IcO#H]Q#tO1G1hOOQ(CY1G1h1G1hOOOO1G1s1G1sO#HnQ$IUO'#JbO#HxQSO,5<[O!'RQUO,5<[OOOO-E<b-E<bOOQ(CY1G1e1G1eO#H}QWO'#JuOOQ(CY,5<^,5<^O#IVQWO,5<^OOQ(CY,59b,59bO!#]Q,UO'#C|OOOO'#IW'#IWO#I[O07`O,59fOOQ(CY,59f,59fO%QQUO1G1yO!2qQSO'#IgO#IgQSO,5<rOOQ(CY,5<o,5<oOOQO'#Ge'#GeO!$uQ,UO,5=OOOQO'#Gg'#GgO!$uQ,UO,5=QO!#]Q,UO,5=SOOQO1G1{1G1{O#IuQ`O'#CoO#JYQ`O,5<kO#JaQSO'#JyO9[QSO'#JyO#JoQSO,5<mO!$uQ,UO,5<lO#JtQSO'#GRO#KPQSO,5<lO#KUQ`O'#GOO#KcQ`O'#JzO#KmQSO'#JzO!#]Q,UO'#JzO#KrQSO,5<pO#KwQWO'#GZO!0zQWO'#GZO#LYQSO'#G]O#L_QSO'#G_O!/{QSO'#GbO#LdQ(C[O'#IiO#LoQWO,5<tOOQ(CY,5<t,5<tO#LvQWO'#GZO#MUQWO'#G[O#M^QWO'#G[OOQ(CY,5=T,5=TO!$uQ,UO,5?vO!$uQ,UO,5?vO#McQSO'#IjO#MnQSO,5?uO#MvQSO,59]O#NgQ,UO,59nOOQ(CY,59n,59nO$ YQ,UO,5<cO$ {Q,UO,5<eO?oQSO,5<gOOQ(CY,5<h,5<hO$!VQSO,5<nO$![Q,UO,5<sO! YQUO1G1zO$!lQSO1G1zOOQQ1G4U1G4UOOQ(CY1G/t1G/tO!)UQSO1G/tO$$kQ(CjO1G0QOOQQ1G2p1G2pO!#]Q,UO1G2pO%QQUO1G2pO$%[QSO1G2pO$%gQ,UO'#EcOOQ(CW,5?s,5?sO$%qQ(C[O,5?sOOQQ1G.r1G.rO=}QSO1G.rO!;xQWO1G.rO!<QQ,UO1G.rO$&SQSO1G0mO$&XQSO'#CfO$&dQSO'#KRO$&lQSO,5=rO$&qQSO'#KRO$&vQSO'#KRO$'RQSO'#IrO$'aQSO,5@lO$'iQbO1G1bOOQ(CY1G1d1G1dO9[QSO1G3]O?oQSO1G3]O$'pQSO1G3]O$'uQSO1G3]OOQQ1G3]1G3]O:sQSO'#JpO:sQSO'#ElO%QQUO'#ElO:sQSO'#IlO$'zQ(C[O,5@iOOQQ1G2t1G2tO!?^QSO1G2zO!#]Q,UO1G2wO$(VQSO1G2wOOQQ1G2x1G2xO!#]Q,UO1G2xO$([QSO1G2xO$(dQWO'#GvOOQQ1G2z1G2zO!0zQWO'#InO!?cQ`O1G2}OOQQ1G2}1G2}OOQQ,5=h,5=hO$(lQ,UO,5=jO9[QSO,5=jO#L_QSO,5=mO8qQSO,5=mO!;xQWO,5=mO!<QQ,UO,5=mO9aQ,UO,5=mO$(zQSO'#KPO$)VQSO,5=nOOQQ1G.h1G.hO$)[Q(C[O1G.hO?oQSO1G.hO$)gQSO1G.hO8{Q(C[O1G.hO$)rQbO,5@nO$*VQSO,5@nO$*bQUO,5=uO$*iQSO,5=uO:sQSO,5@nOOQQ1G3_1G3_O`QUO1G3_OOQQ1G3e1G3eOOQQ1G3g1G3gO=xQSO1G3iO$*nQUO1G3kO$.oQUO'#HjOOQQ1G3n1G3nO$.|QSO'#HpO=}QSO'#HrOOQQ1G3t1G3tO$/UQUO1G3tO8{Q(C[O1G3zOOQQ1G3|1G3|OOQ(CW'#GV'#GVO8{Q(C[O1G4OO8{Q(C[O1G4QO$3YQSO,5@QO!'RQUO,5;WO:sQSO,5;WO=}QSO,5:RO!'RQUO,5:RO!;xQWO,5:RO$3_Q$IUO,5:ROOQO,5;W,5;WO$3iQWO'#IZO$4PQSO,5@POOQ(CY1G/l1G/lO$4XQWO'#IaO$4cQSO,5@^OOQ(CW1G0q1G0qO!IjQWO,5:ROOQO'#I^'#I^O$4kQWO,5:mOOQ(CY,5:m,5:mO!MeQSO1G0VOOQ(CY1G0V1G0VO%QQUO1G0VOOQ(CY1G0l1G0lO=}QSO1G0lO!;xQWO1G0lO!<QQ,UO1G0lOOQ(CW1G5l1G5lO=}QSO1G0YOOQO1G0e1G0eO%QQUO1G0eO$4rQ(C[O1G0eO$4}Q(C[O1G0eO!;xQWO1G0YOBtQWO1G0YO$5]Q(C`O1G0eO$5wQWO1G0YOBtQWO1G0eO$6UQWO1G0eO$6lQWO1G0eO$7VQ(C[O1G0eOOQO1G0Y1G0YO$7kQ(CjO1G0ePOOO-E<Q-E<QPOOO1G.f1G.fOOOO1G/c1G/cO$7uQ`O,5<bO$7}QbO1G4`OOQO1G4f1G4fO%QQUO,5>tO$8XQSO1G5jO$8aQSO1G5vO$8iQbO1G5wO:sQSO,5>zO$8sQSO1G5sO$8sQSO1G5sO:sQSO1G5sO$8{Q(CjO1G5tO%QQUO1G5tO$9]Q(C[O1G5tO$9nQSO,5>|O:sQSO,5>|OOQO,5>|,5>|O$:SQSO,5>|OOQO-E<`-E<`OOQO1G0]1G0]OOQO1G0_1G0_O!)XQSO1G0_OOQQ7+([7+([O!#]Q,UO7+([O%QQUO7+([O$:bQSO7+([O$:mQ,UO7+([O$:{Q(CjO,59nO$=TQ(CjO,5<cO$?`Q(CjO,5<eO$AkQ(CjO,5<sOOQ(CY7+&X7+&XO$C|Q(CjO7+&XO$DpQ,UO'#I[O$DzQSO,5@ROOQ(CY1G/v1G/vO$ESQUO'#I]O$EaQSO,5@SO$EiQbO,5@SOOQ(CY1G/{1G/{O$EsQSO7+&bOOQ(CY7+&b7+&bO$ExQ$IUO,5:bO%QQUO7+&tO$FSQ$IUO,5:YO$FaQ$IUO,5:fO$FkQ$IUO,5:hOOQ(CY7+&z7+&zOOQO1G1l1G1lOOQO1G1m1G1mO$FuQ#tO,5<TO!'RQUO,5<SOOQO-E<a-E<aOOQ(CY7+'S7+'SOOOO7+'_7+'_OOOO1G1v1G1vO$GQQSO1G1vOOQ(CY1G1x1G1xO$GVQ`O,59hOOOO-E<U-E<UOOQ(CY1G/Q1G/QO$G^Q(CjO7+'eOOQ(CY,5?R,5?RO$HQQSO,5?ROOQ(CY1G2^1G2^P$HVQSO'#IgPOQ(CY-E<e-E<eO$HyQ,UO1G2jO$IlQ,UO1G2lO$IvQ`O1G2nOOQ(CY1G2V1G2VO$I}QSO'#IfO$J]QSO,5@eO$J]QSO,5@eO$JeQSO,5@eO$JpQSO,5@eOOQO1G2X1G2XO$KOQ,UO1G2WO!$uQ,UO1G2WO$K`QMhO'#IhO$KpQSO,5@fO!#]Q,UO,5@fO$KxQ`O,5@fOOQ(CY1G2[1G2[OOQ(CW,5<u,5<uOOQ(CW,5<v,5<vO$LSQSO,5<vOBoQSO,5<vO!;xQWO,5<uOOQO'#G^'#G^O$LXQSO,5<wOOQ(CW,5<y,5<yO$LSQSO,5<|OOQO,5?T,5?TOOQO-E<g-E<gOOQ(CY1G2`1G2`O!0zQWO,5<uO$LaQSO,5<vO#LYQSO,5<wO!0zQWO,5<vO$LlQ,UO1G5bO$LvQ,UO1G5bOOQO,5?U,5?UOOQO-E<h-E<hOOQO1G.w1G.wO!=OQWO,59pO%QQUO,59pO$MTQSO1G2RO!$uQ,UO1G2YO$MYQ(CjO7+'fOOQ(CY7+'f7+'fO! YQUO7+'fOOQ(CY7+%`7+%`O$M|Q`O'#J{O!MeQSO7+([O$NWQbO7+([O$:eQSO7+([O$N_Q(ChO'#CfO$NrQ(ChO,5<zO% dQSO,5<zOOQ(CW1G5_1G5_OOQQ7+$^7+$^O=}QSO7+$^O!;xQWO7+$^O! YQUO7+&XO% iQSO'#IqO% }QSO,5@mOOQO1G3^1G3^O9[QSO,5@mO% }QSO,5@mO%!VQSO,5@mOOQO,5?^,5?^OOQO-E<p-E<pOOQ(CY7+&|7+&|O%![QSO7+(wO8{Q(C[O7+(wO9[QSO7+(wO?oQSO7+(wO%!aQSO,5;WOOQ(CW,5?W,5?WOOQ(CW-E<j-E<jOOQQ7+(f7+(fO%!fQ(ChO7+(cO!#]Q,UO7+(cO%!pQ`O7+(dOOQQ7+(d7+(dO!#]Q,UO7+(dO%!wQSO'#KOO%#SQSO,5=bOOQO,5?Y,5?YOOQO-E<l-E<lOOQQ7+(i7+(iO%$`QWO'#HPOOQQ1G3U1G3UO!#]Q,UO1G3UO%QQUO1G3UO%$gQSO1G3UO%$rQ,UO1G3UO8{Q(C[O1G3XO#L_QSO1G3XO8qQSO1G3XO!;xQWO1G3XO!<QQ,UO1G3XO%%QQSO'#IpO%%]QSO,5@kO%%eQWO,5@kOOQ(CW1G3Y1G3YOOQQ7+$S7+$SO?oQSO7+$SO8{Q(C[O7+$SO%%pQSO7+$SO%QQUO1G6YO%QQUO1G6ZO%%uQUO1G3aO%%|QSO1G3aO%&RQUO1G3aO%&YQ(C[O1G6YOOQQ7+(y7+(yO8{Q(C[O7+)TO`QUO7+)VOOQQ'#KU'#KUOOQQ'#Is'#IsO%&dQUO,5>UOOQQ,5>U,5>UO%QQUO'#HkO%&qQSO'#HmOOQQ,5>[,5>[O:sQSO,5>[OOQQ,5>^,5>^OOQQ7+)`7+)`OOQQ7+)f7+)fOOQQ7+)j7+)jOOQQ7+)l7+)lO%&vQWO1G5lO%'[Q$IUO1G0rO%'fQSO1G0rOOQO1G/m1G/mO%'qQ$IUO1G/mO=}QSO1G/mO!'RQUO'#DgOOQO,5>u,5>uOOQO-E<X-E<XOOQO,5>{,5>{OOQO-E<_-E<_O!;xQWO1G/mOOQO-E<[-E<[OOQ(CY1G0X1G0XOOQ(CY7+%q7+%qO!MeQSO7+%qOOQ(CY7+&W7+&WO=}QSO7+&WO!;xQWO7+&WOOQO7+%t7+%tO$7kQ(CjO7+&POOQO7+&P7+&PO%QQUO7+&PO%'{Q(C[O7+&PO=}QSO7+%tO!;xQWO7+%tO%(WQ(C[O7+&POBtQWO7+%tO%(fQ(C[O7+&PO%(zQ(C`O7+&PO%)UQWO7+%tOBtQWO7+&PO%)cQWO7+&PO%)yQSO7++_O%)yQSO7++_O%*RQ(CjO7++`O%QQUO7++`OOQO1G4h1G4hO:sQSO1G4hO%*cQSO1G4hOOQO7+%y7+%yO!MeQSO<<KvO$NWQbO<<KvO%*qQSO<<KvOOQQ<<Kv<<KvO!#]Q,UO<<KvO%QQUO<<KvO%*yQSO<<KvO%+UQ(CjO1G2jO%-aQ(CjO1G2lO%/lQ(CjO1G2WO%1}Q,UO,5>vOOQO-E<Y-E<YO%2XQbO,5>wO%QQUO,5>wOOQO-E<Z-E<ZO%2cQSO1G5nOOQ(CY<<I|<<I|O%2kQ$IUO1G0mO%4uQ$IUO1G0wO%4|Q$IUO1G0wO%7QQ$IUO1G0wO%7XQ$IUO1G0wO%8|Q$IUO1G0wO%9dQ$IUO1G0wO%;wQ$IUO1G0wO%<OQ$IUO1G0wO%>SQ$IUO1G0wO%>ZQ$IUO1G0wO%@RQ$IUO1G0wO%@fQ(CjO<<J`O%AkQ$IUO1G0wO%CaQ$IUO'#J]O%EdQ$IUO1G1]O%EqQ$IUO1G0QO!'RQUO'#FkOOQO'#Jw'#JwOOQO1G1o1G1oO%E{QSO1G1nO%FQQ$IUO,5?POOOO7+'b7+'bOOOO1G/S1G/SOOQ(CY1G4m1G4mO!$uQ,UO7+(YO%F[QSO,5?QO9[QSO,5?QOOQO-E<d-E<dO%FjQSO1G6PO%FjQSO1G6PO%FrQSO1G6PO%F}Q,UO7+'rO%G_Q`O,5?SO%GiQSO,5?SO!#]Q,UO,5?SOOQO-E<f-E<fO%GnQ`O1G6QO%GxQSO1G6QOOQ(CW1G2b1G2bO$LSQSO1G2bOOQ(CW1G2a1G2aO%HQQSO1G2cO!#]Q,UO1G2cOOQ(CW1G2h1G2hO!;xQWO1G2aOBoQSO1G2bO%HVQSO1G2cO%H_QSO1G2bO!$uQ,UO7+*|OOQ(CY1G/[1G/[O%HjQSO1G/[OOQ(CY7+'m7+'mO%HoQ,UO7+'tO%IPQ(CjO<<KQOOQ(CY<<KQ<<KQO!#]Q,UO'#IkO%IsQSO,5@gO!#]Q,UO1G2fOOQQ<<Gx<<GxO=}QSO<<GxO%I{Q(CjO<<IsOOQ(CY<<Is<<IsOOQO,5?],5?]O%JoQSO,5?]O$&vQSO,5?]OOQO-E<o-E<oO%JtQSO1G6XO%JtQSO1G6XO9[QSO1G6XO?oQSO<<LcOOQQ<<Lc<<LcO%J|QSO<<LcO8{Q(C[O<<LcO%KRQSO1G0rOOQQ<<K}<<K}O%!fQ(ChO<<K}OOQQ<<LO<<LOO%!pQ`O<<LOO%KWQWO'#ImO%KcQSO,5@jO!'RQUO,5@jOOQQ1G2|1G2|O%KkQ(C`O'#JfO%LVQUO'#JfO%L^QWO'#E_O%LwQ(C[O'#E_OBYQ(C`O'#E_O(VQWO'#HQOOQO'#Io'#IoO8{Q(C[O'#IoO%M]QWO,5=kOOQQ,5=k,5=kO%MuQWO'#E_O%LmQWO'#E_O%M|QWO'#E_O%NgQWO'#E_O& WQWO'#HQO& iQSO7+(pO& nQSO7+(pOOQQ7+(p7+(pO!#]Q,UO7+(pO%QQUO7+(pO& vQSO7+(pOOQQ7+(s7+(sO8{Q(C[O7+(sO#L_QSO7+(sO8qQSO7+(sO!;xQWO7+(sO&!RQSO,5?[OOQO-E<n-E<nOOQO'#HT'#HTO&!^QSO1G6VO8{Q(C[O<<GnOOQQ<<Gn<<GnO?oQSO<<GnO&!fQSO7++tO&!kQSO7++uOOQQ7+({7+({O&!pQSO7+({O&!uQUO7+({O&!|QSO7+({O%QQUO7++tO%QQUO7++uOOQQ<<Lo<<LoOOQQ<<Lq<<LqOOQQ-E<q-E<qOOQQ1G3p1G3pO&#RQSO,5>VOOQQ,5>X,5>XO&#WQSO1G3vO:sQSO7+&^O!'RQUO7+&^OOQO7+%X7+%XO&#]Q$IUO1G5wO=}QSO7+%XOOQ(CY<<I]<<I]OOQ(CY<<Ir<<IrO=}QSO<<IrOOQO<<Ik<<IkO$7kQ(CjO<<IkO%QQUO<<IkOOQO<<I`<<I`O=}QSO<<I`O&#gQ(C[O<<IkO!;xQWO<<I`O&#rQ(C[O<<IkOBtQWO<<I`O&$QQ(C[O<<IkO&$fQ(C`O<<IkO&$pQWO<<I`OBtQWO<<IkO&$}QSO<<NyO&%VQ(CjO<<NzOOQO7+*S7+*SO:sQSO7+*SOOQQANAbANAbO&%gQSOANAbO!#]Q,UOANAbO!MeQSOANAbO$NWQbOANAbO%QQUOANAbO&%oQ(CjO7+'rO&(QQ(CjO7+'tO&*cQbO1G4cO&*mQ$IUO7+&XO&*zQ$IUO,59nO&,}Q$IUO,5<cO&/QQ$IUO,5<eO&1TQ$IUO,5<sO&2yQ$IUO7+'eO&3WQ$IUO7+'fO&3eQSO,5<VOOQO7+'Y7+'YO&3jQ,UO<<KtOOQO1G4l1G4lO&3qQSO1G4lO&3|QSO1G4lO&4[QSO7++kO&4[QSO7++kO!#]Q,UO1G4nO&4dQ`O1G4nO&4nQSO7++lOOQ(CW7+'|7+'|O$LSQSO7+'}O&4vQ`O7+'}OOQ(CW7+'{7+'{O$LSQSO7+'|O&4}QSO7+'}O!#]Q,UO7+'}OBoQSO7+'|O&5SQ,UO<<NhOOQ(CY7+$v7+$vO&5^Q`O,5?VOOQO-E<i-E<iO&5hQ(ChO7+(QOOQQAN=dAN=dO9[QSO1G4wOOQO1G4w1G4wO&5xQSO1G4wO&5}QSO7++sO&5}QSO7++sO8{Q(C[OANA}O?oQSOANA}OOQQANA}ANA}OOQQANAiANAiOOQQANAjANAjO&6VQSO,5?XOOQO-E<k-E<kO&6bQ$IUO1G6UO#L_QSO,5=lO8qQSO,5=lO&8rQbO'#CfO&8|QWO,5:yO&9WQWO,5:yO&9eQWO,5:yO!;xQWO,5=lOOQO,5?Z,5?ZOOQO-E<m-E<mOOQQ1G3V1G3VO%LVQUO,5<wO%KkQ(C`O,5=lO!NrQ(C`O,5:yO(VQWO,5=lO&9xQWO,5=lO&:ZQWO,5:yOOQQ<<L[<<L[O!#]Q,UO<<L[O& iQSO<<L[O&:tQSO<<L[O%QQUO<<L[OOQQ<<L_<<L_O8{Q(C[O<<L_O#L_QSO<<L_O8qQSO<<L_O&:|QWO1G4vO&;XQSO7++qOOQQAN=YAN=YO8{Q(C[OAN=YOOQQ<= `<= `OOQQ<= a<= aOOQQ<<Lg<<LgO&;aQSO<<LgO&;fQUO<<LgO&;mQSO<= `O&;rQSO<= aOOQQ1G3q1G3qO=}QSO7+)bO&;wQSO<<IxO&<SQ$IUO<<IxOOQO<<Hs<<HsOOQ(CYAN?^AN?^OOQOAN?VAN?VO$7kQ(CjOAN?VOOQOAN>zAN>zO%QQUOAN?VO=}QSOAN>zO&<^Q(C[OAN?VO!;xQWOAN>zO&<iQ(C[OAN?VOBtQWOAN>zO&<wQ(C[OAN?VOOQO<<Mn<<MnOOQQG26|G26|O!#]Q,UOG26|O!MeQSOG26|O&=]QSOG26|O$NWQbOG26|O&=eQ$IUO<<J`O&=rQ$IUO1G2WO&?hQ$IUO1G2jO&AkQ$IUO1G2lO&CnQ$IUO<<KQO&C{Q$IUO<<IsOOQO1G1q1G1qO!$uQ,UOANA`OOQO7+*W7+*WO&DYQSO7+*WO&DeQSO<= VO&DmQ`O7+*YOOQ(CW<<Ki<<KiO$LSQSO<<KiOOQ(CW<<Kh<<KhO&DwQ`O<<KiO$LSQSO<<KhOOQO7+*c7+*cO9[QSO7+*cO&EOQSO<= _OOQQG27iG27iO8{Q(C[OG27iO!'RQUO1G4sO&EWQSO7++pO8{Q(C[O1G3WO#L_QSO1G3WO&E`QWO1G0eO&EjQWO1G0eO8qQSO1G3WO!;xQWO1G3WO(VQWO1G3WO%KkQ(C`O1G3WO$5]Q(C`O1G0eO&EwQWO1G3WO& iQSOANAvOOQQANAvANAvO!#]Q,UOANAvO&FYQSOANAvOOQQANAyANAyO8{Q(C[OANAyO#L_QSOANAyOOQO'#HU'#HUOOQO7+*b7+*bOOQQG22tG22tOOQQANBRANBRO&FbQSOANBROOQQANDzANDzOOQQAND{AND{OOQQ<<L|<<L|O!'RQUOAN?dOOQOG24qG24qO$7kQ(CjOG24qOOQOG24fG24fO%QQUOG24qO=}QSOG24fO&FgQ(C[OG24qO!;xQWOG24fO&FrQ(C[OG24qO!MeQSOLD,hOOQQLD,hLD,hO!#]Q,UOLD,hO&GQQSOLD,hO&GYQ$IUO7+'rO&IOQ$IUO7+'tO&JtQ,UOG26zOOQO<<Mr<<MrOOQ(CWANATANATO$LSQSOANATOOQ(CWANASANASOOQO<<M}<<M}OOQQLD-TLD-TO&KUQ$IUO7+*_OOQO7+(r7+(rO8{Q(C[O7+(rO&K`QWO7+&PO#L_QSO7+(rO8qQSO7+(rO!;xQWO7+(rO(VQWO7+(rOOQQG27bG27bO& iQSOG27bO!#]Q,UOG27bOOQQG27eG27eO8{Q(C[OG27eOOQQG27mG27mO&KjQ$IUOG25OOOQOLD*]LD*]O$7kQ(CjOLD*]OOQOLD*QLD*QO%QQUOLD*]O=}QSOLD*QO&KtQ(C[OLD*]OOQQ!$(!S!$(!SO!MeQSO!$(!SO!#]Q,UO!$(!SO&LPQ(CjOG26zOOQ(CWG26oG26oOOQO<<L^<<L^O8{Q(C[O<<L^O#L_QSO<<L^O8qQSO<<L^O!;xQWO<<L^OOQQLD,|LD,|O& iQSOLD,|OOQQLD-PLD-POOQO!$'Mw!$'MwO$7kQ(CjO!$'MwOOQO!$'Ml!$'MlO%QQUO!$'MwOOQQ!)9En!)9EnO!MeQSO!)9EnOOQOANAxANAxO8{Q(C[OANAxO#L_QSOANAxO8qQSOANAxOOQQ!$(!h!$(!hOOQO!)9Cc!)9CcO$7kQ(CjO!)9CcOOQQ!.K;Y!.K;YO&NbQ$IUOG26zOOQOG27dG27dO8{Q(C[OG27dO#L_QSOG27dOOQO!.K8}!.K8}OOQOLD-OLD-OO8{Q(C[OLD-OOOQO!$(!j!$(!jO!'RQUO'#DvO0rQSO'#ETO'!WQbO'#JbO!'RQUO'#DnO'!_QUO'#DzO!'RQUO'#D|O'!fQbO'#CfO'$|QbO'#CfO'%^QUO,5;RO!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO,5;]O!'RQUO'#IeO''aQSO,5<bO''iQ,UO,5;]O'(|Q,UO,5;]O!'RQUO,5;qO0uQSO'#DSO0uQSO'#DSO!#]Q,UO'#FwO''iQ,UO'#FwO!#]Q,UO'#FyO''iQ,UO'#FyO!#]Q,UO'#GXO''iQ,UO'#GXO!'RQUO,5:fO!'RQUO,5@]O'%^QUO1G0mO')TQ$IUO'#CfO!'RQUO1G1yO!#]Q,UO,5=OO''iQ,UO,5=OO!#]Q,UO,5=QO''iQ,UO,5=QO!#]Q,UO,5<lO''iQ,UO,5<lO'%^QUO1G1zO!'RQUO7+&tO!#]Q,UO1G2WO''iQ,UO1G2WO!#]Q,UO1G2YO''iQ,UO1G2YO'%^QUO7+'fO'%^QUO7+&XO!#]Q,UOANA`O''iQ,UOANA`O')_QSO'#EgO')dQSO'#EgO')lQSO'#FVO')qQSO'#EqO')vQSO'#JqO'*RQSO'#JoO'*^QSO,5;RO'*cQ,UO,5<_O'*jQSO'#GQO'*oQSO'#GQO'*tQSO,5<`O'*|QSO,5;RO'+UQ$IUO1G1YO'+]QSO,5<lO'+bQSO,5<lO'+gQSO,5<nO'+lQSO,5<nO'+qQSO1G1zO'+vQSO1G0mO'+{Q,UO<<KtO',SQ,UO<<KtO7ZQ,UO'#FuO8qQSO'#FtO@jQSO'#EfO!'RQUO,5;nO!/{QSO'#GQO!/{QSO'#GQO!/{QSO'#GSO!/{QSO'#GSO!$uQ,UO7+(YO!$uQ,UO7+(YO$IvQ`O1G2nO$IvQ`O1G2nO!#]Q,UO,5=SO!#]Q,UO,5=S",
        stateData: "'-[~O'lOS'mOSROS'nRQ~OPYOQYOV!TO^pOaxObwOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!XXO!csO!hZO!kYO!lYO!mYO!otO!quO!tvO!x]O#o}O$PzO$TfO%_{O%a!OO%c|O%d|O%g!PO%i!QO%l!RO%m!RO%o!SO%|!UO&S!VO&U!WO&W!XO&Y!YO&]!ZO&c![O&i!]O&k!^O&m!_O&o!`O&q!aO'sSO'uTO'xUO(QVO(_[O(liO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$P!hO$TfO's!bO'uTO'xUO(QVO(_[O(liO~O^!qOl!kO|!lO![!rO!]!pO!^!pO!x;oO!|!vO!}!tO#O!uO#P!sO#S!wO#T!wO't!iO'uTO'xUO(T!jO(_!nO~O'n!xO~OPYXXYX^YXkYXyYXzYX|YX!VYX!eYX!fYX!hYX!lYX#WYX#ccX#fYX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#pYX#rYX#tYX#uYX#zYX'jYX(QYX(`YX(gYX(hYX~O!a$yX~P(dO[!zO'u!|O'v!zO'w!|O~O[!}O'w!|O'x!|O'y!}O~Oq#PO!O#QO(R#QO(S#SO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$P!hO$TfO's;tO'uTO'xUO(QVO(_[O(liO~O!U#WO!V#TO!S(WP!S(dP~P+pO!W#`O~P`OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$P!hO$TfO'uTO'xUO(QVO(_[O(liO~O!U#fO!x]O#a#iO#b#fO's;uO!g(aP~P.[O!h#kO's#jO~O!t#oO!x]O%_#pO~O#c#qO~O!a#rO#c#qO~OP$YOX$aOk#}Oy#vOz#wO|#xO!V$^O!e$PO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO#k$PO#l$PO#m$`O#n$PO#p$QO#r$SO#t$UO#u$VO(QVO(`$WO(g#yO(h#zO~O^(UX'j(UX'h(UX!g(UX!S(UX!X(UX%`(UX!a(UX~P1dO#W$bO#z$bOP(VXX(VXk(VXy(VXz(VX|(VX!V(VX!e(VX!h(VX!l(VX#f(VX#g(VX#h(VX#i(VX#j(VX#k(VX#l(VX#m(VX#n(VX#p(VX#r(VX#t(VX#u(VX(Q(VX(`(VX(g(VX(h(VX!X(VX%`(VX~O^(VX!f(VX'j(VX'h(VX!S(VX!g(VXo(VX!a(VX~P3zO#W$bO~O$V$dO$X$cO$`$iO~O!X$jO$TfO$c$kO$e$mO~Oi%POk$qOl$pOm$pOs%QOu%ROw%SO|$xO!X$yO!c%XO!h$uO#b%YO$P%VO$l%TO$n%UO$q%WO's$oO'uTO'xUO'|%OO(Q$rOd'}P~O!h%ZO~O!a%]O~O^%^O'j%^O~O't!iO~P%QO's%eO~O!h%ZO's%eO't!iO'|%OO~Ob%lO!h%ZO's%eO~O#n$PO~Oy%qO!X%nO!h%pO%a%tO's%eO't!iO'uTO'xUO](tP~O!t#oO~O|%vO!X%wO's%eO~O|%vO!X%wO%i%{O's%eO~O's%|O~O#o}O%a!OO%c|O%d|O%g!PO%i!QO%l!RO%m!RO~Oa&VOb&UO!t&SO%_&TO%q&RO~P;cOa&YObwO!X&XO!tvO!x]O#o}O%_{O%c|O%d|O%g!PO%i!QO%l!RO%m!RO%o!SO~O_&]O#W&`O%a&ZO't!iO~P<bO!h&aO!q&eO~O!h#kO~O!XXO~O^%^O'i&mO'j%^O~O^%^O'i&pO'j%^O~O^%^O'i&rO'j%^O~O'hYX!SYXoYX!gYX&QYX!XYX%`YX!aYX~P(dO!['PO!]&xO!^&xO't!iO'uTO'xUO~Ol&vO|&uO!U&yO(T&tO!W(XP!W(fP~P?cOg'SO!X'QO's%eO~Ob'XO!h%ZO's%eO~Oy%qO!h%pO~Ol!kO|!lO!['^O!]']O!^']O!}'`O#O'`O#P'_O#S'bO#T'bO't!iO'uTO'xUO(T!jO(_!nO~O!x;oO!|'aO~P@}O^%^O!a#rO!h%ZO!l'hO#W'fO'j%^O'|%OO(`'dO~Ol!kO|!lO'uTO'xUO(T!jO(_!nO~O!]']O!^']O't!iO~PBtO!['^O!]']O!^']O#S'bO#T'bO't!iO~PBtO!XXO!['^O!]']O!^']O#P'_O#S'bO#T'bO't!iO~PBtO'o'lO'p'lO'q'nO~O[!zO'u'pO'v!zO'w'pO~O[!}O'w'pO'x'pO'y!}O~Oq#PO!O#QO(R#QO(S'tO~O!U'vO!S&|X!S'SX!V&|X!V'SX~P+pO!V'xO!S(WX~OP$YOX$aOk#}Oy#vOz#wO|#xO!V'xO!e$PO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO#k$PO#l$PO#m$`O#n$PO#p$QO#r$SO#t$UO#u$VO(QVO(`$WO(g#yO(h#zO~O!S(WX~PF_O!S'}O~O!S(cX!V(cX!a(cX!g(cX(`(cX~O#W(cX#c#[X!W(cX~PHeO#W(OO!S(eX!V(eX~O!V(PO!S(dX~O!S(SO~O#W$bO~PHeO!W(TO~P`Oy#vOz#wO|#xO!f#tO!h#uO(QVOP!jaX!jak!ja!V!ja!e!ja!l!ja#f!ja#g!ja#h!ja#i!ja#j!ja#k!ja#l!ja#m!ja#n!ja#p!ja#r!ja#t!ja#u!ja(`!ja(g!ja(h!ja~O^!ja'j!ja'h!ja!S!ja!g!jao!ja!X!ja%`!ja!a!ja~PI{O!g(UO~O|%vO!X%wO!x]O#a(XO#b(WO's%eO~O!a#rO#W(YO(`'dO!V(bX^(bX'j(bX~O!g(bX~PMPO!V(]O!g(aX~O!g(_O~O|%vO!X%wO#b(WO's%eO~Oy(`Oz(aO!f#tO!h#uO!x!wa|!wa~O!t!wa%_!wa!X!wa#a!wa#b!wa's!wa~PNXO!t(eO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!XXO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$P!hO$TfO's!bO'uTO'xUO(QVO(_[O(liO~Oi%POk$qOl$pOm$pOs%QOu%ROw<XO|$xO!X$yO!c=cO!h$uO#b<_O$P%VO$l<ZO$n<]O$q%WO's(iO'uTO'xUO'|%OO(Q$rO~O#c(kO~Oi%POk$qOl$pOm$pOs%QOu%ROw%SO|$xO!X$yO!c%XO!h$uO#b%YO$P%VO$l%TO$n%UO$q%WO's(iO'uTO'xUO'|%OO(Q$rO~Od(ZP~P!$uO!U(oO!g([P~P%QO(T(qO(_[O~O|(sO!h#uO(T(qO(_[O~OP;nOQ;nOa=_Ob!fOikOk;nOlkOmkOskOu;nOw;nO|WO!QkO!RkO!X!cO!c;qO!hZO!k;nO!l;nO!m;nO!o;rO!q;sO!t!eO$P!hO$TfO's)RO'uTO'xUO(QVO(_[O(l=]O~Oz)UO!h#uO~O!V$^O^$ja'j$ja'h$ja!g$ja!S$ja!X$ja%`$ja!a$ja~O#o)YO~P!#]Oy)]O!a)[O!X$WX$S$WX$V$WX$X$WX$`$WX~O!a)[O!X(iX$S(iX$V(iX$X(iX$`(iX~Oy)]O~P!*kOy)]O!X(iX$S(iX$V(iX$X(iX$`(iX~O!X)_O$S)cO$V)^O$X)^O$`)dO~O!U)gO~P!'RO$V$dO$X$cO$`)kO~Og$rXy$rX|$rX!f$rX(g$rX(h$rX~OdfXd$rXgfX!VfX#WfX~P!,aOl)mO~Oq)nO(R)oO(S)qO~Og)zOy)sO|)tO(g)vO(h)xO~Od)rO~P!-jOd){O~Oi%POk$qOl$pOm$pOs%QOu%ROw<XO|$xO!X$yO!c=cO!h$uO#b<_O$P%VO$l<ZO$n<]O$q%WO'uTO'xUO'|%OO(Q$rO~O!U*PO's)|O!g(mP~P!.XO#c*RO~O!h*SO~O!U*XO's*UO!S(nP~P!.XOk*eO|*]O![*cO!]*[O!^*[O!h*SO#S*dO%V*_O't!iO(T!jO~O!W*bO~P!0_O!f#tOg(PXy(PX|(PX(g(PX(h(PX!V(PX#W(PX~Od(PX#x(PX~P!1WOg*hO#W*gOd(OX!V(OX~O!V*iOd'}X~O's%|Od'}P~O!h*pO~O's(iO~O|%vO!U#fO!X%wO!x]O#a#iO#b#fO's%eO!g(aP~O!a#rO#c*tO~OP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO#k$PO#l$PO#m$`O#n$PO#p$QO#r$SO#t$UO#u$VO(QVO(`$WO(g#yO(h#zO~O^!ba!V!ba'j!ba'h!ba!S!ba!g!bao!ba!X!ba%`!ba!a!ba~P!3jOy#vOz#wO|#xO!f#tO!h#uO(QVOP!naX!nak!na!V!na!e!na!l!na#f!na#g!na#h!na#i!na#j!na#k!na#l!na#m!na#n!na#p!na#r!na#t!na#u!na(`!na(g!na(h!na~O^!na'j!na'h!na!S!na!g!nao!na!X!na%`!na!a!na~P!6TOy#vOz#wO|#xO!f#tO!h#uO(QVOP!paX!pak!pa!V!pa!e!pa!l!pa#f!pa#g!pa#h!pa#i!pa#j!pa#k!pa#l!pa#m!pa#n!pa#p!pa#r!pa#t!pa#u!pa(`!pa(g!pa(h!pa~O^!pa'j!pa'h!pa!S!pa!g!pao!pa!X!pa%`!pa!a!pa~P!8nOg*|O!X'QO%`*{O'|%OO~O!a+OO!X'{X^'{X!V'{X'j'{X~O!h%ZO'|%OO~O!h%ZO's%eO'|%OO~O!a#rO#c(kO~O%a+[O's+WO'uTO'xUO!W(uP~O!V+]O](tX~O(T(qO~OX+aO~O]+bO~O!X%nO's%eO't!iO](tP~O|%vO!U+fO!V(PO!X%wO's%eO!S(dP~Ol&|O|+hO!U+gO'uTO'xUO(T(qO~O!W(fP~P!>RO!V+iO^(qX'j(qX~O#W+mO'|%OO~Og+pO!X$yO'|%OO~O!X+rO~Oy+tO!XXO~O!t+yO~Ob,OO~O's#jO!W(sP~Ob%lO~O%a!OO's%|O~P<bOX,UO],TO~OPYOQYOaxObwOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!csO!hZO!kYO!lYO!mYO!otO!quO!tvO!x]O$TfO%_{O'uTO'xUO(QVO(_[O(liO~O!X!cO$P!hO's!bO~P!@fO],TO^%^O'j%^O~O^,YO#o,[O%c,[O%d,[O~P%QO!h&aO~O&S,aO~O!X,cO~O&e,eO&g,fOP&baQ&baV&ba^&baa&bab&bai&bak&bal&bam&bas&bau&baw&ba|&ba!Q&ba!R&ba!X&ba!c&ba!h&ba!k&ba!l&ba!m&ba!o&ba!q&ba!t&ba!x&ba#o&ba$P&ba$T&ba%_&ba%a&ba%c&ba%d&ba%g&ba%i&ba%l&ba%m&ba%o&ba%|&ba&S&ba&U&ba&W&ba&Y&ba&]&ba&c&ba&i&ba&k&ba&m&ba&o&ba&q&ba'h&ba's&ba'u&ba'x&ba(Q&ba(_&ba(l&ba!W&ba&Z&ba_&ba&`&ba~O's,kO~O!V{X!V!_X!W{X!W!_X!a{X!a!_X!h!_X#W{X'|!_X~O!a,pO#W,oO!V#`X!V(YX!W#`X!W(YX!a(YX!h(YX'|(YX~O!a,rO!h%ZO'|%OO!V!ZX!W!ZX~Ol!kO|!lO'uTO'xUO(T!jO~OP;nOQ;nOa=_Ob!fOikOk;nOlkOmkOskOu;nOw;nO|WO!QkO!RkO!X!cO!c;qO!hZO!k;nO!l;nO!m;nO!o;rO!q;sO!t!eO$P!hO$TfO'uTO'xUO(QVO(_[O(l=]O~O's<dO~P!I{O!V,vO!W(XX~O!W,xO~O!a,pO#W,oO!V#`X!W#`X~O!V,yO!W(fX~O!W,{O~O!],|O!^,|O't!iO~P!IjO!W-PO~P'TOg-SO!X'QO~O!S-XO~Ol!wa![!wa!]!wa!^!wa!|!wa!}!wa#O!wa#P!wa#S!wa#T!wa't!wa'u!wa'x!wa(T!wa(_!wa~PNXO^%^O!a#rO!h%ZO!l-^O#W-[O'j%^O'|%OO(`'dO~O!]-`O!^-`O't!iO~PBtO![-bO!]-`O!^-`O#S-cO#T-cO't!iO~PBtO![-bO!]-`O!^-`O#P-dO#S-cO#T-cO't!iO~PBtO![-bO!]-`O!^-`O!}-eO#O-eO#P-dO#S-cO#T-cO't!iO~PBtO^%^O#W-[O'j%^O~O^%^O!a#rO#W-[O'j%^O~O^%^O!a#rO!l-^O#W-[O'j%^O(`'dO~O'o'lO'p'lO'q-jO~Oo-kO~O!S&|a!V&|a~P!3jO!U-oO!S&|X!V&|X~P%QO!V'xO!S(Wa~O!S(Wa~PF_O!V(PO!S(da~O|%vO!U-sO!X%wO's%eO!S'SX!V'SX~O!V(]O!g(aa~O|%vO!X%wO#b-vO's%eO~O#W-xO!V(ba!g(ba^(ba'j(ba~O!a#rO~P#&hO|%vO!U-{O!X%wO!x]O#a-}O#b-{O's%eO!V'UX!g'UX~Oz.RO!h#uO~Og.UO!X'QO%`.TO'|%OO~O^#Zi!V#Zi'j#Zi'h#Zi!S#Zi!g#Zio#Zi!X#Zi%`#Zi!a#Zi~P!3jOg=iOy)sO|)tO(g)vO(h)xO~O#c#Va^#Va#W#Va'j#Va!V#Va!g#Va!X#Va!S#Va~P#(yO#c(PXP(PXX(PX^(PXk(PXz(PX!e(PX!h(PX!l(PX#f(PX#g(PX#h(PX#i(PX#j(PX#k(PX#l(PX#m(PX#n(PX#p(PX#r(PX#t(PX#u(PX'j(PX(Q(PX(`(PX!g(PX!S(PX'h(PXo(PX!X(PX%`(PX!a(PX~P!1WO!V._Od(ZX~P!-jOd.aO~O!V.bO!g([X~P!3jO!g.eO~O!S.gO~OP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO(QVOX#ei^#eik#ei!V#ei!e#ei#g#ei#h#ei#i#ei#j#ei#k#ei#l#ei#m#ei#n#ei#p#ei#r#ei#t#ei#u#ei'j#ei(`#ei(g#ei(h#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~O#f#ei~P#,uO#f#{O~P#,uOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O(QVOX#ei^#ei!V#ei!e#ei#j#ei#k#ei#l#ei#m#ei#n#ei#p#ei#r#ei#t#ei#u#ei'j#ei(`#ei(g#ei(h#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~Ok#ei~P#/gOk#}O~P#/gOP$YOk#}Oy#vOz#wO|#xO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO(QVO^#ei!V#ei#p#ei#r#ei#t#ei#u#ei'j#ei(`#ei(g#ei(h#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~OX#ei!e#ei#k#ei#l#ei#m#ei#n#ei~P#2XOX$aO!e$PO#k$PO#l$PO#m$`O#n$PO~P#2XOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO#k$PO#l$PO#m$`O#n$PO#p$QO(QVO^#ei!V#ei#r#ei#t#ei#u#ei'j#ei(`#ei(h#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~O(g#ei~P#5YO(g#yO~P#5YOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO#k$PO#l$PO#m$`O#n$PO#p$QO#r$SO(QVO(g#yO^#ei!V#ei#t#ei#u#ei'j#ei(`#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~O(h#ei~P#7zO(h#zO~P#7zOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#f#{O#g#|O#h#|O#i#|O#j$OO#k$PO#l$PO#m$`O#n$PO#p$QO#r$SO#t$UO(QVO(g#yO(h#zO~O^#ei!V#ei#u#ei'j#ei(`#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~P#:lOPYXXYXkYXyYXzYX|YX!eYX!fYX!hYX!lYX#WYX#ccX#fYX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#pYX#rYX#tYX#uYX#zYX(QYX(`YX(gYX(hYX!VYX!WYX~O#xYX~P#=VOP$YOX<VOk;yOy#vOz#wO|#xO!e;{O!f#tO!h#uO!l$YO#f;wO#g;xO#h;xO#i;xO#j;zO#k;{O#l;{O#m<UO#n;{O#p;|O#r<OO#t<QO#u<RO(QVO(`$WO(g#yO(h#zO~O#x.iO~P#?dOP(VXX(VXk(VXy(VXz(VX|(VX!e(VX!f(VX!h(VX!l(VX#f(VX#g(VX#h(VX#i(VX#j(VX#k(VX#l(VX#m(VX#p(VX#r(VX#t(VX#u(VX(Q(VX(`(VX(g(VX(h(VX!V(VX~O#W<WO#z<WO#n(VX#x(VX!W(VX~P#AbO^'Xa!V'Xa'j'Xa'h'Xa!g'Xa!S'Xao'Xa!X'Xa%`'Xa!a'Xa~P!3jOP#eiX#ei^#eik#eiz#ei!V#ei!e#ei!f#ei!h#ei!l#ei#f#ei#g#ei#h#ei#i#ei#j#ei#k#ei#l#ei#m#ei#n#ei#p#ei#r#ei#t#ei#u#ei'j#ei(Q#ei(`#ei'h#ei!S#ei!g#eio#ei!X#ei%`#ei!a#ei~P#(yO^#yi!V#yi'j#yi'h#yi!S#yi!g#yio#yi!X#yi%`#yi!a#yi~P!3jO$V.nO$X.nO~O$V.oO$X.oO~O!a)[O#W.pO!X$]X$S$]X$V$]X$X$]X$`$]X~O!U.qO~O!X)_O$S.sO$V)^O$X)^O$`.tO~O!V<SO!W(UX~P#?dO!W.uO~O!a)[O$`(iX~O$`.wO~Oq)nO(R)oO(S.zO~Ol.}O!S/OO'uTO'xUO~O!VcX!acX!gcX!g$rX(`cX~P!,aO!g/UO~P#(yO!V/VO!a#rO(`'dO!g(mX~O!g/[O~O!U*PO's%eO!g(mP~O#c/^O~O!S$rX!V$rX!a$yX~P!,aO!V/_O!S(nX~P#(yO!a/aO~O!S/cO~Ok/gO!a#rO!h%ZO'|%OO(`'dO~O's/iO~O!a+OO~O^%^O!V/mO'j%^O~O!W/oO~P!0_O!]/pO!^/pO't!iO(T!jO~O|/rO(T!jO~O#S/sO~O's%|Od'^X!V'^X~O!V*iOd'}a~Od/xO~Oy/yOz/yO|/zOgva(gva(hva!Vva#Wva~Odva#xva~P#M{Oy)sO|)tOg$ka(g$ka(h$ka!V$ka#W$ka~Od$ka#x$ka~P#NqOy)sO|)tOg$ma(g$ma(h$ma!V$ma#W$ma~Od$ma#x$ma~P$ dO#c/|O~Od${a!V${a#W${a#x${a~P!-jO#c0PO~Oy#vOz#wO|#xO!f#tO!h#uO(QVOP!niX!nik!ni!V!ni!e!ni!l!ni#f!ni#g!ni#h!ni#i!ni#j!ni#k!ni#l!ni#m!ni#n!ni#p!ni#r!ni#t!ni#u!ni(`!ni(g!ni(h!ni~O^!ni'j!ni'h!ni!S!ni!g!nio!ni!X!ni%`!ni!a!ni~P$!qOg.UO!X'QO%`.TO~Oi0WO's0VO~P!.[O!a+OO!X'{a^'{a!V'{a'j'{a~O#c0^O~OXYX!VcX!WcX~O!V0_O!W(uX~O!W0aO~OX0bO~O's+WO'uTO'xUO~O!X%nO's%eO]'fX!V'fX~O!V+]O](ta~O!g0gO~P!3jOX0jO~O]0kO~O!V+iO^(qa'j(qa~O#W0qO~Og0tO!X$yO~O(T(qO!W(rP~Og0}O!X0zO%`0|O'|%OO~OX1XO!V1VO!W(sX~O!W1YO~O]1[O^%^O'j%^O~O's#jO'uTO'xUO~O#W$bO#n1_O#z$bO&Q1`O^(VX~P#AbO#W$bO#n1_O&Q1`O~O^1aO~P%QO^1cO~O&Z1gOP&XiQ&XiV&Xi^&Xia&Xib&Xii&Xik&Xil&Xim&Xis&Xiu&Xiw&Xi|&Xi!Q&Xi!R&Xi!X&Xi!c&Xi!h&Xi!k&Xi!l&Xi!m&Xi!o&Xi!q&Xi!t&Xi!x&Xi#o&Xi$P&Xi$T&Xi%_&Xi%a&Xi%c&Xi%d&Xi%g&Xi%i&Xi%l&Xi%m&Xi%o&Xi%|&Xi&S&Xi&U&Xi&W&Xi&Y&Xi&]&Xi&c&Xi&i&Xi&k&Xi&m&Xi&o&Xi&q&Xi'h&Xi's&Xi'u&Xi'x&Xi(Q&Xi(_&Xi(l&Xi!W&Xi_&Xi&`&Xi~O_1mO!W1kO&`1lO~P`O!XXO!h1oO~O&g,fOP&biQ&biV&bi^&bia&bib&bii&bik&bil&bim&bis&biu&biw&bi|&bi!Q&bi!R&bi!X&bi!c&bi!h&bi!k&bi!l&bi!m&bi!o&bi!q&bi!t&bi!x&bi#o&bi$P&bi$T&bi%_&bi%a&bi%c&bi%d&bi%g&bi%i&bi%l&bi%m&bi%o&bi%|&bi&S&bi&U&bi&W&bi&Y&bi&]&bi&c&bi&i&bi&k&bi&m&bi&o&bi&q&bi'h&bi's&bi'u&bi'x&bi(Q&bi(_&bi(l&bi!W&bi&Z&bi_&bi&`&bi~O!S1uO~O!V!Za!W!Za~P#?dOl!kO|!lO!U1{O(T!jO!V&}X!W&}X~P?cO!V,vO!W(Xa~O!V'TX!W'TX~P!>RO!V,yO!W(fa~O!W2SO~P'TO^%^O#W2]O'j%^O~O^%^O!a#rO#W2]O'j%^O~O^%^O!a#rO!h%ZO!l2aO#W2]O'j%^O'|%OO(`'dO~O!]2bO!^2bO't!iO~PBtO![2eO!]2bO!^2bO#S2fO#T2fO't!iO~PBtO![2eO!]2bO!^2bO#P2gO#S2fO#T2fO't!iO~PBtO^%^O!a#rO!l2aO#W2]O'j%^O(`'dO~O^%^O'j%^O~P!3jO!V$^Oo$ja~O!S&|i!V&|i~P!3jO!V'xO!S(Wi~O!V(PO!S(di~O!S(ei!V(ei~P!3jO!V(]O!g(ai~O!V(bi!g(bi^(bi'j(bi~P!3jO#W2kO!V(bi!g(bi^(bi'j(bi~O|%vO!X%wO!x]O#a2nO#b2mO's%eO~O|%vO!X%wO#b2mO's%eO~Og2uO!X'QO%`2tO~Og2uO!X'QO%`2tO'|%OO~O#cvaPvaXva^vakva!eva!fva!hva!lva#fva#gva#hva#iva#jva#kva#lva#mva#nva#pva#rva#tva#uva'jva(Qva(`va!gva!Sva'hvaova!Xva%`va!ava~P#M{O#c$kaP$kaX$ka^$kak$kaz$ka!e$ka!f$ka!h$ka!l$ka#f$ka#g$ka#h$ka#i$ka#j$ka#k$ka#l$ka#m$ka#n$ka#p$ka#r$ka#t$ka#u$ka'j$ka(Q$ka(`$ka!g$ka!S$ka'h$kao$ka!X$ka%`$ka!a$ka~P#NqO#c$maP$maX$ma^$mak$maz$ma!e$ma!f$ma!h$ma!l$ma#f$ma#g$ma#h$ma#i$ma#j$ma#k$ma#l$ma#m$ma#n$ma#p$ma#r$ma#t$ma#u$ma'j$ma(Q$ma(`$ma!g$ma!S$ma'h$mao$ma!X$ma%`$ma!a$ma~P$ dO#c${aP${aX${a^${ak${az${a!V${a!e${a!f${a!h${a!l${a#f${a#g${a#h${a#i${a#j${a#k${a#l${a#m${a#n${a#p${a#r${a#t${a#u${a'j${a(Q${a(`${a!g${a!S${a'h${a#W${ao${a!X${a%`${a!a${a~P#(yO^#Zq!V#Zq'j#Zq'h#Zq!S#Zq!g#Zqo#Zq!X#Zq%`#Zq!a#Zq~P!3jOd'OX!V'OX~P!$uO!V._Od(Za~O!U2}O!V'PX!g'PX~P%QO!V.bO!g([a~O!V.bO!g([a~P!3jO!S3QO~O#x!ja!W!ja~PI{O#x!ba!V!ba!W!ba~P#?dO#x!na!W!na~P!6TO#x!pa!W!pa~P!8nO!X3dO$TfO$^3eO~O!W3iO~Oo3jO~P#(yO^$gq!V$gq'j$gq'h$gq!S$gq!g$gqo$gq!X$gq%`$gq!a$gq~P!3jO!S3kO~Ol.}O'uTO'xUO~Oy)sO|)tO(h)xOg%Wi(g%Wi!V%Wi#W%Wi~Od%Wi#x%Wi~P$HbOy)sO|)tOg%Yi(g%Yi(h%Yi!V%Yi#W%Yi~Od%Yi#x%Yi~P$ITO(`$WO~P#(yO!U3nO's%eO!V'YX!g'YX~O!V/VO!g(ma~O!V/VO!a#rO!g(ma~O!V/VO!a#rO(`'dO!g(ma~Od$ti!V$ti#W$ti#x$ti~P!-jO!U3vO's*UO!S'[X!V'[X~P!.XO!V/_O!S(na~O!V/_O!S(na~P#(yO!a#rO~O!a#rO#n4OO~Ok4RO!a#rO(`'dO~Od(Oi!V(Oi~P!-jO#W4UOd(Oi!V(Oi~P!-jO!g4XO~O^$hq!V$hq'j$hq'h$hq!S$hq!g$hqo$hq!X$hq%`$hq!a$hq~P!3jO!V4]O!X(oX~P#(yO!f#tO~P3zO!X$rX%TYX^$rX!V$rX'j$rX~P!,aO%T4_OghXyhX|hX!XhX(ghX(hhX^hX!VhX'jhX~O%T4_O~O%a4fO's+WO'uTO'xUO!V'eX!W'eX~O!V0_O!W(ua~OX4jO~O]4kO~O!S4oO~O^%^O'j%^O~P#(yO!X$yO~P#(yO!V4tO#W4vO!W(rX~O!W4wO~Ol!kO|4yO![5WO!]4}O!^4}O!x;oO!|5VO!}5UO#O5UO#P5TO#S5SO#T!wO't!iO'uTO'xUO(T!jO(_!nO~O!W5RO~P%#XOg5]O!X0zO%`5[O~Og5]O!X0zO%`5[O'|%OO~O's#jO!V'dX!W'dX~O!V1VO!W(sa~O'uTO'xUO(T5fO~O]5jO~O!g5mO~P%QO^5oO~O^5oO~P%QO#n5qO&Q5rO~PMPO_1mO!W5vO&`1lO~P`O!a5xO~O!a5zO!V(Yi!W(Yi!a(Yi!h(Yi'|(Yi~O!V#`i!W#`i~P#?dO#W5{O!V#`i!W#`i~O!V!Zi!W!Zi~P#?dO^%^O#W6UO'j%^O~O^%^O!a#rO#W6UO'j%^O~O^%^O!a#rO!l6ZO#W6UO'j%^O(`'dO~O!h%ZO'|%OO~P%(fO!]6[O!^6[O't!iO~PBtO![6_O!]6[O!^6[O#S6`O#T6`O't!iO~PBtO!V(]O!g(aq~O!V(bq!g(bq^(bq'j(bq~P!3jO|%vO!X%wO#b6dO's%eO~O!X'QO%`6gO~Og6jO!X'QO%`6gO~O#c%WiP%WiX%Wi^%Wik%Wiz%Wi!e%Wi!f%Wi!h%Wi!l%Wi#f%Wi#g%Wi#h%Wi#i%Wi#j%Wi#k%Wi#l%Wi#m%Wi#n%Wi#p%Wi#r%Wi#t%Wi#u%Wi'j%Wi(Q%Wi(`%Wi!g%Wi!S%Wi'h%Wio%Wi!X%Wi%`%Wi!a%Wi~P$HbO#c%YiP%YiX%Yi^%Yik%Yiz%Yi!e%Yi!f%Yi!h%Yi!l%Yi#f%Yi#g%Yi#h%Yi#i%Yi#j%Yi#k%Yi#l%Yi#m%Yi#n%Yi#p%Yi#r%Yi#t%Yi#u%Yi'j%Yi(Q%Yi(`%Yi!g%Yi!S%Yi'h%Yio%Yi!X%Yi%`%Yi!a%Yi~P$ITO#c$tiP$tiX$ti^$tik$tiz$ti!V$ti!e$ti!f$ti!h$ti!l$ti#f$ti#g$ti#h$ti#i$ti#j$ti#k$ti#l$ti#m$ti#n$ti#p$ti#r$ti#t$ti#u$ti'j$ti(Q$ti(`$ti!g$ti!S$ti'h$ti#W$tio$ti!X$ti%`$ti!a$ti~P#(yOd'Oa!V'Oa~P!-jO!V'Pa!g'Pa~P!3jO!V.bO!g([i~O#x#Zi!V#Zi!W#Zi~P#?dOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO(QVOX#eik#ei!e#ei#g#ei#h#ei#i#ei#j#ei#k#ei#l#ei#m#ei#n#ei#p#ei#r#ei#t#ei#u#ei#x#ei(`#ei(g#ei(h#ei!V#ei!W#ei~O#f#ei~P%2xO#f;wO~P%2xOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO#f;wO#g;xO#h;xO#i;xO(QVOX#ei!e#ei#j#ei#k#ei#l#ei#m#ei#n#ei#p#ei#r#ei#t#ei#u#ei#x#ei(`#ei(g#ei(h#ei!V#ei!W#ei~Ok#ei~P%5TOk;yO~P%5TOP$YOk;yOy#vOz#wO|#xO!f#tO!h#uO!l$YO#f;wO#g;xO#h;xO#i;xO#j;zO(QVO#p#ei#r#ei#t#ei#u#ei#x#ei(`#ei(g#ei(h#ei!V#ei!W#ei~OX#ei!e#ei#k#ei#l#ei#m#ei#n#ei~P%7`OX<VO!e;{O#k;{O#l;{O#m<UO#n;{O~P%7`OP$YOX<VOk;yOy#vOz#wO|#xO!e;{O!f#tO!h#uO!l$YO#f;wO#g;xO#h;xO#i;xO#j;zO#k;{O#l;{O#m<UO#n;{O#p;|O(QVO#r#ei#t#ei#u#ei#x#ei(`#ei(h#ei!V#ei!W#ei~O(g#ei~P%9zO(g#yO~P%9zOP$YOX<VOk;yOy#vOz#wO|#xO!e;{O!f#tO!h#uO!l$YO#f;wO#g;xO#h;xO#i;xO#j;zO#k;{O#l;{O#m<UO#n;{O#p;|O#r<OO(QVO(g#yO#t#ei#u#ei#x#ei(`#ei!V#ei!W#ei~O(h#ei~P%<VO(h#zO~P%<VOP$YOX<VOk;yOy#vOz#wO|#xO!e;{O!f#tO!h#uO!l$YO#f;wO#g;xO#h;xO#i;xO#j;zO#k;{O#l;{O#m<UO#n;{O#p;|O#r<OO#t<QO(QVO(g#yO(h#zO~O#u#ei#x#ei(`#ei!V#ei!W#ei~P%>bO^#vy!V#vy'j#vy'h#vy!S#vy!g#vyo#vy!X#vy%`#vy!a#vy~P!3jOg=jOy)sO|)tO(g)vO(h)xO~OP#eiX#eik#eiz#ei!e#ei!f#ei!h#ei!l#ei#f#ei#g#ei#h#ei#i#ei#j#ei#k#ei#l#ei#m#ei#n#ei#p#ei#r#ei#t#ei#u#ei#x#ei(Q#ei(`#ei!V#ei!W#ei~P%AYO!f#tOP(PXX(PXg(PXk(PXy(PXz(PX|(PX!e(PX!h(PX!l(PX#f(PX#g(PX#h(PX#i(PX#j(PX#k(PX#l(PX#m(PX#n(PX#p(PX#r(PX#t(PX#u(PX#x(PX(Q(PX(`(PX(g(PX(h(PX!V(PX!W(PX~O#x#yi!V#yi!W#yi~P#?dO#x!ni!W!ni~P$!qO!W6vO~O!V'Xa!W'Xa~P#?dO!a#rO(`'dO!V'Ya!g'Ya~O!V/VO!g(mi~O!V/VO!a#rO!g(mi~Od$tq!V$tq#W$tq#x$tq~P!-jO!S'[a!V'[a~P#(yO!a6}O~O!V/_O!S(ni~P#(yO!V/_O!S(ni~O!S7RO~O!a#rO#n7WO~Ok7XO!a#rO(`'dO~O!S7ZO~Od$vq!V$vq#W$vq#x$vq~P!-jO^$hy!V$hy'j$hy'h$hy!S$hy!g$hyo$hy!X$hy%`$hy!a$hy~P!3jO!V4]O!X(oa~O^#Zy!V#Zy'j#Zy'h#Zy!S#Zy!g#Zyo#Zy!X#Zy%`#Zy!a#Zy~P!3jOX7`O~O!V0_O!W(ui~O]7fO~O!a5zO~O(T(qO!V'aX!W'aX~O!V4tO!W(ra~O!h%ZO'|%OO^(YX!a(YX!l(YX#W(YX'j(YX(`(YX~O's7oO~P.[O!x;oO!|7rO!}7qO#O7qO#P7pO#S'bO#T'bO~PBtO^%^O!a#rO!l'hO#W'fO'j%^O(`'dO~O!W7vO~P%#XOl!kO'uTO'xUO(T!jO(_!nO~O|7wO~P%MdO![7{O!]7zO!^7zO#P7pO#S'bO#T'bO't!iO~PBtO![7{O!]7zO!^7zO!}7|O#O7|O#P7pO#S'bO#T'bO't!iO~PBtO!]7zO!^7zO't!iO(T!jO(_!nO~O!X0zO~O!X0zO%`8OO~Og8RO!X0zO%`8OO~OX8WO!V'da!W'da~O!V1VO!W(si~O!g8[O~O!g8]O~O!g8^O~O!g8^O~P%QO^8`O~O!a8cO~O!g8dO~O!V(ei!W(ei~P#?dO^%^O#W8lO'j%^O~O^%^O!a#rO#W8lO'j%^O~O^%^O!a#rO!l8pO#W8lO'j%^O(`'dO~O!h%ZO'|%OO~P&$QO!]8qO!^8qO't!iO~PBtO!V(]O!g(ay~O!V(by!g(by^(by'j(by~P!3jO!X'QO%`8uO~O#c$tqP$tqX$tq^$tqk$tqz$tq!V$tq!e$tq!f$tq!h$tq!l$tq#f$tq#g$tq#h$tq#i$tq#j$tq#k$tq#l$tq#m$tq#n$tq#p$tq#r$tq#t$tq#u$tq'j$tq(Q$tq(`$tq!g$tq!S$tq'h$tq#W$tqo$tq!X$tq%`$tq!a$tq~P#(yO#c$vqP$vqX$vq^$vqk$vqz$vq!V$vq!e$vq!f$vq!h$vq!l$vq#f$vq#g$vq#h$vq#i$vq#j$vq#k$vq#l$vq#m$vq#n$vq#p$vq#r$vq#t$vq#u$vq'j$vq(Q$vq(`$vq!g$vq!S$vq'h$vq#W$vqo$vq!X$vq%`$vq!a$vq~P#(yO!V'Pi!g'Pi~P!3jO#x#Zq!V#Zq!W#Zq~P#?dOy/yOz/yO|/zOPvaXvagvakva!eva!fva!hva!lva#fva#gva#hva#iva#jva#kva#lva#mva#nva#pva#rva#tva#uva#xva(Qva(`va(gva(hva!Vva!Wva~Oy)sO|)tOP$kaX$kag$kak$kaz$ka!e$ka!f$ka!h$ka!l$ka#f$ka#g$ka#h$ka#i$ka#j$ka#k$ka#l$ka#m$ka#n$ka#p$ka#r$ka#t$ka#u$ka#x$ka(Q$ka(`$ka(g$ka(h$ka!V$ka!W$ka~Oy)sO|)tOP$maX$mag$mak$maz$ma!e$ma!f$ma!h$ma!l$ma#f$ma#g$ma#h$ma#i$ma#j$ma#k$ma#l$ma#m$ma#n$ma#p$ma#r$ma#t$ma#u$ma#x$ma(Q$ma(`$ma(g$ma(h$ma!V$ma!W$ma~OP${aX${ak${az${a!e${a!f${a!h${a!l${a#f${a#g${a#h${a#i${a#j${a#k${a#l${a#m${a#n${a#p${a#r${a#t${a#u${a#x${a(Q${a(`${a!V${a!W${a~P%AYO#x$gq!V$gq!W$gq~P#?dO#x$hq!V$hq!W$hq~P#?dO!W9PO~O#x9QO~P!-jO!a#rO!V'Yi!g'Yi~O!a#rO(`'dO!V'Yi!g'Yi~O!V/VO!g(mq~O!S'[i!V'[i~P#(yO!V/_O!S(nq~O!S9WO~P#(yO!S9WO~Od(Oy!V(Oy~P!-jO!V'_a!X'_a~P#(yO!X%Sq^%Sq!V%Sq'j%Sq~P#(yOX9]O~O!V0_O!W(uq~O#W9aO!V'aa!W'aa~O!V4tO!W(ri~P#?dOPYXXYXkYXyYXzYX|YX!SYX!VYX!eYX!fYX!hYX!lYX#WYX#ccX#fYX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#pYX#rYX#tYX#uYX#zYX(QYX(`YX(gYX(hYX~O!a%QX#n%QX~P&6lO#S-cO#T-cO~PBtO#P9eO#S-cO#T-cO~PBtO!}9fO#O9fO#P9eO#S-cO#T-cO~PBtO!]9iO!^9iO't!iO(T!jO(_!nO~O![9lO!]9iO!^9iO#P9eO#S-cO#T-cO't!iO~PBtO!X0zO%`9oO~O'uTO'xUO(T9tO~O!V1VO!W(sq~O!g9wO~O!g9wO~P%QO!g9yO~O!g9zO~O#W9|O!V#`y!W#`y~O!V#`y!W#`y~P#?dO^%^O#W:QO'j%^O~O^%^O!a#rO#W:QO'j%^O~O^%^O!a#rO!l:UO#W:QO'j%^O(`'dO~O!X'QO%`:XO~O#x#vy!V#vy!W#vy~P#?dOP$tiX$tik$tiz$ti!e$ti!f$ti!h$ti!l$ti#f$ti#g$ti#h$ti#i$ti#j$ti#k$ti#l$ti#m$ti#n$ti#p$ti#r$ti#t$ti#u$ti#x$ti(Q$ti(`$ti!V$ti!W$ti~P%AYOy)sO|)tO(h)xOP%WiX%Wig%Wik%Wiz%Wi!e%Wi!f%Wi!h%Wi!l%Wi#f%Wi#g%Wi#h%Wi#i%Wi#j%Wi#k%Wi#l%Wi#m%Wi#n%Wi#p%Wi#r%Wi#t%Wi#u%Wi#x%Wi(Q%Wi(`%Wi(g%Wi!V%Wi!W%Wi~Oy)sO|)tOP%YiX%Yig%Yik%Yiz%Yi!e%Yi!f%Yi!h%Yi!l%Yi#f%Yi#g%Yi#h%Yi#i%Yi#j%Yi#k%Yi#l%Yi#m%Yi#n%Yi#p%Yi#r%Yi#t%Yi#u%Yi#x%Yi(Q%Yi(`%Yi(g%Yi(h%Yi!V%Yi!W%Yi~O#x$hy!V$hy!W$hy~P#?dO#x#Zy!V#Zy!W#Zy~P#?dO!a#rO!V'Yq!g'Yq~O!V/VO!g(my~O!S'[q!V'[q~P#(yO!S:`O~P#(yO!V0_O!W(uy~O!V4tO!W(rq~O#S2fO#T2fO~PBtO#P:gO#S2fO#T2fO~PBtO!]:kO!^:kO't!iO(T!jO(_!nO~O!X0zO%`:nO~O!g:qO~O^%^O#W:vO'j%^O~O^%^O!a#rO#W:vO'j%^O~O!X'QO%`:{O~OP$tqX$tqk$tqz$tq!e$tq!f$tq!h$tq!l$tq#f$tq#g$tq#h$tq#i$tq#j$tq#k$tq#l$tq#m$tq#n$tq#p$tq#r$tq#t$tq#u$tq#x$tq(Q$tq(`$tq!V$tq!W$tq~P%AYOP$vqX$vqk$vqz$vq!e$vq!f$vq!h$vq!l$vq#f$vq#g$vq#h$vq#i$vq#j$vq#k$vq#l$vq#m$vq#n$vq#p$vq#r$vq#t$vq#u$vq#x$vq(Q$vq(`$vq!V$vq!W$vq~P%AYOd%[!Z!V%[!Z#W%[!Z#x%[!Z~P!-jO!V'aq!W'aq~P#?dO#S6`O#T6`O~PBtO!V#`!Z!W#`!Z~P#?dO^%^O#W;ZO'j%^O~O#c%[!ZP%[!ZX%[!Z^%[!Zk%[!Zz%[!Z!V%[!Z!e%[!Z!f%[!Z!h%[!Z!l%[!Z#f%[!Z#g%[!Z#h%[!Z#i%[!Z#j%[!Z#k%[!Z#l%[!Z#m%[!Z#n%[!Z#p%[!Z#r%[!Z#t%[!Z#u%[!Z'j%[!Z(Q%[!Z(`%[!Z!g%[!Z!S%[!Z'h%[!Z#W%[!Zo%[!Z!X%[!Z%`%[!Z!a%[!Z~P#(yOP%[!ZX%[!Zk%[!Zz%[!Z!e%[!Z!f%[!Z!h%[!Z!l%[!Z#f%[!Z#g%[!Z#h%[!Z#i%[!Z#j%[!Z#k%[!Z#l%[!Z#m%[!Z#n%[!Z#p%[!Z#r%[!Z#t%[!Z#u%[!Z#x%[!Z(Q%[!Z(`%[!Z!V%[!Z!W%[!Z~P%AYOo(UX~P1dO't!iO~P!'RO!ScX!VcX#WcX~P&6lOPYXXYXkYXyYXzYX|YX!VYX!VcX!eYX!fYX!hYX!lYX#WYX#WcX#ccX#fYX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#pYX#rYX#tYX#uYX#zYX(QYX(`YX(gYX(hYX~O!acX!gYX!gcX(`cX~P'!sOP;nOQ;nOa=_Ob!fOikOk;nOlkOmkOskOu;nOw;nO|WO!QkO!RkO!XXO!c;qO!hZO!k;nO!l;nO!m;nO!o;rO!q;sO!t!eO$P!hO$TfO's)RO'uTO'xUO(QVO(_[O(l=]O~O!V<SO!W$ja~Oi%POk$qOl$pOm$pOs%QOu%ROw<YO|$xO!X$yO!c=dO!h$uO#b<`O$P%VO$l<[O$n<^O$q%WO's(iO'uTO'xUO'|%OO(Q$rO~O#o)YO~P''iO!WYX!WcX~P'!sO#c;vO~O!a#rO#c;vO~O#W<WO~O#n;{O~O#W<bO!V(eX!W(eX~O#W<WO!V(cX!W(cX~O#c<cO~Od<eO~P!-jO#c<jO~O#c<kO~O!a#rO#c<lO~O!a#rO#c<cO~O#x<mO~P#?dO#c<nO~O#c<oO~O#c<pO~O#c<qO~O#c<rO~O#c<sO~O#x<tO~P!-jO#x<uO~P!-jO$T~!f!|#O#P#S#a#b#m(l$l$n$q%T%_%`%a%g%i%l%m%o%q~'nR$T(l#g!R'l't#hl#f#iky'm(T'm's$V$X$V~",
        goto: "$/X(yPPPP(zP(}P)_P+a/fPPPP6iPP7OP<|@mPAQPAQPPPAQPBpPAQPAQPAQPBtPPByPCdPH`PPPHdPPPPHdKfPPPKlMlPHdP!!SPPPP!$eHdPPPHdPHdP!&vHdP!*]!+_!+dP!,U!,Y!,UPPPP!/f!1kPP!1t!3OP!+_HdHd!6b!9m!>v!>v!BnPPP!BuHdPPPPPPPPPPP!FTP!GiPPHd!HyPHdPHdHdHdHdPHd!J`PP!MiP#!nP#!r#!|##Q##QP!MfP##U##UP#&ZP#&_HdHd#&e#)iAQPAQPAQAQP#*sAQAQ#,mAQ#.zAQ#0nAQAQ#1[#3W#3W#3[#3d#3W#3lP#3WPAQ#4hAQ#5pAQAQ6iPPP#6{PP#7e#7eP#7eP#7z#7ePP#8QP#7wP#7w#8d!1p#7w#9O#9U6f(}#9X(}P#9`#9`#9`P(}P(}P(}P(}PP(}P#9f#9iP#9i(}P#9mP#9pP(}P(}P(}P(}P(}P(}(}PP#9v#9|#:W#:^#:d#:j#:p#;O#;U#;[#;f#;l#<h#<w#<}#=a#=g#=m#={#>b#?r#@Q#@W#@^#@d#@j#@t#@z#AQ#A[#An#AtPPPPPPPPPP#AzPPPPPPP#Bn#FYP#Gu#G|#HUPPPP#L`$ U$'t$'w$'z$)w$)z$)}$*UPP$*[$*`$+X$,X$,]$,qPP$,u$,{$-PP$-S$-W$-Z$.P$.g$.l$.o$.r$.x$.{$/P$/TR!yRmpOXr!X#a%]&d&f&g&i,^,c1g1jU!pQ'Q-OQ%ctQ%kwQ%rzQ&[!TS&x!c,vQ'W!f[']!m!r!s!t!u!vS*[$y*aQ+U%lQ+c%tQ+}&UQ,|'PQ-W'XW-`'^'_'`'aQ/p*cQ1U,OU2b-b-d-eS4}0z5QS6[2e2gU7z5U5V5WQ8q6_S9i7{7|Q:k9lR<a;r%QdOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'f'v'x(O(Y(k(o(s)r*t+h,Y,^,c-S-[-o-x.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2}4y5]5o5q5r6U7w8R8`8l:Q:v;ZS#m];o!r)T$X$j&y)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`Q*l%SQ+Z%nQ,P&XQ,W&aQ.X<XQ0T*|Q0X+OQ0d+[Q1^,UQ2q.UQ4e0_Q5d1VQ6i2uQ6o<YQ7b4fR8x6j'OkOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`#S!kQ!m!p!r!s!t!u!v!w&x'P'Q']'^'_'`'a'b,v,|-O-`-b-c-d-e0z2b2e2f2g4z5Q5S5T5U5V6[6_6`7p7q7r7|8q9e9f:g$Y$pi#r#t$`$a$u$x%T%U%Y)n)w)y)z*R*X*g*h*{+O+m+p.T._/^/_/a/|0q0t0|2t3l3v4O4U4]4_5[6g6}7W8O8u9Q9o:X:n:{<U<V<Z<[<]<^<_<`<f<g<h<i<j<k<n<o<p<q<t<u=]=e=f=i=jQ%uzQ&v!cS&|%w,yQ+Z%nS.})t/PQ/{*pQ0d+[Q0i+bQ1],TQ1^,UQ4e0_Q4n0kQ5g1XQ5h1[Q7b4fQ7e4kQ8Z5jQ9`7fR9u8WpmOXr!T!X#a%]&Z&d&f&g&i,^,c1g1jR,R&]&x`OPXYrstux!X!^!g!l#P#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u'S'f'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=_=`[#YWZ#T#W&y'vQ%fvQ%jwS%oz%t!U%x|}#d#f#i%Z%v(P(W(X(]+f+g+i,[,p-s-v-z-{-}1o2m2n5z6dQ&Q!RQ'T!eQ'V!fQ(d#oS*O$u*SS+T%k%lQ+X%nQ+x&SQ+|&US-V'W'XQ.W(eQ/Z*PQ0]+UQ0c+[Q0e+]Q0h+aQ1P+yS1T+},OQ2X-WQ3m/VQ4d0_Q4h0bQ4m0jQ5c1UQ6z3nQ7a4fQ7d4jQ9[7`R:b9]v$wi#t%T%U%Y)w)y*R*g*h._/^/|3l4U9Q=]=e=f!`%hw!f!o%j%k%l&w'V'W'X'['i*Z+T+U,s-V-W-_-a/h0]2Q2X2`2d4Q6Y6^8o:TQ*}%fQ+n%}Q+q&OQ+{&UQ.V(dQ1O+xU1S+|+},OQ2v.WQ5^1PS5b1T1US7n4x4|Q8V5cU9g7s7x7yU:i9h9j9kQ;R:jQ;a;S!z=a#r$`$a$u$x)n)z*X*{+O+m+p.T/_/a0q0t0|2t3v4O4]4_5[6g6}7W8O8u9o:X:n:{<Z<]<_<f<h<j<n<p<t=i=jg=b<U<V<[<^<`<g<i<k<o<q<uW$|i%O*i=]S%}!O&ZQ&O!PQ&P!QR+l%{$Z${i#r#t$`$a$u$x%T%U%Y)n)w)y)z*R*X*g*h*{+O+m+p.T._/^/_/a/|0q0t0|2t3l3v4O4U4]4_5[6g6}7W8O8u9Q9o:X:n:{<U<V<Z<[<]<^<_<`<f<g<h<i<j<k<n<o<p<q<t<u=]=e=f=i=jT)o$r)pV*m%S<X<YU&|!c%w,yS(r#v#wQ+`%qS.P(`(aQ0u+rQ4V/yR7j4t'OkOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`$o$]c#V#b%a%b%d'u'{(g(n(v(w(x(y(z({(|(})O)P)Q)S)V)Z)e*y+_,t-h-m-r-w.^.d.h.j.k.l.{/}1v1y2Z2j2|3R3S3T3U3V3W3X3Y3Z3[3]3^3_3b3c3h4Z4b5}6T6b6m6n6s6t7l8f8j8y8}9O:O:d:r:t;X;d;p=ST#QV#R'PkOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`Q&z!cR1|,v!z!kQ!c!m!p!r!s!t!u!v!w&x'P'Q']'^'_'`'a'b,v,|-O-`-b-c-d-e2b2e2f2g4z5S5T6[6_6`7p7q7r8q9e9f:gS*Z$y*aS/h*[*cQ/q*dQ0w+tQ4Q/pQ4T/sS4x0z5QS7s4}5WS7x5U5VS9h7z7{Q9j7|S:j9i9lR;S:klpOXr!X#a%]&d&f&g&i,^,c1g1jQ&k![Q'j!tS(f#q;vQ+R%iQ+v&QQ+w&RQ-T'UQ-g'cS.](k<cS0O*t<lQ0Z+SQ0y+uQ1n,eQ1p,fQ1x,qQ2V-UQ2Y-YS4[0P<rQ4`0[S4c0^<sQ5|1zQ6Q2WQ6V2_Q7_4aQ8g6OQ8h6RQ8k6WQ9{8dQ:P8mQ:u:RR;Y:w$j$[c#V#b%b%d'u'{(g(n(v(w(x(y(z({(|(})O)P)Q)S)V)Z)e*y+_,t-h-m-r-w.^.d.h.k.l.{/}1v1y2Z2j2|3R3S3T3U3V3W3X3Y3Z3[3]3^3_3b3c3h4Z4b5}6T6b6m6n6s6t7l8f8j8y8}9O:O:d:r:t;X;d;p=SS(c#l'ZU*f$z(j3aS*x%a.jQ2r0TQ6f2qQ8w6iR:Y8x$j$Zc#V#b%b%d'u'{(g(n(v(w(x(y(z({(|(})O)P)Q)S)V)Z)e*y+_,t-h-m-r-w.^.d.h.k.l.{/}1v1y2Z2j2|3R3S3T3U3V3W3X3Y3Z3[3]3^3_3b3c3h4Z4b5}6T6b6m6n6s6t7l8f8j8y8}9O:O:d:r:t;X;d;p=SS(b#l'ZS(t#w$[S*w%a.jS.Q(a(cQ.m)UQ0Q*xR2o.R'OkOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`S#m];oQ&f!VQ&g!WQ&i!YQ&j!ZR1f,aQ'R!eQ*z%fQ-R'TS.S(d*}Q2T-QW2s.V.W0S0UQ6P2UU6e2p2r2vS8t6f6hS:W8v8wS:y:V:YQ;[:zR;e;]V!qQ'Q-O!_^OQXZ_r!T!X!m#a#d%Z%]&Z&]&d&f&g&i'Q(],^,c-O-z0z1g1j4z5QT#m];o%[yOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'f'v'x(O(Y(k(o(s)r*t*|+h,Y,^,c-S-[-o-x.U.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2u2}4y5]5o5q5r6U6j7w8R8`8l:Q:v;ZS(r#v#wS.P(`(a!s<y$X$j&y)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`U!oQ'Q-OY'[!m!s!t!u!vS'i!p!rW'k!w4z5S5TS-_']'^U-a'_'`'aW-f'b7p7q7rS2`-`-bU2c-c9e9fS2d-d-eS4|0z5QS6Y2b2eS6]2f:gQ6^2gS7s4}5WS7y5U5VS8o6[6_Q8r6`S9h7z7{Q9k7|Q:T8qS:j9i9lR;S:kU!qQ'Q-OT5O0z5QU'h!o4{4|S([#e1dU-^'['k7yQ/Y*OQ/f*ZU2a-a-f9kQ3r/ZS3{/g/qS6Z2c2dQ6y3mS7U4R4TS8p6]6^Q9S6zQ9Z7XR:U8rQ#sbU'g!o4{4|S(Z#e1dQ*u%[Q+P%gQ+V%mW-]'['h'k7yQ-y([Q/X*OQ/e*ZQ/k*^Q0Y+QQ1Q+zW2^-^-a-f9kS3q/Y/ZS3z/f/qQ3}/jQ4P/lQ5`1RU6X2a2c2dQ6x3mQ6|3rS7Q3{4TQ7V4SQ8T5aU8n6Z6]6^S9R6y6zQ9V7RQ9X7UQ9c7mQ9r8US:S8p8rQ:^9SQ:_9WQ:a9ZQ:f9dQ:p9sQ:x:UQ:}:`Q;P:hQ;_;QQ;h;`Q;l;iQ<|<wQ=X=QR=Y=R%[aOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'f'v'x(O(Y(k(o(s)r*t*|+h,Y,^,c-S-[-o-x.U.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2u2}4y5]5o5q5r6U6j7w8R8`8l:Q:v;ZS#sx!g!r<v$X$j&y)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`R<|=_%[bOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'f'v'x(O(Y(k(o(s)r*t*|+h,Y,^,c-S-[-o-x.U.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2u2}4y5]5o5q5r6U6j7w8R8`8l:Q:v;ZQ%[j!`%gw!f!o%j%k%l&w'V'W'X'['i*Z+T+U,s-V-W-_-a/h0]2Q2X2`2d4Q6Y6^8o:TS%mx!gQ+Q%hQ+z&UW1R+{+|+},OU5a1S1T1US7m4x4|S8U5b5cW9d7n7s7x7yQ9s8VW:h9g9h9j9kS;Q:i:jS;`;R;SQ;i;a!r<w$X$j&y)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`Q=Q=^R=R=_%OeOPXYrstu!X!^!l#P#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'f'x(O(Y(k(o(s)r*t*|+h,Y,^,c-S-[-o-x.U.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2u2}4y5]5o5q5r6U6j7w8R8`8l:Q:v;ZY#_WZ#T#W'v!U%x|}#d#f#i%Z%v(P(W(X(]+f+g+i,[,p-s-v-z-{-}1o2m2n5z6dQ,X&a!p<x$X$j)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`R<{&yS&}!c%wR2O,y%QdOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'f'v'x(O(Y(k(o(s)r*t+h,Y,^,c-S-[-o-x.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2}4y5]5o5q5r6U7w8R8`8l:Q:v;Z!r)T$X$j&y)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`Q,W&aQ0T*|Q2q.UQ6i2uR8x6j!l$Rc#V%a'u'{(g(n(})O)P)Q)V)Z+_-h-m-r-w.^.d.{/}2Z2j2|3_4Z4b6T6b6m8j:O:t;X;d;p!T;})S)e,t.j1v1y3R3Z3[3]3^3b3h5}6n6s6t7l8f8y8}9O:d:r=S!h$Tc#V%a'u'{(g(n)P)Q)V)Z+_-h-m-r-w.^.d.{/}2Z2j2|3_4Z4b6T6b6m8j:O:t;X;d;p!P<P)S)e,t.j1v1y3R3]3^3b3h5}6n6s6t7l8f8y8}9O:d:r=S!d$Xc#V%a'u'{(g(n)V)Z+_-h-m-r-w.^.d.{/}2Z2j2|3_4Z4b6T6b6m8j:O:t;X;d;pQ3l/Tz=`)S)e,t.j1v1y3R3b3h5}6n6s6t7l8f8y8}9O:d:r=SQ=e=gR=f=h'OkOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`S$kh$lR3e.p'VgOPWXYZhrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j$l%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.p.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`T$gf$mQ$efS)^$h)bR)j$mT$ff$mT)`$h)b'VhOPWXYZhrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j$l%]%c%p&]&`&a&d&f&g&i&m&u&y'S'f'v'x(O(Y(k(o(s)g)r*t*|+h,Y,^,c,o,r-S-[-o-x.U.b.i.p.q/z0P0^0}1_1`1a1c1g1j1l1{2]2k2u2}3d4v4y5]5o5q5r5{6U6j7w8R8`8l9a9|:Q:v;Z;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`T$kh$lQ$nhR)i$l%[jOPWXYZrstu!X!^!l#P#T#W#a#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'f'v'x(O(Y(k(o(s)r*t*|+h,Y,^,c-S-[-o-x.U.b.i/z0P0^0}1_1`1a1c1g1j1l2]2k2u2}4y5]5o5q5r6U6j7w8R8`8l:Q:v;Z!s=^$X$j&y)g,o,r.q1{3d4v5{9a9|;n;q;r;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<W<a<b<c<e<l<m<r<s=`#alOPXZr!X!^!l#P#a#k#x$j%]&]&`&a&d&f&g&i&m&u'S(s)g*|+h,Y,^,c-S.U.q/z0}1_1`1a1c1g1j1l2u3d4y5]5o5q5r6j7w8R8`v$zi#t%T%U%Y)w)y*R*g*h._/^/|3l4U9Q=]=e=f!z(j#r$`$a$u$x)n)z*X*{+O+m+p.T/_/a0q0t0|2t3v4O4]4_5[6g6}7W8O8u9o:X:n:{<Z<]<_<f<h<j<n<p<t=i=jQ*q%WQ.|)sg3a<U<V<[<^<`<g<i<k<o<q<uv$vi#t%T%U%Y)w)y*R*g*h._/^/|3l4U9Q=]=e=fQ*T$wS*^$y*aQ*r%XQ/l*_!z=O#r$`$a$u$x)n)z*X*{+O+m+p.T/_/a0q0t0|2t3v4O4]4_5[6g6}7W8O8u9o:X:n:{<Z<]<_<f<h<j<n<p<t=i=jf=P<U<V<[<^<`<g<i<k<o<q<uQ=T=aQ=U=bQ=V=cR=W=dv$zi#t%T%U%Y)w)y*R*g*h._/^/|3l4U9Q=]=e=f!z(j#r$`$a$u$x)n)z*X*{+O+m+p.T/_/a0q0t0|2t3v4O4]4_5[6g6}7W8O8u9o:X:n:{<Z<]<_<f<h<j<n<p<t=i=jg3a<U<V<[<^<`<g<i<k<o<q<ulnOXr!X#a%]&d&f&g&i,^,c1g1jQ*W$xQ,l&pQ,m&rR3u/_$Y${i#r#t$`$a$u$x%T%U%Y)n)w)y)z*R*X*g*h*{+O+m+p.T._/^/_/a/|0q0t0|2t3l3v4O4U4]4_5[6g6}7W8O8u9Q9o:X:n:{<U<V<Z<[<]<^<_<`<f<g<h<i<j<k<n<o<p<q<t<u=]=e=f=i=jQ+o&OQ0s+qQ4r0rR7i4sT*`$y*aS*`$y*aT5P0z5QS/j*]4yT4S/r7wQ+P%gQ/k*^Q0Y+QQ1Q+zQ5`1RQ8T5aQ9c7mQ9r8UQ:f9dQ:p9sQ;P:hQ;_;QQ;h;`R;l;in)w$s(l*s/]/t/u2z3s4Y6w7Y:]<}=Z=[!W<f(h)X)}*V.[.x/T/b0R0p0r2y3t3x4q4s6k6l7O7S7[7^9U9Y:|=g=h]<g3`6r8z:Z:[;fp)y$s(l*s/R/]/t/u2z3s4Y6w7Y:]<}=Z=[!Y<h(h)X)}*V.[.x/T/b0R0p0r2w2y3t3x4q4s6k6l7O7S7[7^9U9Y:|=g=h_<i3`6r8z8{:Z:[;fpmOXr!T!X#a%]&Z&d&f&g&i,^,c1g1jQ&W!SR,Y&apmOXr!T!X#a%]&Z&d&f&g&i,^,c1g1jR&W!SQ+s&PR0o+lqmOXr!T!X#a%]&Z&d&f&g&i,^,c1g1jQ0{+xS5Z1O1PU7}5X5Y5^S9n8P8QS:l9m9pQ;T:mR;b;UQ&_!TR,S&ZR5g1XS%oz%tR0e+]Q&d!UR,^&eR,d&jT1h,c1jR,h&kQ,g&kR1q,hQ'm!xR-i'mQrOQ#aXT%`r#aQ!{TR'o!{Q#OUR'q#OQ)p$rR.y)pQ#RVR's#RQ#UWU'y#U'z-pQ'z#VR-p'{Q,w&zR1},wQ.`(lR2{.`Q.c(nS3O.c3PR3P.dQ-O'QR2R-Or_OXr!T!X#a%]&Z&]&d&f&g&i,^,c1g1jU!mQ'Q-OS#dZ%ZY#n_!m#d-z4zQ-z(]T4z0z5QS#[W%vU(Q#[(R-qQ(R#]R-q'|Q,z&}R2P,zQ(^#gQ-t(VW.O(^-t2h6aQ2h-uR6a2iQ)b$hR.r)bQ$lhR)h$lQ$_cU)W$_-l<TQ-l;pR<T)eQ/W*OW3o/W3p6{9TU3p/X/Y/ZS6{3q3rR9T6|#m)u$s(h(l)X)}*V*n*o*s.Y.Z.[.x/R/S/T/]/b/t/u0R0p0r2w2x2y2z3`3s3t3x4Y4q4s6k6l6p6q6r6w7O7S7Y7[7^8z8{8|9U9Y:Z:[:]:|;f<}=Z=[=g=hQ/`*VU3w/`3y7PQ3y/bR7P3xQ*a$yR/n*aQ*j$}R/w*jQ4^0RR7]4^Q+j%yR0n+jQ4u0uS7k4u9bR9b7lQ+u&QR0x+uQ5Q0zR7u5QQ1W,PS5e1W8XR8X5gQ0`+XW4g0`4i7c9^Q4i0cQ7c4hR9^7dQ+^%oR0f+^Q1j,cR5u1jWqOXr#aQ&h!XQ*v%]Q,]&dQ,_&fQ,`&gQ,b&iQ1e,^S1h,c1jR5t1gQ%_oQ&l!]Q&o!_Q&q!`Q&s!aU'e!o4{4|Q+e%uQ+k%zQ,R&_Q,j&nY-Z'['g'h'k7yQ/m*`S1Z,S,VQ1r,iQ1s,lQ1t,m[2[-]-^-a-f-h9kQ4l0iQ4p0pQ5_1QQ5i1]Q5s1fY6S2Z2^2a2c2dQ7g4nQ7h4qQ7t5PQ8S5`Q8Y5hY8i6T6X6Z6]6^Q9_7eQ9q8TQ9v8ZW9}8j8n8p8rQ:c9`Q:e9cQ:o9rU:s:O:S:UQ;O:fQ;V:pS;W:t:xQ;^;PQ;c;XQ;g;_Q;j;dQ;k;hR;m;lQ%iwQ'U!fQ'c!oU+S%j%k%lQ,q&wU-U'V'W'XS-Y'['iQ/d*ZS0[+T+UQ1z,sS2W-V-WS2_-_-aQ3|/hQ4a0]Q6O2QQ6R2XS6W2`2dQ7T4QS8m6Y6^Q:R8oR:w:TS$ti=]R*k%OU$}i%O=]R/v*iQ$siS(h#r+OQ(l#tS)X$`$aQ)}$uQ*V$xQ*n%TQ*o%UQ*s%YQ.Y<ZQ.Z<]Q.[<_Q.x)nQ/R)wQ/S)yQ/T)zQ/]*RQ/b*XQ/t*gQ/u*hh0R*{.T0|2t5[6g8O8u9o:X:n:{Q0p+mQ0r+pQ2w<fQ2x<hQ2y<jQ2z._S3`<U<VQ3s/^Q3t/_Q3x/aQ4Y/|Q4q0qQ4s0tQ6k<nQ6l<pQ6p<[Q6q<^Q6r<`Q6w3lQ7O3vQ7S4OQ7Y4UQ7[4]Q7^4_Q8z<kQ8{<gQ8|<iQ9U6}Q9Y7WQ:Z<oQ:[<qQ:]9QQ:|<tQ;f<uQ<}=]Q=Z=eQ=[=fQ=g=iR=h=jloOXr!X#a%]&d&f&g&i,^,c1g1jQ!dPS#cZ#kQ&n!^U'Y!l4y7wQ'r#PQ(u#xQ)f$jS,V&]&`Q,Z&aQ,i&mQ,n&uQ-Q'SQ.f(sQ.v)gQ0U*|Q0l+hQ1b,YQ2U-SQ2r.UQ3g.qQ4W/zQ5Y0}Q5k1_Q5l1`Q5n1aQ5p1cQ5w1lQ6f2uQ6u3dQ8Q5]Q8_5oQ8a5qQ8b5rQ8w6jQ9p8RR9x8`#UcOPXZr!X!^!l#a#k#x%]&]&`&a&d&f&g&i&m&u'S(s*|+h,Y,^,c-S.U/z0}1_1`1a1c1g1j1l2u4y5]5o5q5r6j7w8R8`Q#VWQ#bYQ%asQ%btQ%duS'u#T'xQ'{#WQ(g#qQ(n#uQ(v#{Q(w#|Q(x#}Q(y$OQ(z$PQ({$QQ(|$RQ(}$SQ)O$TQ)P$UQ)Q$VQ)S$XQ)V$^Q)Z$bW)e$j)g.q3dQ*y%cQ+_%pS,t&y1{Q-h'fS-m'v-oQ-r(OQ-w(YQ.^(kQ.d(oQ.h;nQ.j;qQ.k;rQ.l;sQ.{)rQ/}*tQ1v,oQ1y,rQ2Z-[Q2j-xQ2|.bQ3R;vQ3S;wQ3T;xQ3U;yQ3V;zQ3W;{Q3X;|Q3Y;}Q3Z<OQ3[<PQ3]<QQ3^<RQ3_.iQ3b<WQ3c<aQ3h<SQ4Z0PQ4b0^Q5}<bQ6T2]Q6b2kQ6m2}Q6n<cQ6s<eQ6t<lQ7l4vQ8f5{Q8j6UQ8y<mQ8}<rQ9O<sQ:O8lQ:d9aQ:r9|Q:t:QQ;X:vQ;d;ZQ;p#PR=S=`R#XWR&{!cU!oQ'Q-OS&w!c,vY'[!m!s!t!u!vS'i!p!r['k!w4z5S5T5U5VS,s&x'PS-_']'^U-a'_'`'aY-f'b7p7q7r7|Q2Q,|S2`-`-bU2c-c9e9fS2d-d-eS4{0z5QS6Y2b2eS6]2f:gQ6^2gS8o6[6_Q8r6`R:T8qR(m#tR(p#uQ!dQT,}'Q-OQ#l]R'Z;oT#hZ%ZS#gZ%ZU%y|},[U(V#d#f#iS-u(W(XQ-|(]Q0m+iQ2i-vU2l-z-{-}S6c2m2nR8s6d`#ZW#T#W%v'v(P+f-st#eZ|}#d#f#i%Z(W(X(]+i-v-z-{-}2m2n6dQ1d,[Q1w,pQ5y1oQ8e5zT<z&y+gT#^W%vS#]W%vS'w#T(PS'|#W+fS,u&y+gT-n'v-sT'O!c%wQ$hfR)l$mT)a$h)bR3f.pT*Q$u*SR*Y$xQ0S*{Q2p.TQ5X0|Q6h2tQ8P5[Q8v6gQ9m8OQ:V8uQ:m9oQ:z:XQ;U:nR;]:{lpOXr!X#a%]&d&f&g&i,^,c1g1jQ&^!TR,R&ZV%z|},[R0v+rR,Q&XQ%szR+d%tR+Y%nT&b!U&eT&c!U&eT1i,c1j",
        nodeNames: "\u26A0 ArithOp ArithOp LineComment BlockComment Script ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody MethodDeclaration AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
        maxTerm: 362,
        context: trackNewline,
        nodeProps: [
          ["group", -26, 6, 14, 16, 62, 198, 202, 205, 206, 208, 211, 214, 225, 227, 233, 235, 237, 239, 242, 248, 254, 256, 258, 260, 262, 264, 265, "Statement", -32, 10, 11, 25, 28, 29, 35, 45, 48, 49, 51, 56, 64, 72, 76, 78, 80, 81, 102, 103, 112, 113, 130, 133, 135, 136, 137, 138, 140, 141, 161, 162, 164, "Expression", -23, 24, 26, 30, 34, 36, 38, 165, 167, 169, 170, 172, 173, 174, 176, 177, 178, 180, 181, 182, 192, 194, 196, 197, "Type", -3, 84, 95, 101, "ClassItem"],
          ["openedBy", 31, "InterpolationStart", 50, "[", 54, "{", 69, "(", 142, "JSXStartTag", 154, "JSXStartTag JSXStartCloseTag"],
          ["closedBy", 33, "InterpolationEnd", 44, "]", 55, "}", 70, ")", 143, "JSXSelfCloseEndTag JSXEndTag", 159, "JSXEndTag"]
        ],
        propSources: [jsHighlight],
        skippedNodes: [0, 3, 4, 268],
        repeatNodeCount: 32,
        tokenData: "$>y(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tu>PuvBavwDxwxGgxyMvyz! Qz{!![{|!%O|}!&]}!O!%O!O!P!'g!P!Q!1w!Q!R#0t!R![#3T![!]#@T!]!^#Aa!^!_#Bk!_!`#GS!`!a#In!a!b#N{!b!c$$z!c!}>P!}#O$&U#O#P$'`#P#Q$,w#Q#R$.R#R#S>P#S#T$/`#T#o$0j#o#p$4z#p#q$5p#q#r$7Q#r#s$8^#s$f%Z$f$g+g$g#BY>P#BY#BZ$9h#BZ$IS>P$IS$I_$9h$I_$I|>P$I|$I}$<s$I}$JO$<s$JO$JT>P$JT$JU$9h$JU$KV>P$KV$KW$9h$KW&FU>P&FU&FV$9h&FV;'S>P;'S;=`BZ<%l?HT>P?HT?HU$9h?HUO>P(n%d_$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$c&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$c&j'y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU'y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$c&j'vpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU'vpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX'vp'y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$c&j'vp'y!b'l(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST'w#S$c&j'm(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$c&j'vp'y!b'm(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$c&j!l$Ip'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#p$Id$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#p$Id$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2b3l_'u$(n$c&j'y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k*r4r_$c&j'y!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k)`5vX$c&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q)`6jT$^#t$c&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#t6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y#t7bO$^#t#t7eP;=`<%l6y)`7kP;=`<%l5q*r7w]$^#t$c&j'y!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}%W8uZ'y!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p%W9oU$^#t'y!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}%W:UP;=`<%l8p*r:[P;=`<%l4k#%|:hg$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}st%Ztu<Puw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}<P!}#O%Z#O#P&c#P#R%Z#R#S<P#S#T%Z#T#o<P#o#p*g#p$g%Z$g;'S<P;'S;=`=y<%lO<P#%|<[i$c&j(_!L^'vp'y!bOY%ZYZ&cZr%Zrs&}st%Ztu<Puw%Zwx(rx!Q%Z!Q![<P![!^%Z!^!_*g!_!c%Z!c!}<P!}#O%Z#O#P&c#P#R%Z#R#S<P#S#T%Z#T#o<P#o#p*g#p$g%Z$g;'S<P;'S;=`=y<%lO<P#%|=|P;=`<%l<P(CS>`k$c&j'vp'y!b(T!LY's&;d$V#tOY%ZYZ&cZr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$g%Z$g;'S>P;'S;=`BZ<%lO>P+d@`k$c&j'vp'y!b$V#tOY%ZYZ&cZr%Zrs&}st%Ztu@Tuw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![@T![!^%Z!^!_*g!_!c%Z!c!}@T!}#O%Z#O#P&c#P#R%Z#R#S@T#S#T%Z#T#o@T#o#p*g#p$g%Z$g;'S@T;'S;=`BT<%lO@T+dBWP;=`<%l@T(CSB^P;=`<%l>P%#SBl`$c&j'vp'y!b#h$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SCy_$c&j#z$Id'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%DfETa(h%<v$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sv%ZvwFYwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SFe`$c&j#t$Id'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2bGp_'x$)`$c&j'vpOYHoYZIuZrHorsIuswHowxKVx!^Ho!^!_LX!_#OHo#O#PIu#P#oHo#o#pLX#p;'SHo;'S;=`Mp<%lOHo*QHv_$c&j'vpOYHoYZIuZrHorsIuswHowxKVx!^Ho!^!_LX!_#OHo#O#PIu#P#oHo#o#pLX#p;'SHo;'S;=`Mp<%lOHo)`IzX$c&jOwIuwx6cx!^Iu!^!_Jg!_#oIu#o#pJg#p;'SIu;'S;=`KP<%lOIu#tJjTOwJgwx7]x;'SJg;'S;=`Jy<%lOJg#tJ|P;=`<%lJg)`KSP;=`<%lIu*QK`]$^#t$c&j'vpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r$fL^Z'vpOYLXYZJgZrLXrsJgswLXwxMPx#OLX#O#PJg#P;'SLX;'S;=`Mj<%lOLX$fMWU$^#t'vpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r$fMmP;=`<%lLX*QMsP;=`<%lHo(*QNR_!h(!b$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l! ]_!gM|$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!!ib$c&j'vp'y!b't#)d#i$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!#q{!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!#|`$c&j'vp'y!b#f$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!%Z`$c&j'vp'y!bk&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!&h_!V&;l$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!'rc$c&j'vp'y!by'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!(}!P!Q%Z!Q![!+g![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!)Wa$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!*]!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!*h_!UMt$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!+rg$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!+g![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S!+g#S#X%Z#X#Y!-Z#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!-dg$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!.{|}%Z}!O!.{!O!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!/Uc$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!0lc$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!2Sf$c&j'vp'y!b#g$IdOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}xz!3hz{#$s{!P!3h!P!Q#&Y!Q!^!3h!^!_!Mh!_!`#-x!`!a#/_!a!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(r!3sb$c&j'vp'y!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(Q!5U`$c&j'y!b!RSOY!4{YZ&cZw!4{wx!6Wx!P!4{!P!Q!=o!Q!^!4{!^!_!?g!_!}!4{!}#O!Bn#O#P!<w#P#o!4{#o#p!?g#p;'S!4{;'S;=`!Cw<%lO!4{&n!6_^$c&j!RSOY!6WYZ&cZ!P!6W!P!Q!7Z!Q!^!6W!^!_!8g!_!}!6W!}#O!;U#O#P!<w#P#o!6W#o#p!8g#p;'S!6W;'S;=`!=i<%lO!6W&n!7ba$c&j!RSO!^&c!_#Z&c#Z#[!7Z#[#]&c#]#^!7Z#^#a&c#a#b!7Z#b#g&c#g#h!7Z#h#i&c#i#j!7Z#j#m&c#m#n!7Z#n#o&c#p;'S&c;'S;=`&w<%lO&cS!8lX!RSOY!8gZ!P!8g!P!Q!9X!Q!}!8g!}#O!9p#O#P!:o#P;'S!8g;'S;=`!;O<%lO!8gS!9^U!RS#Z#[!9X#]#^!9X#a#b!9X#g#h!9X#i#j!9X#m#n!9XS!9sVOY!9pZ#O!9p#O#P!:Y#P#Q!8g#Q;'S!9p;'S;=`!:i<%lO!9pS!:]SOY!9pZ;'S!9p;'S;=`!:i<%lO!9pS!:lP;=`<%l!9pS!:rSOY!8gZ;'S!8g;'S;=`!;O<%lO!8gS!;RP;=`<%l!8g&n!;Z[$c&jOY!;UYZ&cZ!^!;U!^!_!9p!_#O!;U#O#P!<P#P#Q!6W#Q#o!;U#o#p!9p#p;'S!;U;'S;=`!<q<%lO!;U&n!<UX$c&jOY!;UYZ&cZ!^!;U!^!_!9p!_#o!;U#o#p!9p#p;'S!;U;'S;=`!<q<%lO!;U&n!<tP;=`<%l!;U&n!<|X$c&jOY!6WYZ&cZ!^!6W!^!_!8g!_#o!6W#o#p!8g#p;'S!6W;'S;=`!=i<%lO!6W&n!=lP;=`<%l!6W(Q!=xi$c&j'y!b!RSOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!=o#[#]&}#]#^!=o#^#a&}#a#b!=o#b#g&}#g#h!=o#h#i&}#i#j!=o#j#m&}#m#n!=o#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!?nZ'y!b!RSOY!?gZw!?gwx!8gx!P!?g!P!Q!@a!Q!}!?g!}#O!Ap#O#P!:o#P;'S!?g;'S;=`!Bh<%lO!?g!f!@hb'y!b!RSOY'}Zw'}x#O'}#P#Z'}#Z#[!@a#[#]'}#]#^!@a#^#a'}#a#b!@a#b#g'}#g#h!@a#h#i'}#i#j!@a#j#m'}#m#n!@a#n;'S'};'S;=`(f<%lO'}!f!AuX'y!bOY!ApZw!Apwx!9px#O!Ap#O#P!:Y#P#Q!?g#Q;'S!Ap;'S;=`!Bb<%lO!Ap!f!BeP;=`<%l!Ap!f!BkP;=`<%l!?g(Q!Bu^$c&j'y!bOY!BnYZ&cZw!Bnwx!;Ux!^!Bn!^!_!Ap!_#O!Bn#O#P!<P#P#Q!4{#Q#o!Bn#o#p!Ap#p;'S!Bn;'S;=`!Cq<%lO!Bn(Q!CtP;=`<%l!Bn(Q!CzP;=`<%l!4{'`!DW`$c&j'vp!RSOY!C}YZ&cZr!C}rs!6Ws!P!C}!P!Q!EY!Q!^!C}!^!_!GQ!_!}!C}!}#O!JX#O#P!<w#P#o!C}#o#p!GQ#p;'S!C};'S;=`!Kb<%lO!C}'`!Eci$c&j'vp!RSOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!EY#[#](r#]#^!EY#^#a(r#a#b!EY#b#g(r#g#h!EY#h#i(r#i#j!EY#j#m(r#m#n!EY#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!GXZ'vp!RSOY!GQZr!GQrs!8gs!P!GQ!P!Q!Gz!Q!}!GQ!}#O!IZ#O#P!:o#P;'S!GQ;'S;=`!JR<%lO!GQt!HRb'vp!RSOY)rZr)rs#O)r#P#Z)r#Z#[!Gz#[#])r#]#^!Gz#^#a)r#a#b!Gz#b#g)r#g#h!Gz#h#i)r#i#j!Gz#j#m)r#m#n!Gz#n;'S)r;'S;=`*Z<%lO)rt!I`X'vpOY!IZZr!IZrs!9ps#O!IZ#O#P!:Y#P#Q!GQ#Q;'S!IZ;'S;=`!I{<%lO!IZt!JOP;=`<%l!IZt!JUP;=`<%l!GQ'`!J`^$c&j'vpOY!JXYZ&cZr!JXrs!;Us!^!JX!^!_!IZ!_#O!JX#O#P!<P#P#Q!C}#Q#o!JX#o#p!IZ#p;'S!JX;'S;=`!K[<%lO!JX'`!K_P;=`<%l!JX'`!KeP;=`<%l!C}(r!Ksk$c&j'vp'y!b!RSOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[!Kh#[#]%Z#]#^!Kh#^#a%Z#a#b!Kh#b#g%Z#g#h!Kh#h#i%Z#i#j!Kh#j#m%Z#m#n!Kh#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W!Mq]'vp'y!b!RSOY!MhZr!Mhrs!?gsw!Mhwx!GQx!P!Mh!P!Q!Nj!Q!}!Mh!}#O#!U#O#P!:o#P;'S!Mh;'S;=`##U<%lO!Mh#W!Nse'vp'y!b!RSOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[!Nj#[#]*g#]#^!Nj#^#a*g#a#b!Nj#b#g*g#g#h!Nj#h#i*g#i#j!Nj#j#m*g#m#n!Nj#n;'S*g;'S;=`+Z<%lO*g#W#!]Z'vp'y!bOY#!UZr#!Urs!Apsw#!Uwx!IZx#O#!U#O#P!:Y#P#Q!Mh#Q;'S#!U;'S;=`##O<%lO#!U#W##RP;=`<%l#!U#W##XP;=`<%l!Mh(r##e`$c&j'vp'y!bOY##[YZ&cZr##[rs!Bnsw##[wx!JXx!^##[!^!_#!U!_#O##[#O#P!<P#P#Q!3h#Q#o##[#o#p#!U#p;'S##[;'S;=`#$g<%lO##[(r#$jP;=`<%l##[(r#$pP;=`<%l!3h(CS#%Qb$c&j'vp'y!b'n(;d!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(CS#&e_$c&j'vp'y!bR(;dOY#&YYZ&cZr#&Yrs#'dsw#&Ywx#*tx!^#&Y!^!_#,s!_#O#&Y#O#P#(f#P#o#&Y#o#p#,s#p;'S#&Y;'S;=`#-r<%lO#&Y(Bb#'m]$c&j'y!bR(;dOY#'dYZ&cZw#'dwx#(fx!^#'d!^!_#)w!_#O#'d#O#P#(f#P#o#'d#o#p#)w#p;'S#'d;'S;=`#*n<%lO#'d(AO#(mX$c&jR(;dOY#(fYZ&cZ!^#(f!^!_#)Y!_#o#(f#o#p#)Y#p;'S#(f;'S;=`#)q<%lO#(f(;d#)_SR(;dOY#)YZ;'S#)Y;'S;=`#)k<%lO#)Y(;d#)nP;=`<%l#)Y(AO#)tP;=`<%l#(f(<v#*OW'y!bR(;dOY#)wZw#)wwx#)Yx#O#)w#O#P#)Y#P;'S#)w;'S;=`#*h<%lO#)w(<v#*kP;=`<%l#)w(Bb#*qP;=`<%l#'d(Ap#*}]$c&j'vpR(;dOY#*tYZ&cZr#*trs#(fs!^#*t!^!_#+v!_#O#*t#O#P#(f#P#o#*t#o#p#+v#p;'S#*t;'S;=`#,m<%lO#*t(<U#+}W'vpR(;dOY#+vZr#+vrs#)Ys#O#+v#O#P#)Y#P;'S#+v;'S;=`#,g<%lO#+v(<U#,jP;=`<%l#+v(Ap#,pP;=`<%l#*t(=h#,|Y'vp'y!bR(;dOY#,sZr#,srs#)wsw#,swx#+vx#O#,s#O#P#)Y#P;'S#,s;'S;=`#-l<%lO#,s(=h#-oP;=`<%l#,s(CS#-uP;=`<%l#&Y%#W#.Vb$c&j#z$Id'vp'y!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h+h#/lb$S#t$c&j'vp'y!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h$/l#1Pp$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!+g!P!Q%Z!Q![#3T![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S#3T#S#U%Z#U#V#6_#V#X%Z#X#Y!-Z#Y#b%Z#b#c#5T#c#d#9g#d#l%Z#l#m#<i#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#3`k$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!+g!P!Q%Z!Q![#3T![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S#3T#S#X%Z#X#Y!-Z#Y#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#5`_$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#6hd$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#7v!R!S#7v!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#7v#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#8Rf$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#7v!R!S#7v!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#7v#S#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#9pc$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#:{!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#:{#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;We$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#:{!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#:{#S#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#<rg$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#>Z![!^%Z!^!_*g!_!c%Z!c!i#>Z!i#O%Z#O#P&c#P#R%Z#R#S#>Z#S#T%Z#T#Z#>Z#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>fi$c&j'vp'y!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#>Z![!^%Z!^!_*g!_!c%Z!c!i#>Z!i#O%Z#O#P&c#P#R%Z#R#S#>Z#S#T%Z#T#Z#>Z#Z#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#@b_!a$b$c&j#x%<f'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Al_^l$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS#Bz^'|!*v!e'.r'vp'y!b$T)d(lSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Cv!Q!^*g!^!_#Dl!_!`#F^!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#DPX$e&j'vp'y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#DuZ#j$Id'vp'y!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Eh!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#EqX#z$Id'vp'y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#FgX#k$Id'vp'y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh#G_a#W%?x$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a#Hd!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W#Ho_#c$Ih$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#I}adBf#k$Id$`#|$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`#KS!`!a#L^!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#K__#k$Id$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#Lia#j$Id$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`!a#Mn!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#My`#j$Id$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$ Wc(`$Ip$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$!c!P!^%Z!^!_*g!_!a%Z!a!b$#m!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$!n_z'#p$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$#x`$c&j#u$Id'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$%V_!x!Ln$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$&a_|(8n$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$'eZ$c&jO!^$(W!^!_$(n!_#i$(W#i#j$(s#j#l$(W#l#m$*f#m#o$(W#o#p$(n#p;'S$(W;'S;=`$,q<%lO$(W(n$(_T[#S$c&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$(sO[#S(n$(x[$c&jO!Q&c!Q![$)n![!^&c!_!c&c!c!i$)n!i#T&c#T#Z$)n#Z#o&c#o#p$,U#p;'S&c;'S;=`&w<%lO&c(n$)sZ$c&jO!Q&c!Q![$*f![!^&c!_!c&c!c!i$*f!i#T&c#T#Z$*f#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$*kZ$c&jO!Q&c!Q![$+^![!^&c!_!c&c!c!i$+^!i#T&c#T#Z$+^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$+cZ$c&jO!Q&c!Q![$(W![!^&c!_!c&c!c!i$(W!i#T&c#T#Z$(W#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$,XR!Q![$,b!c!i$,b#T#Z$,b#S$,eS!Q![$,b!c!i$,b#T#Z$,b#q#r$(n(n$,tP;=`<%l$(W!'l$-S_!SM|$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$.^`#r$Id$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$/k_$c&j'vp'y!b(Q&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$0yk$c&j'vp'y!b(T!LY's&;d$X#tOY%ZYZ&cZr%Zrs&}st%Ztu$0juw%Zwx(rx}%Z}!O$2n!O!Q%Z!Q![$0j![!^%Z!^!_*g!_!c%Z!c!}$0j!}#O%Z#O#P&c#P#R%Z#R#S$0j#S#T%Z#T#o$0j#o#p*g#p$g%Z$g;'S$0j;'S;=`$4t<%lO$0j+d$2yk$c&j'vp'y!b$X#tOY%ZYZ&cZr%Zrs&}st%Ztu$2nuw%Zwx(rx}%Z}!O$2n!O!Q%Z!Q![$2n![!^%Z!^!_*g!_!c%Z!c!}$2n!}#O%Z#O#P&c#P#R%Z#R#S$2n#S#T%Z#T#o$2n#o#p*g#p$g%Z$g;'S$2n;'S;=`$4n<%lO$2n+d$4qP;=`<%l$2n(CS$4wP;=`<%l$0j!5p$5TX!X!3l'vp'y!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Df$5{a(g%<v$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$#m#q;'S%Z;'S;=`+a<%lO%Z%#`$7__!W$I`o`$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$8i_!mS$c&j'vp'y!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$9y|$c&j'vp'y!b'l(;d(T!LY's&;d$V#tOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$f%Z$f$g+g$g#BY>P#BY#BZ$9h#BZ$IS>P$IS$I_$9h$I_$JT>P$JT$JU$9h$JU$KV>P$KV$KW$9h$KW&FU>P&FU&FV$9h&FV;'S>P;'S;=`BZ<%l?HT>P?HT?HU$9h?HUO>P(CS$=Uk$c&j'vp'y!b'm(;d(T!LY's&;d$V#tOY%ZYZ&cZr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$g%Z$g;'S>P;'S;=`BZ<%lO>P",
        tokenizers: [noSemicolon, incdecToken, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOq~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!O~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(S~~", 141, 325), new LocalTokenGroup("j~RQYZXz{^~^O'p~~aP!P!Qd~iO'q~~", 25, 307)],
        topRules: { "Script": [0, 5], "SingleExpression": [1, 266], "SingleClassItem": [2, 267] },
        dialects: { jsx: 13213, ts: 13215 },
        dynamicPrecedences: { "76": 1, "78": 1, "162": 1, "190": 1 },
        specialized: [{ term: 311, get: (value) => spec_identifier2[value] || -1 }, { term: 327, get: (value) => spec_word[value] || -1 }, { term: 67, get: (value) => spec_LessThan[value] || -1 }],
        tokenPrec: 13238
      });
    }
  });

  // node_modules/@codemirror/autocomplete/dist/index.js
  function toSet(chars2) {
    let flat = Object.keys(chars2).join("");
    let words22 = /\w/.test(flat);
    if (words22)
      flat = flat.replace(/\w/g, "");
    return `[${words22 ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
  }
  function prefixMatch(options) {
    let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
    for (let { label } of options) {
      first[label[0]] = true;
      for (let i = 1; i < label.length; i++)
        rest[label[i]] = true;
    }
    let source = toSet(first) + toSet(rest) + "*$";
    return [new RegExp("^" + source), new RegExp(source)];
  }
  function completeFromList(list2) {
    let options = list2.map((o) => typeof o == "string" ? { label: o } : o);
    let [validFor, match3] = options.every((o) => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
    return (context) => {
      let token = context.matchBefore(match3);
      return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
    };
  }
  function ifNotIn(nodes, source) {
    return (context) => {
      for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
        if (nodes.indexOf(pos.name) > -1)
          return null;
        if (pos.type.isTop)
          break;
      }
      return source(context);
    };
  }
  function fieldSelection(ranges, field) {
    return EditorSelection.create(ranges.filter((r2) => r2.field == field).map((r2) => EditorSelection.range(r2.from, r2.to)));
  }
  function snippet(template) {
    let snippet2 = Snippet.parse(template);
    return (editor, completion, from3, to) => {
      let { text, ranges } = snippet2.instantiate(editor.state, from3);
      let spec = {
        changes: { from: from3, to, insert: Text.of(text) },
        scrollIntoView: true,
        annotations: pickedCompletion.of(completion)
      };
      if (ranges.length)
        spec.selection = fieldSelection(ranges, 0);
      if (ranges.length > 1) {
        let active = new ActiveSnippet(ranges, 0);
        let effects = spec.effects = [setActive.of(active)];
        if (editor.state.field(snippetState, false) === void 0)
          effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme2]));
      }
      editor.dispatch(editor.state.update(spec));
    };
  }
  function moveField(dir) {
    return ({ state, dispatch }) => {
      let active = state.field(snippetState, false);
      if (!active || dir < 0 && active.active == 0)
        return false;
      let next2 = active.active + dir, last = dir > 0 && !active.ranges.some((r2) => r2.field == next2 + dir);
      dispatch(state.update({
        selection: fieldSelection(active.ranges, next2),
        effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next2))
      }));
      return true;
    };
  }
  function snippetCompletion(template, completion) {
    return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
  }
  var pickedCompletion, baseTheme2, FieldPos, FieldRange, Snippet, fieldMarker, fieldRange, ActiveSnippet, setActive, moveToField, snippetState, clearSnippet, nextSnippetField, prevSnippetField, defaultSnippetKeymap, snippetKeymap, addSnippetKeymap, snippetPointerHandler, closedBracket, android;
  var init_dist9 = __esm({
    "node_modules/@codemirror/autocomplete/dist/index.js"() {
      init_dist();
      init_dist2();
      init_dist5();
      pickedCompletion = /* @__PURE__ */ Annotation.define();
      baseTheme2 = /* @__PURE__ */ EditorView.baseTheme({
        ".cm-tooltip.cm-tooltip-autocomplete": {
          "& > ul": {
            fontFamily: "monospace",
            whiteSpace: "nowrap",
            overflow: "hidden auto",
            maxWidth_fallback: "700px",
            maxWidth: "min(700px, 95vw)",
            minWidth: "250px",
            maxHeight: "10em",
            height: "100%",
            listStyle: "none",
            margin: 0,
            padding: 0,
            "& > li": {
              overflowX: "hidden",
              textOverflow: "ellipsis",
              cursor: "pointer",
              padding: "1px 3px",
              lineHeight: 1.2
            }
          }
        },
        "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#17c",
          color: "white"
        },
        "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#777"
        },
        "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
          background: "#347",
          color: "white"
        },
        "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
          background: "#444"
        },
        ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
          content: '"\xB7\xB7\xB7"',
          opacity: 0.5,
          display: "block",
          textAlign: "center"
        },
        ".cm-tooltip.cm-completionInfo": {
          position: "absolute",
          padding: "3px 9px",
          width: "max-content",
          maxWidth: `${400}px`,
          boxSizing: "border-box"
        },
        ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
        ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
        ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
        ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
        "&light .cm-snippetField": { backgroundColor: "#00000022" },
        "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
        ".cm-snippetFieldPosition": {
          verticalAlign: "text-top",
          width: 0,
          height: "1.15em",
          display: "inline-block",
          margin: "0 -0.7px -.7em",
          borderLeft: "1.4px dotted #888"
        },
        ".cm-completionMatchedText": {
          textDecoration: "underline"
        },
        ".cm-completionDetail": {
          marginLeft: "0.5em",
          fontStyle: "italic"
        },
        ".cm-completionIcon": {
          fontSize: "90%",
          width: ".8em",
          display: "inline-block",
          textAlign: "center",
          paddingRight: ".6em",
          opacity: "0.6",
          boxSizing: "content-box"
        },
        ".cm-completionIcon-function, .cm-completionIcon-method": {
          "&:after": { content: "'\u0192'" }
        },
        ".cm-completionIcon-class": {
          "&:after": { content: "'\u25CB'" }
        },
        ".cm-completionIcon-interface": {
          "&:after": { content: "'\u25CC'" }
        },
        ".cm-completionIcon-variable": {
          "&:after": { content: "'\u{1D465}'" }
        },
        ".cm-completionIcon-constant": {
          "&:after": { content: "'\u{1D436}'" }
        },
        ".cm-completionIcon-type": {
          "&:after": { content: "'\u{1D461}'" }
        },
        ".cm-completionIcon-enum": {
          "&:after": { content: "'\u222A'" }
        },
        ".cm-completionIcon-property": {
          "&:after": { content: "'\u25A1'" }
        },
        ".cm-completionIcon-keyword": {
          "&:after": { content: "'\u{1F511}\uFE0E'" }
          // Disable emoji rendering
        },
        ".cm-completionIcon-namespace": {
          "&:after": { content: "'\u25A2'" }
        },
        ".cm-completionIcon-text": {
          "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
        }
      });
      FieldPos = class {
        constructor(field, line, from3, to) {
          this.field = field;
          this.line = line;
          this.from = from3;
          this.to = to;
        }
      };
      FieldRange = class {
        constructor(field, from3, to) {
          this.field = field;
          this.from = from3;
          this.to = to;
        }
        map(changes) {
          let from3 = changes.mapPos(this.from, -1, MapMode.TrackDel);
          let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
          return from3 == null || to == null ? null : new FieldRange(this.field, from3, to);
        }
      };
      Snippet = class {
        constructor(lines, fieldPositions) {
          this.lines = lines;
          this.fieldPositions = fieldPositions;
        }
        instantiate(state, pos) {
          let text = [], lineStart = [pos];
          let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
          for (let line of this.lines) {
            if (text.length) {
              let indent5 = baseIndent, tabs = /^\t*/.exec(line)[0].length;
              for (let i = 0; i < tabs; i++)
                indent5 += state.facet(indentUnit);
              lineStart.push(pos + indent5.length - tabs);
              line = indent5 + line.slice(tabs);
            }
            text.push(line);
            pos += line.length + 1;
          }
          let ranges = this.fieldPositions.map((pos2) => new FieldRange(pos2.field, lineStart[pos2.line] + pos2.from, lineStart[pos2.line] + pos2.to));
          return { text, ranges };
        }
        static parse(template) {
          let fields = [];
          let lines = [], positions = [], m;
          for (let line of template.split(/\r\n?|\n/)) {
            while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
              let seq = m[1] ? +m[1] : null, name2 = m[2] || m[3] || "", found = -1;
              for (let i = 0; i < fields.length; i++) {
                if (seq != null ? fields[i].seq == seq : name2 ? fields[i].name == name2 : false)
                  found = i;
              }
              if (found < 0) {
                let i = 0;
                while (i < fields.length && (seq == null || fields[i].seq != null && fields[i].seq < seq))
                  i++;
                fields.splice(i, 0, { seq, name: name2 });
                found = i;
                for (let pos of positions)
                  if (pos.field >= found)
                    pos.field++;
              }
              positions.push(new FieldPos(found, lines.length, m.index, m.index + name2.length));
              line = line.slice(0, m.index) + name2 + line.slice(m.index + m[0].length);
            }
            for (let esc; esc = /\\([{}])/.exec(line); ) {
              line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
              for (let pos of positions)
                if (pos.line == lines.length && pos.from > esc.index) {
                  pos.from--;
                  pos.to--;
                }
            }
            lines.push(line);
          }
          return new Snippet(lines, positions);
        }
      };
      fieldMarker = /* @__PURE__ */ Decoration.widget({ widget: /* @__PURE__ */ new class extends WidgetType {
        toDOM() {
          let span = document.createElement("span");
          span.className = "cm-snippetFieldPosition";
          return span;
        }
        ignoreEvent() {
          return false;
        }
      }() });
      fieldRange = /* @__PURE__ */ Decoration.mark({ class: "cm-snippetField" });
      ActiveSnippet = class {
        constructor(ranges, active) {
          this.ranges = ranges;
          this.active = active;
          this.deco = Decoration.set(ranges.map((r2) => (r2.from == r2.to ? fieldMarker : fieldRange).range(r2.from, r2.to)));
        }
        map(changes) {
          let ranges = [];
          for (let r2 of this.ranges) {
            let mapped = r2.map(changes);
            if (!mapped)
              return null;
            ranges.push(mapped);
          }
          return new ActiveSnippet(ranges, this.active);
        }
        selectionInsideField(sel) {
          return sel.ranges.every((range) => this.ranges.some((r2) => r2.field == this.active && r2.from <= range.from && r2.to >= range.to));
        }
      };
      setActive = /* @__PURE__ */ StateEffect.define({
        map(value, changes) {
          return value && value.map(changes);
        }
      });
      moveToField = /* @__PURE__ */ StateEffect.define();
      snippetState = /* @__PURE__ */ StateField.define({
        create() {
          return null;
        },
        update(value, tr) {
          for (let effect of tr.effects) {
            if (effect.is(setActive))
              return effect.value;
            if (effect.is(moveToField) && value)
              return new ActiveSnippet(value.ranges, effect.value);
          }
          if (value && tr.docChanged)
            value = value.map(tr.changes);
          if (value && tr.selection && !value.selectionInsideField(tr.selection))
            value = null;
          return value;
        },
        provide: (f) => EditorView.decorations.from(f, (val) => val ? val.deco : Decoration.none)
      });
      clearSnippet = ({ state, dispatch }) => {
        let active = state.field(snippetState, false);
        if (!active)
          return false;
        dispatch(state.update({ effects: setActive.of(null) }));
        return true;
      };
      nextSnippetField = /* @__PURE__ */ moveField(1);
      prevSnippetField = /* @__PURE__ */ moveField(-1);
      defaultSnippetKeymap = [
        { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
        { key: "Escape", run: clearSnippet }
      ];
      snippetKeymap = /* @__PURE__ */ Facet.define({
        combine(maps) {
          return maps.length ? maps[0] : defaultSnippetKeymap;
        }
      });
      addSnippetKeymap = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.compute([snippetKeymap], (state) => state.facet(snippetKeymap)));
      snippetPointerHandler = /* @__PURE__ */ EditorView.domEventHandlers({
        mousedown(event, view) {
          let active = view.state.field(snippetState, false), pos;
          if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
            return false;
          let match3 = active.ranges.find((r2) => r2.from <= pos && r2.to >= pos);
          if (!match3 || match3.field == active.active)
            return false;
          view.dispatch({
            selection: fieldSelection(active.ranges, match3.field),
            effects: setActive.of(active.ranges.some((r2) => r2.field > match3.field) ? new ActiveSnippet(active.ranges, match3.field) : null)
          });
          return true;
        }
      });
      closedBracket = /* @__PURE__ */ new class extends RangeValue {
      }();
      closedBracket.startSide = 1;
      closedBracket.endSide = -1;
      android = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
    }
  });

  // node_modules/@codemirror/lang-javascript/dist/index.js
  var dist_exports2 = {};
  __export(dist_exports2, {
    autoCloseTags: () => autoCloseTags,
    completionPath: () => completionPath,
    esLint: () => esLint,
    javascript: () => javascript,
    javascriptLanguage: () => javascriptLanguage,
    jsxLanguage: () => jsxLanguage,
    localCompletionSource: () => localCompletionSource,
    scopeCompletionSource: () => scopeCompletionSource,
    snippets: () => snippets,
    tsxLanguage: () => tsxLanguage,
    typescriptLanguage: () => typescriptLanguage
  });
  function defID(type7) {
    return (node, def) => {
      let id2 = node.node.getChild("VariableDefinition");
      if (id2)
        def(id2, type7);
      return true;
    };
  }
  function getScope(doc2, node) {
    let cached = cache.get(node);
    if (cached)
      return cached;
    let completions2 = [], top3 = true;
    function def(node2, type7) {
      let name2 = doc2.sliceString(node2.from, node2.to);
      completions2.push({ label: name2, type: type7 });
    }
    node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
      if (top3) {
        top3 = false;
      } else if (node2.name) {
        let gather = gatherCompletions[node2.name];
        if (gather && gather(node2, def) || ScopeNodes.has(node2.name))
          return false;
      } else if (node2.to - node2.from > 8192) {
        for (let c2 of getScope(doc2, node2.node))
          completions2.push(c2);
        return false;
      }
    });
    cache.set(node, completions2);
    return completions2;
  }
  function localCompletionSource(context) {
    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (dontComplete.indexOf(inner.name) > -1)
      return null;
    let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(context.state.sliceDoc(inner.from, inner.to));
    if (!isWord && !context.explicit)
      return null;
    let options = [];
    for (let pos = inner; pos; pos = pos.parent) {
      if (ScopeNodes.has(pos.name))
        options = options.concat(getScope(context.state.doc, pos));
    }
    return {
      options,
      from: isWord ? inner.from : context.pos,
      validFor: Identifier
    };
  }
  function pathFor(read, member, name2) {
    var _a2;
    let path = [];
    for (; ; ) {
      let obj = member.firstChild, prop;
      if ((obj === null || obj === void 0 ? void 0 : obj.name) == "VariableName") {
        path.push(read(obj));
        return { path: path.reverse(), name: name2 };
      } else if ((obj === null || obj === void 0 ? void 0 : obj.name) == "MemberExpression" && ((_a2 = prop = obj.lastChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "PropertyName") {
        path.push(read(prop));
        member = obj;
      } else {
        return null;
      }
    }
  }
  function completionPath(context) {
    let read = (node) => context.state.doc.sliceString(node.from, node.to);
    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (inner.name == "PropertyName") {
      return pathFor(read, inner.parent, read(inner));
    } else if (dontComplete.indexOf(inner.name) > -1) {
      return null;
    } else if (inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier.test(read(inner))) {
      return { path: [], name: read(inner) };
    } else if ((inner.name == "." || inner.name == "?.") && inner.parent.name == "MemberExpression") {
      return pathFor(read, inner.parent, "");
    } else if (inner.name == "MemberExpression") {
      return pathFor(read, inner, "");
    } else {
      return context.explicit ? { path: [], name: "" } : null;
    }
  }
  function enumeratePropertyCompletions(obj, top3) {
    let options = [], seen = /* @__PURE__ */ new Set();
    for (let depth = 0; ; depth++) {
      for (let name2 of (Object.getOwnPropertyNames || Object.keys)(obj)) {
        if (seen.has(name2))
          continue;
        seen.add(name2);
        let value;
        try {
          value = obj[name2];
        } catch (_) {
          continue;
        }
        options.push({
          label: name2,
          type: typeof value == "function" ? /^[A-Z]/.test(name2) ? "class" : top3 ? "function" : "method" : top3 ? "variable" : "property",
          boost: -depth
        });
      }
      let next2 = Object.getPrototypeOf(obj);
      if (!next2)
        return options;
      obj = next2;
    }
  }
  function scopeCompletionSource(scope) {
    let cache3 = /* @__PURE__ */ new Map();
    return (context) => {
      let path = completionPath(context);
      if (!path)
        return null;
      let target = scope;
      for (let step of path.path) {
        target = target[step];
        if (!target)
          return null;
      }
      let options = cache3.get(target);
      if (!options)
        cache3.set(target, options = enumeratePropertyCompletions(target, !path.path.length));
      return {
        from: context.pos - path.name.length,
        options,
        validFor: Identifier
      };
    };
  }
  function javascript(config = {}) {
    let lang = config.jsx ? config.typescript ? tsxLanguage : jsxLanguage : config.typescript ? typescriptLanguage : javascriptLanguage;
    return new LanguageSupport(lang, [
      javascriptLanguage.data.of({
        autocomplete: ifNotIn(dontComplete, completeFromList(snippets.concat(keywords)))
      }),
      javascriptLanguage.data.of({
        autocomplete: localCompletionSource
      }),
      config.jsx ? autoCloseTags : []
    ]);
  }
  function findOpenTag(node) {
    for (; ; ) {
      if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
        return node;
      if (!node.parent)
        return null;
      node = node.parent;
    }
  }
  function elementName(doc2, tree, max = doc2.length) {
    for (let ch2 = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch2; ch2 = ch2.nextSibling) {
      if (ch2.name == "JSXIdentifier" || ch2.name == "JSXBuiltin" || ch2.name == "JSXNamespacedName" || ch2.name == "JSXMemberExpression")
        return doc2.sliceString(ch2.from, Math.min(ch2.to, max));
    }
    return "";
  }
  function esLint(eslint, config) {
    if (!config) {
      config = {
        parserOptions: { ecmaVersion: 2019, sourceType: "module" },
        env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
        rules: {}
      };
      eslint.getRules().forEach((desc, name2) => {
        if (desc.meta.docs.recommended)
          config.rules[name2] = 2;
      });
    }
    return (view) => {
      let { state } = view, found = [];
      for (let { from: from3, to } of javascriptLanguage.findRegions(state)) {
        let fromLine = state.doc.lineAt(from3), offset2 = { line: fromLine.number - 1, col: from3 - fromLine.from, pos: from3 };
        for (let d3 of eslint.verify(state.sliceDoc(from3, to), config))
          found.push(translateDiagnostic(d3, state.doc, offset2));
      }
      return found;
    };
  }
  function mapPos(line, col, doc2, offset2) {
    return doc2.line(line + offset2.line).from + col + (line == 1 ? offset2.col - 1 : -1);
  }
  function translateDiagnostic(input, doc2, offset2) {
    let start2 = mapPos(input.line, input.column, doc2, offset2);
    let result = {
      from: start2,
      to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc2, offset2) : start2,
      message: input.message,
      source: input.ruleId ? "eslint:" + input.ruleId : "eslint",
      severity: input.severity == 1 ? "warning" : "error"
    };
    if (input.fix) {
      let { range, text } = input.fix, from3 = range[0] + offset2.pos - start2, to = range[1] + offset2.pos - start2;
      result.actions = [{
        name: "fix",
        apply(view, start3) {
          view.dispatch({ changes: { from: start3 + from3, to: start3 + to, insert: text }, scrollIntoView: true });
        }
      }];
    }
    return result;
  }
  var snippets, cache, ScopeNodes, functionContext, gatherCompletions, Identifier, dontComplete, javascriptLanguage, jsxSublanguage, typescriptLanguage, jsxLanguage, tsxLanguage, keywords, android2, autoCloseTags;
  var init_dist10 = __esm({
    "node_modules/@codemirror/lang-javascript/dist/index.js"() {
      init_index_es4();
      init_dist5();
      init_dist();
      init_dist2();
      init_dist9();
      init_dist3();
      snippets = [
        /* @__PURE__ */ snippetCompletion("function ${name}(${params}) {\n	${}\n}", {
          label: "function",
          detail: "definition",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n	${}\n}", {
          label: "for",
          detail: "loop",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("for (let ${name} of ${collection}) {\n	${}\n}", {
          label: "for",
          detail: "of loop",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("do {\n	${}\n} while (${})", {
          label: "do",
          detail: "loop",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("while (${}) {\n	${}\n}", {
          label: "while",
          detail: "loop",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("try {\n	${}\n} catch (${error}) {\n	${}\n}", {
          label: "try",
          detail: "/ catch block",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n}", {
          label: "if",
          detail: "block",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("if (${}) {\n	${}\n} else {\n	${}\n}", {
          label: "if",
          detail: "/ else block",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("class ${name} {\n	constructor(${params}) {\n		${}\n	}\n}", {
          label: "class",
          detail: "definition",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion('import {${names}} from "${module}"\n${}', {
          label: "import",
          detail: "named",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion('import ${name} from "${module}"\n${}', {
          label: "import",
          detail: "default",
          type: "keyword"
        })
      ];
      cache = /* @__PURE__ */ new NodeWeakMap();
      ScopeNodes = /* @__PURE__ */ new Set([
        "Script",
        "Block",
        "FunctionExpression",
        "FunctionDeclaration",
        "ArrowFunction",
        "MethodDeclaration",
        "ForStatement"
      ]);
      functionContext = ["FunctionDeclaration"];
      gatherCompletions = {
        FunctionDeclaration: /* @__PURE__ */ defID("function"),
        ClassDeclaration: /* @__PURE__ */ defID("class"),
        ClassExpression: () => true,
        EnumDeclaration: /* @__PURE__ */ defID("constant"),
        TypeAliasDeclaration: /* @__PURE__ */ defID("type"),
        NamespaceDeclaration: /* @__PURE__ */ defID("namespace"),
        VariableDefinition(node, def) {
          if (!node.matchContext(functionContext))
            def(node, "variable");
        },
        TypeDefinition(node, def) {
          def(node, "type");
        },
        __proto__: null
      };
      Identifier = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
      dontComplete = [
        "TemplateString",
        "String",
        "RegExp",
        "LineComment",
        "BlockComment",
        "VariableDefinition",
        "TypeDefinition",
        "Label",
        "PropertyDefinition",
        "PropertyName",
        "PrivatePropertyDefinition",
        "PrivatePropertyName"
      ];
      javascriptLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "javascript",
        parser: /* @__PURE__ */ parser4.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
              TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
              LabeledStatement: flatIndent,
              SwitchBody: (context) => {
                let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
              },
              Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
              ArrowFunction: (cx2) => cx2.baseIndent + cx2.unit,
              "TemplateString BlockComment": () => null,
              "Statement Property": /* @__PURE__ */ continuedIndent({ except: /^{/ }),
              JSXElement(context) {
                let closed = /^\s*<\//.test(context.textAfter);
                return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
              },
              JSXEscape(context) {
                let closed = /\s*\}/.test(context.textAfter);
                return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
              },
              "JSXOpenTag JSXSelfClosingTag"(context) {
                return context.column(context.node.from) + context.unit;
              }
            }),
            /* @__PURE__ */ foldNodeProp.add({
              "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression": foldInside,
              BlockComment(tree) {
                return { from: tree.from + 2, to: tree.to - 2 };
              }
            })
          ]
        }),
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
          wordChars: "$"
        }
      });
      jsxSublanguage = {
        test: (node) => /^JSX/.test(node.name),
        facet: /* @__PURE__ */ defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
      };
      typescriptLanguage = /* @__PURE__ */ javascriptLanguage.configure({ dialect: "ts" }, "typescript");
      jsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
        dialect: "jsx",
        props: [/* @__PURE__ */ sublanguageProp.add((n2) => n2.isTop ? [jsxSublanguage] : void 0)]
      });
      tsxLanguage = /* @__PURE__ */ javascriptLanguage.configure({
        dialect: "jsx ts",
        props: [/* @__PURE__ */ sublanguageProp.add((n2) => n2.isTop ? [jsxSublanguage] : void 0)]
      }, "typescript");
      keywords = /* @__PURE__ */ "break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map((kw2) => ({ label: kw2, type: "keyword" }));
      android2 = typeof navigator == "object" && /* @__PURE__ */ /Android\b/.test(navigator.userAgent);
      autoCloseTags = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text) => {
        if ((android2 ? view.composing : view.compositionStarted) || view.state.readOnly || from3 != to || text != ">" && text != "/" || !javascriptLanguage.isActiveAt(view.state, from3, -1))
          return false;
        let { state } = view;
        let changes = state.changeByRange((range) => {
          var _a2, _b2;
          let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name2;
          if (around.name == "JSXStartTag")
            around = around.parent;
          if (text == ">" && around.name == "JSXFragmentTag") {
            return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></>` } };
          } else if (text == "/" && around.name == "JSXFragmentTag") {
            let empty = around.parent, base4 = empty === null || empty === void 0 ? void 0 : empty.parent;
            if (empty.from == head - 1 && ((_a2 = base4.lastChild) === null || _a2 === void 0 ? void 0 : _a2.name) != "JSXEndTag" && (name2 = elementName(state.doc, base4 === null || base4 === void 0 ? void 0 : base4.firstChild, head))) {
              let insert2 = `/${name2}>`;
              return { range: EditorSelection.cursor(head + insert2.length), changes: { from: head, insert: insert2 } };
            }
          } else if (text == ">") {
            let openTag = findOpenTag(around);
            if (openTag && ((_b2 = openTag.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "JSXEndTag" && state.sliceDoc(head, head + 2) != "</" && (name2 = elementName(state.doc, openTag, head)))
              return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name2}>` } };
          }
          return { range };
        });
        if (changes.changes.empty)
          return false;
        view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
        return true;
      });
    }
  });

  // node_modules/@codemirror/lang-html/dist/index.js
  var dist_exports3 = {};
  __export(dist_exports3, {
    autoCloseTags: () => autoCloseTags2,
    html: () => html,
    htmlCompletionSource: () => htmlCompletionSource,
    htmlCompletionSourceWith: () => htmlCompletionSourceWith,
    htmlLanguage: () => htmlLanguage
  });
  function elementName2(doc2, tree, max = doc2.length) {
    if (!tree)
      return "";
    let tag = tree.firstChild;
    let name2 = tag && tag.getChild("TagName");
    return name2 ? doc2.sliceString(name2.from, Math.min(name2.to, max)) : "";
  }
  function findParentElement(tree, skip = false) {
    for (let cur = tree.parent; cur; cur = cur.parent)
      if (cur.name == "Element") {
        if (skip)
          skip = false;
        else
          return cur;
      }
    return null;
  }
  function allowedChildren(doc2, tree, schema) {
    let parentInfo = schema.tags[elementName2(doc2, findParentElement(tree, true))];
    return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
  }
  function openTags(doc2, tree) {
    let open = [];
    for (let parent = tree; parent = findParentElement(parent); ) {
      let tagName2 = elementName2(doc2, parent);
      if (tagName2 && parent.lastChild.name == "CloseTag")
        break;
      if (tagName2 && open.indexOf(tagName2) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
        open.push(tagName2);
    }
    return open;
  }
  function completeTag(state, schema, tree, from3, to) {
    let end2 = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
    return {
      from: from3,
      to,
      options: allowedChildren(state.doc, tree, schema).map((tagName2) => ({ label: tagName2, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({
        label: "/" + tag,
        apply: "/" + tag + end2,
        type: "type",
        boost: 99 - i
      }))),
      validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/
    };
  }
  function completeCloseTag(state, tree, from3, to) {
    let end2 = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
    return {
      from: from3,
      to,
      options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end2, type: "type", boost: 99 - i })),
      validFor: identifier3
    };
  }
  function completeStartTag(state, schema, tree, pos) {
    let options = [], level = 0;
    for (let tagName2 of allowedChildren(state.doc, tree, schema))
      options.push({ label: "<" + tagName2, type: "type" });
    for (let open of openTags(state.doc, tree))
      options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
    return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
  }
  function completeAttrName(state, schema, tree, from3, to) {
    let elt2 = findParentElement(tree), info = elt2 ? schema.tags[elementName2(state.doc, elt2)] : null;
    let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
    let names = info && info.globalAttrs === false ? localAttrs : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
    return {
      from: from3,
      to,
      options: names.map((attrName2) => ({ label: attrName2, type: "property" })),
      validFor: identifier3
    };
  }
  function completeAttrValue(state, schema, tree, from3, to) {
    var _a2;
    let nameNode = (_a2 = tree.parent) === null || _a2 === void 0 ? void 0 : _a2.getChild("AttributeName");
    let options = [], token = void 0;
    if (nameNode) {
      let attrName2 = state.sliceDoc(nameNode.from, nameNode.to);
      let attrs = schema.globalAttrs[attrName2];
      if (!attrs) {
        let elt2 = findParentElement(tree), info = elt2 ? schema.tags[elementName2(state.doc, elt2)] : null;
        attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName2];
      }
      if (attrs) {
        let base4 = state.sliceDoc(from3, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
        if (/^['"]/.test(base4)) {
          token = base4[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
          quoteStart = "";
          quoteEnd = state.sliceDoc(to, to + 1) == base4[0] ? "" : base4[0];
          base4 = base4.slice(1);
          from3++;
        } else {
          token = /^[^\s<>='"]*$/;
        }
        for (let value of attrs)
          options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
      }
    }
    return { from: from3, to, options, validFor: token };
  }
  function htmlCompletionFor(schema, context) {
    let { state, pos } = context, around = syntaxTree(state).resolveInner(pos), tree = around.resolve(pos, -1);
    for (let scan = pos, before; around == tree && (before = tree.childBefore(scan)); ) {
      let last = before.lastChild;
      if (!last || !last.type.isError || last.from < last.to)
        break;
      around = tree = before;
      scan = last.from;
    }
    if (tree.name == "TagName") {
      return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos) : completeTag(state, schema, tree, tree.from, pos);
    } else if (tree.name == "StartTag") {
      return completeTag(state, schema, tree, pos, pos);
    } else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
      return completeCloseTag(state, tree, pos, pos);
    } else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
      return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
    } else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
      return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
    } else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
      return completeStartTag(state, schema, tree, pos);
    } else {
      return null;
    }
  }
  function htmlCompletionSource(context) {
    return htmlCompletionFor(Schema.default, context);
  }
  function htmlCompletionSourceWith(config) {
    let { extraTags, extraGlobalAttributes: extraAttrs } = config;
    let schema = extraAttrs || extraTags ? new Schema(extraTags, extraAttrs) : Schema.default;
    return (context) => htmlCompletionFor(schema, context);
  }
  function html(config = {}) {
    let dialect2 = "", wrap;
    if (config.matchClosingTags === false)
      dialect2 = "noMatch";
    if (config.selfClosingTags === true)
      dialect2 = (dialect2 ? dialect2 + " " : "") + "selfClosing";
    if (config.nestedLanguages && config.nestedLanguages.length || config.nestedAttributes && config.nestedAttributes.length)
      wrap = configureNesting((config.nestedLanguages || []).concat(defaultNesting), (config.nestedAttributes || []).concat(defaultAttrs));
    let lang = wrap || dialect2 ? htmlLanguage.configure({ dialect: dialect2, wrap }) : htmlLanguage;
    return new LanguageSupport(lang, [
      htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),
      config.autoCloseTags !== false ? autoCloseTags2 : [],
      javascript().support,
      css().support
    ]);
  }
  var Targets, Charsets, Methods, Encs, Bool, S, Tags, GlobalAttrs, eventAttributes, Schema, identifier3, defaultNesting, defaultAttrs, htmlLanguage, selfClosers2, autoCloseTags2;
  var init_dist11 = __esm({
    "node_modules/@codemirror/lang-html/dist/index.js"() {
      init_index_es2();
      init_dist8();
      init_dist10();
      init_dist2();
      init_dist();
      init_dist5();
      Targets = ["_blank", "_self", "_top", "_parent"];
      Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
      Methods = ["get", "post", "put", "delete"];
      Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
      Bool = ["true", "false"];
      S = {};
      Tags = {
        a: {
          attrs: {
            href: null,
            ping: null,
            type: null,
            media: null,
            target: Targets,
            hreflang: null
          }
        },
        abbr: S,
        address: S,
        area: {
          attrs: {
            alt: null,
            coords: null,
            href: null,
            target: null,
            ping: null,
            media: null,
            hreflang: null,
            type: null,
            shape: ["default", "rect", "circle", "poly"]
          }
        },
        article: S,
        aside: S,
        audio: {
          attrs: {
            src: null,
            mediagroup: null,
            crossorigin: ["anonymous", "use-credentials"],
            preload: ["none", "metadata", "auto"],
            autoplay: ["autoplay"],
            loop: ["loop"],
            controls: ["controls"]
          }
        },
        b: S,
        base: { attrs: { href: null, target: Targets } },
        bdi: S,
        bdo: S,
        blockquote: { attrs: { cite: null } },
        body: S,
        br: S,
        button: {
          attrs: {
            form: null,
            formaction: null,
            name: null,
            value: null,
            autofocus: ["autofocus"],
            disabled: ["autofocus"],
            formenctype: Encs,
            formmethod: Methods,
            formnovalidate: ["novalidate"],
            formtarget: Targets,
            type: ["submit", "reset", "button"]
          }
        },
        canvas: { attrs: { width: null, height: null } },
        caption: S,
        center: S,
        cite: S,
        code: S,
        col: { attrs: { span: null } },
        colgroup: { attrs: { span: null } },
        command: {
          attrs: {
            type: ["command", "checkbox", "radio"],
            label: null,
            icon: null,
            radiogroup: null,
            command: null,
            title: null,
            disabled: ["disabled"],
            checked: ["checked"]
          }
        },
        data: { attrs: { value: null } },
        datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
        datalist: { attrs: { data: null } },
        dd: S,
        del: { attrs: { cite: null, datetime: null } },
        details: { attrs: { open: ["open"] } },
        dfn: S,
        div: S,
        dl: S,
        dt: S,
        em: S,
        embed: { attrs: { src: null, type: null, width: null, height: null } },
        eventsource: { attrs: { src: null } },
        fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
        figcaption: S,
        figure: S,
        footer: S,
        form: {
          attrs: {
            action: null,
            name: null,
            "accept-charset": Charsets,
            autocomplete: ["on", "off"],
            enctype: Encs,
            method: Methods,
            novalidate: ["novalidate"],
            target: Targets
          }
        },
        h1: S,
        h2: S,
        h3: S,
        h4: S,
        h5: S,
        h6: S,
        head: {
          children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
        },
        header: S,
        hgroup: S,
        hr: S,
        html: {
          attrs: { manifest: null }
        },
        i: S,
        iframe: {
          attrs: {
            src: null,
            srcdoc: null,
            name: null,
            width: null,
            height: null,
            sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
            seamless: ["seamless"]
          }
        },
        img: {
          attrs: {
            alt: null,
            src: null,
            ismap: null,
            usemap: null,
            width: null,
            height: null,
            crossorigin: ["anonymous", "use-credentials"]
          }
        },
        input: {
          attrs: {
            alt: null,
            dirname: null,
            form: null,
            formaction: null,
            height: null,
            list: null,
            max: null,
            maxlength: null,
            min: null,
            name: null,
            pattern: null,
            placeholder: null,
            size: null,
            src: null,
            step: null,
            value: null,
            width: null,
            accept: ["audio/*", "video/*", "image/*"],
            autocomplete: ["on", "off"],
            autofocus: ["autofocus"],
            checked: ["checked"],
            disabled: ["disabled"],
            formenctype: Encs,
            formmethod: Methods,
            formnovalidate: ["novalidate"],
            formtarget: Targets,
            multiple: ["multiple"],
            readonly: ["readonly"],
            required: ["required"],
            type: [
              "hidden",
              "text",
              "search",
              "tel",
              "url",
              "email",
              "password",
              "datetime",
              "date",
              "month",
              "week",
              "time",
              "datetime-local",
              "number",
              "range",
              "color",
              "checkbox",
              "radio",
              "file",
              "submit",
              "image",
              "reset",
              "button"
            ]
          }
        },
        ins: { attrs: { cite: null, datetime: null } },
        kbd: S,
        keygen: {
          attrs: {
            challenge: null,
            form: null,
            name: null,
            autofocus: ["autofocus"],
            disabled: ["disabled"],
            keytype: ["RSA"]
          }
        },
        label: { attrs: { for: null, form: null } },
        legend: S,
        li: { attrs: { value: null } },
        link: {
          attrs: {
            href: null,
            type: null,
            hreflang: null,
            media: null,
            sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
          }
        },
        map: { attrs: { name: null } },
        mark: S,
        menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
        meta: {
          attrs: {
            content: null,
            charset: Charsets,
            name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
            "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
          }
        },
        meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
        nav: S,
        noscript: S,
        object: {
          attrs: {
            data: null,
            type: null,
            name: null,
            usemap: null,
            form: null,
            width: null,
            height: null,
            typemustmatch: ["typemustmatch"]
          }
        },
        ol: {
          attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
          children: ["li", "script", "template", "ul", "ol"]
        },
        optgroup: { attrs: { disabled: ["disabled"], label: null } },
        option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
        output: { attrs: { for: null, form: null, name: null } },
        p: S,
        param: { attrs: { name: null, value: null } },
        pre: S,
        progress: { attrs: { value: null, max: null } },
        q: { attrs: { cite: null } },
        rp: S,
        rt: S,
        ruby: S,
        samp: S,
        script: {
          attrs: {
            type: ["text/javascript"],
            src: null,
            async: ["async"],
            defer: ["defer"],
            charset: Charsets
          }
        },
        section: S,
        select: {
          attrs: {
            form: null,
            name: null,
            size: null,
            autofocus: ["autofocus"],
            disabled: ["disabled"],
            multiple: ["multiple"]
          }
        },
        slot: { attrs: { name: null } },
        small: S,
        source: { attrs: { src: null, type: null, media: null } },
        span: S,
        strong: S,
        style: {
          attrs: {
            type: ["text/css"],
            media: null,
            scoped: null
          }
        },
        sub: S,
        summary: S,
        sup: S,
        table: S,
        tbody: S,
        td: { attrs: { colspan: null, rowspan: null, headers: null } },
        template: S,
        textarea: {
          attrs: {
            dirname: null,
            form: null,
            maxlength: null,
            name: null,
            placeholder: null,
            rows: null,
            cols: null,
            autofocus: ["autofocus"],
            disabled: ["disabled"],
            readonly: ["readonly"],
            required: ["required"],
            wrap: ["soft", "hard"]
          }
        },
        tfoot: S,
        th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
        thead: S,
        time: { attrs: { datetime: null } },
        title: S,
        tr: S,
        track: {
          attrs: {
            src: null,
            label: null,
            default: null,
            kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
            srclang: null
          }
        },
        ul: { children: ["li", "script", "template", "ul", "ol"] },
        var: S,
        video: {
          attrs: {
            src: null,
            poster: null,
            width: null,
            height: null,
            crossorigin: ["anonymous", "use-credentials"],
            preload: ["auto", "metadata", "none"],
            autoplay: ["autoplay"],
            mediagroup: ["movie"],
            muted: ["muted"],
            controls: ["controls"]
          }
        },
        wbr: S
      };
      GlobalAttrs = {
        accesskey: null,
        class: null,
        contenteditable: Bool,
        contextmenu: null,
        dir: ["ltr", "rtl", "auto"],
        draggable: ["true", "false", "auto"],
        dropzone: ["copy", "move", "link", "string:", "file:"],
        hidden: ["hidden"],
        id: null,
        inert: ["inert"],
        itemid: null,
        itemprop: null,
        itemref: null,
        itemscope: ["itemscope"],
        itemtype: null,
        lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
        spellcheck: Bool,
        autocorrect: Bool,
        autocapitalize: Bool,
        style: null,
        tabindex: null,
        title: null,
        translate: ["yes", "no"],
        rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
        role: /* @__PURE__ */ "alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
        "aria-activedescendant": null,
        "aria-atomic": Bool,
        "aria-autocomplete": ["inline", "list", "both", "none"],
        "aria-busy": Bool,
        "aria-checked": ["true", "false", "mixed", "undefined"],
        "aria-controls": null,
        "aria-describedby": null,
        "aria-disabled": Bool,
        "aria-dropeffect": null,
        "aria-expanded": ["true", "false", "undefined"],
        "aria-flowto": null,
        "aria-grabbed": ["true", "false", "undefined"],
        "aria-haspopup": Bool,
        "aria-hidden": Bool,
        "aria-invalid": ["true", "false", "grammar", "spelling"],
        "aria-label": null,
        "aria-labelledby": null,
        "aria-level": null,
        "aria-live": ["off", "polite", "assertive"],
        "aria-multiline": Bool,
        "aria-multiselectable": Bool,
        "aria-owns": null,
        "aria-posinset": null,
        "aria-pressed": ["true", "false", "mixed", "undefined"],
        "aria-readonly": Bool,
        "aria-relevant": null,
        "aria-required": Bool,
        "aria-selected": ["true", "false", "undefined"],
        "aria-setsize": null,
        "aria-sort": ["ascending", "descending", "none", "other"],
        "aria-valuemax": null,
        "aria-valuemin": null,
        "aria-valuenow": null,
        "aria-valuetext": null
      };
      eventAttributes = /* @__PURE__ */ "beforeunload copy cut dragstart dragover dragleave dragenter dragend drag paste focus blur change click load mousedown mouseenter mouseleave mouseup keydown keyup resize scroll unload".split(" ").map((n2) => "on" + n2);
      for (let a2 of eventAttributes)
        GlobalAttrs[a2] = null;
      Schema = class {
        constructor(extraTags, extraAttrs) {
          this.tags = Object.assign(Object.assign({}, Tags), extraTags);
          this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
          this.allTags = Object.keys(this.tags);
          this.globalAttrNames = Object.keys(this.globalAttrs);
        }
      };
      Schema.default = /* @__PURE__ */ new Schema();
      identifier3 = /^[:\-\.\w\u00b7-\uffff]*$/;
      defaultNesting = [
        {
          tag: "script",
          attrs: (attrs) => attrs.type == "text/typescript" || attrs.lang == "ts",
          parser: typescriptLanguage.parser
        },
        {
          tag: "script",
          attrs: (attrs) => attrs.type == "text/babel" || attrs.type == "text/jsx",
          parser: jsxLanguage.parser
        },
        {
          tag: "script",
          attrs: (attrs) => attrs.type == "text/typescript-jsx",
          parser: tsxLanguage.parser
        },
        {
          tag: "script",
          attrs(attrs) {
            return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
          },
          parser: javascriptLanguage.parser
        },
        {
          tag: "style",
          attrs(attrs) {
            return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
          },
          parser: cssLanguage.parser
        }
      ];
      defaultAttrs = /* @__PURE__ */ [
        {
          name: "style",
          parser: /* @__PURE__ */ cssLanguage.parser.configure({ top: "Styles" })
        }
      ].concat(/* @__PURE__ */ eventAttributes.map((name2) => ({ name: name2, parser: javascriptLanguage.parser })));
      htmlLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "html",
        parser: /* @__PURE__ */ parser2.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              Element(context) {
                let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                if (context.node.to <= context.pos + after[0].length)
                  return context.continue();
                return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
              },
              "OpenTag CloseTag SelfClosingTag"(context) {
                return context.column(context.node.from) + context.unit;
              },
              Document(context) {
                if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                  return context.continue();
                let endElt = null, close;
                for (let cur = context.node; ; ) {
                  let last = cur.lastChild;
                  if (!last || last.name != "Element" || last.to != cur.to)
                    break;
                  endElt = cur = last;
                }
                if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                  return context.lineIndent(endElt.from) + context.unit;
                return null;
              }
            }),
            /* @__PURE__ */ foldNodeProp.add({
              Element(node) {
                let first = node.firstChild, last = node.lastChild;
                if (!first || first.name != "OpenTag")
                  return null;
                return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
              }
            }),
            /* @__PURE__ */ bracketMatchingHandle.add({
              "OpenTag CloseTag": (node) => node.getChild("TagName")
            })
          ],
          wrap: /* @__PURE__ */ configureNesting(defaultNesting, defaultAttrs)
        }),
        languageData: {
          commentTokens: { block: { open: "<!--", close: "-->" } },
          indentOnInput: /^\s*<\/\w+\W$/,
          wordChars: "-._"
        }
      });
      selfClosers2 = /* @__PURE__ */ new Set(/* @__PURE__ */ "area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
      autoCloseTags2 = /* @__PURE__ */ EditorView.inputHandler.of((view, from3, to, text) => {
        if (view.composing || view.state.readOnly || from3 != to || text != ">" && text != "/" || !htmlLanguage.isActiveAt(view.state, from3, -1))
          return false;
        let { state } = view;
        let changes = state.changeByRange((range) => {
          var _a2, _b2, _c;
          let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name2;
          if (around.name == "TagName" || around.name == "StartTag")
            around = around.parent;
          if (text == ">" && around.name == "OpenTag") {
            if (((_b2 = (_a2 = around.parent) === null || _a2 === void 0 ? void 0 : _a2.lastChild) === null || _b2 === void 0 ? void 0 : _b2.name) != "CloseTag" && (name2 = elementName2(state.doc, around.parent, head)) && !selfClosers2.has(name2)) {
              let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
              let insert2 = `${hasRightBracket ? "" : ">"}</${name2}>`;
              return { range: EditorSelection.cursor(head + 1), changes: { from: head + (hasRightBracket ? 1 : 0), insert: insert2 } };
            }
          } else if (text == "/" && around.name == "OpenTag") {
            let empty = around.parent, base4 = empty === null || empty === void 0 ? void 0 : empty.parent;
            if (empty.from == head - 1 && ((_c = base4.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" && (name2 = elementName2(state.doc, base4, head)) && !selfClosers2.has(name2)) {
              let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
              let insert2 = `/${name2}${hasRightBracket ? "" : ">"}`;
              let pos = head + insert2.length + (hasRightBracket ? 1 : 0);
              return { range: EditorSelection.cursor(pos), changes: { from: head, insert: insert2 } };
            }
          }
          return { range };
        });
        if (changes.changes.empty)
          return false;
        view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
        return true;
      });
    }
  });

  // node_modules/@codemirror/lang-markdown/dist/index.js
  var dist_exports4 = {};
  __export(dist_exports4, {
    commonmarkLanguage: () => commonmarkLanguage,
    deleteMarkupBackward: () => deleteMarkupBackward,
    insertNewlineContinueMarkup: () => insertNewlineContinueMarkup,
    markdown: () => markdown,
    markdownKeymap: () => markdownKeymap,
    markdownLanguage: () => markdownLanguage
  });
  function isHeading(type7) {
    let match3 = /^(?:ATX|Setext)Heading(\d)$/.exec(type7.name);
    return match3 ? +match3[1] : void 0;
  }
  function findSectionEnd(headerNode, level) {
    let last = headerNode;
    for (; ; ) {
      let next2 = last.nextSibling, heading2;
      if (!next2 || (heading2 = isHeading(next2.type)) != null && heading2 <= level)
        break;
      last = next2;
    }
    return last.to;
  }
  function mkLang(parser14) {
    return new Language(data, parser14, [headerIndent], "markdown");
  }
  function getCodeParser(languages2, defaultLanguage) {
    return (info) => {
      if (info && languages2) {
        let found = null;
        info = /\S*/.exec(info)[0];
        if (typeof languages2 == "function")
          found = languages2(info);
        else
          found = LanguageDescription.matchLanguageName(languages2, info, true);
        if (found instanceof LanguageDescription)
          return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());
        else if (found)
          return found.parser;
      }
      return defaultLanguage ? defaultLanguage.parser : null;
    };
  }
  function getContext(node, doc2) {
    let nodes = [];
    for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
      if (cur.name == "ListItem" || cur.name == "Blockquote" || cur.name == "FencedCode")
        nodes.push(cur);
    }
    let context = [];
    for (let i = nodes.length - 1; i >= 0; i--) {
      let node2 = nodes[i], match3;
      let line = doc2.lineAt(node2.from), startPos = node2.from - line.from;
      if (node2.name == "FencedCode") {
        context.push(new Context(node2, startPos, startPos, "", "", "", null));
      } else if (node2.name == "Blockquote" && (match3 = /^[ \t]*>( ?)/.exec(line.text.slice(startPos)))) {
        context.push(new Context(node2, startPos, startPos + match3[0].length, "", match3[1], ">", null));
      } else if (node2.name == "ListItem" && node2.parent.name == "OrderedList" && (match3 = /^([ \t]*)\d+([.)])([ \t]*)/.exec(line.text.slice(startPos)))) {
        let after = match3[3], len = match3[0].length;
        if (after.length >= 4) {
          after = after.slice(0, after.length - 4);
          len -= 4;
        }
        context.push(new Context(node2.parent, startPos, startPos + len, match3[1], after, match3[2], node2));
      } else if (node2.name == "ListItem" && node2.parent.name == "BulletList" && (match3 = /^([ \t]*)([-+*])([ \t]{1,4}\[[ xX]\])?([ \t]+)/.exec(line.text.slice(startPos)))) {
        let after = match3[4], len = match3[0].length;
        if (after.length > 4) {
          after = after.slice(0, after.length - 4);
          len -= 4;
        }
        let type7 = match3[2];
        if (match3[3])
          type7 += match3[3].replace(/[xX]/, " ");
        context.push(new Context(node2.parent, startPos, startPos + len, match3[1], after, type7, node2));
      }
    }
    return context;
  }
  function itemNumber(item, doc2) {
    return /^(\s*)(\d+)(?=[.)])/.exec(doc2.sliceString(item.from, item.from + 10));
  }
  function renumberList(after, doc2, changes, offset2 = 0) {
    for (let prev = -1, node = after; ; ) {
      if (node.name == "ListItem") {
        let m = itemNumber(node, doc2);
        let number3 = +m[2];
        if (prev >= 0) {
          if (number3 != prev + 1)
            return;
          changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset2) });
        }
        prev = number3;
      }
      let next2 = node.nextSibling;
      if (!next2)
        break;
      node = next2;
    }
  }
  function isMark(node) {
    return node.name == "QuoteMark" || node.name == "ListMark";
  }
  function contextNodeForDelete(tree, pos) {
    let node = tree.resolveInner(pos, -1), scan = pos;
    if (isMark(node)) {
      scan = node.from;
      node = node.parent;
    }
    for (let prev; prev = node.childBefore(scan); ) {
      if (isMark(prev)) {
        scan = prev.from;
      } else if (prev.name == "OrderedList" || prev.name == "BulletList") {
        node = prev.lastChild;
        scan = node.to;
      } else {
        break;
      }
    }
    return node;
  }
  function markdown(config = {}) {
    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser: parser14 } = commonmarkLanguage } = config;
    if (!(parser14 instanceof MarkdownParser))
      throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
    let extensions = config.extensions ? [config.extensions] : [];
    let support = [htmlNoMatch.support], defaultCode;
    if (defaultCodeLanguage instanceof LanguageSupport) {
      support.push(defaultCodeLanguage.support);
      defaultCode = defaultCodeLanguage.language;
    } else if (defaultCodeLanguage) {
      defaultCode = defaultCodeLanguage;
    }
    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : void 0;
    extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
    if (addKeymap)
      support.push(Prec.high(keymap.of(markdownKeymap)));
    return new LanguageSupport(mkLang(parser14.configure(extensions)), support);
  }
  var data, headingProp, commonmark, headerIndent, commonmarkLanguage, extended, markdownLanguage, Context, insertNewlineContinueMarkup, deleteMarkupBackward, markdownKeymap, htmlNoMatch;
  var init_dist12 = __esm({
    "node_modules/@codemirror/lang-markdown/dist/index.js"() {
      init_dist();
      init_dist2();
      init_dist5();
      init_dist6();
      init_dist11();
      init_dist3();
      data = /* @__PURE__ */ defineLanguageFacet({ block: { open: "<!--", close: "-->" } });
      headingProp = /* @__PURE__ */ new NodeProp();
      commonmark = /* @__PURE__ */ parser.configure({
        props: [
          /* @__PURE__ */ foldNodeProp.add((type7) => {
            return !type7.is("Block") || type7.is("Document") || isHeading(type7) != null ? void 0 : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
          }),
          /* @__PURE__ */ headingProp.add(isHeading),
          /* @__PURE__ */ indentNodeProp.add({
            Document: () => null
          }),
          /* @__PURE__ */ languageDataProp.add({
            Document: data
          })
        ]
      });
      headerIndent = /* @__PURE__ */ foldService.of((state, start2, end2) => {
        for (let node = syntaxTree(state).resolveInner(end2, -1); node; node = node.parent) {
          if (node.from < start2)
            break;
          let heading2 = node.type.prop(headingProp);
          if (heading2 == null)
            continue;
          let upto = findSectionEnd(node, heading2);
          if (upto > end2)
            return { from: end2, to: upto };
        }
        return null;
      });
      commonmarkLanguage = /* @__PURE__ */ mkLang(commonmark);
      extended = /* @__PURE__ */ commonmark.configure([GFM, Subscript, Superscript, Emoji]);
      markdownLanguage = /* @__PURE__ */ mkLang(extended);
      Context = class {
        constructor(node, from3, to, spaceBefore, spaceAfter, type7, item) {
          this.node = node;
          this.from = from3;
          this.to = to;
          this.spaceBefore = spaceBefore;
          this.spaceAfter = spaceAfter;
          this.type = type7;
          this.item = item;
        }
        blank(maxWidth, trailing = true) {
          let result = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
          if (maxWidth != null) {
            while (result.length < maxWidth)
              result += " ";
            return result;
          } else {
            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
              result += " ";
            return result + (trailing ? this.spaceAfter : "");
          }
        }
        marker(doc2, add2) {
          let number3 = this.node.name == "OrderedList" ? String(+itemNumber(this.item, doc2)[2] + add2) : "";
          return this.spaceBefore + number3 + this.type + this.spaceAfter;
        }
      };
      insertNewlineContinueMarkup = ({ state, dispatch }) => {
        let tree = syntaxTree(state), { doc: doc2 } = state;
        let dont = null, changes = state.changeByRange((range) => {
          if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))
            return dont = { range };
          let pos = range.from, line = doc2.lineAt(pos);
          let context = getContext(tree.resolveInner(pos, -1), doc2);
          while (context.length && context[context.length - 1].from > pos - line.from)
            context.pop();
          if (!context.length)
            return dont = { range };
          let inner = context[context.length - 1];
          if (inner.to - inner.spaceAfter.length > pos - line.from)
            return dont = { range };
          let emptyLine = pos >= inner.to - inner.spaceAfter.length && !/\S/.test(line.text.slice(inner.to));
          if (inner.item && emptyLine) {
            if (inner.node.firstChild.to >= pos || line.from > 0 && !/[^\s>]/.test(doc2.lineAt(line.from - 1).text)) {
              let next2 = context.length > 1 ? context[context.length - 2] : null;
              let delTo, insert3 = "";
              if (next2 && next2.item) {
                delTo = line.from + next2.from;
                insert3 = next2.marker(doc2, 1);
              } else {
                delTo = line.from + (next2 ? next2.to : 0);
              }
              let changes3 = [{ from: delTo, to: pos, insert: insert3 }];
              if (inner.node.name == "OrderedList")
                renumberList(inner.item, doc2, changes3, -2);
              if (next2 && next2.node.name == "OrderedList")
                renumberList(next2.item, doc2, changes3);
              return { range: EditorSelection.cursor(delTo + insert3.length), changes: changes3 };
            } else {
              let insert3 = "";
              for (let i = 0, e = context.length - 2; i <= e; i++) {
                insert3 += context[i].blank(i < e ? context[i + 1].from - insert3.length : null, i < e);
              }
              insert3 += state.lineBreak;
              return { range: EditorSelection.cursor(pos + insert3.length), changes: { from: line.from, insert: insert3 } };
            }
          }
          if (inner.node.name == "Blockquote" && emptyLine && line.from) {
            let prevLine = doc2.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
            if (quoted && quoted.index == inner.from) {
              let changes3 = state.changes([
                { from: prevLine.from + quoted.index, to: prevLine.to },
                { from: line.from + inner.from, to: line.to }
              ]);
              return { range: range.map(changes3), changes: changes3 };
            }
          }
          let changes2 = [];
          if (inner.node.name == "OrderedList")
            renumberList(inner.item, doc2, changes2);
          let continued = inner.item && inner.item.from < line.from;
          let insert2 = "";
          if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
            for (let i = 0, e = context.length - 1; i <= e; i++) {
              insert2 += i == e && !continued ? context[i].marker(doc2, 1) : context[i].blank(i < e ? context[i + 1].from - insert2.length : null);
            }
          }
          let from3 = pos;
          while (from3 > line.from && /\s/.test(line.text.charAt(from3 - line.from - 1)))
            from3--;
          insert2 = state.lineBreak + insert2;
          changes2.push({ from: from3, to: pos, insert: insert2 });
          return { range: EditorSelection.cursor(from3 + insert2.length), changes: changes2 };
        });
        if (dont)
          return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
      };
      deleteMarkupBackward = ({ state, dispatch }) => {
        let tree = syntaxTree(state);
        let dont = null, changes = state.changeByRange((range) => {
          let pos = range.from, { doc: doc2 } = state;
          if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
            let line = doc2.lineAt(pos);
            let context = getContext(contextNodeForDelete(tree, pos), doc2);
            if (context.length) {
              let inner = context[context.length - 1];
              let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
              if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
                return {
                  range: EditorSelection.cursor(line.from + spaceEnd),
                  changes: { from: line.from + spaceEnd, to: pos }
                };
              if (pos - line.from == spaceEnd) {
                let start2 = line.from + inner.from;
                if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to)))
                  return { range, changes: { from: start2, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };
                if (start2 < pos)
                  return { range: EditorSelection.cursor(start2), changes: { from: start2, to: pos } };
              }
            }
          }
          return dont = { range };
        });
        if (dont)
          return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
        return true;
      };
      markdownKeymap = [
        { key: "Enter", run: insertNewlineContinueMarkup },
        { key: "Backspace", run: deleteMarkupBackward }
      ];
      htmlNoMatch = /* @__PURE__ */ html({ matchClosingTags: false });
    }
  });

  // node_modules/@codemirror/lang-sql/dist/index.js
  var dist_exports5 = {};
  __export(dist_exports5, {
    Cassandra: () => Cassandra,
    MSSQL: () => MSSQL,
    MariaSQL: () => MariaSQL,
    MySQL: () => MySQL,
    PLSQL: () => PLSQL,
    PostgreSQL: () => PostgreSQL,
    SQLDialect: () => SQLDialect,
    SQLite: () => SQLite,
    StandardSQL: () => StandardSQL,
    keywordCompletion: () => keywordCompletion,
    keywordCompletionSource: () => keywordCompletionSource,
    schemaCompletion: () => schemaCompletion,
    schemaCompletionSource: () => schemaCompletionSource,
    sql: () => sql
  });
  function isAlpha2(ch2) {
    return ch2 >= 65 && ch2 <= 90 || ch2 >= 97 && ch2 <= 122 || ch2 >= 48 && ch2 <= 57;
  }
  function isHexDigit(ch2) {
    return ch2 >= 48 && ch2 <= 57 || ch2 >= 97 && ch2 <= 102 || ch2 >= 65 && ch2 <= 70;
  }
  function readLiteral(input, endQuote, backslashEscapes) {
    for (let escaped = false; ; ) {
      if (input.next < 0)
        return;
      if (input.next == endQuote && !escaped) {
        input.advance();
        return;
      }
      escaped = backslashEscapes && !escaped && input.next == 92;
      input.advance();
    }
  }
  function readDoubleDollarLiteral(input) {
    for (; ; ) {
      if (input.next < 0 || input.peek(1) < 0)
        return;
      if (input.next == 36 && input.peek(1) == 36) {
        input.advance(2);
        return;
      }
      input.advance();
    }
  }
  function readWord(input, result) {
    for (; ; ) {
      if (input.next != 95 && !isAlpha2(input.next))
        break;
      if (result != null)
        result += String.fromCharCode(input.next);
      input.advance();
    }
    return result;
  }
  function readWordOrQuoted(input) {
    if (input.next == 39 || input.next == 34 || input.next == 96) {
      let quote2 = input.next;
      input.advance();
      readLiteral(input, quote2, false);
    } else {
      readWord(input);
    }
  }
  function readBits(input, endQuote) {
    while (input.next == 48 || input.next == 49)
      input.advance();
    if (endQuote && input.next == endQuote)
      input.advance();
  }
  function readNumber(input, sawDot) {
    for (; ; ) {
      if (input.next == 46) {
        if (sawDot)
          break;
        sawDot = true;
      } else if (input.next < 48 || input.next > 57) {
        break;
      }
      input.advance();
    }
    if (input.next == 69 || input.next == 101) {
      input.advance();
      if (input.next == 43 || input.next == 45)
        input.advance();
      while (input.next >= 48 && input.next <= 57)
        input.advance();
    }
  }
  function eol(input) {
    while (!(input.next < 0 || input.next == 10))
      input.advance();
  }
  function inString(ch2, str) {
    for (let i = 0; i < str.length; i++)
      if (str.charCodeAt(i) == ch2)
        return true;
    return false;
  }
  function keywords2(keywords47, types8, builtin5) {
    let result = /* @__PURE__ */ Object.create(null);
    result["true"] = result["false"] = Bool2;
    result["null"] = result["unknown"] = Null;
    for (let kw2 of keywords47.split(" "))
      if (kw2)
        result[kw2] = Keyword;
    for (let tp of types8.split(" "))
      if (tp)
        result[tp] = Type2;
    for (let kw2 of (builtin5 || "").split(" "))
      if (kw2)
        result[kw2] = Builtin;
    return result;
  }
  function dialect(spec, kws, types8, builtin5) {
    let dialect2 = {};
    for (let prop in defaults)
      dialect2[prop] = (spec.hasOwnProperty(prop) ? spec : defaults)[prop];
    if (kws)
      dialect2.words = keywords2(kws, types8 || "", builtin5);
    return dialect2;
  }
  function tokensFor(d3) {
    return new ExternalTokenizer((input) => {
      var _a2;
      let { next: next2 } = input;
      input.advance();
      if (inString(next2, Space)) {
        while (inString(input.next, Space))
          input.advance();
        input.acceptToken(whitespace);
      } else if (next2 == 36 && input.next == 36 && d3.doubleDollarQuotedStrings) {
        readDoubleDollarLiteral(input);
        input.acceptToken(String$1);
      } else if (next2 == 39 || next2 == 34 && d3.doubleQuotedStrings) {
        readLiteral(input, next2, d3.backslashEscapes);
        input.acceptToken(String$1);
      } else if (next2 == 35 && d3.hashComments || next2 == 47 && input.next == 47 && d3.slashComments) {
        eol(input);
        input.acceptToken(LineComment2);
      } else if (next2 == 45 && input.next == 45 && (!d3.spaceAfterDashes || input.peek(1) == 32)) {
        eol(input);
        input.acceptToken(LineComment2);
      } else if (next2 == 47 && input.next == 42) {
        input.advance();
        for (let prev = -1, depth = 1; ; ) {
          if (input.next < 0)
            break;
          input.advance();
          if (prev == 42 && input.next == 47) {
            depth--;
            if (!depth) {
              input.advance();
              break;
            }
            prev = -1;
          } else if (prev == 47 && input.next == 42) {
            depth++;
            prev = -1;
          } else {
            prev = input.next;
          }
        }
        input.acceptToken(BlockComment2);
      } else if ((next2 == 101 || next2 == 69) && input.next == 39) {
        input.advance();
        readLiteral(input, 39, true);
      } else if ((next2 == 110 || next2 == 78) && input.next == 39 && d3.charSetCasts) {
        input.advance();
        readLiteral(input, 39, d3.backslashEscapes);
        input.acceptToken(String$1);
      } else if (next2 == 95 && d3.charSetCasts) {
        for (let i = 0; ; i++) {
          if (input.next == 39 && i > 1) {
            input.advance();
            readLiteral(input, 39, d3.backslashEscapes);
            input.acceptToken(String$1);
            break;
          }
          if (!isAlpha2(input.next))
            break;
          input.advance();
        }
      } else if (next2 == 40) {
        input.acceptToken(ParenL);
      } else if (next2 == 41) {
        input.acceptToken(ParenR);
      } else if (next2 == 123) {
        input.acceptToken(BraceL);
      } else if (next2 == 125) {
        input.acceptToken(BraceR);
      } else if (next2 == 91) {
        input.acceptToken(BracketL);
      } else if (next2 == 93) {
        input.acceptToken(BracketR);
      } else if (next2 == 59) {
        input.acceptToken(Semi);
      } else if (d3.unquotedBitLiterals && next2 == 48 && input.next == 98) {
        input.advance();
        readBits(input);
        input.acceptToken(Bits);
      } else if ((next2 == 98 || next2 == 66) && (input.next == 39 || input.next == 34)) {
        const quoteStyle = input.next;
        input.advance();
        if (d3.treatBitsAsBytes) {
          readLiteral(input, quoteStyle, d3.backslashEscapes);
          input.acceptToken(Bytes);
        } else {
          readBits(input, quoteStyle);
          input.acceptToken(Bits);
        }
      } else if (next2 == 48 && (input.next == 120 || input.next == 88) || (next2 == 120 || next2 == 88) && input.next == 39) {
        let quoted = input.next == 39;
        input.advance();
        while (isHexDigit(input.next))
          input.advance();
        if (quoted && input.next == 39)
          input.advance();
        input.acceptToken(Number2);
      } else if (next2 == 46 && input.next >= 48 && input.next <= 57) {
        readNumber(input, true);
        input.acceptToken(Number2);
      } else if (next2 == 46) {
        input.acceptToken(Dot);
      } else if (next2 >= 48 && next2 <= 57) {
        readNumber(input, false);
        input.acceptToken(Number2);
      } else if (inString(next2, d3.operatorChars)) {
        while (inString(input.next, d3.operatorChars))
          input.advance();
        input.acceptToken(Operator);
      } else if (inString(next2, d3.specialVar)) {
        if (input.next == next2)
          input.advance();
        readWordOrQuoted(input);
        input.acceptToken(SpecialVar);
      } else if (inString(next2, d3.identifierQuotes)) {
        readLiteral(input, next2, false);
        input.acceptToken(QuotedIdentifier);
      } else if (next2 == 58 || next2 == 44) {
        input.acceptToken(Punctuation2);
      } else if (isAlpha2(next2)) {
        let word2 = readWord(input, String.fromCharCode(next2));
        input.acceptToken(input.next == 46 ? Identifier2 : (_a2 = d3.words[word2.toLowerCase()]) !== null && _a2 !== void 0 ? _a2 : Identifier2);
      }
    });
  }
  function tokenBefore(tree) {
    let cursor = tree.cursor().moveTo(tree.from, -1);
    while (/Comment/.test(cursor.name))
      cursor.moveTo(cursor.from, -1);
    return cursor.node;
  }
  function idName(doc2, node) {
    let text = doc2.sliceString(node.from, node.to);
    let quoted = /^([`'"])(.*)\1$/.exec(text);
    return quoted ? quoted[2] : text;
  }
  function plainID(node) {
    return node && (node.name == "Identifier" || node.name == "QuotedIdentifier");
  }
  function pathFor2(doc2, id2) {
    if (id2.name == "CompositeIdentifier") {
      let path = [];
      for (let ch2 = id2.firstChild; ch2; ch2 = ch2.nextSibling)
        if (plainID(ch2))
          path.push(idName(doc2, ch2));
      return path;
    }
    return [idName(doc2, id2)];
  }
  function parentsFor(doc2, node) {
    for (let path = []; ; ) {
      if (!node || node.name != ".")
        return path;
      let name2 = tokenBefore(node);
      if (!plainID(name2))
        return path;
      path.unshift(idName(doc2, name2));
      node = tokenBefore(name2);
    }
  }
  function sourceContext(state, startPos) {
    let pos = syntaxTree(state).resolveInner(startPos, -1);
    let aliases = getAliases(state.doc, pos);
    if (pos.name == "Identifier" || pos.name == "QuotedIdentifier" || pos.name == "Keyword") {
      return {
        from: pos.from,
        quoted: pos.name == "QuotedIdentifier" ? state.doc.sliceString(pos.from, pos.from + 1) : null,
        parents: parentsFor(state.doc, tokenBefore(pos)),
        aliases
      };
    }
    if (pos.name == ".") {
      return { from: startPos, quoted: null, parents: parentsFor(state.doc, pos), aliases };
    } else {
      return { from: startPos, quoted: null, parents: [], empty: true, aliases };
    }
  }
  function getAliases(doc2, at) {
    let statement2;
    for (let parent = at; !statement2; parent = parent.parent) {
      if (!parent)
        return null;
      if (parent.name == "Statement")
        statement2 = parent;
    }
    let aliases = null;
    for (let scan = statement2.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling) {
      let kw2 = scan.name == "Keyword" ? doc2.sliceString(scan.from, scan.to).toLowerCase() : null;
      let alias = null;
      if (!sawFrom) {
        sawFrom = kw2 == "from";
      } else if (kw2 == "as" && prevID && plainID(scan.nextSibling)) {
        alias = idName(doc2, scan.nextSibling);
      } else if (kw2 && EndFrom.has(kw2)) {
        break;
      } else if (prevID && plainID(scan)) {
        alias = idName(doc2, scan);
      }
      if (alias) {
        if (!aliases)
          aliases = /* @__PURE__ */ Object.create(null);
        aliases[alias] = pathFor2(doc2, prevID);
      }
      prevID = /Identifier$/.test(scan.name) ? scan : null;
    }
    return aliases;
  }
  function maybeQuoteCompletions(quote2, completions2) {
    if (!quote2)
      return completions2;
    return completions2.map((c2) => Object.assign(Object.assign({}, c2), { label: quote2 + c2.label + quote2, apply: void 0 }));
  }
  function completeFromSchema(schema, tables, schemas, defaultTableName, defaultSchemaName) {
    let top3 = new CompletionLevel();
    let defaultSchema = top3.child(defaultSchemaName || "");
    for (let table in schema) {
      let dot2 = table.indexOf(".");
      let schemaCompletions = dot2 > -1 ? top3.child(table.slice(0, dot2)) : defaultSchema;
      let tableCompletions = schemaCompletions.child(dot2 > -1 ? table.slice(dot2 + 1) : table);
      tableCompletions.list = schema[table].map((val) => typeof val == "string" ? { label: val, type: "property" } : val);
    }
    defaultSchema.list = (tables || defaultSchema.childCompletions("type")).concat(defaultTableName ? defaultSchema.child(defaultTableName).list : []);
    for (let sName in top3.children) {
      let schema2 = top3.child(sName);
      if (!schema2.list.length)
        schema2.list = schema2.childCompletions("type");
    }
    top3.list = defaultSchema.list.concat(schemas || top3.childCompletions("type"));
    return (context) => {
      let { parents, from: from3, quoted, empty, aliases } = sourceContext(context.state, context.pos);
      if (empty && !context.explicit)
        return null;
      if (aliases && parents.length == 1)
        parents = aliases[parents[0]] || parents;
      let level = top3;
      for (let name2 of parents) {
        while (!level.children || !level.children[name2]) {
          if (level == top3)
            level = defaultSchema;
          else if (level == defaultSchema && defaultTableName)
            level = level.child(defaultTableName);
          else
            return null;
        }
        level = level.child(name2);
      }
      let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;
      let options = level.list;
      if (level == top3 && aliases)
        options = options.concat(Object.keys(aliases).map((name2) => ({ label: name2, type: "constant" })));
      return {
        from: from3,
        to: quoteAfter ? context.pos + 1 : void 0,
        options: maybeQuoteCompletions(quoted, options),
        validFor: quoted ? QuotedSpan : Span
      };
    };
  }
  function completeKeywords(keywords47, upperCase) {
    let completions2 = Object.keys(keywords47).map((keyword3) => ({
      label: upperCase ? keyword3.toUpperCase() : keyword3,
      type: keywords47[keyword3] == Type2 ? "type" : keywords47[keyword3] == Keyword ? "keyword" : "variable",
      boost: -1
    }));
    return ifNotIn(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], completeFromList(completions2));
  }
  function keywordCompletionSource(dialect2, upperCase = false) {
    return completeKeywords(dialect2.dialect.words, upperCase);
  }
  function keywordCompletion(dialect2, upperCase = false) {
    return dialect2.language.data.of({
      autocomplete: keywordCompletionSource(dialect2, upperCase)
    });
  }
  function schemaCompletionSource(config) {
    return config.schema ? completeFromSchema(config.schema, config.tables, config.schemas, config.defaultTable, config.defaultSchema) : () => null;
  }
  function schemaCompletion(config) {
    return config.schema ? (config.dialect || StandardSQL).language.data.of({
      autocomplete: schemaCompletionSource(config)
    }) : [];
  }
  function sql(config = {}) {
    let lang = config.dialect || StandardSQL;
    return new LanguageSupport(lang.language, [schemaCompletion(config), keywordCompletion(lang, !!config.upperCaseKeywords)]);
  }
  var whitespace, LineComment2, BlockComment2, String$1, Number2, Bool2, Null, ParenL, ParenR, BraceL, BraceR, BracketL, BracketR, Semi, Dot, Operator, Punctuation2, SpecialVar, Identifier2, QuotedIdentifier, Keyword, Type2, Bits, Bytes, Builtin, Space, SQLTypes, SQLKeywords, defaults, tokens, parser$1, EndFrom, Span, QuotedSpan, CompletionLevel, parser5, SQLDialect, StandardSQL, PostgreSQL, MySQLKeywords, MySQLTypes, MySQLBuiltin, MySQL, MariaSQL, MSSQL, SQLite, Cassandra, PLSQL;
  var init_dist13 = __esm({
    "node_modules/@codemirror/lang-sql/dist/index.js"() {
      init_dist5();
      init_dist4();
      init_dist7();
      init_dist9();
      whitespace = 36;
      LineComment2 = 1;
      BlockComment2 = 2;
      String$1 = 3;
      Number2 = 4;
      Bool2 = 5;
      Null = 6;
      ParenL = 7;
      ParenR = 8;
      BraceL = 9;
      BraceR = 10;
      BracketL = 11;
      BracketR = 12;
      Semi = 13;
      Dot = 14;
      Operator = 15;
      Punctuation2 = 16;
      SpecialVar = 17;
      Identifier2 = 18;
      QuotedIdentifier = 19;
      Keyword = 20;
      Type2 = 21;
      Bits = 22;
      Bytes = 23;
      Builtin = 24;
      Space = " 	\r\n";
      SQLTypes = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ";
      SQLKeywords = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ";
      defaults = {
        backslashEscapes: false,
        hashComments: false,
        spaceAfterDashes: false,
        slashComments: false,
        doubleQuotedStrings: false,
        doubleDollarQuotedStrings: false,
        unquotedBitLiterals: false,
        treatBitsAsBytes: false,
        charSetCasts: false,
        operatorChars: "*+-%<>!=&|~^/",
        specialVar: "?",
        identifierQuotes: '"',
        words: /* @__PURE__ */ keywords2(SQLKeywords, SQLTypes)
      };
      tokens = /* @__PURE__ */ tokensFor(defaults);
      parser$1 = /* @__PURE__ */ LRParser.deserialize({
        version: 14,
        states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
        stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
        goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
        nodeNames: "\u26A0 LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
        maxTerm: 38,
        skippedNodes: [0, 1, 2],
        repeatNodeCount: 3,
        tokenData: "RORO",
        tokenizers: [0, tokens],
        topRules: { "Script": [0, 25] },
        tokenPrec: 0
      });
      EndFrom = /* @__PURE__ */ new Set(/* @__PURE__ */ "where group having order union intersect except all distinct limit offset fetch for".split(" "));
      Span = /^\w*$/;
      QuotedSpan = /^[`'"]?\w*[`'"]?$/;
      CompletionLevel = class {
        constructor() {
          this.list = [];
          this.children = void 0;
        }
        child(name2) {
          let children = this.children || (this.children = /* @__PURE__ */ Object.create(null));
          return children[name2] || (children[name2] = new CompletionLevel());
        }
        childCompletions(type7) {
          return this.children ? Object.keys(this.children).filter((x) => x).map((name2) => ({ label: name2, type: type7 })) : [];
        }
      };
      parser5 = /* @__PURE__ */ parser$1.configure({
        props: [
          /* @__PURE__ */ indentNodeProp.add({
            Statement: /* @__PURE__ */ continuedIndent()
          }),
          /* @__PURE__ */ foldNodeProp.add({
            Statement(tree) {
              return { from: tree.firstChild.to, to: tree.to };
            },
            BlockComment(tree) {
              return { from: tree.from + 2, to: tree.to - 2 };
            }
          }),
          /* @__PURE__ */ styleTags({
            Keyword: tags.keyword,
            Type: tags.typeName,
            Builtin: /* @__PURE__ */ tags.standard(tags.name),
            Bits: tags.number,
            Bytes: tags.string,
            Bool: tags.bool,
            Null: tags.null,
            Number: tags.number,
            String: tags.string,
            Identifier: tags.name,
            QuotedIdentifier: /* @__PURE__ */ tags.special(tags.string),
            SpecialVar: /* @__PURE__ */ tags.special(tags.name),
            LineComment: tags.lineComment,
            BlockComment: tags.blockComment,
            Operator: tags.operator,
            "Semi Punctuation": tags.punctuation,
            "( )": tags.paren,
            "{ }": tags.brace,
            "[ ]": tags.squareBracket
          })
        ]
      });
      SQLDialect = class {
        constructor(dialect2, language2) {
          this.dialect = dialect2;
          this.language = language2;
        }
        /**
        Returns the language for this dialect as an extension.
        */
        get extension() {
          return this.language.extension;
        }
        /**
        Define a new dialect.
        */
        static define(spec) {
          let d3 = dialect(spec, spec.keywords, spec.types, spec.builtin);
          let language2 = LRLanguage.define({
            name: "sql",
            parser: parser5.configure({
              tokenizers: [{ from: tokens, to: tokensFor(d3) }]
            }),
            languageData: {
              commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
              closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
            }
          });
          return new SQLDialect(d3, language2);
        }
      };
      StandardSQL = /* @__PURE__ */ SQLDialect.define({});
      PostgreSQL = /* @__PURE__ */ SQLDialect.define({
        charSetCasts: true,
        doubleDollarQuotedStrings: true,
        operatorChars: "+-*/<>=~!@#%^&|`?",
        specialVar: "",
        keywords: SQLKeywords + "a abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom c cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion g generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull k key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower m mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner p parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time t table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes",
        types: SQLTypes + "bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml"
      });
      MySQLKeywords = "accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill";
      MySQLTypes = SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed";
      MySQLBuiltin = "charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee";
      MySQL = /* @__PURE__ */ SQLDialect.define({
        operatorChars: "*+-%<>!=&|^",
        charSetCasts: true,
        doubleQuotedStrings: true,
        unquotedBitLiterals: true,
        hashComments: true,
        spaceAfterDashes: true,
        specialVar: "@?",
        identifierQuotes: "`",
        keywords: SQLKeywords + "group_concat " + MySQLKeywords,
        types: MySQLTypes,
        builtin: MySQLBuiltin
      });
      MariaSQL = /* @__PURE__ */ SQLDialect.define({
        operatorChars: "*+-%<>!=&|^",
        charSetCasts: true,
        doubleQuotedStrings: true,
        unquotedBitLiterals: true,
        hashComments: true,
        spaceAfterDashes: true,
        specialVar: "@?",
        identifierQuotes: "`",
        keywords: SQLKeywords + "always generated groupby_concat hard persistent shutdown soft virtual " + MySQLKeywords,
        types: MySQLTypes,
        builtin: MySQLBuiltin
      });
      MSSQL = /* @__PURE__ */ SQLDialect.define({
        keywords: SQLKeywords + "trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock pivot readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx unpivot updlock with",
        types: SQLTypes + "bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image hierarchyid uniqueidentifier sql_variant xml",
        builtin: "binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id",
        operatorChars: "*+-%<>!=^&|/",
        specialVar: "@"
      });
      SQLite = /* @__PURE__ */ SQLDialect.define({
        keywords: SQLKeywords + "abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual",
        types: SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real",
        builtin: "auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width",
        operatorChars: "*+-%<>!=&|/~",
        identifierQuotes: '`"',
        specialVar: "@:?$"
      });
      Cassandra = /* @__PURE__ */ SQLDialect.define({
        keywords: "add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN",
        types: SQLTypes + "ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint",
        slashComments: true
      });
      PLSQL = /* @__PURE__ */ SQLDialect.define({
        keywords: SQLKeywords + "abort accept access add all alter and any arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body by case cast char_base check close cluster clusters colauth column comment commit compress connected constant constraint crash create current currval cursor data_base database dba deallocate debugoff debugon declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry exception exception_init exchange exclusive exists external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base of off offline on online only option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw rebuild record ref references refresh rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work",
        builtin: "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define echo editfile embedded feedback flagger flush heading headsep instance linesize lno loboffset logsource longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar repfooter repheader serveroutput shiftinout show showmode spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout timing trimout trimspool ttitle underline verify version wrap",
        types: SQLTypes + "ascii bfile bfilename bigserial bit blob dec long number nvarchar nvarchar2 serial smallint string text uid varchar2 xml",
        operatorChars: "*/+-%<>!=~",
        doubleQuotedStrings: true,
        charSetCasts: true
      });
    }
  });

  // node_modules/@lezer/cpp/dist/index.es.js
  var RawString, templateArgsEndFallback, MacroName, R, L, u, U, a, z, A, Z, Underscore, Zero, Quote, ParenL2, ParenR2, Space2, GreaterThan, rawString, fallback, cppHighlighting, spec_identifier3, spec_, spec_templateArgsEnd, spec_scopedIdentifier, parser6;
  var init_index_es5 = __esm({
    "node_modules/@lezer/cpp/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      RawString = 1;
      templateArgsEndFallback = 2;
      MacroName = 3;
      R = 82;
      L = 76;
      u = 117;
      U = 85;
      a = 97;
      z = 122;
      A = 65;
      Z = 90;
      Underscore = 95;
      Zero = 48;
      Quote = 34;
      ParenL2 = 40;
      ParenR2 = 41;
      Space2 = 32;
      GreaterThan = 62;
      rawString = new ExternalTokenizer((input) => {
        if (input.next == L || input.next == U) {
          input.advance();
        } else if (input.next == u) {
          input.advance();
          if (input.next == Zero + 8)
            input.advance();
        }
        if (input.next != R)
          return;
        input.advance();
        if (input.next != Quote)
          return;
        input.advance();
        let marker = "";
        while (input.next != ParenL2) {
          if (input.next == Space2 || input.next <= 13 || input.next == ParenR2)
            return;
          marker += String.fromCharCode(input.next);
          input.advance();
        }
        input.advance();
        for (; ; ) {
          if (input.next < 0)
            return input.acceptToken(RawString);
          if (input.next == ParenR2) {
            let match3 = true;
            for (let i = 0; match3 && i < marker.length; i++)
              if (input.peek(i + 1) != marker.charCodeAt(i))
                match3 = false;
            if (match3 && input.peek(marker.length + 1) == Quote)
              return input.acceptToken(RawString, 2 + marker.length);
          }
          input.advance();
        }
      });
      fallback = new ExternalTokenizer((input) => {
        if (input.next == GreaterThan) {
          if (input.peek(1) == GreaterThan)
            input.acceptToken(templateArgsEndFallback, 1);
        } else {
          let sawLetter = false, i = 0;
          for (; ; i++) {
            if (input.next >= A && input.next <= Z)
              sawLetter = true;
            else if (input.next >= a && input.next <= z)
              return;
            else if (input.next != Underscore && !(input.next >= Zero && input.next <= Zero + 9))
              break;
            input.advance();
          }
          if (sawLetter && i > 1)
            input.acceptToken(MacroName);
        }
      }, { extend: true });
      cppHighlighting = styleTags({
        "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using requires concept import export module __attribute__ __declspec __based": tags.definitionKeyword,
        "extern MsCallModifier MsPointerModifier extern static register thread_local inline const volatile restrict _Atomic mutable constexpr constinit consteval virtual explicit VirtualSpecifier Access": tags.modifier,
        "if else switch for while do case default return break continue goto throw try catch": tags.controlKeyword,
        "co_return co_yield co_await": tags.controlKeyword,
        "new sizeof delete static_assert": tags.operatorKeyword,
        "NULL nullptr": tags.null,
        this: tags.self,
        "True False": tags.bool,
        "TypeSize PrimitiveType": tags.standard(tags.typeName),
        TypeIdentifier: tags.typeName,
        FieldIdentifier: tags.propertyName,
        "CallExpression/FieldExpression/FieldIdentifier": tags.function(tags.propertyName),
        "ModuleName/Identifier": tags.namespace,
        "PartitionName": tags.labelName,
        StatementIdentifier: tags.labelName,
        "Identifier DestructorName": tags.variableName,
        "CallExpression/Identifier": tags.function(tags.variableName),
        "CallExpression/ScopedIdentifier/Identifier": tags.function(tags.variableName),
        "FunctionDeclarator/Identifier FunctionDeclarator/DestructorName": tags.function(tags.definition(tags.variableName)),
        NamespaceIdentifier: tags.namespace,
        OperatorName: tags.operator,
        ArithOp: tags.arithmeticOperator,
        LogicOp: tags.logicOperator,
        BitOp: tags.bitwiseOperator,
        CompareOp: tags.compareOperator,
        AssignOp: tags.definitionOperator,
        UpdateOp: tags.updateOperator,
        LineComment: tags.lineComment,
        BlockComment: tags.blockComment,
        Number: tags.number,
        String: tags.string,
        "RawString SystemLibString": tags.special(tags.string),
        CharLiteral: tags.character,
        EscapeSequence: tags.escape,
        "UserDefinedLiteral/Identifier": tags.literal,
        PreProcArg: tags.meta,
        "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": tags.processingInstruction,
        MacroName: tags.special(tags.name),
        "( )": tags.paren,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace,
        "< >": tags.angleBracket,
        ". ->": tags.derefOperator,
        ", ;": tags.separator
      });
      spec_identifier3 = { __proto__: null, bool: 34, char: 34, int: 34, float: 34, double: 34, void: 34, size_t: 34, ssize_t: 34, intptr_t: 34, uintptr_t: 34, charptr_t: 34, int8_t: 34, int16_t: 34, int32_t: 34, int64_t: 34, uint8_t: 34, uint16_t: 34, uint32_t: 34, uint64_t: 34, char8_t: 34, char16_t: 34, char32_t: 34, char64_t: 34, const: 68, volatile: 70, restrict: 72, _Atomic: 74, mutable: 76, constexpr: 78, constinit: 80, consteval: 82, struct: 86, __declspec: 90, final: 148, override: 148, public: 152, private: 152, protected: 152, virtual: 154, extern: 160, static: 162, register: 164, inline: 166, thread_local: 168, __attribute__: 172, __based: 178, __restrict: 180, __uptr: 180, __sptr: 180, _unaligned: 180, __unaligned: 180, noexcept: 194, requires: 198, TRUE: 786, true: 786, FALSE: 788, false: 788, typename: 218, class: 220, template: 234, throw: 248, __cdecl: 256, __clrcall: 256, __stdcall: 256, __fastcall: 256, __thiscall: 256, __vectorcall: 256, try: 260, catch: 264, export: 284, import: 288, case: 298, default: 300, if: 310, else: 316, switch: 320, do: 324, while: 326, for: 332, return: 336, break: 340, continue: 344, goto: 348, co_return: 352, co_yield: 356, using: 364, typedef: 368, namespace: 382, new: 400, delete: 402, co_await: 404, concept: 408, enum: 412, static_assert: 416, friend: 424, union: 426, explicit: 432, operator: 446, module: 458, signed: 520, unsigned: 520, long: 520, short: 520, decltype: 530, auto: 532, sizeof: 568, NULL: 574, nullptr: 588, this: 590 };
      spec_ = { __proto__: null, "<": 131 };
      spec_templateArgsEnd = { __proto__: null, ">": 135 };
      spec_scopedIdentifier = { __proto__: null, operator: 390, new: 578, delete: 584 };
      parser6 = LRParser.deserialize({
        version: 14,
        states: "$;fQ!QQVOOP'gOUOOO(XOWO'#CdO,RQUO'#CgO,]QUO'#FkO-sQbO'#CwO.UQUO'#CwO0TQUO'#K[O0[QUO'#CvO0gOpO'#DvO0oQ!dO'#D]OOQR'#JP'#JPO5XQVO'#GVO5fQUO'#JWOOQQ'#JW'#JWO8zQUO'#KnO<eQUO'#KnO>{QVO'#E^O?]QUO'#E^OOQQ'#Ed'#EdOOQQ'#Ee'#EeO?bQVO'#EfO@XQVO'#EiOBUQUO'#FPOBvQUO'#FiOOQR'#Fk'#FkOB{QUO'#FkOOQR'#LR'#LROOQR'#LQ'#LQOETQVO'#KROFxQUO'#LWOGVQUO'#KrOGkQUO'#LWOH]QUO'#LYOOQR'#HV'#HVOOQR'#HW'#HWOOQR'#HX'#HXOOQR'#K}'#K}OOQR'#J`'#J`Q!QQVOOOHkQVO'#F^OIWQUO'#EhOI_QUOOOKZQVO'#HhOKkQUO'#HhONVQUO'#KrONaQUO'#KrOOQQ'#Kr'#KrO!!_QUO'#KrOOQQ'#Jr'#JrO!!lQUO'#HyOOQQ'#K['#K[O!&^QUO'#K[O!&zQUO'#KRO!(zQVO'#I^O!(zQVO'#IaOCQQUO'#KROOQQ'#Iq'#IqOOQQ'#KR'#KRO!,}QUO'#K[OOQR'#KZ'#KZO!-UQUO'#DYO!/mQUO'#KoOOQQ'#Ko'#KoO!/tQUO'#KoO!/{QUO'#ETO!0QQUO'#EWO!0VQUO'#FRO8zQUO'#FPO!QQVO'#F_O!0[Q#vO'#FaO!0gQUO'#FlO!0oQUO'#FqO!0tQVO'#FsO!0oQUO'#FvO!3sQUO'#FwO!3xQVO'#FyO!4SQUO'#F{O!4XQUO'#F}O!4^QUO'#GPO!4cQVO'#GRO!(zQVO'#GTO!4jQUO'#GqO!4xQUO'#GZO!(zQVO'#FfO!6VQUO'#FfO!6[QVO'#GaO!6cQUO'#GbO!6nQUO'#GoO!6sQUO'#GsO!6xQUO'#G{O!7jQ&lO'#HjO!:mQUO'#GvO!:}QUO'#HYO!;YQUO'#H[O!;bQUO'#DWO!;bQUO'#HvO!;bQUO'#HwO!;yQUO'#HxO!<[QUO'#H}O!=PQUO'#IOO!>uQVO'#IcO!(zQVO'#IeO!?PQUO'#IhO!?WQVO'#IkP!@}{,UO'#CbP!6n{,UO'#CbP!AY{7[O'#CbP!6n{,UO'#CbP!A_{,UO'#CbP!AjOSO'#I{POOO)CEo)CEoOOOO'#I}'#I}O!AtOWO,59OOOQR,59O,59OO!(zQVO,59UOOQQ,59W,59WO!(zQVO,5;ROOQR,5<V,5<VO!BPQUO,59YO!(zQVO,5>rOOQR'#IY'#IYOOQR'#IZ'#IZOOQR'#I['#I[OOQR'#I]'#I]O!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!DOQVO,5>{OOQQ,5?X,5?XO!EqQVO'#ChO!IjQUO'#CyOOQQ,59c,59cOOQQ,59b,59bOOQQ,5=O,5=OO!IwQ&lO,5=nO!?PQUO,5?SO!LkQVO,5?VO!LrQbO,59cO!L}QVO'#FYOOQQ,5?Q,5?QO!M_QVO,59VO!MfO`O,5:bO!MkQbO'#D^O!M|QbO'#K_O!N[QbO,59wO!NdQbO'#CwO!NuQUO'#CwO!NzQUO'#K[O# UQUO'#CvOOQR-E<}-E<}O# aQUO,5ApO# hQVO'#EfO@XQVO'#EiOBUQUO,5;kOOQR,5<q,5<qO#$aQUO'#KRO#$hQUO'#KRO!(zQVO'#IVO8zQUO,5;kO#${Q&lO'#HjO#(SQUO'#CsO#*wQbO'#CwO#*|QUO'#CvO#.jQUO'#K[OOQQ-E=U-E=UO#0}QUO,5AYO#1XQUO'#K[O#1cQUO,5AYOOQR,5Ap,5ApOOQQ,5>m,5>mO#3gQUO'#CgO#4]QUO,5>qO#6OQUO'#IfOOQR'#JO'#JOO#6WQUO,5:xO#6tQUO,5:xO#7eQUO,5:xO#8YQUO'#CtO!0QQUO'#ClOOQQ'#JX'#JXO#6tQUO,5:xO#8bQUO,5;QO!4xQUO'#C}O#9kQUO,5;QO#9pQUO,5>RO#:|QUO'#C}O#;dQUO,5>|O#;iQUO'#KxO#<rQUO,5;TO#<zQVO,5;TO#=UQUO,5;TOOQQ,5;T,5;TO#>}QUO'#L]O#?UQUO,5>VO#?ZQbO'#CwO#?fQUO'#GdO#?kQUO'#E^O#@[QUO,5;kO#@sQUO'#LOO#@{QUO,5;rOKkQUO'#HgOBUQUO'#HhO#AQQUO'#KrO!6nQUO'#HkO#AxQUO'#CtO!0tQVO,5<TOOQQ'#Cg'#CgOOQR'#Ji'#JiO#A}QVO,5=aOOQQ,5?[,5?[O#DWQbO'#CwO#DcQUO'#GdOOQQ'#Jj'#JjOOQQ-E=h-E=hOGVQUO,5ArOGkQUO,5ArO#DhQUO,5AtO#DsQUO'#G}OOQR,5Ar,5ArO#DhQUO,5ArO#EOQUO'#HPO#EWQUO,5AtOOQR,5At,5AtOOQR,5Au,5AuO#EfQVO,5AuOOQR-E=^-E=^O#G`QVO,5;xOOQR,5;j,5;jO#IaQUO'#EjO#JfQUO'#EwO#K]QVO'#ExO#MoQUO'#EvO#MwQUO'#EyO#NvQUO'#EzOOQQ'#K{'#K{O$ mQUO,5;SO$!sQUO'#EvOOQQ,5;S,5;SO$#pQUO,5;SO$%cQUO,5:yO$'|QVO,5>QO$(WQUO'#E[O$(eQUO,5>SOOQQ,5>T,5>TO$,RQVO'#C{OOQQ-E=p-E=pOOQQ,5>e,5>eOOQQ,59`,59`O$,]QUO,5>xO$.]QUO,5>{O!6nQUO,59tO$.pQUO,5;qO$.}QUO,5<|O!0QQUO,5:oOOQQ,5:r,5:rO$/YQUO,5;mO$/_QUO'#KnOBUQUO,5;kOOQR,5;y,5;yO$0OQUO'#FcO$0^QUO'#FcO$0cQUO,5;{O$3|QVO'#FnO!0tQVO,5<WO!0oQUO,5<WO!0VQUO,5<]O$4TQVO'#GVO$7PQUO,5<_O!0tQVO,5<bO$:gQVO,5<cO$:tQUO,5<eOOQR,5<e,5<eO$;}QUO,5<eOOQR,5<g,5<gOOQR,5<i,5<iOOQQ'#Fj'#FjO$<SQUO,5<kO$<XQUO,5<mOOQR,5<m,5<mO$=_QUO,5<oO$>eQUO,5<sO$>pQUO,5=]O$>uQUO,5=]O!4xQUO,5<uO$>}QUO,5<uO$?cQUO,5<QO$@iQVO,5<QO$BzQUO,5<{OOQR,5<{,5<{O$DQQVO'#F^OOQR,5<|,5<|O$>uQUO,5<|O$DXQUO,5<|O$DdQUO,5=ZO!(zQVO,5=_O!(zQVO,5=gO#NeQUO,5=nOOQQ,5>U,5>UO$FiQUO,5>UO$FsQUO,5>UO$FxQUO,5>UO$F}QUO,5>UO!6nQUO,5>UO$H{QUO'#K[O$ISQUO,5=pO$I_QUO,5=bOKkQUO,5=pO$JXQUO,5=tOOQR,5=t,5=tO$JaQUO,5=tO$LlQVO'#H]OOQQ,5=v,5=vO!;]QUO,5=vO%#gQUO'#KkO%#nQUO'#K]O%$SQUO'#KkO%$^QUO'#DyO%$oQUO'#D|O%'lQUO'#K]OOQQ'#K]'#K]O%)_QUO'#K]O%#nQUO'#K]O%)dQUO'#K]OOQQ,59r,59rOOQQ,5>b,5>bOOQQ,5>c,5>cO%)lQUO'#H{O%)tQUO,5>dOOQQ,5>d,5>dO%-`QUO,5>dO%-kQUO,5>iO%1VQVO,5>jO%1^QUO,5>}O# hQVO'#EfO%4dQUO,5>}OOQQ,5>},5>}O%5TQUO,5?PO%7XQUO,5?SO!<[QUO,5?SO%9TQUO,5?VO%<pQVO,5?VP!A_{,UO,58|P%<w{,UO,58|P%=V{7[O,58|P%=]{,UO,58|PO{O'#Jv'#JvP%=b{,UO'#LdPOOO'#Ld'#LdP%=h{,UO'#LdPOOO,58|,58|POOO,5?g,5?gP%=mOSO,5?gOOOO-E<{-E<{OOQR1G.j1G.jO%=tQUO1G.pO%>zQUO1G0mOOQQ1G0m1G0mO%@WQUO'#CoO%BgQbO'#CwO%BrQUO'#CrO%BwQUO'#CrO%B|QUO1G.tO#AxQUO'#CqOOQQ1G.t1G.tO%EPQUO1G4^O%FVQUO1G4_O%GxQUO1G4_O%IkQUO1G4_O%K^QUO1G4_O%MPQUO1G4_O%NrQUO1G4_O&!eQUO1G4_O&$WQUO1G4_O&%yQUO1G4_O&'lQUO1G4_O&)_QUO1G4_O&+QQUO'#KQO&,ZQUO'#KQO&,cQUO,59SOOQQ,5=Q,5=QO&.kQUO,5=QO&.uQUO,5=QO&.zQUO,5=QO&/PQUO,5=QO!6nQUO,5=QO#NeQUO1G3YO&/ZQUO1G4nO!<[QUO1G4nO&1VQUO1G4qO&2xQVO1G4qOOQQ1G.}1G.}OOQQ1G.|1G.|OOQQ1G2j1G2jO!IwQ&lO1G3YO&3PQUO'#LPO@XQVO'#EiO&4YQUO'#F]OOQQ'#Jb'#JbO&4_QUO'#FZO&4jQUO'#LPO&4rQUO,5;tO&4wQUO1G.qOOQQ1G.q1G.qOOQR1G/|1G/|O&6jQ!dO'#JQO&6oQbO,59xO&9QQ!eO'#D`O&9XQ!dO'#JSO&9^QbO,5@yO&9^QbO,5@yOOQR1G/c1G/cO&9iQbO1G/cO&9nQ&lO'#GfO&:lQbO,59cOOQR1G7[1G7[O#@[QUO1G1VO&:wQUO1G1^OBUQUO1G1VO&=YQUO'#CyO#*wQbO,59cO&@{QUO1G6tOOQR-E<|-E<|O&B_QUO1G0dO#6WQUO1G0dOOQQ-E=V-E=VO#6tQUO1G0dOOQQ1G0l1G0lO&CSQUO,59iOOQQ1G3m1G3mO&CjQUO,59iO&DQQUO,59iO!M_QVO1G4hO!(zQVO'#JZO&DlQUO,5AdOOQQ1G0o1G0oO!(zQVO1G0oO!6nQUO'#JoO&DtQUO,5AwOOQQ1G3q1G3qOOQR1G1V1G1VO&J]QVO'#FOO!M_QVO,5;sOOQQ,5;s,5;sOBUQUO'#JdO&JmQUO,5AjO&JuQVO'#E[OOQR1G1^1G1^O&MdQUO'#L]OOQR1G1o1G1oOOQR-E=g-E=gOOQR1G7^1G7^O#DhQUO1G7^OGVQUO1G7^O#DhQUO1G7`OOQR1G7`1G7`O&MlQUO'#HOO&MtQUO'#LXOOQQ,5=i,5=iO&NSQUO,5=kO&NXQUO,5=lOOQR1G7a1G7aO#EfQVO1G7aO&N^QUO1G7aO' dQVO,5=lOOQR1G1U1G1UO$.vQUO'#E]O'!YQUO'#E]OOQQ'#Kz'#KzO'!sQUO'#KyO'#OQUO,5;UO'#WQUO'#ElO'#kQUO'#ElO'$OQUO'#EtOOQQ'#J]'#J]O'$TQUO,5;cO'$zQUO,5;cO'%uQUO,5;dO'&{QVO,5;dOOQQ,5;d,5;dO''VQVO,5;dO'&{QVO,5;dO''^QUO,5;bO'(ZQUO,5;eO'(fQUO'#KqO'(nQUO,5:vO'(sQUO,5;fOOQQ1G0n1G0nOOQQ'#J^'#J^O''^QUO,5;bO!4xQUO'#E}OOQQ,5;b,5;bO')nQUO'#E`O'+hQUO'#E{OHrQUO1G0nO'+mQUO'#EbOOQQ'#JY'#JYO'-VQUO'#KsOOQQ'#Ks'#KsO'.PQUO1G0eO'.wQUO1G3lO'/}QVO1G3lOOQQ1G3l1G3lO'0XQVO1G3lO'0`QUO'#L`O'1lQUO'#KYO'1zQUO'#KXO'2VQUO,59gO'2_QUO1G/`O'2dQUO'#FPOOQR1G1]1G1]OOQR1G2h1G2hO$>uQUO1G2hO'2nQUO1G2hO'2yQUO1G0ZOOQR'#Ja'#JaO'3OQVO1G1XO'8wQUO'#FTO'8|QUO1G1VO!6nQUO'#JeO'9[QUO,5;}O$0^QUO,5;}OOQQ'#Fd'#FdOOQQ,5;},5;}O'9jQUO1G1gOOQR1G1g1G1gO'9rQUO,5<YO$.vQUO'#FWOBUQUO'#FWO'9yQUO,5<YO!(zQVO,5<YO':RQUO,5<YO':WQVO1G1rO!0tQVO1G1rOOQR1G1w1G1wO'?vQUO1G1yOOQR1G1|1G1|O'?{QUO1G1}OBUQUO1G2^O'AUQVO1G1}O'CjQUO1G1}O'CoQUO'#GXO8zQUO1G2^OOQR1G2P1G2POOQR1G2V1G2VOOQR1G2X1G2XOOQR1G2Z1G2ZO'CtQUO1G2_O!4xQUO1G2_OOQR1G2w1G2wO'C|QUO1G2wO$>}QUO1G2aOOQQ'#Cu'#CuO'DRQUO'#G]O'D|QUO'#G]O'ERQUO'#LSO'EaQUO'#G`OOQQ'#LT'#LTO'EoQUO1G2aO'EtQVO1G1lO'HVQVO'#GVOBUQUO'#FWOOQR'#Jf'#JfO'EtQVO1G1lO'HaQUO'#FwOOQR1G2g1G2gOOQR,5;x,5;xO'HfQVO,5;xO'HmQUO1G2hO'HrQUO'#JhO'2nQUO1G2hO!(zQVO1G2uO'HzQUO1G2yO'JTQUO1G3RO'KZQUO1G3YOOQQ1G3p1G3pO'KoQUO1G3pOOQR1G3[1G3[O'KtQUO'#K[O'2dQUO'#LUOGkQUO'#LWOOQR'#Gz'#GzO#DhQUO'#LYOOQR'#HR'#HRO'LOQUO'#GwO'$OQUO'#GvOOQR1G2|1G2|O'L{QUO1G2|O'MrQUO1G3[O'M}QUO1G3`O'NSQUO1G3`OOQR1G3`1G3`O'N[QUO'#H^OOQR'#H^'#H^O( eQUO'#H^O!(zQVO'#HaO!(zQVO'#H`OOQR'#L['#L[O( jQUO'#L[OOQR'#Jl'#JlO( oQVO,5=wOOQQ,5=w,5=wO( vQUO'#H_O(!OQUO'#H[OOQQ1G3b1G3bO(!YQUO,5@wOOQQ,5@w,5@wO%)_QUO,5@wO%)dQUO,5@wO%$^QUO,5:eO(%wQUO'#KlO(&VQUO'#KlOOQQ,5:e,5:eOOQQ'#JT'#JTO(&bQUO'#D}O(&lQUO'#KrOGkQUO'#LWO('hQUO'#D}OOQQ'#Hq'#HqOOQQ'#Hs'#HsOOQQ'#Ht'#HtOOQQ'#Km'#KmOOQQ'#JV'#JVO('rQUO,5:hOOQQ,5:h,5:hO((oQUO'#LWO((|QUO'#HuO()dQUO,5@wO()kQUO'#H|O()vQUO'#L_O(*OQUO,5>gO(*TQUO'#L^OOQQ1G4O1G4OO(-zQUO1G4OO(.RQUO1G4OO(.YQUO1G4UO(/`QUO1G4UO(/eQUO,5A}O!6nQUO1G4iO!(zQVO'#IjOOQQ1G4n1G4nO(/jQUO1G4nO(1mQVO1G4qPOOO1G.h1G.hP!A_{,UO1G.hP(3mQUO'#LfP(3x{,UO1G.hP(3}{7[O1G.hPO{O-E=t-E=tPOOO,5BO,5BOP(4V{,UO,5BOPOOO1G5R1G5RO!(zQVO7+$[O(4[QUO'#CyOOQQ,59^,59^O(4gQbO,59cO(4rQbO,59^OOQQ,59],59]OOQQ7+)x7+)xO!M_QVO'#JuO(4}QUO,5@lOOQQ1G.n1G.nOOQQ1G2l1G2lO(5VQUO1G2lO(5[QUO7+(tOOQQ7+*Y7+*YO(7pQUO7+*YO(7wQUO7+*YO(1mQVO7+*]O#NeQUO7+(tO(8UQVO'#JcO(8iQUO,5AkO(8qQUO,5;vOOQQ'#Co'#CoOOQQ,5;w,5;wO!(zQVO'#F[OOQQ-E=`-E=`O!M_QVO,5;uOOQQ1G1`1G1`OOQQ,5?l,5?lOOQQ-E=O-E=OOOQR'#Dg'#DgOOQR'#Di'#DiOOQR'#Dl'#DlO(9zQ!eO'#K`O(:RQMkO'#K`O(:YQ!eO'#K`OOQR'#K`'#K`OOQR'#JR'#JRO(:aQ!eO,59zOOQQ,59z,59zO(:hQbO,5?nOOQQ-E=Q-E=QO(:vQbO1G6eOOQR7+$}7+$}OOQR7+&q7+&qOOQR7+&x7+&xO'8|QUO7+&qO(;RQUO7+&OO#6WQUO7+&OO(;vQUO1G/TO(<^QUO1G/TO(<xQUO7+*SOOQQ7+*W7+*WO(>kQUO,5?uOOQQ-E=X-E=XO(?tQUO7+&ZOOQQ,5@Z,5@ZOOQQ-E=m-E=mO(?yQUO'#LPO@XQVO'#EiO(AVQUO1G1_OOQQ1G1_1G1_O(B`QUO,5@OOOQQ,5@O,5@OOOQQ-E=b-E=bO(BtQUO'#KqOOQR7+,x7+,xO#DhQUO7+,xOOQR7+,z7+,zO(CRQUO,5=jO#DsQUO'#JkO(CdQUO,5AsOOQR1G3V1G3VOOQR1G3W1G3WO(CrQUO7+,{OOQR7+,{7+,{O(EjQUO,5:wO(GXQUO'#EwO!(zQVO,5;VO(GzQUO,5:wO(HUQUO'#EpO(HgQUO'#EzOOQQ,5;Z,5;ZO#K]QVO'#ExO(H}QUO,5:wO(IUQUO'#EyO#GgQUO'#J[O(JnQUO,5AeOOQQ1G0p1G0pO(JyQUO,5;WO!<[QUO,5;^O(KdQUO,5;_O(KrQUO,5;WO(NUQUO,5;`OOQQ-E=Z-E=ZO(N^QUO1G0}OOQQ1G1O1G1OO) XQUO1G1OO)!_QVO1G1OO)!fQVO1G1OO)!pQUO1G0|OOQQ1G0|1G0|OOQQ1G1P1G1PO)#mQUO'#JpO)#wQUO,5A]OOQQ1G0b1G0bOOQQ-E=[-E=[O)$PQUO,5;iO!<[QUO,5;iO)$|QVO,5:zO)%TQUO,5;gO$ mQUO7+&YOOQQ7+&Y7+&YO!(zQVO'#EfO)%[QUO,5:|OOQQ'#Kt'#KtOOQQ-E=W-E=WOOQQ,5A_,5A_OOQQ'#Jm'#JmO))PQUO7+&PPOQQ7+&P7+&POOQQ7+)W7+)WO))wQUO7+)WO)*}QVO7+)WOOQQ,5>n,5>nO$)YQVO'#JtO)+UQUO,5@sOOQQ1G/R1G/ROOQQ7+$z7+$zO)+aQUO7+(SO)+fQUO7+(SOOQR7+(S7+(SO$>uQUO7+(SOOQQ7+%u7+%uOOQR-E=_-E=_O!0VQUO,5;oOOQQ,5@P,5@POOQQ-E=c-E=cO$0^QUO1G1iOOQQ1G1i1G1iOOQR7+'R7+'ROOQR1G1t1G1tOBUQUO,5;rO),SQUO,5<ZO),ZQUO1G1tO)-dQUO1G1tO!0tQVO7+'^O)-iQVO7+'^O)3XQUO7+'eO)3^QVO7+'iO)5rQUO7+'xO)5|QUO7+'iO)7SQVO7+'iOKkQUO7+'xO$>hQUO,5<sO!4xQUO7+'yO)7ZQUO7+'yOOQR7+(c7+(cO)7`QUO7+'{O)7eQUO,5<wO'DRQUO,5<wO)8]QUO,5<wO'DRQUO,5<wOOQQ,5<x,5<xO)8nQVO,5<yO'EaQUO'#JgO)8xQUO,5AnO)9QQUO,5<zOOQR7+'{7+'{O)9]QVO7+'WO)5uQUO'#LOOOQR-E=d-E=dO);nQVO,5<cOOQR1G1d1G1dOOQQ,5@S,5@SO!6nQUO,5@SOOQQ-E=f-E=fO)>VQUO7+(aO)?]QUO7+(eO)?bQVO7+(eOOQQ7+(m7+(mOOQQ7+)[7+)[O)?jQUO'#KkO)?tQUO'#KkOOQR,5=c,5=cO)@RQUO,5=cO!;bQUO,5=cO!;bQUO,5=cO!;bQUO,5=cOOQR7+(h7+(hOOQR7+(v7+(vOOQR7+(z7+(zOOQR,5=x,5=xO)@WQUO,5={O)A^QUO,5=zOOQR,5Av,5AvOOQR-E=j-E=jOOQQ1G3c1G3cO)BdQUO,5=yO)BiQVO'#EfOOQQ1G6c1G6cO%)_QUO1G6cO%)dQUO1G6cOOQQ1G0P1G0POOQQ-E=R-E=RO)EQQUO,5AWO(%wQUO'#JUO)E]QUO,5AWO)E]QUO,5AWO)EeQUO,5:iO8zQUO,5:iOOQQ,5>^,5>^O)EoQUO,5ArO)EvQUO'#EVO)GQQUO'#EVO)GkQUO,5:iO)GuQUO'#HmO)GuQUO'#HnOOQQ'#Kp'#KpO)HdQUO'#KpO!(zQVO'#HoOOQQ,5:i,5:iO)IUQUO,5:iO!M_QVO,5:iOOQQ-E=T-E=TOOQQ1G0S1G0SOOQQ,5>a,5>aO)IZQUO1G6cO!(zQVO,5>hO)LxQUO'#JsO)MTQUO,5AyOOQQ1G4R1G4RO)M]QUO,5AxOOQQ,5Ax,5AxOOQQ7+)j7+)jO*!zQUO7+)jOOQQ7+)p7+)pO*'yQVO1G7iO*){QUO7+*TO**QQUO,5?UO*+WQUO7+*]POOO7+$S7+$SP*,yQUO'#LgP*-RQUO,5BQP*-W{,UO7+$SPOOO1G7j1G7jO*-]QUO<<GvOOQQ1G.x1G.xOOQQ'#IU'#IUO*/OQUO,5@aOOQQ,5@a,5@aOOQQ-E=s-E=sOOQQ7+(W7+(WOOQQ<<Mt<<MtO*0XQUO<<MtO*2[QUO<<MwO*3}QUO<<L`O*4cQUO,5?}OOQQ,5?},5?}OOQQ-E=a-E=aOOQQ1G1b1G1bO*5lQUO,5;vO*6rQUO1G1aOOQQ1G1a1G1aOOQR,5@z,5@zO*7{Q!eO,5@zO*8SQMkO,5@zO*8ZQ!eO,5@zOOQR-E=P-E=POOQQ1G/f1G/fO*8bQ!eO'#DwOOQQ1G5Y1G5YOOQR<<J]<<J]O*8iQUO<<IjO*9^QUO7+$oOOQQ<<Iu<<IuO(8UQVO,5;ROOQR<=!d<=!dOOQQ1G3U1G3UOOQQ,5@V,5@VOOQQ-E=i-E=iOOQR<=!g<=!gO*:ZQUO1G0cO*:bQUO'#EzO*:rQUO1G0cO*:yQUO'#JOO*<aQUO1G0qO!(zQVO1G0qOOQQ,5;[,5;[OOQQ,5;],5;]OOQQ,5?v,5?vOOQQ-E=Y-E=YO!<[QUO1G0xO*=pQUO1G0xOOQQ1G0y1G0yO*>RQUO'#ElOOQQ1G0z1G0zOOQQ7+&j7+&jO*>gQUO7+&jO*?mQVO7+&jOOQQ7+&h7+&hOOQQ,5@[,5@[OOQQ-E=n-E=nO*@iQUO1G1TO*@sQUO1G1TO*A^QUO1G0fOOQQ1G0f1G0fO*BdQUO'#K|O*BlQUO1G1ROOQQ<<It<<ItOOQQ'#Hc'#HcO'+mQUO,5=|OOQQ'#He'#HeO'+mQUO,5>OOOQQ-E=k-E=kPOQQ<<Ik<<IkPOQQ-E=l-E=lOOQQ<<Lr<<LrO*BqQUO'#LbO*C}QUO'#LaOOQQ,5@`,5@`OOQQ-E=r-E=rOOQR<<Kn<<KnO$>uQUO<<KnO*D]QUO<<KnOOQR1G1Z1G1ZOOQQ7+'T7+'TO!M_QVO1G1uO*DbQUO1G1uOOQR7+'`7+'`OOQR<<Jx<<JxO!0tQVO<<JxOOQR<<KP<<KPO*DmQUO<<KTO*EsQVO<<KTOKkQUO<<KdO!M_QVO<<KdO*EzQUO<<KTO!0tQVO<<KTO*GTQUO<<KTO*GYQUO<<KdO*GeQUO<<KeOOQR<<Ke<<KeOOQR<<Kg<<KgO*GjQUO1G2cO)7eQUO1G2cO'DRQUO1G2cO*G{QUO1G2eO*IRQVO1G2eOOQQ1G2e1G2eO*I]QVO1G2eO*IdQUO,5@ROOQQ-E=e-E=eOOQQ1G2f1G2fO*IrQUO1G1}O*J{QVO1G1}O*KSQUO1G1}OOQQ1G5n1G5nOOQR<<K{<<K{OOQR<<LP<<LPO*KXQVO<<LPO*KdQUO<<LPOOQR1G2}1G2}O*KiQUO1G2}O*KpQUO1G3fOOQR1G3e1G3eOOQQ7++}7++}O%)_QUO7++}O*K{QUO1G6rO*K{QUO1G6rO(%wQUO,5?pO*LTQUO,5?pOOQQ-E=S-E=SO*L`QUO1G0TOOQQ1G0T1G0TO*LjQUO1G0TO!M_QVO1G0TO*LoQUO1G0TOOQQ1G3x1G3xO*LyQUO,5:qO)EvQUO,5:qO*MgQUO,5:qO)EvQUO,5:qO$#uQUO,5:uO*NUQVO,5>WO)GuQUO'#JqO*N`QUO1G0TO*NqQVO1G0TOOQQ1G3v1G3vO*NxQUO,5>XO+ TQUO,5>YO+ rQUO,5>ZO+!xQUO1G0TO%)dQUO7++}O+$OQUO1G4SOOQQ,5@_,5@_OOQQ-E=q-E=qOOQQ<<MU<<MUOOQQ<<Mo<<MoO+%XQUO1G4pP+'[QUO'#JwP+'dQUO,5BRPO{O1G7l1G7lPOOO<<Gn<<GnOOQQANC`ANC`OOQR1G6f1G6fO+'lQ!eO,5:cOOQQ,5:c,5:cO+'sQUO1G0mO+)PQUO7+&]O+*`QUO7+&dO+*qQUO,5;WOOQQ<<JU<<JUO++PQUO7+&oOOQQ7+&Q7+&QO!4xQUO'#J_O++zQUO,5AhOOQQ7+&m7+&mOOQQ1G3h1G3hO+,SQUO1G3jOOQQ,5>o,5>oO+/wQUOANAYOOQRANAYANAYO+/|QUO7+'aOOQRAN@dAN@dO+1YQVOAN@oO+1aQUOAN@oO!0tQVOAN@oO+2jQUOAN@oO+2oQUOANAOO+2zQUOANAOO+4QQUOANAOOOQRAN@oAN@oO!M_QVOANAOOOQRANAPANAPO+4VQUO7+'}O)7eQUO7+'}OOQQ7+(P7+(PO+4hQUO7+(PO+5nQVO7+(PO+5uQVO7+'iO+5|QUOANAkOOQR7+(i7+(iOOQR7+)Q7+)QO+6RQUO7+)QO+6WQUO7+)QOOQQ<= i<= iO+6`QUO7+,^O+6hQUO1G5[OOQQ1G5[1G5[O+6sQUO7+%oOOQQ7+%o7+%oO+7UQUO7+%oO*NqQVO7+%oOOQQ7+)b7+)bO+7ZQUO7+%oO+8aQUO7+%oO!M_QVO7+%oO+8kQUO1G0]O*LyQUO1G0]O)EvQUO1G0]OOQQ1G0a1G0aO+9YQUO1G3rO+:`QVO1G3rOOQQ1G3r1G3rO+:jQVO1G3rO+:qQUO,5@]OOQQ-E=o-E=oOOQQ1G3s1G3sO%)_QUO<= iOOQQ7+*[7+*[POQQ,5@c,5@cPOQQ-E=u-E=uOOQQ1G/}1G/}OOQQ,5?y,5?yOOQQ-E=]-E=]OOQRG26tG26tO+;YQUOG26ZO!0tQVOG26ZO+<cQUOG26ZOOQRG26ZG26ZO!M_QVOG26jO!0tQVOG26jO+<hQUOG26jO+=nQUOG26jO+=sQUO<<KiOOQQ<<Kk<<KkOOQRG27VG27VOOQR<<Ll<<LlO+>UQUO<<LlOOQQ7+*v7+*vOOQQ<<IZ<<IZO+>ZQUO<<IZO!M_QVO<<IZO+>`QUO<<IZO+?fQUO<<IZO*NqQVO<<IZOOQQ<<L|<<L|O+?wQUO7+%wO*LyQUO7+%wOOQQ7+)^7+)^O+@fQUO7+)^O+AlQVO7+)^OOQQANETANETO!0tQVOLD+uOOQRLD+uLD+uO+AsQUOLD,UO+ByQUOLD,UOOQRLD,ULD,UO!0tQVOLD,UOOQRANBWANBWOOQQAN>uAN>uO+COQUOAN>uO+DUQUOAN>uO!M_QVOAN>uO+DZQUO<<IcOOQQ<<Lx<<LxOOQR!$( a!$( aO!0tQVO!$( pOOQR!$( p!$( pOOQQG24aG24aO+DxQUOG24aO+FOQUOG24aOOQR!)9E[!)9E[OOQQLD){LD){O+FTQUO'#CgO(dQUO'#CgO+JQQUO'#CyO+LqQUO'#CyO!E{QUO'#CyO+MjQUO'#CyO+M}QUO'#CyO,#pQUO'#CyO,$QQUO'#CyO,$_QUO'#CyO,$jQbO,59cO,$uQbO,59cO,%QQbO,59cO,%]QbO'#CwO,%nQbO'#CwO,&PQbO'#CwO,&bQUO'#CgO,(uQUO'#CgO,)SQUO'#CgO,+wQUO'#CgO,.zQUO'#CgO,/[QUO'#CgO,3TQUO'#CgO,3[QUO'#CgO,4[QUO'#CgO,6eQUO,5:xO#?kQUO,5:xO#?kQUO,5:xO#=ZQUO'#L]O,7RQbO'#CwO,7^QbO'#CwO,7iQbO'#CwO,7tQbO'#CwO#6tQUO'#E^O,8PQUO'#E^O,9^QUO'#HhO,:OQbO'#CwO,:ZQbO'#CwO,:fQUO'#CvO,:kQUO'#CvO,:pQUO'#CoO,;OQbO,59cO,;ZQbO,59cO,;fQbO,59cO,;qQbO,59cO,;|QbO,59cO,<XQbO,59cO,<dQbO,59cO,6eQUO1G0dO,<oQUO1G0dO#?kQUO1G0dO,8PQUO1G0dO,>|QUO'#K[O,?^QUO'#CyO,?lQbO,59cO,6eQUO7+&OO,<oQUO7+&OO,?wQUO'#EwO,@jQUO'#EzO,AZQUO'#E^O,A`QUO'#GdO,AeQUO'#CvO,AjQUO'#CwO,AoQUO'#CwO,AtQUO'#CvO,AyQUO'#GdO,BOQUO'#K[O,BlQUO'#K[O,BvQUO'#CvO,CRQUO'#CvO,C^QUO'#CvO,<oQUO,5:xO,8PQUO,5:xO,8PQUO,5:xO,CiQUO'#K[O,C|QbO'#CwO,DXQUO'#CrO,D^QUO'#E^",
        stateData: ",ES~O(oOSSOSTOSRPQVPQ'fPQ'hPQ'iPQ'jPQ'kPQ'lPQ'mPQ'nPQ~O*[OS~OPmO]eOa!]Od!POlTOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!VfO!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$S!gO$U!hO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO$|!tO%O!uO%V!yO%`#ZO%a#[O%b#YO%d!zO%f#UO%h!{O%m#SO%p!|O%w!}O%}#PO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(sRO)QYO)TaO)V|O)W{O)XiO)Y!ZO)ZXO)icO)jdO~OR#bOV#]O'f#^O'h#_O'i#`O'j#`O'k#aO'l#aO'm#_O'n#_O~OX#dO(q#dO(r#fO~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX(vZX(w$^X(xZX(yZX)TZX)TiX)UZX)VZX)ViX)WZX)WiX)XZX)YZX)kZX~O)XiX!UZX~P(dO]#}O!V#lO!X#{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO(x#kO(y#kO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O~Od$RO%Z$SO']$TO'`$UO(z$OO~Ol$VO~O!T$WO])OXd)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)X)OX~Ol$VO~P.ZOl$VO!g$YO)k$YO~OX$ZO)[$ZO~O!R$[O)Y)RP)^)RP~OPmO]$eOa!]Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~Ol$_O#t$lO(sRO~P0zO](^Xa'zXd(^Xl'zXl(^Xr'zXr(^Xs'zXs(^Xt'zXt(^Xu'zXu(^Xv'zXv(^Xw'zXw(^Xx'zXx(^Xy'zXy(^X{'zX}'zX!V(^X!o(^X!r'zX!r(^X!s'zX!s(^X!t'zX!t(^X!u'zX!u(^X!v'zX!v(^X!x'zX!x(^X!{(^X#a'zX#b'zX%f'zX%m'zX%p(^X%w(^X&n'zX&s'zX&t'zX(s'zX(s(^X)T(^X)V(^X)W(^X~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO&s#WO&t$wO])bXd)bXl)bX!V)bX!{)bX%w)bX(s)bX)T)bX)V)bX)W)bX~O)X$vO~P:nOPmO]eOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)TaO)V|O)W{O)Y!ZO)ZXO)icO)jdO~Oa%QOl;OO!|%RO(s$xO~P<lO)T%SO~Oa!]Ol$_O{#RO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s;RO~P<lOPmO]$eOa%QOl;OO!V$fO!W%_O!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W%]O)Y!ZO)ZXO)icO)jdO)k%[O~O]%hOd!POl%bO!V%kO!{!dO%w$mO(s;SO)T%dO)V%iO)W%iO~O(w%mO~O)X#jO~O(s%nO](uX!V(uX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!g(uX)k(uX!O(uX!W(uX(w(uX!U(uXQ(uX!d(uX~OP%oO(pQO~PCQO]%hOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO%p!|O%w!}O)T;dO)V|O)W|O~Ol%rO!o%wO(s$xO~PE_O!TxO#v!eO(w%yO)k%|O])fX!V)fX~O]%hOd!POl%rO!V%kO!{!dO%w!}O(s$xO)T;dO)V|O)W|O~O!TxO#v!eO)X&PO)k&QO~O!U&TO~P!QO]&YO!TxO!V&WO)T&VO)V&ZO)W&ZO~Op&UO~PHrO]&cO!V&bO~OPmO]eOd!PO!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%`#ZO%a#[O%b#YO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)TaO)V|O)W{O)Y!ZO)ZXO)icO)jdO~Oa%QOl;OO%w$mO(s$xO~PIgO]%hOd!POl;`O!V%kO!{!dO%w$mO(s$xO)T;dO)V|O)W|O~Op&fO](uX])fX!V(uX!V)fX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!O(uX!O)fX!U(uX~O!g$YO)k$YO~PL]O!g(uX)k(uX~PL]O](uX!V(uX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!g(uX)k(uX!O(uX!U(uX~O])fX!V)fX!O)fX~PNkOa&hO&n!RO]&mXd&mXl&mXr&mXs&mXt&mXu&mXv&mXw&mXx&mXy&mX}&mX!V&mX!r&mX!s&mX!t&mX!u&mX!v&mX!x&mX!{&mX%w&mX&s&mX&t&mX(s&mX)T&mX)V&mX)W&mX)X&mX!O&mX!T&mX!X&mX!Y&mX![&mX!^&mX!_&mX!a&mX!b&mX!c&mX!e&mX!f&mX!h&mX(v&mX(x&mX(y&mX)U&mX)Y&mX!g&mX)k&mX!W&mXQ&mX!d&mX(w&mX!U&mX#v&mX~Op&fOl)OX!O)OXQ)OX!d)OX!h)OX)Y)OX)k)OX~P.ZO!g$YO)k$YO](uX!V(uX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!O(uX!W(uX(w(uX!U(uXQ(uX!d(uX~OPmO]$eOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O])OXd)OXl)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)X)OX!O)OXQ)OX!d)OX!h)OX)Y)OX)k)OX~O]#}O~P!*qO]&lO~O])cXa)cXd)cXl)cXr)cXs)cXt)cXu)cXv)cXw)cXx)cXy)cX{)cX})cX!V)cX!o)cX!r)cX!s)cX!t)cX!u)cX!v)cX!x)cX!{)cX#a)cX#b)cX%f)cX%m)cX%p)cX%w)cX&n)cX&s)cX&t)cX(s)cX)T)cX)V)cX)W)cX~O(pQO~P!-ZO%V&nO~P!-ZO]&oO~O]#}O~O!TxO~O$X&wO(s%nO(w&vO~O]&xOw&zO~O]&xO~OPmO]$eOa%QOl;OO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#p!xO#v!eO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s:qO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~O]'PO~O!T$WO)X'RO~P!(zO)X'TO~O)X'UO~O(s'VO~O)X'YO~P!(zOl;bO%V'^O%f'^O(s;TO~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO~O(w'bO~O)X'dO~P!(zO!T'eO(s%nO)k'gO~O(s%nO~O]'jO~O]'kOd%oXl%oX!V%oX!{%oX%w%oX(s%oX)T%oX)V%oX)W%oX~O]'oO!V'pO!X'mO!g'mO%['mO%]'mO%^'mO%_'mO%`'qO%a'qO%b'mO(y'nO)k'mO)y'rO~P8zO]%hOa!TOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO)T;dO)V|O)W|O~Ol;cOp&UO%w$mO(s;UO~P!8jO(s%nO(w'wO)X'xO~O]&cO!T'zO~Ol$oO}!_O!T(RO!l(WO(s$nO(w(QO)QYO~Ol$oO{(_O!T([O#b(_O(s$nO~Oa!TOl$oO{#RO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO~O](aO~OPmOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)ZXO)icO)jdO~O](cO)Y(dO~P!=UO]#}O~P!<[OPmO]$eOa%QOl;OO!V(jO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~OY(kO(pQO(s%nO~O'g(nO~OS(rOT(oO*X(qO~O]#}O(o(uO~Q'oXX#dO(q#dO(r(wO~Od)ROl(|O&s#WO(s({O~O!Y'Ta!['Ta!^'Ta!_'Ta!a'Ta!b'Ta!c'Ta!e'Ta!f'Ta!h'Ta(v'Ta)T'Ta)U'Ta)V'Ta)W'Ta)X'Ta)Y'Ta!g'Ta)k'Ta!O'Ta!W'Ta(w'Ta!U'TaQ'Ta!d'Ta~OPmOa%QOl;OO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)ZXO)icO)jdO]'Ta!V'Ta!X'Ta(x'Ta(y'Ta~P!B_O!T$WO!O(tP~P!(zO]nX]%XXdnXlmXpnXp%XXrnXsnXtnXunXvnXwnXxnXynX}nX!TnX!VnX!V%XX!X%XX!Y%XX![%XX!^%XX!_%XX!a%XX!b%XX!c%XX!e%XX!f%XX!gmX!h%XX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX(v%XX(x%XX(y%XX)TnX)T%XX)U%XX)VnX)V%XX)WnX)W%XX)X%XX)Y%XX)kmX!O%XX~O)XnX!OnX!U%XX~P!E{O])eO!V)fO!X)cO!g)cO%[)cO%])cO%^)cO%_)cO%`)gO%a)gO%b)cO(y)dO)k)cO)y)hO~P8zOPmO]$eOa%QOl;OO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O!V)mO~P!JwOd)pO%Z)qO(z$OO~O!T$WO!V)sO(x)tO!U)sP~P!JwO!T$WO~P!(zO)]){O~Ol)|O]!QX!h!QX)Y!QX)^!QX~O]*OO!h*PO)Y)RX)^)RX~O)Y*TO)^*SO~Od$RO%Z*UO']$TO'`$UO(z$OO~Ol*VO~Ol*VO!O)OX~P.ZOl*VO!g$YO)k$YO~O)X*WO~P:nOPmO]$eOa!]Ol$_Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~Op&fO~P!&zOp&fO!W(uX(w(uXQ(uX!d(uX~PNkO]'oO!V'pO!X'mO!g'mO%['mO%]'mO%^'mO%_'mO%`'qO%a'qO%b'mO(y'nO)k'mO)y'rO~O]iXdiXlgXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX!TiX!hiX)YiX)kiX!OiX~O!liX(wiX)XiX!XiX!YiX![iX!^iX!_iX!aiX!biX!ciX!eiX!fiX(viX(xiX(yiX)UiX!giX!WiXQiX!diX!UiX#viX#TiX#ViX#piXaiX{iX!oiX#aiX#biX#iiX#tiX$|iX%diX%fiX%liX%miX%piX&niX)QiX~P#%yO(z*[O~Ol*]O~O])OXd)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)X)OX!T)OX!X)OX!Y)OX![)OX!^)OX!_)OX!a)OX!b)OX!c)OX!e)OX!f)OX!h)OX(v)OX(x)OX(y)OX)U)OX)Y)OX!g)OX)k)OX!O)OX!W)OXQ)OX!d)OX(w)OX!U)OX#v)OX~Ol*]O~P#+ROr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO])bad)bal)ba!V)ba!{)ba%w)ba(s)ba)T)ba)V)ba)W)baQ)ba!d)ba!h)ba)Y)ba)k)ba!O)ba!T)ba(w)ba)X)ba~O&s#WO&t$wO~P#.qOp&fOl)OX~P#+RO&s)ba~P#.qO]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(vZX(xZX(yZX)TZX)UZX)VZX)WZX)XZX)YZX)kZX!OZX~O!WZX(wZX!UZXQZX!dZX~P#1jO]#}O!V#lO!X#{O(x#kO(y#kO~O!Y&ya![&ya!^&ya!_&ya!a&ya!b&ya!c&ya!e&ya!f&ya!g&ya!h&ya(v&ya)T&ya)U&ya)V&ya)W&ya)X&ya)Y&ya)k&ya!O&ya!W&ya(w&ya!U&yaQ&ya!d&ya~P#3zOl;lO!T$WO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PKkOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PKkO]&cO!V&bO!O#Qa!T#Qa!h#Qa#v#Qa)X#Qa)k#QaQ#Qa!d#Qa(w#Qa~Op&fO!T$WO~O!O*dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O*dO~O]&cO!O*fO!V&bO~O]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO&s#WO&t$wO)T&VO)V&ZO)W&ZO~O!OqXQqX!dqX!hqX)YqX)XqX~P#9{O!O*iO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*jO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W)lX~P#3zO!W*lO!h*mO~O!W*lO!h*mO~P!(zO!W*lO~Op&fO!g$YO!h*nO)k$YO](uX!V(uX!W(uX!W*PX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)Y(uX~O!h(uX~P#=ZO!W*pO~Od$RO%Z*UO(z:vO~Ol;oO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PBUO]*wO!T*rO!V&bO!h*uO#v!eO)k*sO)X)rX~O!h*uO)X)rX~O)X*xO~Op&fO])fX!T)fX!V)fX!h)fX#v)fX)X)fX)k)fX!O)fXQ)fX!d)fX(w)fX~Op&fO~OP%oO(pQO]%ia!V%ia!X%ia!Y%ia![%ia!^%ia!_%ia!a%ia!b%ia!c%ia!e%ia!f%ia!h%ia(s%ia(v%ia(x%ia(y%ia)T%ia)U%ia)V%ia)W%ia)X%ia)Y%ia!g%ia)k%ia!O%ia!W%ia(w%ia!U%iaQ%ia!d%ia~Od$RO%Z$SO(z:sO~Ol:{O~O!TxO#v!eO)k%|O~Ol<`O&s#WO(s;kO~O$[+UO%a+VO~O!TxO#v!eO)X+WO)k+XO~OPmO]$eOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO$[+UO%`#ZO%a+ZO%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O!U+[O~P!QOa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a+bO#b+cO#i+dO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO)QYO~OQ)mP!d)mP~P#GgO]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO)T&VO)V&ZO)W&ZO~O!O#kX!T#kX#v#kX)X#kX)k#kXQ#kX!d#kX!h#kX)Y#kX!x#kX(w#kX~P#IkOPmO]$eOa%QOl;OOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!W+jO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T+kO)W$kO)Y!ZO)ZXO)icO)jdO~O]&cO!V+lO~O]&YO!V&WO)QYO)T&VO)V&ZO)W&ZO)Y+oO!O)eP~P8zO]&YO!V&WO)T&VO)V&ZO)W&ZO~O!O#nX!T#nX#v#nX)X#nX)k#nXQ#nX!d#nX!h#nX)Y#nX!x#nX(w#nX~P#NeO!TxO])oX!V)oX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O#T+wO#p+xO(y+uO)V+sO)W+sO~O]#jX!T#jX!V#jX!O#jX#v#jX)X#jX)k#jXQ#jX!d#jX!h#jX)Y#jX!x#jX(w#jX~P$ xO#V+zO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+{O#T+wO#V+zO#p+xO(y+uO)V+{O)W+{O])gP!T)gP!V)gP#v)gP(w)gP)k)gP!O)gP!h)gP)X)gP~O!x)gPQ)gP!d)gP~P$#uOPmO]$eOa%QOl;OOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)W$kO)Y!ZO)ZXO)icO)jdO~O!W,RO)T,SO~P$%pO)QYO)Y+oO!O)eP~P8zO]&cO!V&bO!O&[a!T&[a!h&[a#v&[a)X&[a)k&[aQ&[a!d&[a(w&[a~OPmO]$eOa!]Ol;QOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;VO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~OQ({P!d({P~P$)YO]#}O!V#lO(x#kO(y#kO!X'Qa!Y'Qa!['Qa!^'Qa!_'Qa!a'Qa!b'Qa!c'Qa!e'Qa!f'Qa!h'Qa(v'Qa)T'Qa)U'Qa)V'Qa)W'Qa)X'Qa)Y'Qa!g'Qa)k'Qa!O'Qa!W'Qa(w'Qa!U'QaQ'Qa!d'Qa~O]#}O!V#lO!X#{O(x#kO(y#kO~P!B_O!T'eO#t!fO)QYO~P8zO!T'eO(s%nO)k,]O~O#x,bO~OQ)bX!d)bX!h)bX)Y)bX)k)bX!O)bX!T)bX(w)bX)X)bX~P:nO(w,fO(x,dO)Q$VX)X$VX~O(s,gO~O)QYO)X,jO~OPmO]$eOa!]Ol;POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~O(s;WO~P$0kOPmO]$eOa%QOl;OO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#v!eO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s:qO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~O$i,tO~OPmO]$eOa!]Ol;POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%O!uO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)QYO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O$|,zO(s;RO)X,xO~P$7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X,|O)Y#|O~P#3zO)X,|O~O)X,}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X-OO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X-PO)Y#|O~P#3zOp&fO)QYO)k-RO~O)X-SO~Ol;bO(s;TO~O]-ZO!{!dO&s#WO&t$wO(s-VO)T-WO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO(w-^O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!TxO$a!iO$f!jO$h!kO$i!lO$l-cO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%O!uO(s:rOd$Ya!o$Ya!{$Ya#i$Ya#p$Ya#t$Ya#v$Ya$S$Ya$U$Ya$Z$Ya$[$Ya$|$Ya%V$Ya%d$Ya%h$Ya%p$Ya%}$Ya(l$Ya)V$Ya!U$Ya$d$Ya~P$0kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X-dO)Y#|O~P#3zO!U-eO~P!QOl-hO!T'eO)k,]O~O)k-jO~O]&^a!X&^a!Y&^a![&^a!^&^a!_&^a!a&^a!b&^a!c&^a!e&^a!f&^a!h&^a(v&^a(x&^a(y&^a)U&^a)V&^a)W&^a)X&^a)Y&^a!g&^a)k&^a!O&^a!W&^a!T&^a#v&^a(w&^a!U&^aQ&^a!d&^a~O)T-nO!V&^a~P$DiO!O-nO~O!W-nO~O!V-oO)T&^a~P$DiO])OXd)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX~Ol;qO~P$GXO]&cO!V&bO)X-pO~Ol;gO!o-sO#V+zO#i-xO#t!fO$|,zO%d!zO%l-wO%p!|O%w!}O(s;XO)QYO~P!8jO!n-|O(s,gO~O)QYO)X.OO~OPmO]$eOa%QOl;OO!T.TO!V$fO!X!XO!Y!WO!i!YO#V.[O#a.ZO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO(y.SO)T$kO)W$kO)X.QO)Y!ZO)ZXO)icO)jdO~O!U.YO~P$JiO])_Xd)_Xr)_Xs)_Xt)_Xu)_Xv)_Xw)_Xx)_Xy)_X})_X!T)_X!V)_X!l)_X!r)_X!s)_X!t)_X!u)_X!v)_X!x)_X!{)_X%w)_X&s)_X&t)_X(s)_X(w)_X)T)_X)V)_X)W)_X)X)_X!O)_X!h)_X)Y)_X!X)_X!Y)_X![)_X!^)_X!_)_X!a)_X!b)_X!c)_X!e)_X!f)_X(v)_X(x)_X(y)_X)U)_X!g)_X)k)_X!W)_XQ)_X!d)_X#T)_X#V)_X#p)_X#v)_Xa)_X{)_X!o)_X#a)_X#b)_X#i)_X#t)_X$|)_X%d)_X%f)_X%l)_X%m)_X%p)_X&n)_X)Q)_X!U)_X~Ol*]O~P$LsOl$oO!T(RO!l.aO(s$nO(w(QO)QYO~Op&fOl)_X~P$LsOl$oO!n.fO!o.fO(s$nO)QYO~Ol;hO!U.qO!n.sO!o.rO#i-xO$|!tO%O!uO%h!{O%l-wO%p!|O%w!}O(s;ZO)QYO~P!8jO!T(RO!l.aO(w(QO])PXd)PXl)PXr)PXs)PXt)PXu)PXv)PXw)PXx)PXy)PX})PX!V)PX!r)PX!s)PX!t)PX!u)PX!v)PX!x)PX!{)PX%w)PX&s)PX&t)PX(s)PX)T)PX)V)PX)W)PX~O)X)PX!O)PX!X)PX!Y)PX![)PX!^)PX!_)PX!a)PX!b)PX!c)PX!e)PX!f)PX!h)PX(v)PX(x)PX(y)PX)U)PX)Y)PX!g)PX)k)PX!W)PXQ)PX!d)PX!U)PX#v)PX~P%%lO!T(RO~O!T(RO(w(QO~O(s%nO!U*RP~O!T([O(w.xO]&lad&lal&lar&las&lat&lau&lav&law&lax&lay&la}&la!V&la!r&la!s&la!t&la!u&la!v&la!x&la!{&la%w&la&s&la&t&la(s&la)T&la)V&la)W&la)X&la!O&la!X&la!Y&la![&la!^&la!_&la!a&la!b&la!c&la!e&la!f&la!h&la(v&la(x&la(y&la)U&la)Y&la!g&la)k&la!W&laQ&la!d&la!U&la#v&la~Ol$oO!T([O(s$nO~O&s#WO&t$wO]&qad&qal&qar&qas&qat&qau&qav&qaw&qax&qay&qa}&qa!V&qa!r&qa!s&qa!t&qa!u&qa!v&qa!x&qa!{&qa%w&qa(s&qa)T&qa)V&qa)W&qa)X&qa!O&qa!T&qa!X&qa!Y&qa![&qa!^&qa!_&qa!a&qa!b&qa!c&qa!e&qa!f&qa!h&qa(v&qa(x&qa(y&qa)U&qa)Y&qa!g&qa)k&qa!W&qaQ&qa!d&qa(w&qa!U&qa#v&qa~O&t.}O~P!(zO!Y#qO![#rO!f#zO)T#mO!^'Va!_'Va!a'Va!b'Va!c'Va!e'Va!h'Va(v'Va)U'Va)V'Va)W'Va)X'Va)Y'Va!g'Va)k'Va!O'Va!W'Va(w'Va!U'VaQ'Va!d'Va~P#3zO!V'eX!X'eX!Y'eX!['eX!^'eX!_'eX!a'eX!b'eX!c'eX!e'eX!f'eX!h'eX(v'eX(x'eX(y'eX)T'eX)U'eX)V'eX)W'eX)Y'eX!O'eX~O]/PO)X'eX!g'eX)k'eX!W'eX(w'eX!U'eXQ'eX!d'eX~P%3PO!Y#qO![#rO!f#zO)T#mO!^'Xa!_'Xa!a'Xa!b'Xa!c'Xa!e'Xa!h'Xa(v'Xa)U'Xa)V'Xa)W'Xa)X'Xa)Y'Xa!g'Xa)k'Xa!O'Xa!W'Xa(w'Xa!U'XaQ'Xa!d'Xa~P#3zO]#}O!T$WO!V/QO&s#WO&t$wO~O!X'[a!Y'[a!['[a!^'[a!_'[a!a'[a!b'[a!c'[a!e'[a!f'[a!h'[a(v'[a(x'[a(y'[a)T'[a)U'[a)V'[a)W'[a)X'[a)Y'[a!g'[a)k'[a!O'[a!W'[a(w'[a!U'[aQ'[a!d'[a~P%6vO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_a)X'_a!g'_a)k'_a!O'_a!W'_a(w'_a!U'_aQ'_a!d'_a~P#3zOPmO]$eOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W%]O)Y!ZO)ZXO)icO)jdO)k%[O~O!W/TO~P%:vOS(rOT(oO]#}O*X(qO~O]/WO'g/XO*X/UO~OS/]OT(oO*X/[O~O]#}O~Q'oa!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO(w/_O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X#Zi!O#Zi~P#3zO]cXlgXpcXpiX!VcX!XcX!YcX![cX!^cX!_cX!acX!bcX!ccX!ecX!fcX!gcX!hcX(vcX(xcX(ycX)TcX)UcX)VcX)WcX)XcX)YcX)kcX!OcX!WcX(wcX!TcX#vcX!UcXQcX!dcX~Od/aO%Z*UO(z/`O~Ol/bO~Ol/cO~Op&fO]bi!Vbi!Xbi!Ybi![bi!^bi!_bi!abi!bbi!cbi!ebi!fbi!gbi!hbi(vbi(xbi(ybi)Tbi)Ubi)Vbi)Wbi)Xbi)Ybi)kbi!Obi!Wbi(wbi!UbiQbi!dbi~O!W/eO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO![#rO)T#mO!Y&{i!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!f&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y&{i![&{i!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!f&{i!h&{i(v&{i)T&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!h&{i(v&{i)U&{i)V&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)V#nO)W#pO!h&{i(v&{i)U&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&{i!h&{i(v&{i)U&{i)V&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&{i!_&{i!h&{i(v&{i)U&{i)V&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO!^&{i!_&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!b#yO!c#yO!e#yO!f#zO)T#mO!^&{i!_&{i!a&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!f#zO)T#mO!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO)T#mO!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!f&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO!h&{i(v&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/fO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!O(tX~P#3zO!h/fO!O(tX~O!O/hO~O]%Yap%Ya!X%Ya!Y%Ya![%Ya!^%Ya!_%Ya!a%Ya!b%Ya!c%Ya!e%Ya!f%Ya!h%Ya(v%Ya(x%Ya(y%Ya)U%Ya)V%Ya)W%Ya)X%Ya)Y%Ya!g%Ya)k%Ya!O%Ya!W%Ya!T%Ya#v%Ya(w%Ya!U%YaQ%Ya!d%Ya~O)T/iO!V%Ya~P&,hO!O/iO~O!W/iO~O!V/jO)T%Ya~P&,hO!X'[i!Y'[i!['[i!^'[i!_'[i!a'[i!b'[i!c'[i!e'[i!f'[i!h'[i(v'[i(x'[i(y'[i)T'[i)U'[i)V'[i)W'[i)X'[i)Y'[i!g'[i)k'[i!O'[i!W'[i(w'[i!U'[iQ'[i!d'[i~P%6vO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_i)X'_i!g'_i)k'_i!O'_i!W'_i(w'_i!U'_iQ'_i!d'_i~P#3zO!W/oO~P%:vO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/qO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U)sX~P#3zO(s/tO~O!V/vO(x)tO)k/xO~O!h/qO!U)sX~O!U/yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO)Y#|O!h_i(v_i)X_i!g_i)k_i!O_i!W_i(w_i!U_iQ_i!d_i~P#3zO!R/zO~Ol)|O]!Qa!h!Qa)Y!Qa)^!Qa~OP0SO]0ROl0SO!R0SO!T0PO!V0QO!X0SO!Y0SO![0SO!^0SO!_0SO!a0SO!b0SO!c0SO!e0SO!f0SO!g0SO!h0SO!i0SO(pQO(w0SO(x0SO(y0SO)T/|O)U/}O)V/}O)W0OO)X0SO)Y0SO)ZXO~O!O0VO~P&7QO!R$[O~O!h*PO)Y)Ra)^)Ra~O)^0ZO~O])eO!V)fO!X)cO!g)cO%[)cO%])cO%^)cO%_)cO%`)gO%a)gO%b)cO(y)dO)k)cO)y)hO~Od)pO%Z*UO(z$OO~O)X0]O~O]nXdnXlmXpnXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX)TnX)VnX)WnX!TnX!hnX)YnX!OnXQnX!dnX~O!lnX(wnX)XnX!XnX!YnX![nX!^nX!_nX!anX!bnX!cnX!enX!fnX(vnX(xnX(ynX)UnX!gnX)knX!WnX!UnX#vnX#TnX#VnX#pnXanX{nX!onX#anX#bnX#inX#tnX$|nX%dnX%fnX%lnX%mnX%pnX&nnX)QnX~P&:|Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO~O])bid)bil)bi!V)bi!{)bi%w)bi(s)bi)T)bi)V)bi)W)biQ)bi!d)bi!h)bi)Y)bi)k)bi!O)bi!T)bi&s)bi(w)bi)X)bi~P&?zO]&cO!V&bO!O#Qi!T#Qi!h#Qi#v#Qi)X#Qi)k#QiQ#Qi!d#Qi(w#Qi~O!OqaQqa!dqa!hqa)Yqa)Xqa~P#9{O!OqaQqa!dqa!hqa)Yqa)Xqa~P#IkO]&cO!V+lO!OqaQqa!dqa!hqa)Yqa)Xqa~O!h*jO!W)la~O!h*nO!W*Pa~OPmO]eOa!]Od!POlTOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$S!gO$U!hO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO$|!tO%O!uO%V!yO%`#ZO%a#[O%b#YO%d!zO%f#UO%h!{O%m#SO%p!|O%w!}O%}#PO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(sRO)QYO)TaO)V|O)W{O)XiO)Y!ZO)ZXO)icO)jdO~O!T*rO!U&TO!V0kO(x)tO~P&D|O!h*uO)X)ra~OPmO]$eOa!]Ol;QO{#RO!T$WO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;YO)QYO)T$kO)W$kO)Y0qO)ZXO)icO)jdO!O(tP!O)eP~P&?zO!h*nO!W*PX~O]#}O!T$WO~O!h0vO!T){X#v){X)k){X~O)X0xO~O)X0yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X0{O)Y#|O~P#3zO)X0yO~P!?WO]1VOd!POl%bO!V1TO!{!dO%w$mO(s$xO)T0}O)Y1QO~O)V1RO)W1RO)k1OOQ#PX!d#PX!h#PX!O#PX~P' kO!h1WOQ)mX!d)mX~OQ1YO!d1YO~O)Y1]O)k1[OQ#`X!d#`X!h#`X~P!<[O)Y1]O)k1[OQ#`X!d#`X!h#`X~P!;bOp&UO~O!O#ka!T#ka#v#ka)X#ka)k#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(w#ka~P#IkO]&cO!V+lO!O#ka!T#ka#v#ka)X#ka)k#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(w#ka~O!W1bO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1bO)T1dO~P$%pO!W1bO~P!(zO]#ja!T#ja!V#ja!O#ja#v#ja)X#ja)k#jaQ#ja!d#ja!h#ja)Y#ja!x#ja(w#ja~P$ xO]&cO!O1hO!V+lO~O!h1iO!O)eX~O!O1kO~O]&cO!V+lO!O#na!T#na#v#na)X#na)k#naQ#na!d#na!h#na)Y#na!x#na(w#na~O]1oOr#SXs#SXt#SXu#SXv#SXw#SXx#SXy#SX!T#SX!V#SX#T#SX#p#SX(y#SX)V#SX)W#SX!l#SX!x#SX#V#SX#v#SX(w#SX)k#SX!O#SX!h#SX)X#SXQ#SX!d#SX)Y#SX~O]1pO~O]1sOl$oO!V$fO#V#QO(s$nO)icO)jdO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+{O#T+wO#V+zO#p+xO(y+uO)V+{O)W+{O~O])gX!T)gX!V)gX!x)gX#v)gX(w)gX)k)gX!O)gX!h)gX)X)gXQ)gX!d)gX~P',UO!x!cO]#Ri!T#Ri!V#Ri#v#Ri(w#Ri)k#Ri!O#Ri!h#Ri)X#RiQ#Ri!d#Ri~O!W1{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1{O)T1}O~P$%pO!W1{O~P!(zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*SX!d*SX!h*SX~P#3zO)Y2OOQ(|X!d(|X!h(|X~O!h2POQ({X!d({X~OQ2RO!d2RO~O!O2SO~O#t$lO)QYO~P8zOl-hO!T'eO)k2WO~O!O2XO~O#x,bOP#ui]#uia#uid#uil#uir#uis#uit#uiu#uiv#uiw#uix#uiy#ui{#ui}#ui!T#ui!V#ui!X#ui!Y#ui!i#ui!o#ui!r#ui!s#ui!t#ui!u#ui!v#ui!x#ui!{#ui#V#ui#a#ui#b#ui#i#ui#p#ui#t#ui#v#ui$S#ui$U#ui$Z#ui$[#ui$a#ui$f#ui$h#ui$i#ui$l#ui$n#ui$p#ui$r#ui$t#ui$v#ui$x#ui$|#ui%O#ui%V#ui%`#ui%a#ui%b#ui%d#ui%f#ui%h#ui%m#ui%p#ui%w#ui%}#ui&n#ui&s#ui&t#ui'R#ui'S#ui'W#ui'Z#ui'b#ui'c#ui(l#ui(p#ui(s#ui)Q#ui)T#ui)V#ui)W#ui)X#ui)Y#ui)Z#ui)i#ui)j#ui!U#ui$d#ui!n#ui%l#ui~O]&cO~O]&cO!TxO!V&bO#v!eO~O(w2^O(x,dO)Q$Va)X$Va~O)QYO)X2`O~O!O2aO~P,]O!O2aO)X#jO~O!O2aO~O$d2fOP$`i]$`ia$`id$`il$`ir$`is$`it$`iu$`iv$`iw$`ix$`iy$`i{$`i}$`i!T$`i!V$`i!X$`i!Y$`i!i$`i!o$`i!r$`i!s$`i!t$`i!u$`i!v$`i!x$`i!{$`i#V$`i#a$`i#b$`i#i$`i#p$`i#t$`i#v$`i$S$`i$U$`i$Z$`i$[$`i$a$`i$f$`i$h$`i$i$`i$l$`i$n$`i$p$`i$r$`i$t$`i$v$`i$x$`i$|$`i%O$`i%V$`i%`$`i%a$`i%b$`i%d$`i%f$`i%h$`i%m$`i%p$`i%w$`i%}$`i&n$`i&s$`i&t$`i'R$`i'S$`i'W$`i'Z$`i'b$`i'c$`i(l$`i(p$`i(s$`i)Q$`i)T$`i)V$`i)W$`i)X$`i)Y$`i)Z$`i)i$`i)j$`i!U$`i~O]1sO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X2iO)Y#|O~P#3zOPmO]$eOa!]Ol;PO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)T$kO)W$kO)X2lO)Y!ZO)ZXO)icO)jdO~P&?zO)X2iO~O(s-VO~O)QYO)k2oO~O)X2qO~O]-ZOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO(s-VO)T-WO~O)T2vO~O]&cO!V2xO!h2yO)X)vX~O]-ZO!{!dO(s-VO)T-WO~O)X2|O~O!TxO$a!iO$f!jO$h!kO$i!lO$l-cO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%O!uO(s:rOd$Yi!o$Yi!{$Yi#i$Yi#p$Yi#t$Yi#v$Yi$S$Yi$U$Yi$Z$Yi$[$Yi$|$Yi%V$Yi%d$Yi%h$Yi%p$Yi%}$Yi(l$Yi)V$Yi!U$Yi$d$Yi~P$0kOl;PO(s:rO~P0zO]3QO~O!U3RO~P!QO)X2VO~O!u3TO(s%nO~O!O3WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h3XO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O3YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO]&cO!V+lO!T%vi#v%vi)X%vi)k%vi~O!W3ZO~Ol:}O)X)OX~P$GXOa!TOl$oO{3aO#a#VO#b3`O#t!fO%f#UO%m3bO&n!RO&s#WO&t!TO(s$nO)QYO~P&?zOl;gO!o-sO#i-xO#t!fO$|,zO%d!zO%l-wO%p!|O%w!}O(s;XO)QYO~P!8jO]&cO!V&bO)X3dO~O)X3eO~O)QYO)X3eO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X3fO)Y#|O~P#3zO)X3fO~O)X3iO~O!U3kO~P$JiOl$oO(s$nO~O]3mO!T'zO~P'+pO!T(RO!l3pO(w(QO])Pad)Pal)Par)Pas)Pat)Pau)Pav)Paw)Pax)Pay)Pa})Pa!V)Pa!r)Pa!s)Pa!t)Pa!u)Pa!v)Pa!x)Pa!{)Pa%w)Pa&s)Pa&t)Pa(s)Pa)T)Pa)V)Pa)W)Pa)X)Pa!O)Pa!X)Pa!Y)Pa![)Pa!^)Pa!_)Pa!a)Pa!b)Pa!c)Pa!e)Pa!f)Pa!h)Pa(v)Pa(x)Pa(y)Pa)U)Pa)Y)Pa!g)Pa)k)Pa!W)PaQ)Pa!d)Pa!U)Pa#v)Pa~Ol$oO!n.fO!o.fO(s$nO~O!h3tO)Y3vO!T)`X~O!o3xO)QYO~P8zO)X3yO~PGVO]4OOl(|O!T$WO!{!dO%w$mO&s#WO(s({O(w4SO)T3{O)V4PO)W4PO~O)X4TO)k4VO~P(&sOl;hO!U4XO!n.sO!o.rO#i-xO$|!tO%O!uO%h!{O%l-wO%p!|O%w!}O(s;ZO)QYO~P!8jOl;hO%w!}O(s;ZO~P!8jO(w4YO~Ol$oO!T(RO(s$nO(w(QO)QYO~O!l3pO~P()RO)k4[O!U&pX!h&pX~O!h4]O!U*RX~O!U4_O~Oa4aOl$oO&n!RO(s$nO~O!T([O]&lid&lil&lir&lis&lit&liu&liv&liw&lix&liy&li}&li!V&li!r&li!s&li!t&li!u&li!v&li!x&li!{&li%w&li&s&li&t&li(s&li)T&li)V&li)W&li)X&li!O&li!X&li!Y&li![&li!^&li!_&li!a&li!b&li!c&li!e&li!f&li!h&li(v&li(x&li(y&li)U&li)Y&li!g&li)k&li!W&liQ&li!d&li!U&li#v&li~O(w&li~P(*cO(w.xO~P(*cO!O4dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O4dO~O!O4eO~O]#}O!T$WO!V'[i!X'[i!Y'[i!['[i!^'[i!_'[i!a'[i!b'[i!c'[i!e'[i!f'[i!h'[i(v'[i(x'[i(y'[i)T'[i)U'[i)V'[i)W'[i)X'[i)Y'[i!g'[i)k'[i!O'[i!W'[i(w'[i!U'[iQ'[i!d'[i~OPmOa%QOl;OO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)Y!ZO)ZXO)icO)jdO]#]ap#]a!T#]a!V#]a)T#]a)V#]a)W#]a~O(s%nO)Y4jO!O*ZP~O*X4iO~O'g4lO*X4iO~O*X4mO~OlmXpnXp&xX~Od4oO%Z*UO(z/`O~Od4oO%Z*UO(z4pO~O!h/fO!O(ta~O!W4tO~O]&cO!V+lO!T%vq#v%vq)X%vq)k%vq~O]#}O!T$WO!X'[q!Y'[q!['[q!^'[q!_'[q!a'[q!b'[q!c'[q!e'[q!f'[q!h'[q(v'[q(x'[q(y'[q)T'[q)U'[q)V'[q)W'[q)X'[q)Y'[q!g'[q)k'[q!O'[q!W'[q(w'[q!U'[qQ'[q!d'[q~O!V'[q~P(5pO!V/QO&s#WO&t$wO~P(5pO!T$WO!V)sO(x)tO!U(VX!h(VX~P!JwO!h/qO!U)sa~O!W4|O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*jO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!U5QO~P&7QO!W5QO~P&7QO!O5QO~P&7QO!O5VO~P&7QO]5WO!h'va)Y'va)^'va~O!h*PO)Y)Ri)^)Ri~O]&cO!V&bO!O#Qq!T#Qq!h#Qq#v#Qq)X#Qq)k#QqQ#Qq!d#Qq(w#Qq~O!OqiQqi!dqi!hqi)Yqi)Xqi~P#IkO]&cO!V+lO!OqiQqi!dqi!hqi)Yqi)Xqi~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'Uq)X'Uq!g'Uq)k'Uq!O'Uq!W'Uq(w'Uq!U'UqQ'Uq!d'Uq~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W'}a!h'}a~P#3zO!W5]O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h5^O(v#gO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O!U)sX~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h#{i)X#{i~P#3zO]*wO!T$WO!V&bO)k*sO!h(Wa)X(Wa~O!h1iO]'eX!O)eX~P%3PO)Y5`O!T%ra!h%ra#v%ra)k%ra~O!h0vO!T){a#v){a)k){a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X5cO)Y#|O~P#3zO]1VOd!POl;`O!V1TO!{!dO%w$mO(s$xO)T;|O)V5eO)W5eO~OQ#Pa!d#Pa!h#Pa!O#Pa~P(DxO]1VOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V1TO!{!dO!|%RO%w$mO(s$xOQ#kX!d#kX!h#kX!O#kX~Ol%bO)T0}O)V;}O)W;}O~P(EzO]&cOQ#Pa!d#Pa!h#Pa!O#Pa~O!V&bO)k5iO~P(GiO(s%nOQ#dX!d#dX!h#dX!O#dX~O)V;}O)W;}OQ#nX!d#nX!h#nX!O#nX~P' kO!V+lO~P(GiO]1VOa!TOd!POl;aO{#RO!V1TO!{!dO#a#VO#b#TO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO(s;UO)QYO)T;|O)V5eO)W5eO)Y+oO!O)eP~P&?zO!h1WOQ)ma!d)ma~Op&fO)k5nOQ#`al)OX!d#`a!h#`a)Y)OX~P$GXO(s-VOQ#ga!d#ga!h#ga~Op&fO)k5nOQ#`a])_Xd)_Xl)_Xr)_Xs)_Xt)_Xu)_Xv)_Xw)_Xx)_Xy)_X})_X!T)_X!V)_X!d#`a!h#`a!l)_X!r)_X!s)_X!t)_X!u)_X!v)_X!x)_X!{)_X%w)_X&s)_X&t)_X(s)_X(w)_X)T)_X)V)_X)W)_X)Y)_X~O#a5qO#b5qO~O]&cO!V+lO!O#ki!T#ki#v#ki)X#ki)k#kiQ#ki!d#ki!h#ki)Y#ki!x#ki(w#ki~O!W5sO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W5sO~P!(zO!W5sO)T5uO~P$%pO]#ji!T#ji!V#ji!O#ji#v#ji)X#ji)k#jiQ#ji!d#ji!h#ji)Y#ji!x#ji(w#ji~P$ xO)QYO)Y5wO~P8zO!h1iO!O)ea~O&s#WO&t$wO!T#qa!x#qa#v#qa(w#qa)k#qa!O#qa!h#qa)X#qaQ#qa!d#qa)Y#qa~P#NeO!O5|O~P!(zO!O)pP~P!4xO)U6SO)V6QO]#Ua!T#Ua!V#Ua)T#Ua)W#Uar#Uas#Uat#Uau#Uav#Uaw#Uax#Uay#Ua!l#Ua!x#Ua#T#Ua#V#Ua#p#Ua#v#Ua(w#Ua(y#Ua)k#Uaa#Uad#Ual#Ua{#Ua}#Ua!o#Ua!r#Ua!s#Ua!t#Ua!u#Ua!v#Ua!{#Ua#a#Ua#b#Ua#i#Ua#t#Ua$|#Ua%d#Ua%f#Ua%l#Ua%m#Ua%p#Ua%w#Ua&n#Ua&s#Ua&t#Ua(s#Ua)Q#Ua)X#Ua!O#Ua!h#UaQ#Ua!d#Ua~O!x!cO]#Rq!T#Rq!V#Rq#v#Rq(w#Rq)k#Rq!O#Rq!h#Rq)X#RqQ#Rq!d#Rq~O!W6XO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W6XO~P!(zO!h2POQ({a!d({a~O)X6^O~Ol-hO!T'eO)k6_O~O]*wO!T$WO!V&bO!h*uO)X)rX~O)k6cO~P)+qO!O6eO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O6eO~O$d6gOP$`q]$`qa$`qd$`ql$`qr$`qs$`qt$`qu$`qv$`qw$`qx$`qy$`q{$`q}$`q!T$`q!V$`q!X$`q!Y$`q!i$`q!o$`q!r$`q!s$`q!t$`q!u$`q!v$`q!x$`q!{$`q#V$`q#a$`q#b$`q#i$`q#p$`q#t$`q#v$`q$S$`q$U$`q$Z$`q$[$`q$a$`q$f$`q$h$`q$i$`q$l$`q$n$`q$p$`q$r$`q$t$`q$v$`q$x$`q$|$`q%O$`q%V$`q%`$`q%a$`q%b$`q%d$`q%f$`q%h$`q%m$`q%p$`q%w$`q%}$`q&n$`q&s$`q&t$`q'R$`q'S$`q'W$`q'Z$`q'b$`q'c$`q(l$`q(p$`q(s$`q)Q$`q)T$`q)V$`q)W$`q)X$`q)Y$`q)Z$`q)i$`q)j$`q!U$`q~O)X6hO~OPmO]$eOa!]Ol;PO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)T$kO)W$kO)X6jO)Y!ZO)ZXO)icO)jdO~P&?zO(w6lO)k*sO~P)+qO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X6jO)Y#|O~P#3zO!O6nO~P!(zO)X6rO~O)X6sO~O]-ZOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO(s-VO)T-WO~O]&cO!V2xO!h%Pa)X%Pa!O%Pa~O!W6yO)T6zO~P$%pO!h2yO)X)va~O]&cO!O6}O!V2xO~O!TxO$a!iO$f!jO$h!kO$i!lO$l-cO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%O!uO(s:rOd$Yq!o$Yq!{$Yq#i$Yq#p$Yq#t$Yq#v$Yq$S$Yq$U$Yq$Z$Yq$[$Yq$|$Yq%V$Yq%d$Yq%h$Yq%p$Yq%}$Yq(l$Yq)V$Yq!U$Yq$d$Yq~P$0kOPmO]$eOa!]Ol;PO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)QYO)T$kO)W$kO)X7PO)Y!ZO)ZXO)icO)jdO~P&?zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X7SO)Y#|O~P#3zO)X7TO~OP7UO(pQO~Ol*]O)X)_X~P$GXOp&fOl)OX)X)_X~P$GXO)X7WO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&Ta~P#3zO!U7YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO)X7ZO~OPmO]$eOa!]Ol;QO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;YO)QYO)T$kO)W$kO)Y0qO)ZXO)icO)jdO!O)eP~P&?zO!h3tO)Y7_O!T)`a~O!h3tO!T)`a~O)X7dO)k7fO~P(&sO)X7hO~PGVO]4OOl(|Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO%w$mO&s#WO(s({O)T3{O)V4PO)W4PO~O)T7lO~O]&cO!T*rO!V7nO!h7oO#v!eO(w4SO~O)X7dO)k7qO~P)GVO]4OOl(|O!{!dO%w$mO&s#WO(s({O)T3{O)V4PO)W4PO~Op&fO])dX!T)dX!V)dX!h)dX#v)dX(w)dX)X)dX)k)dX!O)dX~O)X7dO~O!T(RO!l7wO(w(QO])Pid)Pil)Pir)Pis)Pit)Piu)Piv)Piw)Pix)Piy)Pi})Pi!V)Pi!r)Pi!s)Pi!t)Pi!u)Pi!v)Pi!x)Pi!{)Pi%w)Pi&s)Pi&t)Pi(s)Pi)T)Pi)V)Pi)W)Pi)X)Pi!O)Pi!X)Pi!Y)Pi![)Pi!^)Pi!_)Pi!a)Pi!b)Pi!c)Pi!e)Pi!f)Pi!h)Pi(v)Pi(x)Pi(y)Pi)U)Pi)Y)Pi!g)Pi)k)Pi!W)PiQ)Pi!d)Pi!U)Pi#v)Pi~O(s%nO!U(gX!h(gX~O!h4]O!U*Ra~Op&fO]*Qad*Qal*Qar*Qas*Qat*Qau*Qav*Qaw*Qax*Qay*Qa}*Qa!T*Qa!V*Qa!r*Qa!s*Qa!t*Qa!u*Qa!v*Qa!x*Qa!{*Qa%w*Qa&s*Qa&t*Qa(s*Qa)T*Qa)V*Qa)W*Qa)X*Qa!O*Qa!X*Qa!Y*Qa![*Qa!^*Qa!_*Qa!a*Qa!b*Qa!c*Qa!e*Qa!f*Qa!h*Qa(v*Qa(x*Qa(y*Qa)U*Qa)Y*Qa!g*Qa)k*Qa!W*QaQ*Qa!d*Qa(w*Qa!U*Qa#v*Qa~O!T([O]&lqd&lql&lqr&lqs&lqt&lqu&lqv&lqw&lqx&lqy&lq}&lq!V&lq!r&lq!s&lq!t&lq!u&lq!v&lq!x&lq!{&lq%w&lq&s&lq&t&lq(s&lq)T&lq)V&lq)W&lq)X&lq!O&lq!X&lq!Y&lq![&lq!^&lq!_&lq!a&lq!b&lq!c&lq!e&lq!f&lq!h&lq(v&lq(x&lq(y&lq)U&lq)Y&lq!g&lq)k&lq!W&lqQ&lq!d&lq(w&lq!U&lq#v&lq~OPmOa%QOl;OO!T$WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)ZXO)icO)jdO~O]*Vi!V*Vi!X*Vi!Y*Vi![*Vi!^*Vi!_*Vi!a*Vi!b*Vi!c*Vi!e*Vi!f*Vi!h*Vi(v*Vi(x*Vi(y*Vi)T*Vi)U*Vi)V*Vi)W*Vi)X*Vi)Y*Vi!g*Vi)k*Vi!O*Vi!W*Vi(w*Vi!U*ViQ*Vi!d*Vi~P*&fO!O7|O~O!W7}O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_q)X'_q!g'_q)k'_q!O'_q!W'_q(w'_q!U'_qQ'_q!d'_q~P#3zO!h8OO!O*ZX~O!O8QO~O*X8RO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h^y)X^y!g^y)k^y!O^y!W^y(w^y!U^yQ^y!d^y~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!O(ia!h(ia~P#3zO]#}O!T$WO!V'[y!X'[y!Y'[y!['[y!^'[y!_'[y!a'[y!b'[y!c'[y!e'[y!f'[y!h'[y(v'[y(x'[y(y'[y)T'[y)U'[y)V'[y)W'[y)X'[y)Y'[y!g'[y)k'[y!O'[y!W'[y(w'[y!U'[yQ'[y!d'[y~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_y)X'_y!g'_y)k'_y!O'_y!W'_y(w'_y!U'_yQ'_y!d'_y~P#3zO]&cO!V+lO!T%vy#v%vy)X%vy)k%vy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Va!h(Va~P#3zO!W4|O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U#}i!h#}i~P#3zO!U8TO~P&7QO!W8TO~P&7QO!O8TO~P&7QO!O8VO~P&7QO]&cO!V&bO!O#Qy!T#Qy!h#Qy#v#Qy)X#Qy)k#QyQ#Qy!d#Qy(w#Qy~O]&cO!V+lO!OqqQqq!dqq!hqq)Yqq)Xqq~O]&cOQ#Pi!d#Pi!h#Pi!O#Pi~O!V+lO~P*9xOQ#nX!d#nX!h#nX!O#nX~P(DxO!V&bO~P*9xOQ(PX](PXd'rXl'rXr(PXs(PXt(PXu(PXv(PXw(PXx(PXy(PX!V(PX!d(PX!h(PX!{'rX%w'rX(s'rX)T(PX)V(PX)W(PX!O(PX~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_i!d#_i!h#_i!O#_i~P#3zO&s#WO&t$wOQ#fi!d#fi!h#fi~O(s-VO)Y1]O)k1[OQ#`X!d#`X!h#`X~O!W8[O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8[O~P!(zO!T#qi!x#qi#v#qi(w#qi)k#qi!O#qi!h#qi)X#qiQ#qi!d#qi)Y#qi~O]&cO!V+lO~P*?tO]&YO!V&WO&s#WO&t$wO)T&VO)V&ZO)W&ZO~P*?tO!O8^O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!h8_O!O)pX~O!O8aO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*UX!d*UX!h*UX~P#3zO)Y8dOQ*TX!d*TX!h*TX~O)X8fO~O!O$ci!h#{a)X#{a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X8iO)Y#|O~P#3zO!O8kO~P!(zO!O8kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O8kO~O]&cO!V&bO(w8qO~O)X8rO~O]&cO!V2xO!h%Pi)X%Pi!O%Pi~O!W8uO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8uO)T8wO~P$%pO!W8uO~P!(zO]&cO!V2xO!h(Za)X(Za~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X8xO)Y#|O~P#3zO)X2lO~P!(zO)X8xO~OP%oO!O8yO(pQO~O!O8yO~O)X8zO~P%%lO#T8}O(y.SO)X8{O~O!h3tO!T)`i~O)Y9RO!T'xa!h'xa~O)X9TO)k9VO~P)GVO)X9TO~O)X9TO)k9ZO~P(&sOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P)GuO]&cO!V7nO!T!ya!h!ya#v!ya(w!ya)X!ya)k!ya!O!ya~O!W9bO)T9cO~P$%pO!T$WO!h7oO(w4SO)X9TO)k9ZO~O!T$WO~P#EfO]&cO!O9fO!V7nO~O]&cO!V7nO!T&ba!h&ba#v&ba(w&ba)X&ba)k&ba!O&ba~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&ca~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X9TO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U&pi!h&pi~P#3zO!V/QO]'^i!T'^i!X'^i!Y'^i!['^i!^'^i!_'^i!a'^i!b'^i!c'^i!e'^i!f'^i!h'^i(v'^i(x'^i(y'^i)T'^i)U'^i)V'^i)W'^i)X'^i)Y'^i!g'^i)k'^i!O'^i!W'^i(w'^i!U'^iQ'^i!d'^i~O(s%nO)Y9iO~O!h8OO!O*Za~O!O9kO~P&7QO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Va)X#Zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_q!d#_q!h#_q!O#_q~P#3zO&s#WO&t$wOQ#fq!d#fq!h#fq~O)k5nOQ#`a!d#`a!h#`a~O]&cO!V+lO!T#qq!x#qq#v#qq(w#qq)k#qq!O#qq!h#qq)X#qqQ#qq!d#qq)Y#qq~O!h8_O!O)pa~O)V6QO]&Wi!T&Wi!V&Wi)T&Wi)U&Wi)W&Wir&Wis&Wit&Wiu&Wiv&Wiw&Wix&Wiy&Wi!l&Wi!x&Wi#T&Wi#V&Wi#p&Wi#v&Wi(w&Wi(y&Wi)k&Wia&Wid&Wil&Wi{&Wi}&Wi!o&Wi!r&Wi!s&Wi!t&Wi!u&Wi!v&Wi!{&Wi#a&Wi#b&Wi#i&Wi#t&Wi$|&Wi%d&Wi%f&Wi%l&Wi%m&Wi%p&Wi%w&Wi&n&Wi&s&Wi&t&Wi(s&Wi)Q&Wi)X&Wi!O&Wi!h&WiQ&Wi!d&Wi~O)X9nO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!O$cq!h#{i)X#{i~P#3zO!O9pO~P!(zO!O9pO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O9pO~O]&cO!V&bO(w9sO~O!O9tO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O9tO~O]&cO!V2xO!h%Pq)X%Pq!O%Pq~O!W9xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W9xO~P!(zO)X6jO~P!(zO)X9yO~O)X9zO~O(y.SO)X9zO~O!h3tO!T)`q~O)Y9|O!T'xi!h'xi~O!T$WO!h7oO(w4SO)X9}O)k:PO~O)X9}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X9}O)Y#|O~P#3zO)X9}O)k:SO~P)GVO]&cO!V7nO!T!yi!h!yi#v!yi(w!yi)X!yi)k!yi!O!yi~O!W:WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:WO)T:YO~P$%pO!W:WO~P!(zO]&cO!V7nO!T(ea!h(ea(w(ea)X(ea)k(ea~O!O:[O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O:[O~O!O:aO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O:aO~O]&cO!V2xO!h%Py)X%Py!O%Py~O)X:bO~O)X:cO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X:cO)Y#|O~P#3zO!T$WO!h7oO(w4SO)X:cO)k:fO~O]&cO!V7nO!T!yq!h!yq#v!yq(w!yq)X!yq)k!yq!O!yq~O!W:hO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:hO~P!(zO!O:jO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O:jO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X:lO)Y#|O~P#3zO)X:lO~O]&cO!V7nO!T!yy!h!yy#v!yy(w!yy)X!yy)k!yy!O!yy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X:pO)Y#|O~P#3zO)X:pO~O]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(vZX(w$^X(xZX(yZX)TZX)UZX)VZX)WZX)XZX)YZX)kZX~O]%XXlmXpnXp%XX!TnX!V%XX!X%XX!Y%XX![%XX!^%XX!_%XX!a%XX!b%XX!c%XX!e%XX!f%XX!gmX!h%XX(v%XX(x%XX(y%XX)T%XX)U%XX)V%XX)W%XX)Y%XX)kmX!O%XXQ%XX!d%XX~O)X%XX!W%XX(w%XX!U%XX~P+HQO]nX]%XXdnXlmXpnXp%XXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!V%XX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX)TnX)VnX)WnX!OnX!O%XX!hnX)YnX~O)XnX)knX~P+JbO]%XXlmXpnXp%XX!V%XX!h%XXQ%XX!d%XX!O%XX~O!T%XX#v%XX)X%XX)k%XX(w%XX~P+L{OQnXQ%XX!TnX!X%XX!Y%XX![%XX!^%XX!_%XX!a%XX!b%XX!c%XX!dnX!d%XX!e%XX!f%XX!gmX!h%XX(v%XX(x%XX(y%XX)T%XX)U%XX)V%XX)W%XX)Y%XX)kmX~P+JbO]nX]%XXlmXpnXp%XXrnXsnXtnXunXvnXwnXxnXynX}nX!V%XX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX)TnX)VnX)WnX~O!TnX(wnX)XnX)knX~P, sOdnX!VnX)X%XX~P, sOlmXpnX)X%XX~Od)pO%Z)qO(z:sO~Od)pO%Z)qO(z:xO~Od)pO%Z)qO(z:tO~Od$RO%Z*UO']$TO'`$UO(z:sO~Od$RO%Z*UO']$TO'`$UO(z:uO~Od$RO%Z*UO']$TO'`$UO(z:wO~O]iXriXsiXtiXuiXviXwiXxiXyiX!OiX!ViX&siX&tiX)TiX)ViX)WiXdiX}iX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX(siX~P#1jO]ZXlgXpZXpiX!VZX!hZX)XZX)kZX~O!TZX#vZX(wZX~P,(ZOlgXpiX)QiX)XZX)kiX~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX!OZX!OiX!hiX)YiX)kiX~O)XZX~P,)eO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!hiX&siX&tiX(vZX(xZX(yZX)TZX)TiX)UZX)VZX)ViX)WZX)WiX)YZX)YiX)kZX~OQZXQiX!dZX!diX~P,,OO]iXdiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX~P#1jO]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX~O)XiX~P,1QOdiX}iX!OZX!OiX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX(siX)kiX~P,,OO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX(wiX)TiX)ViX)WiX)XiX)kiX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PBUOd$RO%Z*UO(z:sO~Od$RO%Z*UO(z:tO~Od$RO%Z*UO(z:zO~Od$RO%Z*UO(z:yO~O]%hOd!POl%bOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!{!dO!|%RO%w$mO(s$xO)T;eO)V;fO)W;fO~O]%hOd!POl%bO!V%kO!{!dO%w$mO(s$xO)T;eO)V;fO)W;fO~Od$RO%Z$SO(z:tO~Od$RO%Z$SO(z:xO~Ol:}O~Ol:|O~O]cXlgXpiX!TcX~Od)pO%Z*UO(z:sO~Od)pO%Z*UO(z:tO~Od)pO%Z*UO(z:uO~Od)pO%Z*UO(z:vO~Od)pO%Z*UO(z:wO~Od)pO%Z*UO(z:yO~Od)pO%Z*UO(z:zO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P,9^O])OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)k)OX~Ol:|O!T)OX(w)OX)X)OX~P,=]O]&xXlmXpnX!T&xX~Od4oO%Z*UO(z;xO~Ol;`O)T;|O)V5eO)W5eO~P(EzOd!POl%bO!{!dO%w$mO(s$xO~O]1VO!V1TO)T0}O)V;}O)W;}OQ#nX!d#nX!h#nX!O#nX~P,@XO)T;^O~Ol;lO~Ol;mO~Ol;nO~Ol;pO~Ol;qO~Ol;rO~Ol;pO!T$WOQ)OX!d)OX!h)OX)Y)OX!O)OX)k)OX~P$GXOl;nO!T$WO~P$GXOl;lO!g$YO)k$YO~Ol;nO!g$YO)k$YO~Ol;pO!g$YO)k$YO~Ol;mO!O)OX!h)OX)Y)OX)k)OX~P$GXOd/aO%Z*UO(z;xO~Ol;yO~O)T<^O~OV'f'i'j'h(p)Z!R(sST%[!Y!['kd%]!i'S!f]'g*['l(x!^!_'m'n'm~",
        goto: "%8]*[PPPPPP*]P*`PP.W4nP7o7o:{P:{>XP>r?U?jFdMf!&l!-UP!4Q!4u!5jP!6UPPPPPPPP!6oP!8ZPP!9n!;YP!;`PPPPPP!;cP!;cPP!;cPPPPPPPPP!;o!?XP!?[PP!?x!@mPPPPP!@qP>u!BUPP>u!D_!F`!Fn!HV!IxP!JTP!Jd!Jd!Mv##X#$q#(P#+]!F`#+gPP!F`#+n#+t#+g#+g#+wP#+{#,j#,j#,j#,j!IxP#-T#-f#/lP#0SP#1qP#1u#2P#2v#3R#5a#5i#5i#5p#1uP#1uP#6U#6[P#6fPP#7T#7t#8h#7TP#9[#9hP#7TP#7TPP#7T#7TP#7TP#7TP#7TP#7TP#7TP#7TP#9k#6f#:ZP#:rP#;Z#;Z#;Z#;Z#;h#1uP#<Q#AO#AmPPPPPPPP#BeP#BuP#BuP#CT#Fd#:hPP#Bo#FxP#G_#Gj#Gp#Gp#Bo#HfP#1u#1u#1u#1u#1uP!Jd#IS#IZ#IZ#IZ#I_!Mp#Ii!Mp#Im!Fn!Fn!Fn#Ip#N[!Fn>u>u>u$%V!@m!@m!@m!@m!@m!@m!6o!6o!6o$%jP$'X$'g!6o$'mPP!6o$)}$*Q#B[$*T:{7o$-]$/W$0w$2g7oPP7o$4Z7oP7o7oP7oP$7c7oP7oPP7o$7oPPPPPPPPP*]P$:y$;P$=h$?p$?v$@^$@h$@s$AS$AY$Bj$Ci$Cp$Cw$C}$DV$Da$Dg$Dv$D|$EV$E_$Ej$Ep$Ez$FQ$F[$Fc$Ft$Fz$GQP$GW$G`$Gg$Gu$Ie$Ik$Iq$Ix$JRPPPPPPPP$JX$J]PPPPP%#a$)}%#d%&n%(xP%)V%)YPPPPPPPPPP%)f%*i%*o%*s%,l%-{%.n%.u%1W%1^PPP%1h%1s%1v%1|%3T%3W%3d%3n%3r%4x%5m%5s#BeP%6^%6p%6s%7V%7e%7i%7o%7u$)}$*Q$*Q%7x%7{P%8V%8YR#cP'dmO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jU%om%p7UQ&m!`Q(k#]d0S*O0P0Q0R0U5R5S5T5W8UR7U3Xf}Oaewx{!g&S'e*r-f&v$i[!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x1O1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jS%`f0k#d%jgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^S%qm!YS&u!h#PQ']!tQ'h!yQ'i!zQ(k#`Q(l#]Q(m#^Q*y%kQ,X&lQ,^&nQ-T'^Q-g'gQ-n'rS.u([4]Q/i)hQ0h*nQ2T,]Q2[,dQ3S-hQ4f/PQ4j/WQ5j1QQ6`2WQ7R3TQ8e6_Q9i8OR;_1T$|#hS!]$y%Q%T%Z&j&k'Q'X'Z'a'c(b(f(i(x(y)S)T)U)V)W)X)Y)Z)[)])^)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:mQ&p!dQ(h#ZQ(t#bQ)k$T[*t%e*X0n2c2j3OQ,_&oQ/R(gQ/V(lQ/^(uS/l)j/SQ0u+RS4u/m/nR8S4v'e![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j'e!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ)P#kS+R%y0vQ/u)tk4R.j3w3{4O4P7g7i7j7l7o9]9^:VQ)R#kk4Q.j3w3{4O4P7g7i7j7l7o9]9^:Vl)Q#k.j3w3{4O4P7g7i7j7l7o9]9^:VT+R%y0v`UOwx!g&S'e*r-fW$`[e$e(c#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_(O(Q(V(_(h)k)q+]+b+c+u+z,Y,l,{-R-r-w.Z.[.b.c.g.t.x1W1[1i1n1p2o3`3a3b3t3x5n6R6T7`8_![%cg$g%d%i&s*Z*u+^,m,w-`0}1R2b;[;];^;e;f;s;t;u;v;z;{;}<[<]<^Y%snp%w-s.il(}#k.j3w3{4O4P7g7i7j7l7o9]9^:VS;i'u-zU;j(R.p.r&|<Paf{|!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k$|$}%S%]%h%m&Q&W&b&y&|'O'j'k'v'z(a(j)m)s*a*c*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0`0k0|1O1T1d1e1o1s1}2f2l2m2x4S4V4[4e5^5e5i5u6c6g6j6k6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j;d;|Q<Q1Vd<R&x'P'b,x-^-_-b2i2}3QW<S&f*w2P3mQ<T#O[<U!t'^'g,]2W6_T<a%y0v`VOwx!g&S'e*r-fW$a[e$e(cQ$p.x!j$q_!f!u!}#V#Z$S$T$l%U&U&Y&c&m'_(h)k)q+]+b+u,Y,l,{-R-r.g1W1[1i1n1p2o3x5n8_&^$zaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j![%cg$g%d%i&s*Z*u+^,m,w-`0}1R2b;[;];^;e;f;s;t;u;v;z;{;}<[<]<^Y%snp%w-s.iQ's#O|'}#R#S#T#U(O(Q(V(_+c+z.Z.[.b.c.t3`3a3b3t6R6T7`l(}#k.j3w3{4O4P7g7i7j7l7o9]9^:VS-q'u-zQ3[-wU;w(R.p.rn<P|$|$}%S%h'v*a*c0`0|2m5e6k;d;|[<U!t'^'g,]2W6_W<V&f*w2P3md<W&x'P'b,x-^-_-b2i2}3QQ<_1VT<a%y0v!U!UO[ewx!g$e&S&f&x'P'b'e(c*r*w,x-^-_-b-f2P2i2}3Q3m!v$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'u(R(h)k)q+]+u,Y,l,{-R-r-z.g.p.r1V1W1[1i1n1p2o3x5n8_&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j$Q%lgnp|#k$g$|$}%S%d%h%i%w%y&s'^'g'v*Z*a*c*u+^,],m,w-`-s.i.j0`0v0|0}1R2W2b2m3w3{4O4P5e6_6k7g7i7j7l7o9]9^:V;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^Q'[!tz(P#R#S#T#U(O(Q(V(_+z.Z.[.b.c.t3`3a3b3t6R6T7`f-['`-U-W-Z2s2t2v2y6u6v8tQ1Z+bQ1^+cQ2n,zQ3]-wQ4`.xQ5p1]R8Z5q!U!UO[ewx!g$e&S&f&x'P'b'e(c*r*w,x-^-_-b-f2P2i2}3Q3m!x$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'u(R(h)k)q+]+b+u,Y,l,{-R-r-z.g.p.r1V1W1[1i1n1p2o3x5n8_&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j$S%lgnp|!t#k$g$|$}%S%d%h%i%w%y&s'^'g'v*Z*a*c*u+^,],m,w-`-s.i.j0`0v0|0}1R2W2b2m3w3{4O4P5e6_6k7g7i7j7l7o9]9^:V;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^|(P#R#S#T#U(O(Q(V(_+c+z.Z.[.b.c.t3`3a3b3t6R6T7`Q3]-wR4`.x`WOwx!g&S'e*r-fW$b[e$e(c#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_(O(Q(V(_(h)k)q+]+b+c+u+z,Y,l,{-R-r-w.Z.[.b.c.g.t.x1W1[1i1n1p2o3`3a3b3t3x5n6R6T7`8_![%cg$g%d%i&s*Z*u+^,m,w-`0}1R2b;[;];^;e;f;s;t;u;v;z;{;}<[<]<^Y%snp%w-s.il(}#k.j3w3{4O4P7g7i7j7l7o9]9^:VS;i'u-zU;j(R.p.rn<P|$|$}%S%h'v*a*c0`0|2m5e6k;d;|Q<Q1VQ<T#O[<U!t'^'g,]2W6_&^<Xaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jd<Y&x'P'b,x-^-_-b2i2}3QW<Z&f*w2P3mT<a%y0vp$PT$_$o%b%r(|;O;P;Q;`;a;b;c;g;h<`o)n$V*V*]/b:{:|:};l;m;n;o;p;q;r;yp$QT$_$o%b%r(|;O;P;Q;`;a;b;c;g;h<`o)o$V*V*]/b:{:|:};l;m;n;o;p;q;r;y^&e}!O$i$j%`%j;_d&i!U$t%P%l'[(P1Z1^3]4`V/d)P)Q4RS%Ye$eQ,U&fQ/O(cQ2p-RQ5}1pQ6Z2PQ6q2oR9l8_$R!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_#`^O[_`wx!f!g!}#O$S$d$l$s$u&S&U&Y&c&m&r&x'P'b'e'u(R)q*^*r*w+],Y,l,x,{-^-_-b-f-r-w-z.g.p.r1V1W1i2i2}3Q3m3x_(V#R#S#T+c3`3a3b$RZO[wx!g!k#R#S#T%m&S&U&Y&c&m&w&x&y&|'O'P'['b'e'u'y(O(Q(R(V*r*w+]+c,Y,i,l,r-Q-^-_-b-f-r-w-z-}.b.g.p.t1V1W1i2f2n2}3Q3`3a3b3m6g6n8k9p9t:[:a:jQ$]YR0W*PR*R$]e0S*O0P0Q0R0U5R5S5T5W8U'd!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:je0S*O0P0Q0R0U5R5S5T5W8UR5X0W^(U#R#S#T+c3`3a3bY.`(O(S(V(W7XU3o.^.a.tS7]3p4ZR9g7w^(T#R#S#T+c3`3a3b[._(O(S(U(V(W7XW3n.^.`.a.tU7[3o3p4ZS9O7]7wR:Z9gT.n(R.ph]Owx!g&S'e'u(R*r-f-z.p!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)q*^*w+],Y,l,x,{-^-_-b-r-w.g.r1V1W1i2i2}3Q3m3xQ%tnT1x,O1y!nbOaenpwx{|!g#O$|$}%S%h%w&S'e'u'v(R*a*c*r-f-s-z.i.p.r0`0|1V2m5e6k;d;|f-X'`-U-W-Z2s2t2v2y6u6v8tj3|.j3w3{4O4P7g7i7j7l7o9]9^:Vr<Og$g%d%i&s*Z*u,m,w-`2b;[;];^;s;u;zi<b+^0}1R;e;f;t;v;{;}<[<]<^!O&^y%X&V&Y&Z'l)i*e*g+^+f+y/p0a0|0}1R1V1m5e5z;|;}z&az%O%W%e&d't*X*`,c-{0^0_0n1P2c2j3O5Z5f6p8mS'|#Q.[n+m&X*h+g+n+q-m/k0b1U1a4x5[5d5y8]Q2Z,b^2w-Y2u2{6t6{8s9we7m3}7c7k7s7t9Y9[9d:U:gS+_&U1WY+o&Y&c*w1V3mR5w1i#{!POaegnpwx{|!g#O$g$|$}%S%d%h%i%w&S&s'e'u'v(R*Z*a*c*r*u+^,m,w-`-f-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^doOwx!g&S'e'u*r-f-z#U!Paeg{|#O$g$|$}%S%d%h%i&s'v*Z*a*c*u+^,m,w-`0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^U%vnp-sQ+O%wS.h(R.pT3z.i.rW+s&^+m+t1fV+{&a+|7mQ+y&`U+{&a+|7mQ-z'uT.V'z.X'd![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jX1u+z.[6R6T'[!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jW1u+z.[6R6TR2h,t![jO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jY%Ve$e(c1s3mQ'S!nS(z#i5^Q,n&xQ,y'PS.R'z.XQ2e,oQ6o2lQ7Q3QQ8l6jR9q8i'[![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jX1u+z.[6R6T'eyO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l+z,Q,S,o,r,x-^-_-b-f-j.S.T.X.[/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6R6T6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ&`yS'u#O-xR1_+dS+_&U1WR5r1_Q1S+^R5k1RR1S+^T+_&U1Wz&[%X&V&Y&Z'l)i*e*g+^+f/p0a0|0}1R1V1m5e5z;|;}Q&]yR1q+y!P&[y%X&V&Y&Z'l)i*e*g+^+f+y/p0a0|0}1R1V1m5e5z;|;}Q+v&^S+}&a7mS1g+m+tQ1w+|R5v1f![kO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jS%zo.hS&Oq-uQ&_yQ&q!eQ*q%eU*|%v%{3zS+Q%x%}Q+r&]Q,s&{S0[*X,cS0r*}+OQ0t+PQ1r+yQ5Y0^Q5_0sQ6P1qQ6a2ZQ7r3}Q9W7cR:T9Y`uOwx!g&S'e*r-fQ,Z&mQ-y'uQ3^-wR3c-z|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jU$h[&|-_S%zo.hS&Oq-uQ*q%eU*|%v%{3zS+Q%x%}S0[*X,cS0r*}+OQ0t+PQ5Y0^Q5_0sQ7r3}Q9W7cR:T9YT,`&q,aauOwx!g&S'e*r-f`uOwx!g&S'e*r-fQ,Z&mQ,o&xQ,x'PW-a'b-^-b2}Q-y'uQ3^-wQ3c-zR7P3Q[%fg$g,m,w-`2bR0o*u^$XV!U$a$z%P<V<WQ'S!nS)a#}*wS)w$W*rQ)z$YY*t%e*X0n2j3OQ/R(gS/l)j/SS0d*i4eS0m*s6cQ0u+RQ4U.jQ4r/fS4u/m/nS4z/q5^Q5P/xQ6d2cU7e3w3}4VQ8S4vQ8o6lY9U7c7f7g7p7qQ9v8qW:O9S9V9Y9ZQ:_9sU:e:P:R:SR:n:fS)w$W*rT4z/q5^Z)u$W)v*r/q5^Q&t!gQ'f!yQ,Z&mS,[&n'hS2V,^-iR6^2UQ&w!hR'y#PS,h&v'wQ2_,fR6b2^|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jV$h[&|-_!]kO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:j![hO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jR'W!q![kO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jR,o&xQ&y!iQ&{!jQ'O!lR,r&zR,p&x|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jX-a'b-^-b2}`uOwx!g&S'e*r-fQ,{'PQ-y'uS.n(R.pR3c-z`uOwx!g&S'e*r-fQ,{'PW-a'b-^-b2}T.n(R.pg-['`-U-W-Z2s2t2v2y6u6v8t}lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jf!OOaewx{!g&S'e*r-f&|$j[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j#d%jgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^Q']!tQ-T'^Q-g'gQ2T,]Q6`2WR8e6_j$RT$_%b%r;O;P;Q;`;a;b;c;g;hi)p$V*V:{:|:};l;m;n;o;p;q;rj$RT$_%b%r;O;P;Q;`;a;b;c;g;hh)p$V*V:{:|:};l;m;n;o;p;q;rS/a(|<`V4o/b/c;y`uOwx!g&S'e*r-fQ-y'uR3c-z`uOwx!g&S'e*r-fT.n(R.p'd!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jR7V3X`uOwx!g&S'e*r-fQ-y'uS.n(R.pR3c-z`pOwx!g&S'e*r-fQ%wnS-s'u-zT.i(R.pS%{o.hS*}%v3zR0s+OQ+S%yR5a0vS%zo.hS&Oq-uU*|%v%{3zS+Q%x%}S0r*}+OQ0t+PQ5_0sQ7r3}Q9W7cR:T9YdqOwx!g&S'e(R*r-f.pS%xn-sU%}p.i.rQ+P%wT-u'u-zS'{#Q.[R.]'|T.U'z.XS.V'z.XQ8|7YR9{8}T6R1t8cR6T1t#d!Pgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^f!QOaewx{!g&S'e*r-f&}![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j#d!Pgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^f!QOaewx{!g&S'e*r-f&|![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jk4Q.j3w3{4O4P7g7i7j7l7o9]9^:VQ4U.jS7e3w3}U9U7c7g7pS:O9S9YR:e:R$Q!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_R4a.xQ(^#US.y(](_S4b.z.{R7{4cQ.v([R7y4]$Q!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_p$w`$d$s%X&r'`(`(g)j*e-U/n1m5o5z8Yq)O#k%y.j0v3w3{4O4P7g7i7j7l7o9]9^:VR,V&fR6[2P']!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j$q#rS%T%Z'Q'X'Z'a'c(b(f(i(x(y)S)T)V)W)X)Y)Z)[)])^)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m$]#sS%T%Z'Q'X'Z'a'c(i(x(y)S)W)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m$Z#tS%T%Z'Q'X'Z'a'c(i(x(y)S)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m$c#wS%T%Z'Q'X'Z'a'c(i(x(y)S)V)W)X)Y)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m']![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ/S(gQ/m)jQ4v/nR9h7}'a![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ#eQR(v#eU$|a;d;|b%Ue$e&f(c-R1p2P2o8_Q'_!u!Q*_$|%U'_*a*g+i,Q0`0a1e2s6u6x7i8t9]9a:V;[;s;t;z;{<[S*a$}%SQ*g%XS+i&W1TQ,Q&bQ0`*cQ0a*eQ1e+lQ2s-WS6u2t2vQ6x2xQ7i3{Q8t6vS9]7j7lQ9a7nQ:V9^Q;[%dS;s;];^S;t<]<^Q;z;uQ;{;vT<[0};e`[Owx!g&S'e*r-fl$c[&|(O+],Y,i,l-Q-_-r-}.b.g.tl&|!k%m&y'O,r2f6g6n8k9p9t:[:a:j^(O#R#S#T+c3`3a3b`+]&U&Y&c*w1V1W1i3mS,Y&m-wQ,i&wU,l&x'P3QS-Q'[2nW-_'b-^-b2}S-r'u-zQ-}'yQ.b(QS.g(R.pR.t(VQ)}$[R/{)}Q0U*OQ5R0PQ5S0QQ5T0RY5U0U5R5S5T8UR8U5WQ*Q$]S0X*Q0YR0Y*RS.c(Q.bS3r.c7`R7`3tQ3u.dS7^3s3vU7b3u7^9PR9P7_Q.p(RR4W.p#Q_O[wx!f!g!}#O$S$l&S&U&Y&c&m&x'P'b'e'u(R)q*r*w+],Y,l,x,{-^-_-b-f-r-w-z.g.p.r1V1W1i2i2}3Q3m3xU$r_$u*^U$u`$d&rR*^$sU$}a;d;|d*b$}*c2t6v7j9^;];u;v<]Q*c%SQ2t-WQ6v2vQ7j3{Q9^7lQ;]%dQ;u;^Q;v<^T<]0};eS+|&a7mR1v+|S*k%Z/sR0f*kQ1X+`R5m1XU+f&V0};|R1`+fQ+t&^Q1f+mT1l+t1fQ8`5}R9m8`QwOU&Rw&S-fS&Sx*rR-f'eQ,a&qR2Y,aW)v$W*r/q5^R/w)vU/r)r)w0jR4{/r[*v%e%f*X2c2j3OR0p*vQ,e&uR2],eQ-b'bQ2}-^T3P-b2}Q2z-YR6|2zQ-i'hQ2U,^T3U-i2US%pm7UR*{%phnOwx!g&S'e'u(R*r-f-z.pR%unQ0w+SR5b0wQ.X'zR3j.XQ1y,OR6U1yU*o%`*y;_R0i*oS1j+o0qR5x1jQ7p3}Q9S7cU9e7p9S:RR:R9Y$S!SO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r.x1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_R&g!SQ4^.vR7z4^Q2Q,VR6]2QS/g)`)aR4s/gW(p#a(k(l/VR/Z(pQ8P4jR9j8PT)b#}*w!YSO[wx!g!k%m&S&y&|'O'b'e,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jj$ya{$k%]+k,S1d1}5u6z8w9c:YY%Te$e(c1s3mY%Zf$f(j)m*mQ&j!WQ&k!XQ'Q!nQ'X!rQ'Z!sQ'a!vQ'c!xQ(b#XQ(f#YS(i#[+ZQ(x#gQ(y#iQ)S#lQ)T#qQ)U#rQ)V#sQ)W#tQ)X#uQ)Y#vQ)Z#wQ)[#xQ)]#yQ)^#zQ)_#{S)`#}*wQ)l$UQ)r$WQ)y$YQ+Y&QS+h&W1TQ,P&bQ,T&fQ,k&xQ,v'PQ-k'jQ-l'kS.P'z.XQ.|(aS/s)s0kS0c*i4eQ0e*jQ0j*rQ0l*sQ0z+XS1c+i+lQ1|,QQ2d,oS2k,x7PQ3V-jQ3g.SQ3h.TQ4g/QQ4h/TQ4n/_Q4q/fQ4w/oQ4y/qQ4}/vQ5O/xQ5h1OQ5t1eQ5{1oQ6Y2PS6i2i8xQ6m2lQ6w2xQ7O3QQ7u4SQ7v4VQ7x4[Q8W5^Q8X5iQ8g6cQ8j6jQ8n6lQ8v6xS9X7f7qQ9`7nQ9o8iQ9u8qS:Q9V9ZQ:X9aQ:^9sS:d:P:SR:m:fR,W&fh]Owx!g&S'e'u(R*r-f-z.p!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)q*^*w+],Y,l,x,{-^-_-b-r-w.g.r1V1W1i2i2}3Q3m3x#r${ae!u$e$|$}%S%U%X%d&W&b&f'_(c*a*c*e*g+i+l,Q-R-W0`0a1T1e1p2P2o2s2t2v2x3{6u6v6x7i7j7l7n8_8t9]9^9a:V;[;];^;d;e;s;t;u;v;z;{<[<]<^Q%tnS+e&V+fW+s&^+m+t1fU+{&a+|7mQ1n+uT5g0};|d`Owx!g&S'e'u*r-f-zS$d[-rQ$s_b%Xe$e&f(c-R1p2P2o8_!h&r!f!}#O$S$l&U&Y&c&m&x'P'b(R)q*w+],Y,l,x,{-^-_-b-w.g.p.r1V1W1i2i2}3Q3m3xQ'`!uS(`#V+bQ(g#ZS)j$T(hQ*e%UQ-U'_Q/n)kQ1m+uQ5o1[Q5z1nR8Y5nS(X#R3aS(Y#S3bV(Z#T+c3`R$^Ye0T*O0P0Q0R0U5R5S5T5W8UW(S#R#S#T+cQ(]#US.^(O(VS.d(Q.bQ.{(_W1u+z.[6R6TQ3_-wQ3l.ZQ3s.cQ4Z.tU7X3`3a3bQ7a3tR9Q7`Q.e(QR3q.bT.o(R.phgOwx!g&S&m'e'u*r-f-w-zU$g[,Y-rQ&s!fQ'l!}Q'v#OQ)i$SQ*Z$l`+^&U&Y&c*w1V1W1i3mQ,m&xQ,w'PY-`'b-^-b2}3QS.j(R.pQ/p)qQ0|+]S2b,l-_S2m,x,{S3w.g.rQ6k2iR7g3xh]Owx!g&S'e'u(R*r-f-z.p!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)q*^*w+],Y,l,x,{-^-_-b-r-w.g.r1V1W1i2i2}3Q3m3xR%tnQ3}.jQ7c3wQ7k3{Q7s4OQ7t4PQ9Y7gU9[7i7j7lQ9d7oS:U9]9^R:g:VZ+p&Y&c*w1V3mtzOnpwx!g%w&S'e'u(R*r-f-s-z.i.p.r[%Oa%d0};d;e;|U%We%h1VQ%eg^&d{|%i1R5e;f;}Q't#OQ*X$gb*`$|$}%S;[;];^<[<]<^Q,c&sQ-{'vQ0^*Z[0_*a*c;s;t;u;vQ0n*uQ1P+^Q2c,mQ2j,wS3O-`2bU5Z0`;z;{Q5f0|Q6p2mR8m6kQ,O&aR9_7mS1t+z.[Q8b6RR8c6T[%^f$f(j)m)s0kR0g*mR+a&UQ+`&UR5l1WS&Xy+yQ*h%XU+g&V0};|S+n&Y1VW+q&Z1R5e;}Q-m'lQ/k)iS0b*e*gQ1U+^Q1a+fQ4x/pQ5[0aQ5d0|Q5y1mR8]5zR6O1p^vOwx&S'e*r-fR&t!gW%gg,m,w-`T*Y$g2bT)x$W*r`uOwx!g&S'e*r-fQ&}!kQ*z%mQ,q&yQ,u'OQ2g,rQ6f2fQ8h6gQ8p6nQ9r8kQ:]9pQ:`9tQ:i:[Q:k:aR:o:j|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jU$h[&|-_X-a'b-^-b2}Q-]'`R2r-US-Y'`-UQ2u-WQ2{-ZU6t2s2t2vQ6{2yS8s6u6vR9w8t`rOwx!g&S'e*r-fS-t'u-zT.k(R.pR+T%y`sOwx!g&S'e*r-fS-v'u-zT.l(R.p`tOwx!g&S'e*r-fT.m(R.pT.W'z.XX%af%k0k1TQ.z(]R4c.{R.w([R(e#XQ(s#aS/U(k(lR4i/VR/Y(mR4k/W",
        nodeNames: "\u26A0 RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ArgumentList ( ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr constinit consteval StructSpecifier struct MsDeclspecModifier __declspec ) Attribute AttributeName Identifier AttributeArgs { } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp , Number CharLiteral AttributeArgs VirtualSpecifier BaseClassClause Access virtual FieldDeclarationList FieldDeclaration extern static register inline thread_local AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept RequiresClause requires True False ParenthesizedExpression CommaExpression LambdaExpression LambdaCaptureSpecifier TemplateParameterList OptionalParameterDeclaration TypeParameterDeclaration typename class VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration template AbstractFunctionDeclarator AbstractPointerDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ThrowSpecifier throw TrailingReturnType CompoundStatement FunctionDefinition MsCallModifier TryStatement try CatchClause catch LinkageSpecification Declaration InitDeclarator InitializerList InitializerPair SubscriptDesignator FieldDesignator DeclarationList ExportDeclaration export ImportDeclaration import ModuleName PartitionName HeaderName CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto CoReturnStatement co_return CoYieldStatement co_yield AttributeStatement ForRangeLoop AliasDeclaration using TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ThrowStatement NamespaceDefinition namespace ScopedIdentifier Identifier OperatorName operator ArithOp BitOp CompareOp LogicOp new delete co_await ConceptDefinition concept UsingDeclaration enum StaticAssertDeclaration static_assert ConcatenatedString TemplateDeclaration FriendDeclaration friend union FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause FunctionDefinition OperatorCast operator TemplateInstantiation FunctionDefinition FunctionDefinition Declaration ModuleDeclaration module RequiresExpression RequirementList SimpleRequirement TypeRequirement CompoundRequirement ReturnTypeRequirement ConstraintConjuction LogicOp ConstraintDisjunction LogicOp ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator TemplateFunction OperatorName StructuredBindingDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration AccessSpecifier UnionSpecifier ClassSpecifier EnumSpecifier SizedTypeSpecifier TypeSize EnumeratorList Enumerator DependentType Decltype decltype auto PlaceholderTypeSpecifier ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CoAwaitExpression CompoundLiteralExpression NULL NewExpression new NewDeclarator DeleteExpression delete ParameterPackExpansion nullptr this UserDefinedLiteral ParamPack #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
        maxTerm: 426,
        nodeProps: [
          ["group", -35, 1, 8, 11, 14, 15, 16, 18, 71, 72, 100, 101, 102, 104, 192, 209, 230, 243, 244, 271, 272, 273, 278, 281, 282, 283, 285, 286, 287, 288, 291, 293, 294, 295, 296, 297, "Expression", -13, 17, 24, 25, 26, 42, 256, 257, 258, 259, 263, 264, 266, 267, "Type", -19, 126, 129, 148, 151, 153, 154, 159, 161, 164, 165, 167, 169, 171, 173, 175, 177, 179, 180, 189, "Statement"]
        ],
        propSources: [cppHighlighting],
        skippedNodes: [0, 3, 4, 5, 6, 7, 10, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 348, 349],
        repeatNodeCount: 41,
        tokenData: "&*r7ZR!UOX$eXY({YZ.gZ]$e]^+P^p$epq({qr.}rs0}st2ktu$euv!7dvw!9bwx!;exy!<Yyz!=Tz{!>O{|!?R|}!AV}!O!BQ!O!P!DX!P!Q#+y!Q!R#Az!R![$(x![!]$Ag!]!^$Cc!^!_$D^!_!`%1W!`!a%2X!a!b%5_!b!c$e!c!n%6Y!n!o%7q!o!w%6Y!w!x%7q!x!}%6Y!}#O%:n#O#P%<g#P#Q%Kz#Q#R%Ms#R#S%6Y#S#T$e#T#i%6Y#i#j%Nv#j#o%6Y#o#p&!e#p#q&#`#q#r&%f#r#s&&a#s;'S$e;'S;=`(u<%lO$e&t$nY)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&r%eW)[W'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^&j&SU'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j&kX'g&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j']V'g&jOY%}YZ%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j'uP;=`<%l%}&r'{P;=`<%l%^&l(VW(qQ'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O&l(rP;=`<%l(O&t(xP;=`<%l$e7Z)Y`)[W(qQ(o.o'g&j*[)`OX$eXY({YZ*[Z]$e]^+P^p$epq({qr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e.o*aT(o.oXY*[YZ*[]^*[pq*[#O#P*p.o*sQYZ*[]^*y.o*|PYZ*[4e+[`)[W(qQ(o.o'g&jOX$eXY+PYZ*[Z]$e]^+P^p$epq+Pqr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e4Z,cX'g&jOY%}YZ-OZ]%}]^-{^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4Z-V[(o.o'g&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4Z.QV'g&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P.nT*X)`(o.oXY*[YZ*[]^*[pq*[#O#P*p3o/[[%_!b'RP)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o0_Y%^!b!a,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e6e1YY)[W(rQ(p/]'g&jOY%^Zr%^rs1xsw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^(U2RW)y!b)[W'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^4e2tf)[W(qQ'g&jOX$eXY2kZp$epq2kqr$ers%^sw$ewx(Ox!c$e!c!}4Y!}#O$e#O#P&f#P#T$e#T#W4Y#W#X5m#X#Y>u#Y#]4Y#]#^NZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e4eb)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e5xd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y7W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e7cd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z8q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e8|d)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^:[#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e:gd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#b4Y#b#c;u#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e<Qd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y=`#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e=mb)[W(qQ'f.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e?Qf)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a@f#a#b4Y#b#cHV#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e@qf)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^BV#^#g4Y#g#hEV#h#o4Y#o;'S$e;'S;=`(u<%lO$e4eBbd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZCp#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eC}b)[W(qQ'g&j'm.o'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eEbd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#YFp#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4eF}b)[W(qQ'k.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eHbd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#XIp#X#o4Y#o;'S$e;'S;=`(u<%lO$e4eI{d)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^KZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4eKfd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZLt#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eMRb)[W(qQ'g&j'l.o'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eNff)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z! z#Z#b4Y#b#c!.[#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!!Xf)[W(qQ'h.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!#m#X#b4Y#b#c!(W#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!#xd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!%W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!%cd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!&q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!'Ob)[W(qQ'i.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!(cd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!)q#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!)|d)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!+[#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!+gd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!,u#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!-Sb)[W(qQ'j.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!.gd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#V4Y#V#W!/u#W#o4Y#o;'S$e;'S;=`(u<%lO$e4e!0Qd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a!1`#a#o4Y#o;'S$e;'S;=`(u<%lO$e4e!1kd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#i4Y#i#j!2y#j#o4Y#o;'S$e;'S;=`(u<%lO$e4e!3Ud)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!4d#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!4od)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!5}#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!6[b)[W(qQV.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e3o!7q[)[W(qQ%[!b![,g'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!8rY!g-y)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!9o])W,g)[W(qQ%]!b'g&jOY$eZr$ers%^sv$evw!:hwx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!:uY)V,g%_!b)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2X!;pW)]S(qQ)Z,g'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O6i!<eY)[W(qQ]6_'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V!=`Y!Oa)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!>][)T,g)[W(qQ%[!b'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!?`^)[W(qQ%[!b!Y,g'g&jOY$eZr$ers%^sw$ewx(Ox{$e{|!@[|!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!@gY)[W!X-y(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!AbY!h,k)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!B__)[W(qQ%[!b!Y,g'g&jOY$eZr$ers%^sw$ewx(Ox}$e}!O!@[!O!_$e!_!`!8g!`!a!C^!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!CiY(y-y)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Dd^)[W(qQ'g&j(x,gOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!E`!P!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Ei[)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!F_!P#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!FjY)Y,k)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]!Gen)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx!Icx!Q$e!Q![!GY![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T!IjY(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![!JY![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T!Jcn(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx!Icx!Q(O!Q![!JY![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ljl(qQ!i,g'g&jOY(OZr(Ors%}s{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ni^(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![# e![!c(O!c!i# e!i#O(O#O#P&f#P#T(O#T#Z# e#Z;'S(O;'S;=`(o<%lO(O2T# nj(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx!Nbx!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T##id(qQ!i,g'g&jOY(OZr(Ors%}s!h(O!h!i##`!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#Y(O#Y#Z##`#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]#%Sn)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx(Ox{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#'Z`)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![#(]![!c$e!c!i#(]!i#O$e#O#P&f#P#T$e#T#Z#(]#Z;'S$e;'S;=`(u<%lO$e2]#(hj)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx!Nbx!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#*ef)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx(Ox!h$e!h!i#*Y!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#Y$e#Y#Z#*Y#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e7Z#,W`)[W(qQ%[!b![,g'g&jOY$eZr$ers%^sw$ewx(Oxz$ez{#-Y{!P$e!P!Q#:s!Q!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#-c])[W(qQ'g&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y1e#._TOz#.[z{#.n{;'S#.[;'S;=`#/]<%lO#.[1e#.qVOz#.[z{#.n{!P#.[!P!Q#/W!Q;'S#.[;'S;=`#/]<%lO#.[1e#/]OT1e1e#/`P;=`<%l#.[7X#/jZ)[W'g&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7P#0bX'g&jOY#0]YZ#.[Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1SZ'g&jOY#0]YZ#.[Zz#0]z{#0}{!P#0]!P!Q#1u!Q#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1|UT1e'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P#2eZ'g&jOY#0]YZ#0]Z]#0]]^#3W^z#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3]X'g&jOY#0]YZ#0]Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3{P;=`<%l#0]7X#4V])[W'g&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{!P#/c!P!Q#5O!Q#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7X#5XW)[WT1e'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^7X#5tP;=`<%l#/c7R#6OZ(qQ'g&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#6x](qQ'g&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{!P#5w!P!Q#7q!Q#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#7zW(qQT1e'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O7R#8gP;=`<%l#5w7Z#8s_)[W(qQ'g&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{!P#-Y!P!Q#9r!Q#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y7Z#9}Y)[W(qQT1e'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#:pP;=`<%l#-Y7Z#;OY)[W(qQS1e'g&jOY#:sZr#:srs#;nsw#:swx#@{x#O#:s#O#P#<z#P;'S#:s;'S;=`#At<%lO#:s7X#;wW)[WS1e'g&jOY#;nZw#;nwx#<ax#O#;n#O#P#<z#P;'S#;n;'S;=`#@u<%lO#;n7P#<hUS1e'g&jOY#<aZ#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#=RXS1e'g&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P;'S#<a;'S;=`#>[<%lO#<a7P#=uVS1e'g&jOY#<aYZ%}Z#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#>_P;=`<%l#<a7P#>i]S1e'g&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c#f#<a#f#g#?b#g;'S#<a;'S;=`#>[<%lO#<a7P#?iUS1e'g&jOY#<aZ#O#<a#O#P#?{#P;'S#<a;'S;=`#>[<%lO#<a7P#@SZS1e'g&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c;'S#<a;'S;=`#>[<%lO#<a7X#@xP;=`<%l#;n7R#AUW(qQS1e'g&jOY#@{Zr#@{rs#<as#O#@{#O#P#<z#P;'S#@{;'S;=`#An<%lO#@{7R#AqP;=`<%l#@{7Z#AwP;=`<%l#:s2]#BVt)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$+X#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$=`#m;'S$e;'S;=`(u<%lO$e2T#DnY(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![#E^![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T#Egp(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx#Dgx!O(O!O!P#Gk!P!Q(O!Q![#E^![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#Gtn(qQ!i,g'g&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#I{p(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx#LPx!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#LW^(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!i#Ir!i#O(O#O#P&f#P#T(O#T#Z#Ir#Z;'S(O;'S;=`(o<%lO(O2T#M]t(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx#LPx{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$ xp)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$$Xp)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#LPx!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$&ht)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#LPx{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$)Tp)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$+b_)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$-`!R![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$,j[)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$-kt)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$/{#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e2]$0U[)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$1T`)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$2br)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T$4s^(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![$5o![!c(O!c!i$5o!i#O(O#O#P&f#P#T(O#T#Z$5o#Z;'S(O;'S;=`(o<%lO(O2T$5xr(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx$4lx!O(O!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T$8]u(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx$4lx{(O{|!Nb|}(O}!O!Nb!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$:{u)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx$4lx{$e{|#'Q|}$e}!O#'Q!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$=ic)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$>t!R![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$?Pv)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#U$2V#U#V$2V#V#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e4e$Ar[(w-X)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox![$e![!]$Bh!]#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3s$BsYl-})[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$CnY)X,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7V$Dk_p,g%^!b)[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!^$Ej!^!_%+w!_!`%.U!`!a%0]!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej*[$Es])[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ejp$FoTO!`$Fl!`!a$GO!a;'S$Fl;'S;=`$GT<%lO$Flp$GTO$Xpp$GWP;=`<%l$Fl*Y$GbZ)[W'g&jOY$GZYZ$FlZw$GZwx$HTx!`$GZ!`!a%(U!a#O$GZ#O#P$Ib#P;'S$GZ;'S;=`%(y<%lO$GZ*Q$HYX'g&jOY$HTYZ$FlZ!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q$IOU$XpY#t'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}*Q$Ig['g&jOY$HTYZ$HTZ]$HT]^$J]^!`$HT!`!a$NO!a#O$HT#O#P%&n#P;'S$HT;'S;=`%'f;=`<%l%$z<%lO$HT*Q$JbX'g&jOY$HTYZ$J}Z!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT'[$KSX'g&jOY$J}YZ$FlZ!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$KvU$Xp'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}'[$L_Z'g&jOY$J}YZ$J}Z]$J}]^$MQ^!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MVX'g&jOY$J}YZ$J}Z!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MuP;=`<%l$J}*Q$M{P;=`<%l$HT*Q$NVW$Xp'g&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`$NtW'g&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`% eUY#t'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%})`% |Y'g&jOY$NoYZ$NoZ]$No]^%!l^#O$No#O#P%#d#P;'S$No;'S;=`%$[;=`<%l%$z<%lO$No)`%!qX'g&jOY$NoYZ%}Z!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%#aP;=`<%l$No)`%#iZ'g&jOY$NoYZ%}Z]$No]^%!l^!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%$_XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$No<%lO%$z#t%$}WOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h<%lO%$z#t%%lOY#t#t%%oRO;'S%$z;'S;=`%%x;=`O%$z#t%%{XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l%$z<%lO%$z#t%&kP;=`<%l%$z*Q%&sZ'g&jOY$HTYZ$J}Z]$HT]^$J]^!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q%'iXOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$HT<%lO%$z*Y%(aW$XpY#t)[W'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^*Y%(|P;=`<%l$GZ*S%)WZ(qQ'g&jOY%)PYZ$FlZr%)Prs$HTs!`%)P!`!a%)y!a#O%)P#O#P$Ib#P;'S%)P;'S;=`%*n<%lO%)P*S%*UW$XpY#t(qQ'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O*S%*qP;=`<%l%)P*[%+RY$XpY#t)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e*[%+tP;=`<%l$Ej7V%,U^)[W(qQ%]!b!f,g'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!_$Ej!_!`%-Q!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%-]]!g-y)[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%.c]%^!b!b,g)[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%/[!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%/mY%^!b!b,g$XpY#t)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e)j%0hYY#t)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%1c[)k!c)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%2f]%^!b)[W(qQ!d,g'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`%3_!`!a%4[!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%3lY%^!b!b,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%4i[)[W(qQ%]!b!f,g'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%5jY(vP)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z%6ib)[W(zS(qQ!R,f(s%y'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e7Z%8Qb)[W(zS(qQ!R,f(s%y'g&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e5P%9cW)[W(p/]'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^2T%:UW(qQ)Z,g'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O3o%:yZ!V-y)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!}$e!}#O%;l#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%;wY)QP)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e4e%<la'g&jOY%=qYZ%>[Z]%=q]^%?Z^!Q%=q!Q![%?w![!w%=q!w!x%AX!x#O%=q#O#P%H_#P#i%=q#i#j%Ds#j#l%=q#l#m%IR#m;'S%=q;'S;=`%Kt<%lO%=q&t%=xUXY'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4e%>e[XY(o.o'g&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4e%?bVXY'g&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@OWXY'g&jOY%}Z!Q%}!Q![%@h![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@oWXY'g&jOY%}Z!Q%}!Q![%=q![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%A^['g&jOY%}Z!Q%}!Q![%BS![!c%}!c!i%BS!i#O%}#O#P&f#P#T%}#T#Z%BS#Z;'S%};'S;=`'r<%lO%}&t%BX['g&jOY%}Z!Q%}!Q![%B}![!c%}!c!i%B}!i#O%}#O#P&f#P#T%}#T#Z%B}#Z;'S%};'S;=`'r<%lO%}&t%CS['g&jOY%}Z!Q%}!Q![%Cx![!c%}!c!i%Cx!i#O%}#O#P&f#P#T%}#T#Z%Cx#Z;'S%};'S;=`'r<%lO%}&t%C}['g&jOY%}Z!Q%}!Q![%Ds![!c%}!c!i%Ds!i#O%}#O#P&f#P#T%}#T#Z%Ds#Z;'S%};'S;=`'r<%lO%}&t%Dx['g&jOY%}Z!Q%}!Q![%En![!c%}!c!i%En!i#O%}#O#P&f#P#T%}#T#Z%En#Z;'S%};'S;=`'r<%lO%}&t%Es['g&jOY%}Z!Q%}!Q![%Fi![!c%}!c!i%Fi!i#O%}#O#P&f#P#T%}#T#Z%Fi#Z;'S%};'S;=`'r<%lO%}&t%Fn['g&jOY%}Z!Q%}!Q![%Gd![!c%}!c!i%Gd!i#O%}#O#P&f#P#T%}#T#Z%Gd#Z;'S%};'S;=`'r<%lO%}&t%Gi['g&jOY%}Z!Q%}!Q![%=q![!c%}!c!i%=q!i#O%}#O#P&f#P#T%}#T#Z%=q#Z;'S%};'S;=`'r<%lO%}&t%HfXXY'g&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%IW['g&jOY%}Z!Q%}!Q![%I|![!c%}!c!i%I|!i#O%}#O#P&f#P#T%}#T#Z%I|#Z;'S%};'S;=`'r<%lO%}&t%JR['g&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KO[XY'g&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KwP;=`<%l%=q2a%LVZ!W,V)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P#Q%Lx#Q;'S$e;'S;=`(u<%lO$e'Y%MTY)^d)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%NQ[)[W(qQ%]!b'g&j!_,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z& Vd)[W(zS(qQ!R,f(s%y'g&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q!Y%6Y!Y!Z%7q!Z![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e2]&!pY!T,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o&#m^)[W(qQ%]!b'g&j!^,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P#p$e#p#q&$i#q;'S$e;'S;=`(u<%lO$e3o&$vY)U,g%_!b)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V&%qY!Ua)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e(]&&nc)[W(qQ%]!b'SP'g&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&(Sc)[W(qQ'g&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&)jb)[W(qQdT'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![&)_![!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e",
        tokenizers: [rawString, fallback, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
        topRules: { "Program": [0, 308] },
        dynamicPrecedences: { "87": 1, "94": 1, "119": 1, "185": 1, "188": -10, "241": -10, "242": 1, "245": -1, "247": -10, "248": 1, "263": -1, "268": 2, "269": 2, "307": -10, "366": 3, "418": 1, "419": 3, "420": 1, "421": 1 },
        specialized: [{ term: 357, get: (value) => spec_identifier3[value] || -1 }, { term: 32, get: (value) => spec_[value] || -1 }, { term: 66, get: (value) => spec_templateArgsEnd[value] || -1 }, { term: 364, get: (value) => spec_scopedIdentifier[value] || -1 }],
        tokenPrec: 24905
      });
    }
  });

  // node_modules/@codemirror/lang-cpp/dist/index.js
  var dist_exports6 = {};
  __export(dist_exports6, {
    cpp: () => cpp,
    cppLanguage: () => cppLanguage
  });
  function cpp() {
    return new LanguageSupport(cppLanguage);
  }
  var cppLanguage;
  var init_dist14 = __esm({
    "node_modules/@codemirror/lang-cpp/dist/index.js"() {
      init_index_es5();
      init_dist5();
      cppLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "cpp",
        parser: /* @__PURE__ */ parser6.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
              TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch)\b/ }),
              LabeledStatement: flatIndent,
              CaseStatement: (context) => context.baseIndent + context.unit,
              BlockComment: () => null,
              CompoundStatement: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
              Statement: /* @__PURE__ */ continuedIndent({ except: /^{/ })
            }),
            /* @__PURE__ */ foldNodeProp.add({
              "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": foldInside,
              BlockComment(tree) {
                return { from: tree.from + 2, to: tree.to - 2 };
              }
            })
          ]
        }),
        languageData: {
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*(?:case |default:|\{|\})$/,
          closeBrackets: { stringPrefixes: ["L", "u", "U", "u8", "LR", "UR", "uR", "u8R", "R"] }
        }
      });
    }
  });

  // node_modules/@lezer/java/dist/index.es.js
  var javaHighlighting, spec_identifier4, parser7;
  var init_index_es6 = __esm({
    "node_modules/@lezer/java/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      javaHighlighting = styleTags({
        null: tags.null,
        instanceof: tags.operatorKeyword,
        this: tags.self,
        "new super assert open to with void": tags.keyword,
        "class interface extends implements enum var": tags.definitionKeyword,
        "module package import": tags.moduleKeyword,
        "switch while for if else case default do break continue return try catch finally throw": tags.controlKeyword,
        ["requires exports opens uses provides public private protected static transitive abstract final strictfp synchronized native transient volatile throws"]: tags.modifier,
        IntegerLiteral: tags.integer,
        FloatingPointLiteral: tags.float,
        "StringLiteral TextBlock": tags.string,
        CharacterLiteral: tags.character,
        LineComment: tags.lineComment,
        BlockComment: tags.blockComment,
        BooleanLiteral: tags.bool,
        PrimitiveType: tags.standard(tags.typeName),
        TypeName: tags.typeName,
        Identifier: tags.variableName,
        "MethodName/Identifier": tags.function(tags.variableName),
        Definition: tags.definition(tags.variableName),
        ArithOp: tags.arithmeticOperator,
        LogicOp: tags.logicOperator,
        BitOp: tags.bitwiseOperator,
        CompareOp: tags.compareOperator,
        AssignOp: tags.definitionOperator,
        UpdateOp: tags.updateOperator,
        Asterisk: tags.punctuation,
        Label: tags.labelName,
        "( )": tags.paren,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace,
        ".": tags.derefOperator,
        ", ;": tags.separator
      });
      spec_identifier4 = { __proto__: null, true: 34, false: 34, null: 42, void: 46, byte: 48, short: 48, int: 48, long: 48, char: 48, float: 48, double: 48, boolean: 48, extends: 62, super: 64, class: 76, this: 78, new: 84, public: 100, protected: 102, private: 104, abstract: 106, static: 108, final: 110, strictfp: 112, default: 114, synchronized: 116, native: 118, transient: 120, volatile: 122, throws: 150, implements: 160, interface: 166, enum: 176, instanceof: 236, open: 265, module: 267, requires: 272, transitive: 274, exports: 276, to: 278, opens: 280, uses: 282, provides: 284, with: 286, package: 290, import: 294, if: 306, else: 308, while: 312, for: 316, var: 323, assert: 330, switch: 334, case: 340, do: 344, break: 348, continue: 352, return: 356, throw: 362, try: 366, catch: 370, finally: 378 };
      parser7 = LRParser.deserialize({
        version: 14,
        states: "#!hQ]QPOOO&tQQO'#H[O(xQQO'#CbOOQO'#Cb'#CbO)PQPO'#CaO)XOSO'#CpOOQO'#Ha'#HaOOQO'#Cu'#CuO*tQPO'#D_O+_QQO'#HkOOQO'#Hk'#HkO-sQQO'#HfO-zQQO'#HfOOQO'#Hf'#HfOOQO'#He'#HeO0OQPO'#DUO0]QPO'#GlO3TQPO'#D_O3[QPO'#DzO)PQPO'#E[O3}QPO'#E[OOQO'#DV'#DVO5]QQO'#H_O7dQQO'#EeO7kQPO'#EdO7pQPO'#EfOOQO'#H`'#H`O5sQQO'#H`O8sQQO'#FgO8zQPO'#EwO9PQPO'#E|O9PQPO'#FOOOQO'#H_'#H_OOQO'#HW'#HWOOQO'#Gf'#GfOOQO'#HV'#HVO:aQPO'#FhOOQO'#HU'#HUOOQO'#Ge'#GeQ]QPOOOOQO'#Hq'#HqO:fQPO'#HqO:kQPO'#D{O:kQPO'#EVO:kQPO'#EQO:sQPO'#HnO;UQQO'#EfO)PQPO'#C`O;^QPO'#C`O)PQPO'#FbO;cQPO'#FdO;nQPO'#FjO;nQPO'#FmO:kQPO'#FrO;sQPO'#FoO9PQPO'#FvO;nQPO'#FxO]QPO'#F}O;xQPO'#GPO<TQPO'#GRO<`QPO'#GTO;nQPO'#GVO9PQPO'#GWO<gQPO'#GYOOQO'#H['#H[O=WQQO,58{OOQO'#HY'#HYOOOO'#Gg'#GgO>yOSO,59[OOQO,59[,59[OOQO'#Hg'#HgO?jQPO,59eO@lQPO,59yOOQO-E:d-E:dO)PQPO,58zOA`QPO,58zO)PQPO,5;|OAeQPO'#DQOAjQPO'#DQOOQO'#Gi'#GiOBjQQO,59jOOQO'#Dm'#DmODRQPO'#HsOD]QPO'#DlODkQPO'#HrODsQPO,5<^ODxQPO,59^OEcQPO'#CxOOQO,59c,59cOEjQPO,59bOGrQQO'#H[OJVQQO'#CbOJmQPO'#D_OKrQQO'#HkOLSQQO,59pOLZQPO'#DvOLiQPO'#HzOLqQPO,5:`OLvQPO,5:`OM^QPO,5;mOMiQPO'#IROMtQPO,5;dOMyQPO,5=WOOQO-E:j-E:jOOQO,5:f,5:fO! aQPO,5:fO! hQPO,5:vO! mQPO,5<^O)PQPO,5:vO:kQPO,5:gO:kQPO,5:qO:kQPO,5:lO:kQPO,5<^O!!^QPO,59qO9PQPO,5:}O!!eQPO,5;QO9PQPO,59TO!!sQPO'#DXOOQO,5;O,5;OOOQO'#El'#ElOOQO'#En'#EnO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;eOOQO,5;h,5;hOOQO,5<R,5<RO!!zQPO,5;aO!#]QPO,5;cO!!zQPO'#CyO!#dQQO'#HkO!#rQQO,5;jO]QPO,5<SOOQO-E:c-E:cOOQO,5>],5>]O!%SQPO,5:gO!%bQPO,5:qO!%jQPO,5:lO!%uQPO,5>YOLZQPO,5>YO! {QPO,59UO!&QQQO,58zO!&YQQO,5;|O!&bQQO,5<OO)PQPO,5<OO9PQPO'#DUO]QPO,5<UO]QPO,5<XO!&jQPO'#FqO]QPO,5<ZO]QPO,5<`O!&zQQO,5<bO!'UQPO,5<dO!'ZQPO,5<iOOQO'#Fi'#FiOOQO,5<k,5<kO!'`QPO,5<kOOQO,5<m,5<mO!'eQPO,5<mO!'jQQO,5<oOOQO,5<o,5<oO<jQPO,5<qO!'qQQO,5<rO!'xQPO'#GcO!)OQPO,5<tO<jQPO,5<|O)PQPO,58}O!,|QPO'#ChOOQO1G.k1G.kOOOO-E:e-E:eOOQO1G.v1G.vO!-WQPO,59jO!&QQQO1G.fO)PQPO1G.fO!-eQQO1G1hOOQO,59l,59lO!-mQPO,59lOOQO-E:g-E:gO!-rQPO,5>_O!.ZQPO,5:WO:kQPO'#GnO!.bQPO,5>^OOQO1G1x1G1xOOQO1G.x1G.xO!.{QPO'#CyO!/kQPO'#HkO!/uQPO'#CzO!0TQPO'#HjO!0]QPO,59dOOQO1G.|1G.|OEjQPO1G.|O!0sQPO,59eO!1QQQO'#H[O!1cQQO'#CbOOQO,5:b,5:bO:kQPO,5:cOOQO,5:a,5:aO!1tQQO,5:aOOQO1G/[1G/[O!1yQPO,5:bO!2[QPO'#GqO!2oQPO,5>fOOQO1G/z1G/zO!2wQPO'#DvO!3YQPO'#D_O!3aQPO1G/zO!!zQPO'#GoO!3fQPO1G1XO9PQPO1G1XO:kQPO'#GwO!3nQPO,5>mOOQO1G1O1G1OOOQO1G0Q1G0QO!3vQPO'#E]OOQO1G0b1G0bO!4gQPO1G1xO! hQPO1G0bO!%SQPO1G0RO!%bQPO1G0]O!%jQPO1G0WOOQO1G/]1G/]O!4lQQO1G.pO7kQPO1G0jO)PQPO1G0jO:sQPO'#HnO!6`QQO1G.pOOQO1G.p1G.pO!6eQQO1G0iOOQO1G0l1G0lO!6lQPO1G0lO!6wQQO1G.oO!7_QQO'#HoO!7lQPO,59sO!8{QQO1G0pO!:dQQO1G0pO!;rQQO1G0pO!<PQQO1G0pO!=UQQO1G0pO!=lQQO1G0pO!=vQQO1G1PO!=}QQO'#HkOOQO1G0{1G0{O!?QQQO1G0}OOQO1G0}1G0}OOQO1G1n1G1nO! pQPO'#DqO!ARQPO'#D[O!!zQPO'#D|O!!zQPO'#D}OOQO1G0R1G0RO!AYQPO1G0RO!A_QPO1G0RO!AgQPO1G0RO!ArQPO'#EXOOQO1G0]1G0]O!BVQPO1G0]O!B[QPO'#ETO!!zQPO'#ESOOQO1G0W1G0WO!CUQPO1G0WO!CZQPO1G0WO!CcQPO'#EhO!CjQPO'#EhOOQO'#Gv'#GvO!CrQQO1G0mO!EcQQO1G3tO7kQPO1G3tO!GbQPO'#FWOOQO1G.f1G.fOOQO1G1h1G1hO!GiQPO1G1jOOQO1G1j1G1jO!GtQQO1G1jO!G|QPO1G1pOOQO1G1s1G1sO)aQPO'#D_O+_QQO,5<aO!KtQPO,5<aO!LVQPO,5<]O!L^QPO,5<]OOQO1G1u1G1uOOQO1G1z1G1zOOQO1G1|1G1|O9PQPO1G1|O#!QQPO'#FzOOQO1G2O1G2OO;nQPO1G2TOOQO1G2V1G2VOOQO1G2X1G2XOOQO1G2Z1G2ZOOQO1G2]1G2]OOQO1G2^1G2^O#!XQQO'#H[O##SQQO'#CbO+_QQO'#HkO##}QQOOO#$kQQO'#EeO#$YQQO'#H`OLZQPO'#GdO#$rQPO,5<}OOQO'#HO'#HOO#$zQPO1G2`O#(xQPO'#G[O<jQPO'#G`OOQO1G2`1G2`O#(}QPO1G2hOOQO1G.i1G.iO#.SQQO'#EeO#.dQQO'#H^O#.tQPO'#FSOOQO'#H^'#H^O#/OQPO'#H^O#/mQPO'#IUO#/uQPO,59SOOQO7+$Q7+$QO!&QQQO7+$QOOQO7+'S7+'SOOQO1G/W1G/WO#/zQPO'#DoO#0UQQO'#HtOOQO'#Ht'#HtOOQO1G/r1G/rOOQO,5=Y,5=YOOQO-E:l-E:lO#0fQWO,58{O#0mQPO,59fOOQO,59f,59fO!!zQPO'#HmOD}QPO'#GhO#0{QPO,5>UOOQO1G/O1G/OOOQO7+$h7+$hOOQO1G/{1G/{O#1TQQO1G/{OOQO1G/}1G/}O#1YQPO1G/{OOQO1G/|1G/|O:kQPO1G/}OOQO,5=],5=]OOQO-E:o-E:oOOQO7+%f7+%fOOQO,5=Z,5=ZOOQO-E:m-E:mO9PQPO7+&sOOQO7+&s7+&sOOQO,5=c,5=cOOQO-E:u-E:uO#1_QPO'#EUO#1mQPO'#EUOOQO'#Gu'#GuO#2UQPO,5:wOOQO,5:w,5:wOOQO7+'d7+'dOOQO7+%|7+%|OOQO7+%m7+%mO!AYQPO7+%mO!A_QPO7+%mO!AgQPO7+%mOOQO7+%w7+%wO!BVQPO7+%wOOQO7+%r7+%rO!CUQPO7+%rO!CZQPO7+%rOOQO7+&U7+&UOOQO'#Ee'#EeO7kQPO7+&UO7kQPO,5>YO#2uQPO7+$[OOQO7+&T7+&TOOQO7+&W7+&WO9PQPO'#GjO#3TQPO,5>ZOOQO1G/_1G/_O9PQPO7+&kO#3`QQO,59eO#4cQPO'#DrO! pQPO'#DrO#4nQPO'#HwO#4vQPO,5:]O#5aQQO'#HgO#5|QQO'#CuO! mQPO'#HvO#6lQPO'#DpO#6vQPO'#HvO#7XQPO'#DpO#7aQPO'#IPO#7fQPO'#E`OOQO'#Hp'#HpOOQO'#Gk'#GkO#7nQPO,59vOOQO,59v,59vO#7uQPO'#HqOOQO,5:h,5:hO#9]QPO'#H|OOQO'#EP'#EPOOQO,5:i,5:iO#9hQPO'#EYO:kQPO'#EYO#9yQPO'#H}O#:UQPO,5:sO! mQPO'#HvO!!zQPO'#HvO#:^QPO'#DpOOQO'#Gs'#GsO#:eQPO,5:oOOQO,5:o,5:oOOQO,5:n,5:nOOQO,5;S,5;SO#;_QQO,5;SO#;fQPO,5;SOOQO-E:t-E:tOOQO7+&X7+&XOOQO7+)`7+)`O#;mQQO7+)`OOQO'#Gz'#GzO#=ZQPO,5;rOOQO,5;r,5;rO#=bQPO'#FXO)PQPO'#FXO)PQPO'#FXO)PQPO'#FXO#=pQPO7+'UO#=uQPO7+'UOOQO7+'U7+'UO]QPO7+'[O#>QQPO1G1{O! mQPO1G1{O#>`QQO1G1wO!!sQPO1G1wO#>gQPO1G1wO#>nQQO7+'hOOQO'#G}'#G}O#>uQPO,5<fOOQO,5<f,5<fO#>|QPO'#HqO9PQPO'#F{O#?UQPO7+'oO#?ZQPO,5=OO! mQPO,5=OO#?`QPO1G2iO#@iQPO1G2iOOQO1G2i1G2iOOQO-E:|-E:|OOQO7+'z7+'zO!2[QPO'#G^O<jQPO,5<vOOQO,5<z,5<zO#@qQPO7+(SOOQO7+(S7+(SO#DoQPO,59TO#DvQPO'#ITO#EOQPO,5;nO)PQPO'#GyO#ETQPO,5>pOOQO1G.n1G.nOOQO<<Gl<<GlO#E]QPO'#HuO#EeQPO,5:ZOOQO1G/Q1G/QOOQO,5>X,5>XOOQO,5=S,5=SOOQO-E:f-E:fO#EjQPO7+%gOOQO7+%g7+%gOOQO7+%i7+%iOOQO<<J_<<J_O#FQQPO'#H[O#FXQPO'#CbO#F`QPO,5:pO#FeQPO,5:xO#1_QPO,5:pOOQO-E:s-E:sOOQO1G0c1G0cOOQO<<IX<<IXO!AYQPO<<IXO!A_QPO<<IXOOQO<<Ic<<IcOOQO<<I^<<I^O!CUQPO<<I^OOQO<<Ip<<IpO#FjQQO<<GvO7kQPO<<IpO)PQPO<<IpOOQO<<Gv<<GvO#H^QQO,5=UOOQO-E:h-E:hO#HkQQO<<JVOOQO,5:^,5:^O!!zQPO'#DsO#IRQPO,5:^O! pQPO'#GpO#I^QPO,5>cOOQO1G/w1G/wO#IfQPO'#HsO#ImQPO,59xO#IrQPO,5>bO! mQPO,59xO#I}QPO,5:[O#7fQPO,5:zO! mQPO,5>bO!!zQPO,5>bO#7aQPO,5>kOOQO,5:[,5:[OLvQPO'#DtOOQO,5>k,5>kO#JVQPO'#EaOOQO,5:z,5:zO#MWQPO,5:zO!!zQPO'#DxOOQO-E:i-E:iOOQO1G/b1G/bOOQO,5:y,5:yO!!zQPO'#GrO#M]QPO,5>hOOQO,5:t,5:tO#MhQPO,5:tO#MvQPO,5:tO#NXQPO'#GtO#NoQPO,5>iO#NzQPO'#EZOOQO1G0_1G0_O$ RQPO1G0_O! mQPO,5:pOOQO-E:q-E:qOOQO1G0Z1G0ZOOQO1G0n1G0nO$ WQQO1G0nOOQO<<Lz<<LzOOQO-E:x-E:xOOQO1G1^1G1^O$ _QQO,5;sOOQO'#G{'#G{O#=bQPO,5;sOOQO'#IV'#IVO$ gQQO,5;sO$ xQQO,5;sOOQO<<Jp<<JpO$!QQPO<<JpOOQO<<Jv<<JvO9PQPO7+'gO$!VQPO7+'gO!!sQPO7+'cO$!eQPO7+'cO$!jQQO7+'cOOQO<<KS<<KSOOQO-E:{-E:{OOQO1G2Q1G2QOOQO,5<g,5<gO$!qQQO,5<gOOQO<<KZ<<KZO9PQPO1G2jO$!xQPO1G2jOOQO,5=l,5=lOOQO7+(T7+(TO$!}QPO7+(TOOQO-E;O-E;OO$$lQWO'#HfO$$WQWO'#HfO$$sQPO'#G_O:kQPO,5<xOLZQPO,5<xOOQO1G2b1G2bOOQO<<Kn<<KnO$%UQQO1G.oOOQO1G1Z1G1ZO$%`QPO'#GxO$%mQPO,5>oOOQO1G1Y1G1YO$%uQPO'#FTOOQO,5=e,5=eOOQO-E:w-E:wO$%zQPO'#GmO$&XQPO,5>aOOQO1G/u1G/uOOQO<<IR<<IROOQO1G0[1G0[O$&aQPO1G0dO$&fQPO1G0[O$&kQPO1G0dOOQOAN>sAN>sO!AYQPOAN>sOOQOAN>xAN>xOOQOAN?[AN?[O7kQPOAN?[O$&pQPO,5:_OOQO1G/x1G/xOOQO,5=[,5=[OOQO-E:n-E:nO$&{QPO,5>eOOQO1G/d1G/dOOQO1G3|1G3|O$'^QPO1G/dOOQO1G/v1G/vOOQO1G0f1G0fO#MWQPO1G0fO#7aQPO'#HyO$'cQPO1G3|O! mQPO1G3|OOQO1G4V1G4VOK^QPO'#DvOJmQPO'#D_OOQO,5:{,5:{O$'nQPO,5:{O$'nQPO,5:{O$'uQQO'#H_O$'|QQO'#H`O$(WQQO'#EbO$(cQPO'#EbOOQO,5:d,5:dOOQO,5=^,5=^OOQO-E:p-E:pOOQO1G0`1G0`O$(kQPO1G0`OOQO,5=`,5=`OOQO-E:r-E:rO$(yQPO,5:uOOQO7+%y7+%yOOQO7+&Y7+&YOOQO1G1_1G1_O$)QQQO1G1_OOQO-E:y-E:yO$)YQQO'#IWO$)TQPO1G1_O$ mQPO1G1_O)PQPO1G1_OOQOAN@[AN@[O$)eQQO<<KRO9PQPO<<KRO$)lQPO<<J}OOQO<<J}<<J}O!!sQPO<<J}OOQO1G2R1G2RO$)qQQO7+(UO9PQPO7+(UOOQO<<Ko<<KoP!'xQPO'#HQOLZQPO'#HPO$){QPO,5<yO$*WQPO1G2dO:kQPO1G2dOOQO,5=d,5=dOOQO-E:v-E:vO#DoQPO,5;oOOQO,5=X,5=XOOQO-E:k-E:kO$*]QPO7+&OOOQO7+%v7+%vO$*kQPO7+&OOOQOG24_G24_OOQOG24vG24vO$*pQPO1G/yO$*{QPO1G4POOQO7+%O7+%OOOQO7+&Q7+&QOOQO7+)h7+)hO$+^QPO7+)hO!0bQPO,5:aOOQO1G0g1G0gO$+iQPO1G0gO$+pQPO,59qO$,UQPO,5:|O7kQPO,5:|OOQO7+%z7+%zOOQO7+&y7+&yO)PQPO'#G|O$,ZQPO,5>rO$,cQPO7+&yO$,hQQO'#IXOOQOAN@mAN@mO$,sQQOAN@mOOQOAN@iAN@iO$,zQPOAN@iO$-PQQO<<KpO$-ZQPO,5=kOOQO-E:}-E:}OOQO7+(O7+(OO$-lQPO7+(OO$-qQPO<<IjOOQO<<Ij<<IjO#DoQPO<<IjO$-qQPO<<IjOOQO<<MS<<MSOOQO7+&R7+&RO$.PQPO1G0jO$.[QQO1G0hOOQO1G0h1G0hO$.dQPO1G0hO$.iQQO,5=hOOQO-E:z-E:zOOQO<<Je<<JeO$.tQPO,5>sOOQOG26XG26XOOQOG26TG26TOOQO<<Kj<<KjOOQOAN?UAN?UO#DoQPOAN?UO$.|QPOAN?UO$/RQPOAN?UO7kQPO7+&SO$/aQPO7+&SOOQO7+&S7+&SO$/fQPOG24pOOQOG24pG24pO#DoQPOG24pO$/kQPO<<InOOQO<<In<<InOOQOLD*[LD*[O$/pQPOLD*[OOQOAN?YAN?YOOQO!$'Mv!$'MvO)PQPO'#CaO$/uQQO'#H[O$0YQQO'#CbO!!zQPO'#Cy",
        stateData: "$0u~OPOSQOS%wOS~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOvzOwjOz}O}bO!PuO!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO![!_O!]xO!^xO!_xO!u|O!z{O#eoO#qnO#soO#toO#x!QO#y!PO$V!RO$X!SO$_!TO$b!UO$d!WO$g!VO$k!XO$m!YO$r!ZO$t![O$v!]O$x!^O${!`O$}!aO%{SO%}QO&PPO&VTO&rcO~OWiXW&OXZ&OXuiXu&OX!P&OX!b&OX#]&OX#_&OX#a&OX#c&OX#d&OX#e&OX#f&OX#g&OX#h&OX#j&OX#n&OX#q&OX%{iX%}iX&PiX&[&OX&]iX&]&OX&l&OX&tiX&t&OX&v!aX~O#o$]X~P$wOWUXW&ZXZUXuUXu&ZX!PUX!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX%{&ZX%}&ZX&P&ZX&[UX&]UX&]&ZX&lUX&tUX&t&ZX&v!aX~O#o$]X~P&{O%}RO&P!bO~O&U!gO&W!eO~Og]Oh]O!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xO%{SO%}!hO&PVOg!RXh!RX$g!RX%}!RX&P!RX~O#x!mO#y!lO$V!nOv!RX!u!RX!z!RX&r!RX~P)aOW!xOu!oO%{SO%}!sO&P!sO&t&_X~OW!{Ou&YX%{&YX%}&YX&P&YX&t&YXY&YXw&YX&l&YX&o&YXZ&YXq&YX&[&YX!P&YX#_&YX#a&YX#c&YX#d&YX#e&YX#f&YX#g&YX#h&YX#j&YX#n&YX#q&YX}&YX!r&YX#o&YXs&YX|&YX~O&]!yO~P+sO&]&YX~P+sOZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xO#eoO#qnO#soO#toO%{SO&VTO~O%}!}O&P!|OY&nP~P.RO%{SOg%`Xh%`Xv%`X!S%`X!T%`X!U%`X!V%`X!W%`X!X%`X!Y%`X!Z%`X!]%`X!^%`X!_%`X!u%`X!z%`X$g%`X%}%`X&P%`X&r%`X&]%`X~O!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xOg!RXh!RXv!RX!u!RX!z!RX%}!RX&P!RX&r!RX&]!RX~O$g!RX~P1sO|#[O~P]Og]Oh]Ov#aO!u#cO!z#bO%}!hO&PVO&r#`O~O$g#dO~P3cOu#fO&t#gO!P&RX#_&RX#a&RX#c&RX#d&RX#e&RX#f&RX#g&RX#h&RX#j&RX#n&RX#q&RX&[&RX&]&RX&l&RX~OW#eOY&RX#o&RXs&RXq&RX|&RX~P4UO!b#hO#]#hOW&SXu&SX!P&SX#_&SX#a&SX#c&SX#d&SX#e&SX#f&SX#g&SX#h&SX#j&SX#n&SX#q&SX&[&SX&]&SX&l&SX&t&SXY&SX#o&SXs&SXq&SX|&SX~OZ#XX~P5sOZ#iO~O&t#gO~O#_#mO#a#nO#c#oO#d#oO#e#pO#f#qO#g#rO#h#rO#j#vO#n#sO#q#tO&[#kO&]#kO&l#lO~O!P#uO~P7uO&v#wO~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O#eoO#qnO#soO#toO%{SO%}0iO&P0hO&VTO~O#o#{O~O![#}O~O%}!sO&P!sO~Og]Oh]O%}!hO&PVO&]!yO~OW$TO&t#gO~O#y!lO~O!W$XO%}RO&P!bO~OZ$YO~OZ$]O~O!P$dO%}$cO&P$cO~O!P$fO%}$cO&P$cO~O!P$iO~P9POZ$lO}bO~OW$oOZ$pOgTahTa%{Ta%}Ta&PTa~OvTa!STa!TTa!UTa!VTa!WTa!XTa!YTa!ZTa!]Ta!^Ta!_Ta!uTa!zTa#xTa#yTa$VTa$gTa&rTauTaYTa&]TaqTa|Ta!PTa~P<oO&U$sO&W!eO~Ou!oO%{SOqma&[maYma&lma!Pma~O&tma}ma!rma~P?RO!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xO~Og!Rah!Rav!Ra!u!Ra!z!Ra$g!Ra%}!Ra&P!Ra&r!Ra&]!Ra~P?wO#y$vO~Os$xO~Ou$yO%{SO~Ou!oO%{ra%}ra&Pra&traYrawra&lra&ora!Pra&[raqra~OWra#_ra#ara#cra#dra#era#fra#gra#hra#jra#nra#qra&]ra#orasra|ra~PArOu!oO%{SOq&gX!P&gX!b&gX~OY&gX#o&gX~PCpO!b$|Oq!`X!P!`XY!`X~Oq$}O!P&fX~O!P%PO~Ov%QO~Og]Oh]O%{0gO%}!hO&PVO&`%TO~O&[&^P~PD}O%{SO%}!hO&PVO~OWiXW&OXY&OXZ&OXuiXu&OX!b&OX#]&OX#_&OX#a&OX#c&OX#d&OX#e&OX#f&OX#g&OX#h&OX#j&OX#n&OX#q&OX%{iX%}iX&PiX&[&OX&]iX&]&OX&l&OX&tiX&t&OX&v!aX~OYiXY!aXq!aXwiX&liX&oiX~PEuOWUXW&ZXYUXZUXuUXu&ZX!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX%{&ZX%}&ZX&P&ZX&[UX&]UX&]&ZX&lUX&tUX&t&ZX&v!aX~OY!aXY&ZXq!aXw&ZX&l&ZX&o&ZX~PHYOg]Oh]O%{SO%}!hO&PVOg!RXh!RX%}!RX&P!RX~P?wOu!oOw%_O%{SO%}%[O&P%ZO&o%^O~OW!xOY&_X&l&_X&t&_X~PK^OY%aO~P7uOg]Oh]O%}!hO&PVO~Oq%cOY&nX~OY%eO~Og]Oh]O%{SO%}!hO&PVOY&nP~P?wOY%kO&l%iO&t#gO~Oq%lO&v#wOY&uX~OY%nO~O%{SOg%`ah%`av%`a!S%`a!T%`a!U%`a!V%`a!W%`a!X%`a!Y%`a!Z%`a!]%`a!^%`a!_%`a!u%`a!z%`a$g%`a%}%`a&P%`a&r%`a&]%`a~O|%oO~P]O}%pO~Ou!oO%{SO%}!sO&P!sO~Op%|Ow%}O%}RO&P!bO&]!yO~Oz%{O~P! {Oz&PO%}RO&P!bO&]!yO~OY&cP~P9POg]Oh]O%{SO%}!hO&PVO~O}bO~P9POW!xOu!oO%{SO&t&_X~O#q#tO!P#ra#_#ra#a#ra#c#ra#d#ra#e#ra#f#ra#g#ra#h#ra#j#ra#n#ra&[#ra&]#ra&l#raY#ra#o#ras#raq#ra|#ra~Oo&dO}&cO!r&eO&]&bO~O}&jO!r&eO~Oo&nO}&mO&]&bO~OZ#iOu&rO%{SO~OW$oO}&xO~OW$oO!P&zO~OW&{O!P&|O~O$g!VO%}0iO&P0hO!P&cP~P.RO!P'XO#o'YO~P7uO}'ZO~O$b']O~O!P'^O~O!P'_O~O!P'`O~P7uO!P'bO~P7uOZ$YO_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O%{SO%}'dO&P'cO&VTO~P?wO%P'mO%T'nOZ$|a_$|a`$|aa$|ab$|ac$|ae$|ag$|ah$|ap$|av$|aw$|az$|a}$|a!P$|a!S$|a!T$|a!U$|a!V$|a!W$|a!X$|a!Y$|a!Z$|a![$|a!]$|a!^$|a!_$|a!u$|a!z$|a#e$|a#q$|a#s$|a#t$|a#x$|a#y$|a$V$|a$X$|a$_$|a$b$|a$d$|a$g$|a$k$|a$m$|a$r$|a$t$|a$v$|a$x$|a${$|a$}$|a%u$|a%{$|a%}$|a&P$|a&V$|a&r$|a|$|a$`$|a$p$|a~O}'tOY&xP~P9PO}ra!rra&|ra~PArOW$oO!P'{O~Os'|O~Ou!oO%{SOq&ga!P&ga!b&gaY&ga#o&ga~O}'}O~P9POq$}O!P&fa~Og]Oh]O%{0gO%}!hO&PVO~O&`(UO~P!.jOu!oO%{SOq&_X&[&_XY&_X&l&_X!P&_X~O}&_X!r&_X~P!/SOo(WOp(WOqnX&[nX~Oq(XO&[&^X~O&[(ZO~Ou!oOw(]O%{SO%}RO&P!bO~OYma&lma&tma~P!0bOW&OXY!aXq!aXu!aX%{!aX~OWUXY!aXq!aXu!aX%{!aX~OW(`O~Ou!oO%{SO%}!sO&P!sO&o(bO~Og]Oh]O%{SO%}!hO&PVO~P?wOq%cOY&na~Ou!oO%{SO%}!sO&P!sO&o%^O~O%{SO~P1sOY(eO~OY(hO&l%iO~Oq%lOY&ua~Og]Oh]OvzO|(pO!u|O%{SO%}!hO&PVO&rcO~P?wO!P(qO~OW^iZ#XXu^i!P^i!b^i#]^i#_^i#a^i#c^i#d^i#e^i#f^i#g^i#h^i#j^i#n^i#q^i&[^i&]^i&l^i&t^iY^i#o^is^iq^i|^i~OW)QO~Os)RO~P7uOz)SO%}RO&P!bO~O!P]iY]i#o]is]iq]i|]i~P7uOq)TOY&cX!P&cX~P7uOY)VO~O#q#tO!P#^i#_#^i#a#^i#c#^i#d#^i#e#^i#f#^i#j#^i#n#^i&[#^i&]#^i&l#^iY#^i#o#^is#^iq#^i|#^i~O#g#rO#h#rO~P!7qO#_#mO#f#qO#g#rO#h#rO#j#vO#q#tO&[#kO&]#kO!P#^i#a#^i#c#^i#d#^i#n#^i&l#^iY#^i#o#^is#^iq#^i|#^i~O#e#pO~P!9VO#_#mO#f#qO#g#rO#h#rO#j#vO#q#tO&[#kO&]#kO!P#^i#c#^i#d#^i#n#^iY#^i#o#^is#^iq#^i|#^i~O#a#nO#e#pO&l#lO~P!:kO#e#^i~P!9VO#q#tO!P#^i#a#^i#c#^i#d#^i#e#^i#f#^i#n#^i&l#^iY#^i#o#^is#^iq#^i|#^i~O#_#mO#g#rO#h#rO#j#vO&[#kO&]#kO~P!<WO#g#^i#h#^i~P!7qO#o)WO~P7uO#_&_X#a&_X#c&_X#d&_X#e&_X#f&_X#g&_X#h&_X#j&_X#n&_X#q&_X&]&_X#o&_Xs&_X|&_X~P!/SO!P#kiY#ki#o#kis#kiq#ki|#ki~P7uOg]Oh]OvzO}bO!P)fO!SxO!TxO!UxO!VxO!W)jO!XxO!YxO!ZyO!]xO!^xO!_xO!u|O!z{O%{SO%})^O&P)_O&]&bO&rcO~O|)iO~P!?hO}&cO~O}&cO!r&eO~Oo&dO}&cO!r&eO~O%{SO%}!sO&P!sO|&qP!P&qP~P?wO}&jO~Og]Oh]OvzO|)xO!P)vO!u|O!z{O%{SO%}!hO&PVO&]&bO&rcO~P?wO}&mO~Oo&nO}&mO~Os)zO~P9POu)|O%{SO~Ou&rO}'}O%{SOW#Zi!P#Zi#_#Zi#a#Zi#c#Zi#d#Zi#e#Zi#f#Zi#g#Zi#h#Zi#j#Zi#n#Zi#q#Zi&[#Zi&]#Zi&l#Zi&t#ZiY#Zi#o#Zis#Ziq#Zi|#Zi~O}&cOW&biu&bi!P&bi#_&bi#a&bi#c&bi#d&bi#e&bi#f&bi#g&bi#h&bi#j&bi#n&bi#q&bi&[&bi&]&bi&l&bi&t&biY&bi#o&bis&biq&bi|&bi~O#|*UO$O*VO$Q*VO$R*WO$S*XO~O|*TO~P!GPO$Y*YO%}RO&P!bO~OW*ZO!P*[O~O$`*]OZ$^i_$^i`$^ia$^ib$^ic$^ie$^ig$^ih$^ip$^iv$^iw$^iz$^i}$^i!P$^i!S$^i!T$^i!U$^i!V$^i!W$^i!X$^i!Y$^i!Z$^i![$^i!]$^i!^$^i!_$^i!u$^i!z$^i#e$^i#q$^i#s$^i#t$^i#x$^i#y$^i$V$^i$X$^i$_$^i$b$^i$d$^i$g$^i$k$^i$m$^i$r$^i$t$^i$v$^i$x$^i${$^i$}$^i%u$^i%{$^i%}$^i&P$^i&V$^i&r$^i|$^i$p$^i~Og]Oh]O$g#dO%}!hO&PVO~O!P*aO~P9PO!P*bO~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOvzOwjOz}O}bO!PuO!SxO!TxO!UxO!VxO!WxO!XxO!YxO!Z*gO![!_O!]xO!^xO!_xO!u|O!z{O#eoO#qnO#soO#toO#x!QO#y!PO$V!RO$X!SO$_!TO$b!UO$d!WO$g!VO$k!XO$m!YO$p*hO$r!ZO$t![O$v!]O$x!^O${!`O$}!aO%{SO%}QO&PPO&VTO&rcO~O|*fO~P!LcOWiXW&OXY&OXZ&OXuiXu&OX!P&OX%{iX%}iX&PiX&]iX&tiX&t&OX~OWUXW&ZXYUXZUXuUXu&ZX!PUX%{&ZX%}&ZX&P&ZX&]&ZX&tUX&t&ZX~OW#eOu#fO&t#gO~OW&SXY%WXu&SX!P%WX&t&SX~OZ#XX~P#$YOY*nO!P*lO~O%P'mO%T'nOZ$|i_$|i`$|ia$|ib$|ic$|ie$|ig$|ih$|ip$|iv$|iw$|iz$|i}$|i!P$|i!S$|i!T$|i!U$|i!V$|i!W$|i!X$|i!Y$|i!Z$|i![$|i!]$|i!^$|i!_$|i!u$|i!z$|i#e$|i#q$|i#s$|i#t$|i#x$|i#y$|i$V$|i$X$|i$_$|i$b$|i$d$|i$g$|i$k$|i$m$|i$r$|i$t$|i$v$|i$x$|i${$|i$}$|i%u$|i%{$|i%}$|i&P$|i&V$|i&r$|i|$|i$`$|i$p$|i~OZ*qO~O%P'mO%T'nOZ%Ui_%Ui`%Uia%Uib%Uic%Uie%Uig%Uih%Uip%Uiv%Uiw%Uiz%Ui}%Ui!P%Ui!S%Ui!T%Ui!U%Ui!V%Ui!W%Ui!X%Ui!Y%Ui!Z%Ui![%Ui!]%Ui!^%Ui!_%Ui!u%Ui!z%Ui#e%Ui#q%Ui#s%Ui#t%Ui#x%Ui#y%Ui$V%Ui$X%Ui$_%Ui$b%Ui$d%Ui$g%Ui$k%Ui$m%Ui$r%Ui$t%Ui$v%Ui$x%Ui${%Ui$}%Ui%u%Ui%{%Ui%}%Ui&P%Ui&V%Ui&r%Ui|%Ui$`%Ui$p%Ui~OW&SXu&SX#_&SX#a&SX#c&SX#d&SX#e&SX#f&SX#g&SX#h&SX#j&SX#n&SX#q&SX&[&SX&]&SX&l&SX&t&SX~O!b*vO#]#hOY&SXZ#XX~P#,{OY&QXq&QX|&QX!P&QX~P7uO}'tO|&wP~P9POY&QXg%YXh%YX%{%YX%}%YX&P%YXq&QX|&QX!P&QX~Oq*yOY&xX~OY*{O~O}'}O|&iP~P9POq&hX!P&hX|&hXY&hX~P7uO&`Ta~P<oOo(WOp(WOqna&[na~Oq(XO&[&^a~OW+TO~Ow+UO~Ou!oO%{SO%}+YO&P+XO~Og]Oh]Ov#aO!u#cO%}!hO&PVO&r#`O~Og]Oh]OvzO|+_O!u|O%{SO%}!hO&PVO&rcO~P?wOw+jO%}RO&P!bO&]!yO~Oq)TOY&ca!P&ca~O#_ma#ama#cma#dma#ema#fma#gma#hma#jma#nma#qma&]ma#omasma|ma~P?ROo+oOq!fX&[!fX~Oq+qO&[&kX~O&[+sO~OW&ZXu&ZX%{&ZX%}&ZX&P&ZX&]&ZX~OZ!aX~P#4{OWiXuiX%{iX%}iX&PiX&]iX~OZ!aX~P#5hOg]Oh]Ov#aO!u#cO!z#bO&]&bO&r#`O~O%})^O&P)_O~P#6TOg]Oh]O%{SO%})^O&P)_O~O}bO!P+}O~OZ,OO~O},QO!m,TO~O|,VO~P!?hO}bOg&eXh&eXv&eX!S&eX!T&eX!U&eX!V&eX!W&eX!X&eX!Y&eX!Z&eX!]&eX!^&eX!_&eX!u&eX!z&eX%{&eX%}&eX&P&eX&]&eX&r&eX~Oq,XO}&pX!P&pX~OZ#iO}&cOq!|X|!|X!P!|X~Oq,^O|&qX!P&qX~O|,aO!P,`O~O&]&bO~P3cOg]Oh]OvzO|,eO!P)vO!u|O!z{O%{SO%}!hO&PVO&]&bO&rcO~P?wOs,fO~P7uOs,fO~P9PO}&cOW&bqu&bq!P&bq#_&bq#a&bq#c&bq#d&bq#e&bq#f&bq#g&bq#h&bq#j&bq#n&bq#q&bq&[&bq&]&bq&l&bq&t&bqY&bq#o&bqs&bqq&bq|&bq~O|,jO~P!GPO!W,nO#},nO%}RO&P!bO~O!P,qO~O$Y,rO%}RO&P!bO~O!b$|O#o,tOq!`X!P!`X~O!P,vO~P7uO!P,vO~P9PO!P,yO~P7uO|,{O~P!LcO![#}O#o,|O~O!P-OO~O!b-PO~OY-SOZ$YO_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O%{SO%}'dO&P'cO&VTO~P?wOY-SO!P-TO~O%P'mO%T'nOZ%Uq_%Uq`%Uqa%Uqb%Uqc%Uqe%Uqg%Uqh%Uqp%Uqv%Uqw%Uqz%Uq}%Uq!P%Uq!S%Uq!T%Uq!U%Uq!V%Uq!W%Uq!X%Uq!Y%Uq!Z%Uq![%Uq!]%Uq!^%Uq!_%Uq!u%Uq!z%Uq#e%Uq#q%Uq#s%Uq#t%Uq#x%Uq#y%Uq$V%Uq$X%Uq$_%Uq$b%Uq$d%Uq$g%Uq$k%Uq$m%Uq$r%Uq$t%Uq$v%Uq$x%Uq${%Uq$}%Uq%u%Uq%{%Uq%}%Uq&P%Uq&V%Uq&r%Uq|%Uq$`%Uq$p%Uq~O}'tO~P9POq-`O|&wX~O|-bO~Oq*yOY&xa~Oq-fO|&iX~O|-hO~Ow-iO~Oq!aXu!aX!P!aX!b!aX%{!aX~OZ&OX~P#EoOZUX~P#EoO!P-jO~OZ-kO~OW^yZ#XXu^y!P^y!b^y#]^y#_^y#a^y#c^y#d^y#e^y#f^y#g^y#h^y#j^y#n^y#q^y&[^y&]^y&l^y&t^yY^y#o^ys^yq^y|^y~OY%^aq%^a!P%^a~P7uO!P#myY#my#o#mys#myq#my|#my~P7uOo+oOq!fa&[!fa~Oq+qO&[&ka~OZ,OO~PCpO!P-xO~O!m,TO}&ja!P&ja~O}bO!P-{O~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op.ZOvzOw.YOz}O|.UO}bO!PuO![!_O!u|O!z{O#eoO#qnO#soO#toO#x!QO#y!PO$V!RO$X!SO$_!TO$b!UO$d!WO$g!VO$k!XO$m!YO$r!ZO$t![O$v!]O$x!^O${!`O$}!aO%{SO%}QO&PPO&VTO&]!yO&rcO~P?wO},QO~Oq,XO}&pa!P&pa~O}&cOq!|a|!|a!P!|a~OZ#iO}&cOq!|a|!|a!P!|a~O%{SO%}!sO&P!sOq%hX|%hX!P%hX~P?wOq,^O|&qa!P&qa~O|!}X~P!?hO|.eO~Os.fO~P7uOW$oO!P.gO~OW$oO$P.lO%}RO&P!bO!P&zP~OW$oO$T.mO~O!P.nO~O!b$|O#o.pOq!`X!P!`X~OY.rO~O!P.sO~P7uO#o.tO~P7uO!b.vO~OY.wOZ$YO_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O%{SO%}'dO&P'cO&VTO~P?wOW!{Ou&YX%{&YX%}&YX&P&YX&|&YX~O&]!yO~P$$WOu!oO%{SO&|.yO%}%RX&P%RX~OY&QXq&QX~P7uO}'tOq%lX|%lX~P9POq-`O|&wa~O!b/PO~O}'}Oq%aX|%aX~P9POq-fO|&ia~OY/SO~O!P/TO~OZ/UO~O&l%iOq!ga&[!ga~Ou!oO%{SO}&ma!P&ma!m&ma~O!P/ZO~O!m,TO}&ji!P&ji~O|/`O~P]OW/bO~P4UOZ#iO!P&SX~P#,{OW$TOZ#iO&t#gO~Op/dOw/dO~O}&cOq!|i|!|i!P!|i~O|!}a~P!?hOW$oO!P/fO~OW$oOq/gO!P&zX~OY/kO~P7uOY/mO~OY%Wq!P%Wq~P7uO&|.yO%}%Ra&P%Ra~OY/rO~Ou!oO!P/uO!Z/vO%{SO~OY/wO~O&l%iOq!gi&[!gi~Ou!oO%{SO}&mi!P&mi!m&mi~O!m,TO}&jq!P&jq~O|/yO~P]Op/{Ow%}Oz%{O%}RO&P!bO&]!yO~O!P/|O~Oq/gO!P&za~O!P0QO~OW$oOq/gO!P&{X~OY0SO~P7uOY0TO~OY%Wy!P%Wy~P7uOu!oO%{SO%}%sa&P%sa&|%sa~OY0UO~Ou!oO!P0VO!Z0WO%{SO~Op0ZO%}RO&P!bO~OW)QOZ#iO~O!P0]O~OW$oOq%pa!P%pa~Oq/gO!P&{a~O!P0_O~Ou!oO!P0_O!Z0`O%{SO~O!P0bO~O!P0cO~O!P0eO~O!P0fO~O#o&OXY&OXs&OXq&OX|&OX~P$wO#oUXYUXsUXqUX|UX~P&{O`Q_P#f&Vc~",
        goto: "#(V&|PPPP&}'b*q-tP'bPP.Y.^/rPPPPP1^P2vPP4`7P9j<T<m>bPPP>hP@|PPPAv2vPCoPPDjPEaEgPPPPPPPPPPPPFpGXPJ_JgJqKZKaKgMVMZMZMcPMrNx! k! uP!![NxP!!b!!l!!{!#TP!#r!#|!$SNx!$V!$]EaEa!$a!$k!$n2v!&Y2v2v!(RP.^P!(VP!(vPPPPPP.^P.^!)d.^PP.^P.^PP.^!*x!+SPP!+Y!+cPPPPPPPP&}P&}PP!+g!+g!+z!+gPP!+gP!+gP!,e!,hP!+g!-O!+gP!+gP!-R!-UP!+gP!+gP!+gP!+gP!+g!+gP!+gP!-YP!-`!-c!-iP!+g!-u!-x!.Q!.d!2a!2g!2m!3s!3y!4T!5X!5_!5e!5o!5u!5{!6R!6X!6_!6e!6k!6q!6w!6}!7T!7Z!7e!7k!7u!7{PPP!8R!+g!8vP!<XP!=]P!?n!@U!CQ2vPPP!Dn!HY!JwPP!Mb!MeP# n# t##b##q##w#$w#%a#&[#&e#&h#&tP#&w#'TP#'[#'cP#'fP#'oP#'r#'u#'x#'|#(SssObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/a'kqOWX_`bnow!X!Z!^!`!i!p!t!y!{#O#P#U#Y#]#_#f#h#i#m#n#o#p#q#r#s#v#w#x#y#{$R$Y$Z$[$]$^$_$l$p${$|%R%S%X%Y%b%c%f%g%i%k%p&]&b&c&d&e&j&m&n&r&s&u'Q'R'T'Y'Z'e't'}(W(X(h(l(o)T)W)X)Z)`)b)h)s)t)w)|*]*_*a*b*e*h*k*l*q*v+]+o+q+t+w+z+{,O,Q,T,X,^,`,c,t,v-P-T-X-`-f-w.Q.S.T.V.W.d.p.s.v.x/P/S/Y/_/a/p/t/v/w0W0Y0`0j#rgO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`t!dS!P!R!S!l!n$X$v*U*V*W*X,m,o.l.m/g0gQ#^cS%`#P.SQ%s#`U%x#e$T/bQ&P#gW'g$l*l-T.xU'q$o&{*ZQ'r$pS(^%Y/_U(}%z+i/zQ)S&QQ+[(lQ+g)QQ-c*yR-m+]u!dS!P!R!S!l!n$X$v*U*V*W*X,m,o.l.m/g0gT$q!c(T#upO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`#tkO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`X'h$l*l-T.x#}UO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`#}jO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`%tZOW_bdnow}!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*v+o+{,O,Q,T,X,`,t,v-P-T-`-f.T.V.W.d.p.s.v.x/P/a/v0W0`0jQ%W!{Q([%XV-V*q-Z.y%tZOW_bdnow}!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*v+o+{,O,Q,T,X,`,t,v-P-T-`-f.T.V.W.d.p.s.v.x/P/a/v0W0`0jV-V*q-Z.y%t[OW_bdnow}!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*v+o+{,O,Q,T,X,`,t,v-P-T-`-f.T.V.W.d.p.s.v.x/P/a/v0W0`0jV-W*q-Z.yS!zZ-VS$S}%{S%z#e$TQ&Q#gQ+i)QQ.[,QR/z/b$eYO_bnow!X!Z!^!`!y#]#f#h#i#m#n#o#p#q#r#s#v#w#{$Y$Z$[$]$^$_$l$p$|%i%k&d&e&n&r'T'Y'Z't'}(W(X(h)T)W)|*]*a*b*e*h*l*v+o,Q,T,X,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`Q%U!yR+R(X%u^OW_bdnow!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*q*v+o+{,O,Q,T,X,`,t,v-P-T-Z-`-f.T.V.W.d.p.s.v.x.y/P/a/v0W0`0j!o!qX!i!r!t#P#_#y$t${%S%Y%b%f&]'R'e(l)X)`)s*_*k+]+t+w+z,c-X-w.Q.S/S/Y/_/p/t/w0Y#|jO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`Q$Z!TQ$[!UQ$a!YQ$j!_R*i']Q#jhS&v$R)PQ(|%yQ*Q&wQ+f)OQ,[)oQ-q+hQ.a,]Q/W-rS/c.Y.ZQ/}/dQ0[/{R0a0ZQ&f$OW(s%t&g&h&iQ*P&vU+`(t(u(vQ,Z)oQ,h*QS-n+a+bS.`,[,]Q/V-oR/e.aX)f&c)h,`.drdObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aW#R_#U%c,OQ'S$]W'i$l*l-T.xS(m%p(oW)a&c)h,`.dS)p&j,^S)u&m)wR-Z*qh!vX!V#_#d'R(l)`)s*_+]+w,cQ(R$}Q(_%^R+V(b#rmObnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`v!tX!V#P#_#d$}%^%b%f'R'e(b(l*_*k+]-Y.S.|Q#W_Q$OzQ$P{Q$Q|Q%t#aQ%u#bQ%v#cQ(j%lS)Y&b+qY)d&c)a)h,`.dS)o&j,^Q+p)ZW+t)`)s+w,cQ+|)bQ,])pT.O+z.QU(P$|'}-fR*O&uW)f&c)h,`.dT)v&m)wQ&i$OQ&q$QQ(v%tQ({%vY)b&c)a)h,`.dV)t&m)u)wQ)[&bR-u+qQ+n)YR-t+p#tmO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`Q,P)dS-w+t.OR.R+|T#U_,OU#S_#U,OR(c%cQ,S)eQ-y+vQ-}+yQ/].PR/x/^ruObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aQ$m!aQ&`#wQ'a$jQ'p$nW)f&c)h,`.dQ*s'nQ+})cQ,W)jQ-[*rR-{+xrsObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aS(n%p(oW)f&c)h,`.dT)v&m)wQ&h$OS(u%t&iR+b(vQ&g$OQ&l$PU(t%t&h&iQ(x%uS+a(u(vR-o+bQ)n&eR)y&nQ&p$QS(z%v&qR+e({Q&o$QU(y%v&p&qS+d(z({R-p+eS(n%p(oT)v&m)wrsObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aW)f&c)h,`.dT)v&m)wQ&k$PS(w%u&lR+c(xQ)q&jR.b,^R,b)rQ%q#^R(r%sT(n%p(oQ,R)eS-|+y,SR/[-}R.W,QWj$l*l-T.x#ukO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`#|hO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`U%y#e$T/bS)O%z/zQ+h)QR-r+iT&t$R&u!]#ml#Q$`$h$k&O&R&S&V&W&X&Y&[&_'s(O){*`*c+k+m,g,x,}-^.o.u/l/o!V#nl#Q$`$h$k&O&R&S&W&[&_'s(O){*`*c+k+m,g,x,}-^.o.u/l/o#umO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`a'u$p't*v-`/P/v0W0`Q'w$pR-d*yQ&y$UQ'y$uR*|'zT*R&x*SsuObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/artObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aQ$e![R$g!]R$^!WruObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aR'T$]R$_!WR'[$aT*d'Z*eX'k$m'l'p*tR*r'mQ-Y*qR.|-ZQ'o$mQ*p'lQ*u'pR-]*tR$n!aQ'j$lV-R*l-T.xQwOQ#]bW#|w#].V/aQ.V,QR/a.WrWObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/al!kW!p#O#Y#x%R%X%g&s'Q)Z+{.T0j!j!pX!i!t#P#_#y${%S%Y%b%f&]'R'e(l)X)`)s*_*k+]+t+w+z,c-X-w.Q.S/S/Y/_/p/t/w0YQ#O_Q#Y`#^#xno!X!^!`#f#h#i#m#n#o#p#q#r#s#w$Y$p$|%i%k&d&e&n&r'T'Y't'}(W(h)T)W)|*a*b*h*v+o,T,X,t,v-P-`-f.p.s.v/P/v0W0`S%R!y(XQ%X!{j%g#U%c%p&c&j&m(o)h)w*q,^,`.dS&s$R&uY'Q$]$l*l-T.xS)Z&b+qS+{)b)tQ.T,OR0j#vQ!fTR$r!fQ(Y%UR+S(Y^!rX#P#y&]'R'e)Xx$t!i#_%S%Y%b%f(l)`)s*_*k+]+w+z,c-X.Q.S/_/p[$z!r$t${/Y/t0YS${!t+tQ/Y-wQ/t/SR0Y/wQ)U&SR+l)UQ)h&cS,U)h.dR.d,`!laO_bw!Z#U#]#{$Z$[$]$^$_$l%c%p&c&j&m'Z(o)h)w*]*e*l*q,O,Q,^,`-T.V.W.d.x/aY!jW#O%g'Q.TT#Za!jQ-g*}R/R-gQ%O!vR(S%OQ%j#VS(g%j/XR/X-sQ+r)[R-v+rQ%d#SR(d%dQ,Y)lR._,YQ)w&mR,d)wQ,_)qR.c,_Q(o%pR+^(oQ&u$RR)}&uQ%m#WR(k%mQ-a*wR/O-aQ*z'wR-e*zQ*S&xR,i*SQ,m*UR.i,mQ/h.jS0P/h0RR0R/jQ*e'ZR,z*eQ'l$mS*o'l*tR*t'pQ.z-XR/q.zQ*m'jR-U*m`vObw#],Q.V.W/aQ$b!ZQ&a#{Q'O$ZQ'P$[Q'V$^Q'W$_S*d'Z*eR,s*]'YrOWX_`bnow!X!Z!^!`!i!p!t!y!{#O#P#U#Y#]#_#f#h#i#m#n#o#p#q#r#s#v#w#x#y#{$R$Y$Z$[$]$^$_$l${$|%R%S%X%Y%b%c%f%g%i%k%p&]&b&c&d&e&j&m&n&r&s&u'Q'R'T'Y'Z'e'}(W(X(h(l(o)T)W)X)Z)`)b)h)s)t)w)|*]*_*a*b*e*h*k*l*q+]+o+q+t+w+z+{,O,Q,T,X,^,`,c,t,v-P-T-X-f-w.Q.S.T.V.W.d.p.s.v.x/S/Y/_/a/p/t/w0Y0ja'v$p't*v-`/P/v0W0`Q!cSQ$U!PQ$V!RQ$W!SQ$u!lQ$w!nQ&}$XQ'z$vQ(T0gS,k*U*WQ,o*VQ,p*XQ.h,mS.j,o.lQ/j.mR0O/g%oROS_bcnow!P!R!S!X!Z!^!`!l!n#P#]#`#e#f#g#h#i#m#n#o#p#q#r#s#w#{$T$X$Y$Z$[$]$^$_$l$o$p$v$|%Y%k%z&Q&r&{'T'Y'Z't'}(h(l)Q)T)W)|*U*V*W*X*Z*]*a*b*e*h*l*v*y+]+i,Q,m,o,t,v-P-T-`-f.S.V.W.l.m.p.s.v.x/P/_/a/b/g/v/z0W0`0gQ'x$pQ*w'tS-_*v/PQ.}-`Q0X/vQ0^0WR0d0`rlObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aS#Q_$YQ#tnQ#zoQ$`!XQ$h!^Q$k!`Q&O#fQ&R#hY&S#i$]*a,v.sQ&U#mQ&V#nQ&W#oQ&X#pQ&Y#qQ&Z#rQ&[#sQ&_#w^'s$p't-`/P/v0W0`U(O$|'}-fQ(i%kQ){&rQ*`'TQ*c'YQ+W(hQ+k)TQ+m)WQ,g)|Q,x*bQ,}*hQ-^*vQ.o,tQ.u-PQ/l.pR/o.v#rfO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`W'f$l*l-T.xR.X,QrXObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aW!iW#x%R'QQ#P_Q#_d!|#yno!X!^!`#f#h#i#m#n#o#p#q#r#s#w$Y$p$|%k&r'T'Y't'}(h)T)W)|*a*b*h*v,t,v-P-`-f.p.s.v/P/v0W0`d%S!y%i&d&e&n(W(X+o,T,XQ%Y#OQ%b#RS%f#U%cQ&]#vQ'R$]W'e$l*l-T.xS(l%p(oQ)X0jW)`&c)h,`.dS)s&m)wQ*_'SQ*k'iQ+](mQ+w)aS+z)b)tQ,c)uS-X*q-ZQ.Q+{Q.S,OQ/_.TR/p.y%t^OW_bdnow!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*q*v+o+{,O,Q,T,X,`,t,v-P-T-Z-`-f.T.V.W.d.p.s.v.x.y/P/a/v0W0`0jQ$R}Q&w$SR)P%{&PVOW_bdnow}!X!Z!^!`!y!{#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%X%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*q*v+o+{,O,Q,T,X,`,t,v-P-T-Z-`-f.T.V.W.d.p.s.v.x.y/P/a/v0W0`0jR%V!y#ziObnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`Q#V_Q%U!yQ&^#vQ(f%iQ)k&dU)l&e&n,TQ+Q(WQ+R(XQ-s+oR.^,XQ(V%TR+P(U#|eO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`T%w#e/bQ&T#iQ'U$]Q,w*aQ.q,vR/n.sX)g&c)h,`.d!{`OW_abw!Z!j#O#U#]#{$Z$[$]$^$_$l%c%g%p&c&j&m'Q'Z(o)h)w*]*e*l*q,O,Q,^,`-T.T.V.W.d.x/aU!wX!V'RU%r#_#d*_S+Z(l)sQ+u)`S-l+],cR-z+wj!uX!V#_#d$}%^(b(l)`)s+]+w,cU%]#P%f.SQ(a%bQ*^'RQ*j'eQ,u*_Q-Q*kQ.{-YR/s.|Q(Q$|Q*}'}R/Q-fR+O'}[)c&c&m)h)w,`.dT+x)a)uR)]&bW+v)`)s+w,cQ.P+zR/^.QS#T_,OR%h#US)m&e&nR.],TR)r&jW)e&c)h,`.dR+y)aR#X_R*x'tR'x$pT,l*U,mQ.k,oR/i.lR/i.m",
        nodeNames: "\u26A0 LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp BitOp BitOp LogicOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource",
        maxTerm: 274,
        nodeProps: [
          ["group", -26, 4, 47, 76, 77, 82, 87, 92, 144, 146, 149, 150, 152, 155, 157, 160, 162, 164, 166, 171, 173, 175, 177, 179, 180, 182, 190, "Statement", -25, 6, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 39, 40, 41, 99, 100, 102, 103, 106, 117, 119, 121, 124, 126, 129, "Expression", -7, 23, 24, 25, 26, 27, 29, 34, "Type"],
          ["openedBy", 10, "(", 44, "{"],
          ["closedBy", 11, ")", 45, "}"]
        ],
        propSources: [javaHighlighting],
        skippedNodes: [0, 1, 2],
        repeatNodeCount: 28,
        tokenData: "#$`_R!_OX%QXY'fYZ)bZ^'f^p%Qpq'fqr*|rs,^st%Qtu4euv5qvw7Rwx8ixy@zyzAhz{BU{|Bz|}Db}!OEO!O!PFi!P!Q! c!Q!R!,X!R![!0P![!]!>a!]!^!?q!^!_!@_!_!`!Ax!`!a!Bl!a!b!DY!b!c!Dx!c!}!Kt!}#O!MQ#O#P%Q#P#Q!Mn#Q#R!N[#R#S4e#S#T%Q#T#o4e#o#p# O#p#q# l#q#r##U#r#s##r#s#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%QS%VV&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS%qO&WSS%tVOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZS&^VOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS&vP;=`<%l%QS&|UOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZS'cP;=`<%l&Z_'mk&WS%wZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qs#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%Q_)iY&WS%wZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XZ*^Y%wZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XV+TX#sP&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QU+wV#_Q&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT,aXOY,|YZ%lZr,|rs3Ys#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T-PXOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT-qX&WSOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT.cVcPOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZT.}V&WSOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT/iW&WSOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0UWOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0sOcPP0vTOY0RYZ0RZ;'S0R;'S;=`1V<%lO0RP1YP;=`<%l0RT1`XOY,|YZ%lZr,|rs1{s#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T2QUcPOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZT2gVOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT3PP;=`<%l-lT3VP;=`<%l,|T3_VcPOY&ZYZ%lZr&Zrs3ts;'S&Z;'S;=`'`<%lO&ZT3yR&USXY4SYZ4`pq4SP4VRXY4SYZ4`pq4SP4eO&VP_4la%}Z&WSOY%QYZ%lZr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o;'S%Q;'S;=`&s<%lO%QU5xX#gQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU6lV#]Q&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV7YZ&lR&WSOY%QYZ%lZr%Qrs%qsv%Qvw7{w!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU8SV#aQ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT8nZ&WSOY9aYZ%lZr9ars:Xsw9awx%Qx#O9a#O#P<a#P;'S9a;'S;=`>t<%lO9aT9fZ&WSOY9aYZ%lZr9ars:Xsw9awx;sx#O9a#O#P<a#P;'S9a;'S;=`>t<%lO9aT:[ZOY:}YZ%lZr:}rs>zsw:}wx?px#O:}#O#P@[#P;'S:};'S;=`@t<%lO:}T;QZOY9aYZ%lZr9ars:Xsw9awx;sx#O9a#O#P<a#P;'S9a;'S;=`>t<%lO9aT;zVbP&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT<fV&WSOY9aYZ<{Zr9ars:Xs;'S9a;'S;=`>t<%lO9aT=QW&WSOY=jZw=jwx>Vx#O=j#O#P>[#P;'S=j;'S;=`>n<%lO=jP=mWOY=jZw=jwx>Vx#O=j#O#P>[#P;'S=j;'S;=`>n<%lO=jP>[ObPP>_TOY=jYZ=jZ;'S=j;'S;=`>n<%lO=jP>qP;=`<%l=jT>wP;=`<%l9aT>}ZOY:}YZ%lZr:}rs=jsw:}wx?px#O:}#O#P@[#P;'S:};'S;=`@t<%lO:}T?uVbPOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT@_VOY9aYZ<{Zr9ars:Xs;'S9a;'S;=`>t<%lO9aT@wP;=`<%l:}_ARVZZ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVAoVYR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVB_X$YP&WS#fQOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVCRZ#eR&WSOY%QYZ%lZr%Qrs%qs{%Q{|Ct|!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVC{V#qR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVDiVqR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVEV[#eR&WSOY%QYZ%lZr%Qrs%qs}%Q}!OCt!O!_%Q!_!`6e!`!aE{!a;'S%Q;'S;=`&s<%lO%QVFSV&vR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_FpZWY&WSOY%QYZ%lZr%Qrs%qs!O%Q!O!PGc!P!Q%Q!Q![Hq![;'S%Q;'S;=`&s<%lO%QVGhX&WSOY%QYZ%lZr%Qrs%qs!O%Q!O!PHT!P;'S%Q;'S;=`&s<%lO%QVH[V&oR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTHxc&WS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hq![!f%Q!f!gJT!g!hJq!h!iJT!i#R%Q#R#SNk#S#W%Q#W#XJT#X#YJq#Y#ZJT#Z;'S%Q;'S;=`&s<%lO%QTJ[V&WS`POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTJv]&WSOY%QYZ%lZr%Qrs%qs{%Q{|Ko|}%Q}!OKo!O!Q%Q!Q![La![;'S%Q;'S;=`&s<%lO%QTKtX&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![La![;'S%Q;'S;=`&s<%lO%QTLhc&WS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![La![!f%Q!f!gJT!g!h%Q!h!iJT!i#R%Q#R#SMs#S#W%Q#W#XJT#X#Y%Q#Y#ZJT#Z;'S%Q;'S;=`&s<%lO%QTMxZ&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![La![#R%Q#R#SMs#S;'S%Q;'S;=`&s<%lO%QTNpZ&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hq![#R%Q#R#SNk#S;'S%Q;'S;=`&s<%lO%Q_! j]&WS#fQOY%QYZ%lZr%Qrs%qsz%Qz{!!c{!P%Q!P!Q!)U!Q!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%Q_!!hX&WSOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{;'S!!c;'S;=`!'d<%lO!!c_!#YT&WSOz!#iz{!#{{;'S!#i;'S;=`!$j<%lO!#iZ!#lTOz!#iz{!#{{;'S!#i;'S;=`!$j<%lO!#iZ!$OVOz!#iz{!#{{!P!#i!P!Q!$e!Q;'S!#i;'S;=`!$j<%lO!#iZ!$jOQZZ!$mP;=`<%l!#i_!$sXOY!%`YZ!#TZr!%`rs!'jsz!%`z{!(Y{;'S!%`;'S;=`!)O<%lO!%`_!%cXOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{;'S!!c;'S;=`!'d<%lO!!c_!&TZ&WSOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{!P!!c!P!Q!&v!Q;'S!!c;'S;=`!'d<%lO!!c_!&}V&WSQZOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!'gP;=`<%l!!c_!'mXOY!%`YZ!#TZr!%`rs!#isz!%`z{!(Y{;'S!%`;'S;=`!)O<%lO!%`_!(]ZOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{!P!!c!P!Q!&v!Q;'S!!c;'S;=`!'d<%lO!!c_!)RP;=`<%l!%`_!)]V&WSPZOY!)UYZ%lZr!)Urs!)rs;'S!)U;'S;=`!*x<%lO!)U_!)wVPZOY!*^YZ%lZr!*^rs!+Os;'S!*^;'S;=`!,R<%lO!*^_!*cVPZOY!)UYZ%lZr!)Urs!)rs;'S!)U;'S;=`!*x<%lO!)U_!*{P;=`<%l!)U_!+TVPZOY!*^YZ%lZr!*^rs!+js;'S!*^;'S;=`!,R<%lO!*^Z!+oSPZOY!+jZ;'S!+j;'S;=`!+{<%lO!+jZ!,OP;=`<%l!+j_!,UP;=`<%l!*^T!,`u&WS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.s!P!Q%Q!Q![!0P![!d%Q!d!e!3Z!e!f%Q!f!gJT!g!hJq!h!iJT!i!n%Q!n!o!1u!o!q%Q!q!r!5X!r!z%Q!z!{!7P!{#R%Q#R#S!2c#S#U%Q#U#V!3Z#V#W%Q#W#XJT#X#YJq#Y#ZJT#Z#`%Q#`#a!1u#a#c%Q#c#d!5X#d#l%Q#l#m!7P#m;'S%Q;'S;=`&s<%lO%QT!.za&WS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hq![!f%Q!f!gJT!g!hJq!h!iJT!i#W%Q#W#XJT#X#YJq#Y#ZJT#Z;'S%Q;'S;=`&s<%lO%QT!0Wi&WS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.s!P!Q%Q!Q![!0P![!f%Q!f!gJT!g!hJq!h!iJT!i!n%Q!n!o!1u!o#R%Q#R#S!2c#S#W%Q#W#XJT#X#YJq#Y#ZJT#Z#`%Q#`#a!1u#a;'S%Q;'S;=`&s<%lO%QT!1|V&WS_POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT!2hZ&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!0P![#R%Q#R#S!2c#S;'S%Q;'S;=`&s<%lO%QT!3`Y&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4O!R!S!4O!S;'S%Q;'S;=`&s<%lO%QT!4V`&WS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4O!R!S!4O!S!n%Q!n!o!1u!o#R%Q#R#S!3Z#S#`%Q#`#a!1u#a;'S%Q;'S;=`&s<%lO%QT!5^X&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!5y!Y;'S%Q;'S;=`&s<%lO%QT!6Q_&WS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!5y!Y!n%Q!n!o!1u!o#R%Q#R#S!5X#S#`%Q#`#a!1u#a;'S%Q;'S;=`&s<%lO%QT!7U_&WSOY%QYZ%lZr%Qrs%qs!O%Q!O!P!8T!P!Q%Q!Q![!:c![!c%Q!c!i!:c!i#T%Q#T#Z!:c#Z;'S%Q;'S;=`&s<%lO%QT!8Y]&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9R![!c%Q!c!i!9R!i#T%Q#T#Z!9R#Z;'S%Q;'S;=`&s<%lO%QT!9Wc&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9R![!c%Q!c!i!9R!i!r%Q!r!sJq!s#R%Q#R#S!8T#S#T%Q#T#Z!9R#Z#d%Q#d#eJq#e;'S%Q;'S;=`&s<%lO%QT!:ji&WS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!<X!P!Q%Q!Q![!:c![!c%Q!c!i!:c!i!n%Q!n!o!1u!o!r%Q!r!sJq!s#R%Q#R#S!=c#S#T%Q#T#Z!:c#Z#`%Q#`#a!1u#a#d%Q#d#eJq#e;'S%Q;'S;=`&s<%lO%QT!<^a&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9R![!c%Q!c!i!9R!i!r%Q!r!sJq!s#T%Q#T#Z!9R#Z#d%Q#d#eJq#e;'S%Q;'S;=`&s<%lO%QT!=h]&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!:c![!c%Q!c!i!:c!i#T%Q#T#Z!:c#Z;'S%Q;'S;=`&s<%lO%QV!>hX#oR&WSOY%QYZ%lZr%Qrs%qs![%Q![!]!?T!];'S%Q;'S;=`&s<%lO%QV!?[V&tR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!?xV!PR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!@fY&]Z&WSOY%QYZ%lZr%Qrs%qs!^%Q!^!_!AU!_!`+p!`;'S%Q;'S;=`&s<%lO%QU!A]X#hQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV!BPX!bR&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QV!BsY&[R&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`!a!Cc!a;'S%Q;'S;=`&s<%lO%QU!CjY#hQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`!a!AU!a;'S%Q;'S;=`&s<%lO%Q_!DcV&`X#nQ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!EPX%{Z&WSOY%QYZ%lZr%Qrs%qs#]%Q#]#^!El#^;'S%Q;'S;=`&s<%lO%QV!EqX&WSOY%QYZ%lZr%Qrs%qs#b%Q#b#c!F^#c;'S%Q;'S;=`&s<%lO%QV!FcX&WSOY%QYZ%lZr%Qrs%qs#h%Q#h#i!GO#i;'S%Q;'S;=`&s<%lO%QV!GTX&WSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!Gp#Y;'S%Q;'S;=`&s<%lO%QV!GuX&WSOY%QYZ%lZr%Qrs%qs#f%Q#f#g!Hb#g;'S%Q;'S;=`&s<%lO%QV!HgX&WSOY%QYZ%lZr%Qrs%qs#Y%Q#Y#Z!IS#Z;'S%Q;'S;=`&s<%lO%QV!IXX&WSOY%QYZ%lZr%Qrs%qs#T%Q#T#U!It#U;'S%Q;'S;=`&s<%lO%QV!IyX&WSOY%QYZ%lZr%Qrs%qs#V%Q#V#W!Jf#W;'S%Q;'S;=`&s<%lO%QV!JkX&WSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!KW#Y;'S%Q;'S;=`&s<%lO%QV!K_V&rR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!K{a&PZ&WSOY%QYZ%lZr%Qrs%qst%Qtu!Ktu!Q%Q!Q![!Kt![!c%Q!c!}!Kt!}#R%Q#R#S!Kt#S#T%Q#T#o!Kt#o;'S%Q;'S;=`&s<%lO%Q_!MXVuZ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!MuVsR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QU!NcX#cQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV# VV}R&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_# uZ&|X#cQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`#p%Q#p#q#!h#q;'S%Q;'S;=`&s<%lO%QU#!oV#dQ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV##]V|R&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT##yV#tP&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q",
        tokenizers: [0, 1, 2, 3],
        topRules: { "Program": [0, 3] },
        dynamicPrecedences: { "27": 1, "230": -1, "241": -1 },
        specialized: [{ term: 229, get: (value) => spec_identifier4[value] || -1 }],
        tokenPrec: 7067
      });
    }
  });

  // node_modules/@codemirror/lang-java/dist/index.js
  var dist_exports7 = {};
  __export(dist_exports7, {
    java: () => java,
    javaLanguage: () => javaLanguage
  });
  function java() {
    return new LanguageSupport(javaLanguage);
  }
  var javaLanguage;
  var init_dist15 = __esm({
    "node_modules/@codemirror/lang-java/dist/index.js"() {
      init_index_es6();
      init_dist5();
      javaLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "java",
        parser: /* @__PURE__ */ parser7.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
              TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
              LabeledStatement: flatIndent,
              SwitchBlock: (context) => {
                let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
              },
              Block: /* @__PURE__ */ delimitedIndent({ closing: "}" }),
              BlockComment: () => null,
              Statement: /* @__PURE__ */ continuedIndent({ except: /^{/ })
            }),
            /* @__PURE__ */ foldNodeProp.add({
              ["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody ConstructorBody InterfaceBody ArrayInitializer"]: foldInside,
              BlockComment(tree) {
                return { from: tree.from + 2, to: tree.to - 2 };
              }
            })
          ]
        }),
        languageData: {
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*(?:case |default:|\{|\})$/
        }
      });
    }
  });

  // node_modules/@lezer/json/dist/index.es.js
  var jsonHighlighting, parser8;
  var init_index_es7 = __esm({
    "node_modules/@lezer/json/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      jsonHighlighting = styleTags({
        String: tags.string,
        Number: tags.number,
        "True False": tags.bool,
        PropertyName: tags.propertyName,
        Null: tags.null,
        ",": tags.separator,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace
      });
      parser8 = LRParser.deserialize({
        version: 14,
        states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
        stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
        goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
        nodeNames: "\u26A0 JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
        maxTerm: 25,
        nodeProps: [
          ["openedBy", 7, "{", 12, "["],
          ["closedBy", 8, "}", 13, "]"]
        ],
        propSources: [jsonHighlighting],
        skippedNodes: [0],
        repeatNodeCount: 2,
        tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
        tokenizers: [0],
        topRules: { "JsonText": [0, 1] },
        tokenPrec: 0
      });
    }
  });

  // node_modules/@codemirror/lang-json/dist/index.js
  var dist_exports8 = {};
  __export(dist_exports8, {
    json: () => json,
    jsonLanguage: () => jsonLanguage,
    jsonParseLinter: () => jsonParseLinter
  });
  function getErrorPosition(error, doc2) {
    let m;
    if (m = error.message.match(/at position (\d+)/))
      return Math.min(+m[1], doc2.length);
    if (m = error.message.match(/at line (\d+) column (\d+)/))
      return Math.min(doc2.line(+m[1]).from + +m[2] - 1, doc2.length);
    return 0;
  }
  function json() {
    return new LanguageSupport(jsonLanguage);
  }
  var jsonParseLinter, jsonLanguage;
  var init_dist16 = __esm({
    "node_modules/@codemirror/lang-json/dist/index.js"() {
      init_index_es7();
      init_dist5();
      jsonParseLinter = () => (view) => {
        try {
          JSON.parse(view.state.doc.toString());
        } catch (e) {
          if (!(e instanceof SyntaxError))
            throw e;
          const pos = getErrorPosition(e, view.state.doc);
          return [{
            from: pos,
            message: e.message,
            severity: "error",
            to: pos
          }];
        }
        return [];
      };
      jsonLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "json",
        parser: /* @__PURE__ */ parser8.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              Object: /* @__PURE__ */ continuedIndent({ except: /^\s*\}/ }),
              Array: /* @__PURE__ */ continuedIndent({ except: /^\s*\]/ })
            }),
            /* @__PURE__ */ foldNodeProp.add({
              "Object Array": foldInside
            })
          ]
        }),
        languageData: {
          closeBrackets: { brackets: ["[", "{", '"'] },
          indentOnInput: /^\s*[\}\]]$/
        }
      });
    }
  });

  // node_modules/@lezer/php/dist/index.es.js
  function keywords3(name2) {
    let found = keywordMap[name2.toLowerCase()];
    return found == null ? -1 : found;
  }
  function isSpace2(ch2) {
    return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
  }
  function isASCIILetter(ch2) {
    return ch2 >= 97 && ch2 <= 122 || ch2 >= 65 && ch2 <= 90;
  }
  function isIdentifierStart(ch2) {
    return ch2 == 95 || ch2 >= 128 || isASCIILetter(ch2);
  }
  function isHex(ch2) {
    return ch2 >= 48 && ch2 <= 55 || ch2 >= 97 && ch2 <= 102 || ch2 >= 65 && ch2 <= 70;
  }
  function scanEscape(input) {
    let after = input.peek(1);
    if (after == 110 || after == 114 || after == 116 || after == 118 || after == 101 || after == 102 || after == 92 || after == 36 || after == 34 || after == 123)
      return 2;
    if (after >= 48 && after <= 55) {
      let size = 2, next2;
      while (size < 5 && (next2 = input.peek(size)) >= 48 && next2 <= 55)
        size++;
      return size;
    }
    if (after == 120 && isHex(input.peek(2))) {
      return isHex(input.peek(3)) ? 4 : 3;
    }
    if (after == 117 && input.peek(2) == 123) {
      for (let size = 3; ; size++) {
        let next2 = input.peek(size);
        if (next2 == 125)
          return size == 2 ? 0 : size + 1;
        if (!isHex(next2))
          break;
      }
    }
    return 0;
  }
  var castOpen, HeredocString, interpolatedStringContent, EscapeSequence, afterInterpolation, automaticSemicolon, eof, abstract, and, array, as, Boolean, _break, _case, _catch, clone3, _const, _continue, _default, declare, _do, echo, _else, elseif, enddeclare, endfor, endforeach, endif, endswitch, endwhile, _enum, _extends, final, _finally, fn, _for, foreach, from, _function, global, goto, _if, _implements, include, include_once, _instanceof, insteadof, _interface, list, match2, namespace, _new, _null, or, print, _require, require_once, _return, _switch, _throw, trait, _try, unset, use, _var, Visibility, _while, xor, _yield, keywordMap, castTypes, expression, eofToken, semicolon2, interpolated, phpHighlighting, spec_Name, parser9;
  var init_index_es8 = __esm({
    "node_modules/@lezer/php/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      castOpen = 1;
      HeredocString = 2;
      interpolatedStringContent = 263;
      EscapeSequence = 3;
      afterInterpolation = 264;
      automaticSemicolon = 265;
      eof = 266;
      abstract = 4;
      and = 5;
      array = 6;
      as = 7;
      Boolean = 8;
      _break = 9;
      _case = 10;
      _catch = 11;
      clone3 = 12;
      _const = 13;
      _continue = 14;
      _default = 15;
      declare = 16;
      _do = 17;
      echo = 18;
      _else = 19;
      elseif = 20;
      enddeclare = 21;
      endfor = 22;
      endforeach = 23;
      endif = 24;
      endswitch = 25;
      endwhile = 26;
      _enum = 27;
      _extends = 28;
      final = 29;
      _finally = 30;
      fn = 31;
      _for = 32;
      foreach = 33;
      from = 34;
      _function = 35;
      global = 36;
      goto = 37;
      _if = 38;
      _implements = 39;
      include = 40;
      include_once = 41;
      _instanceof = 42;
      insteadof = 43;
      _interface = 44;
      list = 45;
      match2 = 46;
      namespace = 47;
      _new = 48;
      _null = 49;
      or = 50;
      print = 51;
      _require = 52;
      require_once = 53;
      _return = 54;
      _switch = 55;
      _throw = 56;
      trait = 57;
      _try = 58;
      unset = 59;
      use = 60;
      _var = 61;
      Visibility = 62;
      _while = 63;
      xor = 64;
      _yield = 65;
      keywordMap = {
        abstract,
        and,
        array,
        as,
        true: Boolean,
        false: Boolean,
        break: _break,
        case: _case,
        catch: _catch,
        clone: clone3,
        const: _const,
        continue: _continue,
        declare,
        default: _default,
        do: _do,
        echo,
        else: _else,
        elseif,
        enddeclare,
        endfor,
        endforeach,
        endif,
        endswitch,
        endwhile,
        enum: _enum,
        extends: _extends,
        final,
        finally: _finally,
        fn,
        for: _for,
        foreach,
        from,
        function: _function,
        global,
        goto,
        if: _if,
        implements: _implements,
        include,
        include_once,
        instanceof: _instanceof,
        insteadof,
        interface: _interface,
        list,
        match: match2,
        namespace,
        new: _new,
        null: _null,
        or,
        print,
        require: _require,
        require_once,
        return: _return,
        switch: _switch,
        throw: _throw,
        trait,
        try: _try,
        unset,
        use,
        var: _var,
        public: Visibility,
        private: Visibility,
        protected: Visibility,
        while: _while,
        xor,
        yield: _yield,
        __proto__: null
      };
      castTypes = {
        int: true,
        integer: true,
        bool: true,
        boolean: true,
        float: true,
        double: true,
        real: true,
        string: true,
        array: true,
        object: true,
        unset: true,
        __proto__: null
      };
      expression = new ExternalTokenizer((input) => {
        if (input.next == 40) {
          input.advance();
          let peek = 0;
          while (isSpace2(input.peek(peek)))
            peek++;
          let name2 = "", next2;
          while (isASCIILetter(next2 = input.peek(peek))) {
            name2 += String.fromCharCode(next2);
            peek++;
          }
          while (isSpace2(input.peek(peek)))
            peek++;
          if (input.peek(peek) == 41 && castTypes[name2.toLowerCase()])
            input.acceptToken(castOpen);
        } else if (input.next == 60 && input.peek(1) == 60 && input.peek(2) == 60) {
          for (let i = 0; i < 3; i++)
            input.advance();
          while (input.next == 32 || input.next == 9)
            input.advance();
          let quoted = input.next == 39;
          if (quoted)
            input.advance();
          if (!isIdentifierStart(input.next))
            return;
          let tag = String.fromCharCode(input.next);
          for (; ; ) {
            input.advance();
            if (!isIdentifierStart(input.next) && !(input.next >= 48 && input.next <= 55))
              break;
            tag += String.fromCharCode(input.next);
          }
          if (quoted) {
            if (input.next != 39)
              return;
            input.advance();
          }
          if (input.next != 10 && input.next != 13)
            return;
          for (; ; ) {
            let lineStart = input.next == 10 || input.next == 13;
            input.advance();
            if (input.next < 0)
              return;
            if (lineStart) {
              while (input.next == 32 || input.next == 9)
                input.advance();
              let match3 = true;
              for (let i = 0; i < tag.length; i++) {
                if (input.next != tag.charCodeAt(i)) {
                  match3 = false;
                  break;
                }
                input.advance();
              }
              if (match3)
                return input.acceptToken(HeredocString);
            }
          }
        }
      });
      eofToken = new ExternalTokenizer((input) => {
        if (input.next < 0)
          input.acceptToken(eof);
      });
      semicolon2 = new ExternalTokenizer((input, stack) => {
        if (input.next == 63 && stack.canShift(automaticSemicolon) && input.peek(1) == 62)
          input.acceptToken(automaticSemicolon);
      });
      interpolated = new ExternalTokenizer((input, stack) => {
        let content3 = false;
        for (; ; content3 = true) {
          if (input.next == 34 || input.next < 0 || input.next == 36 && (isIdentifierStart(input.peek(1)) || input.peek(1) == 123) || input.next == 123 && input.peek(1) == 36) {
            break;
          } else if (input.next == 92) {
            let escaped = scanEscape(input);
            if (escaped) {
              if (content3)
                break;
              else
                return input.acceptToken(EscapeSequence, escaped);
            }
          } else if (!content3 && (input.next == 91 || input.next == 45 && input.peek(1) == 62 && isIdentifierStart(input.peek(2)) || input.next == 63 && input.peek(1) == 45 && input.peek(2) == 62 && isIdentifierStart(input.peek(3))) && stack.canShift(afterInterpolation)) {
            break;
          }
          input.advance();
        }
        if (content3)
          input.acceptToken(interpolatedStringContent);
      });
      phpHighlighting = styleTags({
        "Visibility abstract final static": tags.modifier,
        "for foreach while do if else elseif switch try catch finally return throw break continue default case": tags.controlKeyword,
        "endif endfor endforeach endswitch endwhile declare enddeclare goto match": tags.controlKeyword,
        "and or xor yield unset clone instanceof insteadof": tags.operatorKeyword,
        "function fn class trait implements extends const enum global interface use var": tags.definitionKeyword,
        "include include_once require require_once namespace": tags.moduleKeyword,
        "new from echo print array list as": tags.keyword,
        null: tags.null,
        Boolean: tags.bool,
        VariableName: tags.variableName,
        "NamespaceName/...": tags.namespace,
        "NamedType/...": tags.typeName,
        Name: tags.name,
        "CallExpression/Name": tags.function(tags.variableName),
        "LabelStatement/Name": tags.labelName,
        "MemberExpression/Name": tags.propertyName,
        "MemberExpression/VariableName": tags.special(tags.propertyName),
        "ScopedExpression/ClassMemberName/Name": tags.propertyName,
        "ScopedExpression/ClassMemberName/VariableName": tags.special(tags.propertyName),
        "CallExpression/MemberExpression/Name": tags.function(tags.propertyName),
        "CallExpression/ScopedExpression/ClassMemberName/Name": tags.function(tags.propertyName),
        "MethodDeclaration/Name": tags.function(tags.definition(tags.variableName)),
        "FunctionDefinition/Name": tags.function(tags.definition(tags.variableName)),
        "ClassDeclaration/Name": tags.definition(tags.className),
        UpdateOp: tags.updateOperator,
        ArithOp: tags.arithmeticOperator,
        LogicOp: tags.logicOperator,
        BitOp: tags.bitwiseOperator,
        CompareOp: tags.compareOperator,
        ControlOp: tags.controlOperator,
        AssignOp: tags.definitionOperator,
        "$ ConcatOp": tags.operator,
        LineComment: tags.lineComment,
        BlockComment: tags.blockComment,
        Integer: tags.integer,
        Float: tags.float,
        String: tags.string,
        ShellExpression: tags.special(tags.string),
        "=> ->": tags.punctuation,
        "( )": tags.paren,
        "#[ [ ]": tags.squareBracket,
        "${ { }": tags.brace,
        "-> ?->": tags.derefOperator,
        ", ; :: : \\": tags.separator,
        "PhpOpen PhpClose": tags.processingInstruction
      });
      spec_Name = { __proto__: null, static: 311, STATIC: 311, class: 333, CLASS: 333 };
      parser9 = LRParser.deserialize({
        version: 14,
        states: "$GSQ`OWOOQhQaOOP%oO`OOOOO#t'#H_'#H_O%tO#|O'#DtOOO#u'#Dw'#DwQ&SOWO'#DwO&XO$VOOOOQ#u'#Dx'#DxO&lQaO'#D|O(mQdO'#E}O(tQdO'#EQO*kQaO'#EWO,zQ`O'#ETO-PQ`O'#E^O/nQaO'#E^O/uQ`O'#EfO/zQ`O'#EoO*kQaO'#EoO0VQ`O'#HhO0[Q`O'#E{O0[Q`O'#E{OOQS'#Ic'#IcO0aQ`O'#EvOOQS'#IZ'#IZO2oQdO'#IWO6tQeO'#FUO*kQaO'#FeO*kQaO'#FfO*kQaO'#FgO*kQaO'#FhO*kQaO'#FhO*kQaO'#FkOOQO'#Id'#IdO7RQ`O'#FqOOQO'#Hi'#HiO7ZQ`O'#HOO7uQ`O'#FlO8QQ`O'#H]O8]Q`O'#FvO8eQaO'#FwO*kQaO'#GVO*kQaO'#GYO8}OrO'#G]OOQS'#Iq'#IqOOQS'#Ip'#IpOOQS'#IW'#IWO,zQ`O'#GdO,zQ`O'#GfO,zQ`O'#GkOhQaO'#GmO9UQ`O'#GnO9ZQ`O'#GqO9`Q`O'#GtO9eQeO'#GuO9eQeO'#GvO9eQeO'#GwO9oQ`O'#GxO9tQ`O'#GzO9yQaO'#G{O<YQ`O'#G|O<_Q`O'#G}O<dQ`O'#G}O9oQ`O'#HOO<iQ`O'#HQO<nQ`O'#HRO<sQ`O'#HSO<xQ`O'#HVO=TQ`O'#HWO9yQaO'#H[OOQ#u'#IV'#IVOOQ#u'#Ha'#HaQhQaOOO=fQ`O'#HPO7pQ`O'#HPO=kO#|O'#DrPOOO)CCw)CCwOOO#t-E;]-E;]OOO#u,5:c,5:cOOO#u'#H`'#H`O&XO$VOOO=vQ$VO'#IUOOOO'#IU'#IUQOOOOOOOQ#y,5:h,5:hO=}QaO,5:hOOQ#u,5:j,5:jO@eQaO,5:mO@lQaO,5;UO*kQaO,5;UO@sQ`O,5;VOCbQaO'#EsOOQS,5;^,5;^OCiQ`O,5;jOOQP'#F]'#F]O*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qOOQ#u'#Im'#ImOOQS,5<q,5<qOOQ#u,5:l,5:lOEbQ`O,5:rOEiQdO'#E}OF]Q`O'#FlOFeQ`O'#FlOFmQ`O,5:oOFrQaO'#E_OOQS,5:x,5:xOHyQ`O'#I]O9yQaO'#EaO9yQaO'#I]OOQS'#I]'#I]OIQQ`O'#I[OIYQ`O,5:xO-UQaO,5:xOI_QaO'#EgOOQS,5;Q,5;QOOQS,5;Z,5;ZOIiQ`O,5;ZOOQO,5>S,5>SOJ[QdO,5;gOOQO-E;f-E;fOL^Q`O,5;gOLcQpO,5;bO0aQ`O'#EyOLkQtO'#E}OOQS'#Ez'#EzOOQS'#Ib'#IbOM`QaO,5:wO*kQaO,5;nOOQS,5;p,5;pO*kQaO,5;pOMgQdO,5<POMwQdO,5<QONXQdO,5<RONiQdO,5<SO!!sQdO,5<SO!!zQdO,5<VO!#[Q`O'#FrO!#gQ`O'#IgO!#oQ`O,5<]OOQO-E;g-E;gO!#tQ`O'#IoO<_Q`O,5=iO!#|Q`O,5=iO9oQ`O,5=jO!$RQ`O,5=nO!$WQ`O,5=kO!$]Q`O,5=kO!$bQ`O'#FnO!$xQ`O,5<WO!%TQ`O,5<WO!%WQ`O,5?ZO!%]Q`O,5<WO!%eQ`O,5<bO!%mQdO'#GPO!%{QdO'#InO!&WQdO,5=wO!&`Q`O,5<bO!%WQ`O,5<bO!&hQdO,5<cO!&xQ`O,5<cO!'lQdO,5<qO!)nQdO,5<tO!*OOrO'#HsOOOQ'#It'#ItO*kQaO'#GbOOOQ'#Hs'#HsO!*pOrO,5<wOOQS,5<w,5<wO!*wQaO,5=OO!+OQ`O,5=QO!+WQeO,5=VO!+bQ`O,5=XO!+gQaO'#GoO!+WQeO,5=YO9yQaO'#GrO!+WQeO,5=]O!&WQdO,5=`O(tQdO,5=aOOQ#u,5=a,5=aO(tQdO,5=bOOQ#u,5=b,5=bO(tQdO,5=cOOQ#u,5=c,5=cO!+nQ`O,5=dO!+vQ`O,5=fO!+{QdO'#IvOOQS'#Iv'#IvO!&WQdO,5=gO>UQaO,5=hO!-eQ`O'#F}O!-jQdO'#IlO!&WQdO,5=iOOQ#u,5=j,5=jO!-uQ`O,5=lO!-xQ`O,5=mO!-}Q`O,5=nO!.YQdO,5=qOOQ#u,5=q,5=qO!.eQ`O,5=rO!.eQ`O,5=rO!.mQdO'#IwO!.{Q`O'#HXO!&WQdO,5=rO!/ZQ`O,5=rO!/fQdO'#IYO!&WQdO,5=vOOQ#u-E;_-E;_O!1RQ`O,5=kOOO#u,5:^,5:^O!1^O#|O,5:^OOO#u-E;^-E;^OOOO,5>p,5>pOOQ#y1G0S1G0SO!1fQ`O1G0XO*kQaO1G0XO!2xQ`O1G0pOOQS1G0p1G0pO!4[Q`O1G0pOOQS'#I_'#I_O*kQaO'#I_OOQS1G0q1G0qO!4cQ`O'#IaO!7lQ`O'#E}O!7yQaO'#EuOOQO'#Ia'#IaO!8TQ`O'#I`O!8]Q`O,5;_OOQS'#FQ'#FQOOQS1G1U1G1UO!8bQdO1G1]O!:dQdO1G1]O!<PQdO1G1]O!=lQdO1G1]O!?XQdO1G1]O!@tQdO1G1]O!BaQdO1G1]O!C|QdO1G1]O!EiQdO1G1]O!GUQdO1G1]O!HqQdO1G1]O!J^QdO1G1]O!KyQdO1G1]O!MfQdO1G1]O# RQdO1G1]O#!nQdO1G1]OOQT1G0^1G0^O!%WQ`O,5<WO#$ZQaO'#EXOOQS1G0Z1G0ZO#$bQ`O,5:yOFuQaO,5:yO#$gQaO,5:}O#$nQdO,5:{O#&jQdO,5>wO#(fQaO'#HdO#(vQ`O,5>vOOQS1G0d1G0dO#)OQ`O1G0dO#)TQ`O'#I^O#*mQ`O'#I^O#*uQ`O,5;ROIbQaO,5;ROOQS1G0u1G0uPOQO'#E}'#E}O#+fQdO1G1RO0aQ`O'#HgO#-hQtO,5;cO#.YQaO1G0|OOQS,5;e,5;eO#0iQtO,5;gO#0vQdO1G0cO*kQaO1G0cO#2cQdO1G1YO#4OQdO1G1[OOQO,5<^,5<^O#4`Q`O'#HjO#4nQ`O,5?ROOQO1G1w1G1wO#4vQ`O,5?ZO!&WQdO1G3TO<_Q`O1G3TOOQ#u1G3U1G3UO#4{Q`O1G3YO!1RQ`O1G3VO#5WQ`O1G3VO#5]QpO'#FoO#5kQ`O'#FoO#5{Q`O'#FoO#6WQ`O'#FoO#6`Q`O'#FsO#6eQ`O'#FtOOQO'#If'#IfO#6lQ`O'#IeO#6tQ`O,5<YOOQS1G1r1G1rO0aQ`O1G1rO#6yQ`O1G1rO#7OQ`O1G1rO!%WQ`O1G4uO#7ZQdO1G4uO!%WQ`O1G1rO#7iQ`O1G1|O!%WQ`O1G1|O9yQaO,5<kO#7qQdO'#HqO#8PQdO,5?YOOQ#u1G3c1G3cO*kQaO1G1|O0aQ`O1G1|O#8[QdO1G1}O7RQ`O'#FyO7RQ`O'#FzO#:nQ`O'#F{OOQS1G1}1G1}O!-xQ`O1G1}O!1UQ`O1G1}O!1RQ`O1G1}O#;eO`O,5<xO#;jO`O,5<xO#;uO!bO,5<yO#<TQ`O,5<|OOOQ-E;q-E;qOOQS1G2c1G2cO#<[QaO'#GeO#<uQ$VO1G2jO#AuQ`O1G2jO#BQQ`O'#GgO#B]Q`O'#GjOOQ#u1G2l1G2lO#BhQ`O1G2lOOQ#u'#Gl'#GlOOQ#u'#Iu'#IuOOQ#u1G2q1G2qO#BmQ`O1G2qO,zQ`O1G2sO#BrQaO,5=ZO#ByQ`O,5=ZOOQ#u1G2t1G2tO#COQ`O1G2tO#CTQ`O,5=^OOQ#u1G2w1G2wO#DgQ`O1G2wOOQ#u1G2z1G2zOOQ#u1G2{1G2{OOQ#u1G2|1G2|OOQ#u1G2}1G2}O#DlQ`O'#HxO9oQ`O'#HxO#DqQ$VO1G3OO#IwQ`O1G3QO9yQaO'#HwO#I|QdO,5=[OOQ#u1G3R1G3RO#JXQ`O1G3SO9yQaO,5<iO#J^QdO'#HpO#JlQdO,5?WOOQ#u1G3T1G3TOOQ#u1G3W1G3WO!-xQ`O1G3WOOQ#u1G3X1G3XO#KfQ`O'#HTOOQ#u1G3Y1G3YO#KmQ`O1G3YO0aQ`O1G3YOOQ#u1G3]1G3]O!&WQdO1G3^O#KrQ`O1G3^O#KzQdO'#HzO#L]QdO,5?cO#LhQ`O,5?cO#LmQ`O'#HYO7RQ`O'#HYO#LxQ`O'#IxO#MQQ`O,5=sOOQ#u1G3^1G3^O!.eQ`O1G3^O!.eQ`O1G3^O#MVQeO'#HbO#MgQdO,5>tOOQ#u1G3b1G3bOOQ#u1G3V1G3VO!-xQ`O1G3VO!1UQ`O1G3VOOO#u1G/x1G/xO*kQaO7+%sO#MuQdO7+%sOOQS7+&[7+&[O$ bQ`O,5>yO>UQaO,5;`O$ iQ`O,5;aO$#OQaO'#HfO$#YQ`O,5>zOOQS1G0y1G0yO$#bQ`O'#EYO$#gQ`O'#IXO$#oQ`O,5:sOOQS1G0e1G0eO$#tQ`O1G0eO$#yQ`O1G0iO9yQaO1G0iOOQO,5>O,5>OOOQO-E;b-E;bOOQS7+&O7+&OO>UQaO,5;SO$%`QaO'#HeO$%jQ`O,5>xOOQS1G0m1G0mO$%rQ`O1G0mOOQS,5>R,5>ROOQS-E;e-E;eO$%wQdO7+&hO$'yQtO1G1RO$(WQdO7+%}OOQS1G0i1G0iOOQO,5>U,5>UOOQO-E;h-E;hOOQ#u7+(o7+(oO!&WQdO7+(oOOQ#u7+(t7+(tO#KmQ`O7+(tO0aQ`O7+(tOOQ#u7+(q7+(qO!-xQ`O7+(qO!1UQ`O7+(qO!1RQ`O7+(qO$)sQ`O,5<ZO$*OQ`O,5<ZO$*WQ`O,5<_O$*]QpO,5<ZO>UQaO,5<ZOOQO,5<_,5<_O$*kQpO,5<`O$*sQ`O,5<`O$+OQ`O'#HkO$+iQ`O,5?POOQS1G1t1G1tO$+qQpO7+'^O$+yQ`O'#FuO$,UQ`O7+'^OOQS7+'^7+'^O0aQ`O7+'^O#6yQ`O7+'^O$,^QdO7+*aO0aQ`O7+*aO$,lQ`O7+'^O*kQaO7+'hO0aQ`O7+'hO$,wQ`O7+'hO$-PQdO1G2VOOQS,5>],5>]OOQS-E;o-E;oO$.iQdO7+'hO$.yQpO7+'hO$/RQdO'#IiOOQO,5<e,5<eOOQO,5<f,5<fO$/dQpO'#GOO$/lQ`O'#GOOOQO'#Ik'#IkOOQO'#Ho'#HoO$0]Q`O'#GOO<_Q`O'#F|O!&WQdO'#GOO!.YQdO'#GQO7RQ`O'#GROOQO'#Ij'#IjOOQO'#Hn'#HnO$0yQ`O,5<gOOQ#y,5<g,5<gOOQS7+'i7+'iO!-xQ`O7+'iO!1UQ`O7+'iOOOQ1G2d1G2dO$1pO`O1G2dO$1uO!bO1G2eO$2TO`O'#G`O$2YO`O1G2eOOOQ1G2h1G2hO$2_QaO,5=PO,zQ`O'#HtO$2xQ$VO7+(UOhQaO7+(UO,zQ`O'#HuO$7xQ`O7+(UO!&WQdO7+(UO$8TQ`O7+(UO$8YQaO'#GhO$:iQ`O'#GiOOQO'#Hv'#HvO$:qQ`O,5=ROOQ#u,5=R,5=RO$:|Q`O,5=UO!&WQdO7+(WO!&WQdO7+(]O!&WQdO7+(_O$;XQaO1G2uO$;`Q`O1G2uO$;eQaO1G2uO!&WQdO7+(`O9yQaO1G2xO!&WQdO7+(cO0aQ`O'#GyO9oQ`O,5>dOOQ#u,5>d,5>dOOQ#u-E;v-E;vO$;lQaO7+(lO$<TQdO,5>cOOQS-E;u-E;uO!&WQdO7+(nO$=mQdO1G2TOOQS,5>[,5>[OOQS-E;n-E;nOOQ#u7+(r7+(rO$?nQ`O'#GQO$?uQ`O'#GQO$@ZQ`O'#HUOOQO'#Hy'#HyO$@`Q`O,5=oOOQ#u,5=o,5=oO$@gQpO7+(tOOQ#u7+(x7+(xO!&WQdO7+(xO$@rQdO,5>fOOQS-E;x-E;xO$AQQdO1G4}O$A]Q`O,5=tO$AbQ`O,5=tO$AmQ`O'#H{O$BRQ`O,5?dOOQS1G3_1G3_O#KrQ`O7+(xO$BZQdO,5=|OOQS-E;`-E;`O$CvQdO<<I_OOQS1G4e1G4eO$EcQ`O1G0zOOQO,5>Q,5>QOOQO-E;d-E;dO$8YQaO,5:tO$FxQaO'#HcO$GVQ`O,5>sOOQS1G0_1G0_OOQS7+&P7+&PO$G_Q`O7+&TO$HtQ`O1G0nO$JZQ`O,5>POOQO,5>P,5>POOQO-E;c-E;cOOQS7+&X7+&XOOQS7+&T7+&TOOQ#u<<LZ<<LZOOQ#u<<L`<<L`O$@gQpO<<L`OOQ#u<<L]<<L]O!-xQ`O<<L]O!1UQ`O<<L]O>UQaO1G1uO$KsQ`O1G1uO$LOQ`O1G1yOOQO1G1y1G1yO$LTQ`O1G1uO$L]Q`O1G1uO$MrQ`O1G1zO>UQaO1G1zOOQO,5>V,5>VOOQO-E;i-E;iOOQS<<Jx<<JxO$M}Q`O'#IhO$NVQ`O'#IhO$N[Q`O,5<aO0aQ`O<<JxO$+qQpO<<JxO$NaQ`O<<JxO0aQ`O<<M{O$NiQtO<<M{O#6yQ`O<<JxO$NwQdO<<KSO% XQpO<<KSO*kQaO<<KSO0aQ`O<<KSO% aQdO'#HmO% xQdO,5?TO!&WQdO,5<jO$/dQpO,5<jO%!ZQ`O,5<jO<_Q`O,5<hO!.YQdO,5<lOOQO-E;m-E;mO!&WQdO,5<hOOQO,5<j,5<jOOQO,5<l,5<lO%!tQdO,5<mOOQO-E;l-E;lOOQ#y1G2R1G2ROOQS<<KT<<KTO!-xQ`O<<KTOOOQ7+(O7+(OO%#PO`O7+(POOOO,5<z,5<zOOOQ7+(P7+(POhQaO,5>`OOQ#u-E;r-E;rOhQaO<<KpOOQ#u<<Kp<<KpO$8TQ`O,5>aOOQO-E;s-E;sO!&WQdO<<KpO$8TQ`O<<KpO%#UQ`O<<KpO%#ZQ`O,5=SO%$pQaO,5=TOOQO-E;t-E;tOOQ#u1G2m1G2mOOQ#u<<Kr<<KrOOQ#u<<Kw<<KwOOQ#u<<Ky<<KyOOQT7+(a7+(aO%%QQ`O7+(aO%%VQaO7+(aO%%^Q`O7+(aOOQ#u<<Kz<<KzO%%cQ`O7+(dO%&xQ`O7+(dOOQ#u<<K}<<K}O%&}QpO,5=eOOQ#u1G4O1G4OO%'YQ`O<<LWOOQ#u<<LY<<LYO$?uQ`O,5<lO%'_Q`O,5=pO%'dQdO,5=pOOQO-E;w-E;wOOQ#u1G3Z1G3ZO#KmQ`O<<L`OOQ#u<<Ld<<LdO%'oQ`O1G4QO%'tQdO7+*iOOQO1G3`1G3`O%(PQ`O1G3`O%(UQ`O'#HZO7RQ`O'#HZOOQO,5>g,5>gOOQO-E;y-E;yO!&WQdO<<LdO%(aQ`O1G0`OOQO,5=},5=}OOQO-E;a-E;aO>UQaO,5;TOOQ#uANAzANAzO#KmQ`OANAzOOQ#uANAwANAwO!-xQ`OANAwO%)vQ`O7+'aO>UQaO7+'aOOQO7+'e7+'eO%+]Q`O7+'aO%+hQ`O7+'eO>UQaO7+'fO%+mQ`O7+'fO%-SQ`O'#HlO%-bQ`O,5?SO%-bQ`O,5?SOOQO1G1{1G1{O$+qQpOAN@dOOQSAN@dAN@dO0aQ`OAN@dO%-jQtOANCgO%-xQ`OAN@dO*kQaOAN@nO%.QQdOAN@nO%.bQpOAN@nOOQS,5>X,5>XOOQS-E;k-E;kOOQO1G2U1G2UO!&WQdO1G2UO$/dQpO1G2UO<_Q`O1G2SO!.YQdO1G2WO!&WQdO1G2SOOQO1G2W1G2WOOQO1G2S1G2SO%.jQaO'#GSOOQO1G2X1G2XOOQSAN@oAN@oOOOQ<<Kk<<KkOOQ#u1G3z1G3zOOQ#uANA[ANA[OOQO1G3{1G3{O%0iQ`OANA[O!&WQdOANA[O%0nQaO1G2nO%1OQaO1G2oOOQT<<K{<<K{O%1`Q`O<<K{O%1eQaO<<K{O*kQaO,5=_OOQT<<LO<<LOOOQO1G3P1G3PO%1lQ`O1G3PO!+WQeOANArO%1qQdO1G3[OOQO1G3[1G3[O%1|Q`O1G3[OOQS7+)l7+)lOOQO7+(z7+(zO%2UQ`O,5=uO%2ZQ`O,5=uOOQ#uANBOANBOO%2fQ`O1G0oOOQ#uG27fG27fOOQ#uG27cG27cO%3{Q`O<<J{O>UQaO<<J{OOQO<<KP<<KPO%5bQ`O<<KQOOQO,5>W,5>WO%6wQ`O,5>WOOQO-E;j-E;jO%6|Q`O1G4nOOQSG26OG26OO$+qQpOG26OO0aQ`OG26OO%7UQdOG26YO*kQaOG26YOOQO7+'p7+'pO!&WQdO7+'pO!&WQdO7+'nOOQO7+'r7+'rOOQO7+'n7+'nO%7fQ`OLD+tO%8uQ`O'#E}O%9PQ`O'#IZO!&WQdO'#HrO%:|QaO,5<nOOQO,5<n,5<nO!&WQdOG26vOOQ#uG26vG26vO%<{QaO7+(YOOQTANAgANAgO%=]Q`OANAgO%=bQ`O1G2yOOQO7+(k7+(kOOQ#uG27^G27^O%=iQ`OG27^OOQO7+(v7+(vO%=nQ`O7+(vO!&WQdO7+(vOOQO1G3a1G3aO%=vQ`O1G3aO%={Q`OAN@gOOQO1G3r1G3rOOQSLD+jLD+jO$+qQpOLD+jO%?bQdOLD+tOOQO<<K[<<K[OOQO<<KY<<KYO%?rQ`O,5<oO%?wQ`O,5<pOOQP,5>^,5>^OOQP-E;p-E;pOOQO1G2Y1G2YOOQ#uLD,bLD,bOOQTG27RG27RO!&WQdOLD,xO!&WQdO<<LbOOQO<<Lb<<LbOOQO7+({7+({OOQS!$( U!$( UOOQS1G2Z1G2ZOOQS1G2[1G2[O%@PQdO1G2[OOQ#u!$(!d!$(!dOOQOANA|ANA|OOQS7+'v7+'vO%@[Q`O'#E{O%@[Q`O'#E{O%@aQ`O,5;gO%@fQdO,5<cO%BbQaO,5:}O*kQaO1G0iO%BiQaO'#FwO#.YQaO'#GVO#.YQaO'#GYO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO%BpQdO'#I]O%D`QdO'#I]O#.YQaO'#EaO#.YQaO'#I]O%FbQaO,5:wO#.YQaO,5;nO#.YQaO,5;pO%FiQdO,5<PO%HeQdO,5<QO%JaQdO,5<RO%L]QdO,5<SO%NXQdO,5<SO%NoQdO,5<VO&!kQdO,5<tO#.YQaO1G0XO&$gQdO1G1]O&&cQdO1G1]O&(_QdO1G1]O&*ZQdO1G1]O&,VQdO1G1]O&.RQdO1G1]O&/}QdO1G1]O&1yQdO1G1]O&3uQdO1G1]O&5qQdO1G1]O&7mQdO1G1]O&9iQdO1G1]O&;eQdO1G1]O&=aQdO1G1]O&?]QdO1G1]O&AXQdO,5:{O&CTQdO,5>wO&EPQdO1G0cO#.YQaO1G0cO&F{QdO1G1YO&HwQdO1G1[O#.YQaO1G1|O#.YQaO7+%sO&JsQdO7+%sO&LoQdO7+%}O#.YQaO7+'hO&NkQdO7+'hO'!gQdO<<I_O'$cQdO<<KSO#.YQaO<<KSO#.YQaOAN@nO'&_QdOAN@nO'(ZQdOG26YO#.YQaOG26YO'*VQdOLD+tO',RQaO,5:}O'.QQaO1G0iO'/|QdO'#IWO'0aQeO'#FUO'4aQeO'#FUO#.YQaO'#FeO'.QQaO'#FeO#.YQaO'#FfO'.QQaO'#FfO#.YQaO'#FgO'.QQaO'#FgO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FkO'.QQaO'#FkO'8gQaO,5:mO'8nQ`O,5<bO'8vQ`O1G0XO'.QQaO1G0|O':YQ`O1G1|O':bQ`O7+'hO':jQpO7+'hO':rQpO<<KSO':zQpOAN@nO';SQaO'#FwO'.QQaO'#GVO'.QQaO'#GYO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO'#EaO'.QQaO'#I]O'=RQaO,5:wO'.QQaO,5;nO'.QQaO,5;pO'?QQdO,5<PO'ASQdO,5<QO'CUQdO,5<RO'EWQdO,5<SO'GYQdO,5<SO'GvQdO,5<VO'IxQdO,5<tO'.QQaO1G0XO'KzQdO1G1]O'M|QdO1G1]O(!OQdO1G1]O($QQdO1G1]O(&SQdO1G1]O((UQdO1G1]O(*WQdO1G1]O(,YQdO1G1]O(.[QdO1G1]O(0^QdO1G1]O(2`QdO1G1]O(4bQdO1G1]O(6dQdO1G1]O(8fQdO1G1]O(:hQdO1G1]O(<jQdO,5:{O(>lQdO,5>wO(@nQdO1G0cO'.QQaO1G0cO(BpQdO1G1YO(DrQdO1G1[O'.QQaO1G1|O'.QQaO7+%sO(FtQdO7+%sO(HvQdO7+%}O'.QQaO7+'hO(JxQdO7+'hO(LzQdO<<I_O(N|QdO<<KSO'.QQaO<<KSO'.QQaOAN@nO)#OQdOAN@nO)%QQdOG26YO'.QQaOG26YO)'SQdOLD+tO))UQaO,5:}O#.YQaO1G0iO))]Q`O'#FvO))eQpO,5;bO))mQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO))uQdO,5<cO)+wQdO'#I]O)-vQdO'#IWO).aQaO,5:mO).hQ`O,5<bO).pQ`O1G0XO)0SQ`O1G1|O)0[Q`O7+'hO)0dQpO7+'hO)0lQpO<<KSO)0tQpOAN@nO0aQ`O'#EvO9yQaO'#FeO9yQaO'#FfO9yQaO'#FgO9yQaO'#FhO9yQaO'#FhO9yQaO'#FkO)0|QaO'#FwO9yQaO'#GVO9yQaO'#GYO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO)1TQ`O'#FlO*kQaO'#EaO*kQaO'#I]O)1]QaO,5:wO9yQaO,5;nO9yQaO,5;pO)1dQdO,5<PO)3`QdO,5<QO)5[QdO,5<RO)7WQdO,5<SO)9SQdO,5<SO)9jQdO,5<VO);fQdO,5<cO)=bQdO,5<tO)?^Q`O'#IvO)@sQ`O'#IYO9yQaO1G0XO)BYQdO1G1]O)DUQdO1G1]O)FQQdO1G1]O)G|QdO1G1]O)IxQdO1G1]O)KtQdO1G1]O)MpQdO1G1]O* lQdO1G1]O*#hQdO1G1]O*%dQdO1G1]O*'`QdO1G1]O*)[QdO1G1]O*+WQdO1G1]O*-SQdO1G1]O*/OQdO1G1]O*0zQaO,5:}O*1RQdO,5:{O*1cQdO,5>wO*1sQaO'#HdO*2TQ`O,5>vO*2]QdO1G0cO9yQaO1G0cO*4XQdO1G1YO*6TQdO1G1[O9yQaO1G1|O>UQaO'#HwO*8PQ`O,5=[O*8XQaO'#HbO*8cQ`O,5>tO9yQaO7+%sO*8kQdO7+%sO*:gQ`O1G0iO>UQaO1G0iO*;|QdO7+%}O9yQaO7+'hO*=xQdO7+'hO*?tQ`O,5>cO*AZQ`O,5=|O*BpQdO<<I_O*DlQ`O7+&TO*FRQdO<<KSO9yQaO<<KSO9yQaOAN@nO*G}QdOAN@nO*IyQdOG26YO9yQaOG26YO*KuQdOLD+tO*MqQaO,5:}O9yQaO1G0iO*MxQdO'#I]O*NcQ`O'#FvO*NkQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO*NsQdO'#IWO+ ^QeO'#FUO+ zQaO'#FUO+#sQaO'#FUO+%`QaO'#FUO>UQaO'#FeO>UQaO'#FfO>UQaO'#FgO>UQaO'#FhO>UQaO'#FhO>UQaO'#FkO+'XQaO'#FwO>UQaO'#GVO>UQaO'#GYO+'`QaO,5:mO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO+'gQ`O'#I]O$8YQaO'#EaO+)PQaOG26YO$8YQaO'#I]O+*{Q`O'#I[O++TQaO,5:wO>UQaO,5;nO>UQaO,5;pO++[Q`O,5<PO+,wQ`O,5<QO+.dQ`O,5<RO+0PQ`O,5<SO+1lQ`O,5<SO+3XQ`O,5<VO+4tQ`O,5<bO+4|Q`O,5<cO+6iQ`O,5<tO+8UQ`O1G0XO>UQaO1G0XO+9hQ`O1G1]O+;TQ`O1G1]O+<pQ`O1G1]O+>]Q`O1G1]O+?xQ`O1G1]O+AeQ`O1G1]O+CQQ`O1G1]O+DmQ`O1G1]O+FYQ`O1G1]O+GuQ`O1G1]O+IbQ`O1G1]O+J}Q`O1G1]O+LjQ`O1G1]O+NVQ`O1G1]O, rQ`O1G1]O,#_Q`O1G0cO>UQaO1G0cO,$zQ`O1G1YO,&gQ`O1G1[O,(SQ`O1G1|O>UQaO1G1|O>UQaO7+%sO,([Q`O7+%sO,)wQ`O7+%}O>UQaO7+'hO,+dQ`O7+'hO,+lQ`O7+'hO,-XQpO7+'hO,-aQ`O<<I_O,.|Q`O<<KSO,0iQpO<<KSO>UQaO<<KSO>UQaOAN@nO,0qQ`OAN@nO,2^QpOAN@nO,2fQ`OG26YO>UQaOG26YO,4RQ`OLD+tO,5nQaO,5:}O>UQaO1G0iO,5uQ`O'#I]O$8YQaO'#FeO$8YQaO'#FfO$8YQaO'#FgO$8YQaO'#FhO$8YQaO'#FhO+)PQaO'#FhO$8YQaO'#FkO,6SQaO'#FwO,6ZQaO'#FwO$8YQaO'#GVO+)PQaO'#GVO$8YQaO'#GYO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO,8YQ`O'#FlO>UQaO'#EaO>UQaO'#I]O,8bQaO,5:wO,8iQaO,5:wO$8YQaO,5;nO+)PQaO,5;nO$8YQaO,5;pO,:hQ`O,5<PO,<TQ`O,5<QO,=pQ`O,5<RO,?]Q`O,5<SO,@xQ`O,5<SO,BeQ`O,5<SO,CtQ`O,5<VO,EaQ`O,5<cO%7fQ`O,5<cO,F|Q`O,5<tO$8YQaO1G0XO+)PQaO1G0XO,HiQ`O1G1]O,JUQ`O1G1]O,KeQ`O1G1]O,MQQ`O1G1]O,NaQ`O1G1]O- |Q`O1G1]O-#]Q`O1G1]O-$xQ`O1G1]O-&XQ`O1G1]O-'tQ`O1G1]O-)TQ`O1G1]O-*pQ`O1G1]O-,PQ`O1G1]O--lQ`O1G1]O-.{Q`O1G1]O-0hQ`O1G1]O-1wQ`O1G1]O-3dQ`O1G1]O-4sQ`O1G1]O-6`Q`O1G1]O-7oQ`O1G1]O-9[Q`O1G1]O-:kQ`O1G1]O-<WQ`O1G1]O-=gQ`O1G1]O-?SQ`O1G1]O-@cQ`O1G1]O-BOQ`O1G1]O-C_Q`O1G1]O-DzQ`O1G1]O-FZQ`O,5:{O-GvQ`O,5>wO-IcQ`O1G0cO-KOQ`O1G0cO$8YQaO1G0cO+)PQaO1G0cO-L_Q`O1G1YO-MzQ`O1G1YO. ZQ`O1G1[O$8YQaO1G1|O$8YQaO7+%sO+)PQaO7+%sO.!vQ`O7+%sO.$cQ`O7+%sO.%rQ`O7+%}O.'_Q`O7+%}O$8YQaO7+'hO.(nQ`O7+'hO.*ZQ`O<<I_O.+vQ`O<<I_O.-VQ`O<<KSO$8YQaO<<KSO$8YQaOAN@nO..rQ`OAN@nO.0_Q`OG26YO$8YQaOG26YO.1zQ`OLD+tO.3gQaO,5:}O.3nQaO,5:}O$8YQaO1G0iO+)PQaO1G0iO.5mQ`O'#I]O.7PQ`O'#I]O.:fQ`O'#IWO.:vQ`O'#FvO.;OQaO,5:mO.;VQ`O,5<bO.;_Q`O,5<bO!%WQ`O,5<bO.;gQ`O1G0XO.<yQ`O,5:{O.>fQ`O,5>wO.@RQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO.@ZQ`O7+'hO.@cQpO7+'hO.@kQpO<<KSO0aQ`O<<KSO.@sQpOAN@nO.@{Q`O'#IWO.A]Q`O'#IWO.CSQaO,5:mO.CZQaO,5:mO.CbQ`O,5<bO.CjQ`O7+'hO.CrQ`O1G0XO.EUQ`O1G0XO.FhQ`O1G1|O.FpQ`O7+'hO.FxQpO7+'hO.GQQpOAN@nO.GYQpO<<KSO.GbQpOAN@nO.GjQ`O'#FvO.GrQ`O'#FlO.GzQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO.HSQ`O'#FvO.H[Q`O,5<bO.HdQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O<<KSO0aQ`O7+'hO0aQ`O<<KSO.HlQ`O'#FlO.HtQ`O'#FlO.H|Q`O'#Fl",
        stateData: ".Ic~O!dOS!eOS&vOS!gQQ~O!iTO&wRO~OPgOQ|OS!lOU^OW}OX!XO[mO]!_O^!WO`![Oa!SOb!]Ok!dOm!lOowOp!TOq!UOsuOt!gOu!VOv!POxkOykO|!bO}`O!O]O!P!eO!QxO!R}O!TpO!UlO!VlO!W!YO!X!QO!YzO!Z!cO![!ZO!]!^O!^!fO!`!`O!a!RO!cjO!mWO!oXO!sYO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$drO$l!kO$zyO${!OO$}}O%O}O%V|O'g{O~O!g!mO~O&wRO!i!hX&p!hX&t!hX~O!i!pO~O!d!qO!e!qO!g!mO&t!tO&v!qO~PhO!n!vO~PhOT'VXz'VX!S'VX!b'VX!m'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX&s'VX~O!q!xO~P&sOT#TOz#RO!S#UO!b#VO!m#cO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO&s#cO~OPgOQ|OU^OW}O[mOowOs#hOxkOykO}`O!O]O!QxO!R}O!TpO!UlO!VlO!YzO!cjO!s#gO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$zyO${!OO$}}O%O}O%V|O'g{O~O!y[O~O!y#kO~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#S#oO#U#nO#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O#X'OP~O!}#sO~P-UO!y#tO~O#b#vO#daO#ebO~O#p#xO~O!s#yO~OU$PO!R$PO!s$OO!v#}O#p2XO~OT&zXz&zX!S&zX!b&zX!m&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX&s&zX!x&zX!n&zX~O#u$RO#w$SO~P0rOP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{OT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX~Or$UO#S6yO#U6xO~P2yO!s#gO#peO~OS$gO]$bOk$eOm$gOs$aO!`$cO$drO$l$fO~O!s$kO!y$hO#S$jO~Oo$mOs$lO#b$nO~O!y$hO#S$rO~O$l$tO~P*kOR$zO!o$yO#b$xO#e$yO&q$zO~O'f$|O~P8lO!y%RO~O!y%TO~O!s%VO~O!m#cO&s#cO~P*kO!oXO~O!y%_O~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O~O!y%cO~O!s%dO~O]$bO~O!s%hO~O!s%iO~O!s%jO~O!oXO!s#gO#peO~O]%rOs%rO!o%pO!s#gO#p%nO~O!s%vO~O!i%wO&t%wO&wRO~O&t%zO~PhO!n%{O~PhOPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!q%}O~P>UO#X&PO~P>UO!o&SO!s&RO#b&RO~OPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s&VO!y[O#U&WO#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!x'SP~PAOO!s&[O#b&[O~OT#TOz#RO!S#UO!b#VO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO~O!x&nO~PCqO!x'VX!}'VX#O'VX#X'VX!n'VXV'VX!q'VX#u'VX#w'VXw'VX~P&sO!y$hO#S&oO~Oo$mOs$lO~O!o&pO~O!}&sO#S;dO#U;cO!x'OP~P9yOT6iOz6gO!S6jO!b6kO!o!{O!v8sO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'PX#X'PX~O#O&tO~PGSO!}&wO#X'OX~O#X&yO~O!}'OO!x'QP~P9yO!n'PO~PCqO!m#oa!o#oa#S#oa#p#qX&s#oa!x#oa#O#oaw#oa~OT#oaz#oa!S#oa!b#oa!v#oa!y#oa#W#oa#`#oa#a#oa#s#oa#z#oa#{#oa#|#oa#}#oa$O#oa$Q#oa$R#oa$S#oa$T#oa$U#oa$V#oa$W#oa$z#oa!}#oa#X#oa!n#oaV#oa!q#oa#u#oa#w#oa~PIpO!s'RO~O!x'UO#l'SO~O!x'VX#l'VX#p#qX#S'VX#U'VX#b'VX!o'VX#O'VXw'VX!m'VX&s'VX~O#S'YO~P*kO!m$Xa&s$Xa!x$Xa!n$Xa~PCqO!m$Ya&s$Ya!x$Ya!n$Ya~PCqO!m$Za&s$Za!x$Za!n$Za~PCqO!m$[a&s$[a!x$[a!n$[a~PCqO!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO$z#dOT$[a!S$[a!b$[a!m$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a&s$[a!x$[a!n$[a~Oz#RO~PNyO!m$_a&s$_a!x$_a!n$_a~PCqO!y!}O!}$fX#X$fX~O!}'^O#X'ZX~O#X'`O~O!s$kO#S'aO~O]'cO~O!s'eO~O!s'fO~O$l'gO~O!`'mO#S'kO#U'lO#b'jO$drO!x'XP~P0aO!^'sO!oXO!q'rO~O!s'uO!y$hO~O!y$hO#S'wO~O!y$hO#S'yO~O#u'zO!m$sX!}$sX&s$sX~O!}'{O!m'bX&s'bX~O!m#cO&s#cO~O!q(PO#O(OO~O!m$ka&s$ka!x$ka!n$ka~PCqOl(ROw(SO!o(TO!y!}O~O!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO~OT$yaz$ya!S$ya!b$ya!m$ya!v$ya#S$ya#z$ya#{$ya#|$ya#}$ya$O$ya$Q$ya$R$ya$S$ya$T$ya$U$ya$V$ya$W$ya$z$ya&s$ya!x$ya!}$ya#O$ya#X$ya!n$ya!q$yaV$ya#u$ya#w$ya~P!'WO!m$|a&s$|a!x$|a!n$|a~PCqO#W([O#`(YO#a(YO&r(ZOR&gX!o&gX#b&gX#e&gX&q&gX'f&gX~O'f(_O~P8lO!q(`O~PhO!o(cO!q(dO~O!q(`O&s(gO~PhO!a(kO~O!m(lO~P9yOZ(wOn(xO~O!s(zO~OT6iOz6gO!S6jO!b6kO!v8sO!}({O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'jX&s'jX~P!'WO#u)PO~O!})QO!m'`X&s'`X~Ol(RO!o(TO~Ow(SO!o)WO!q)ZO~O!m#cO!oXO&s#cO~O!o%pO!s#yO~OV)aO!})_O!m'kX&s'kX~O])cOs)cO!s#gO#peO~O!o%pO!s#gO#p)hO~OT6iOz6gO!S6jO!b6kO!v8sO!})iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&|X&s&|X#O&|X~P!'WOl(ROw(SO!o(TO~O!i)oO&t)oO~OT8vOz8tO!S8wO!b8xO!q)pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#X)rO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!n)rO~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'TX!}'TX~P!'WOT'VXz'VX!S'VX!b'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX~O!q)tO!x'VX!}'VX~P!5xO!x#iX!}#iX~P>UO!})vO!x'SX~O!x)xO~O$z#dOT#yiz#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi$W#yi&s#yi!x#yi!}#yi#O#yi#X#yi!n#yi!q#yiV#yi#u#yi#w#yi~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi&s#yi!x#yi!n#yi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!b#VO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi~P!'WOz#RO$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi~P!'WO_)yO~P9yO!x)|O~O#S*PO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Ta#X#Ta#O#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'Pa#X'Pa#O'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WO#S#oO#U#nO!}&WX#X&WX~P9yO!}&wO#X'Oa~O#X*SO~OT6iOz6gO!S6jO!b6kO!v8sO!}*UO#O*TO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'QX~P!'WO!}*UO!x'QX~O!x*WO~O!m#oi!o#oi#S#oi#p#qX&s#oi!x#oi#O#oiw#oi~OT#oiz#oi!S#oi!b#oi!v#oi!y#oi#W#oi#`#oi#a#oi#s#oi#z#oi#{#oi#|#oi#}#oi$O#oi$Q#oi$R#oi$S#oi$T#oi$U#oi$V#oi$W#oi$z#oi!}#oi#X#oi!n#oiV#oi!q#oi#u#oi#w#oi~P#*zO#l'SO!x#ka#S#ka#U#ka#b#ka!o#ka#O#kaw#ka!m#ka&s#ka~OPgOQ|OU^OW}O[4OOo5xOs#hOx3zOy3zO}`O!O]O!Q2^O!R}O!T4UO!U3|O!V3|O!Y2`O!c3xO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4SO$]4QO$^4SO$aqO$z2_O${!OO$}}O%O}O%V|O'g{O~O#l#oa#U#oa#b#oa~PIpOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pi!S#Pi!b#Pi!m#Pi&s#Pi!x#Pi!n#Pi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#vi!S#vi!b#vi!m#vi&s#vi!x#vi!n#vi~P!'WO!m#xi&s#xi!x#xi!n#xi~PCqO!s#gO#peO!}&^X#X&^X~O!}'^O#X'Za~O!s'uO~Ow(SO!o)WO!q*fO~O!s*jO~O#S*lO#U*mO#b*kO#l'SO~O#S*lO#U*mO#b*kO$drO~P0aO#u*oO!x$cX!}$cX~O#U*mO#b*kO~O#b*pO~O#b*rO~P0aO!}*sO!x'XX~O!x*uO~O!y*wO~O!^*{O!oXO!q*zO~O!q*}O!o'ci!m'ci&s'ci~O!q+QO#O+PO~O#b$nO!m&eX!}&eX&s&eX~O!}'{O!m'ba&s'ba~OT$kiz$ki!S$ki!b$ki!m$ki!o$ki!v$ki!y$ki#S$ki#W$ki#`$ki#a$ki#s$ki#u#fa#w#fa#z$ki#{$ki#|$ki#}$ki$O$ki$Q$ki$R$ki$S$ki$T$ki$U$ki$V$ki$W$ki$z$ki&s$ki!x$ki!}$ki#O$ki#X$ki!n$ki!q$kiV$ki~OS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n+hO#b$nO$aqO$drO~P0aO!s+lO~O#W+nO#`+mO#a+mO~O!s+pO#b+pO$}+pO%T+oO~O!n+qO~PCqOc%XXd%XXh%XXj%XXf%XXg%XXe%XX~PhOc+uOd+sOP%WiQ%WiS%WiU%WiW%WiX%Wi[%Wi]%Wi^%Wi`%Wia%Wib%Wik%Wim%Wio%Wip%Wiq%Wis%Wit%Wiu%Wiv%Wix%Wiy%Wi|%Wi}%Wi!O%Wi!P%Wi!Q%Wi!R%Wi!T%Wi!U%Wi!V%Wi!W%Wi!X%Wi!Y%Wi!Z%Wi![%Wi!]%Wi!^%Wi!`%Wi!a%Wi!c%Wi!m%Wi!o%Wi!s%Wi!y%Wi#W%Wi#b%Wi#d%Wi#e%Wi#p%Wi$T%Wi$]%Wi$^%Wi$a%Wi$d%Wi$l%Wi$z%Wi${%Wi$}%Wi%O%Wi%V%Wi&p%Wi'g%Wi&t%Wi!n%Wih%Wij%Wif%Wig%WiY%Wi_%Wii%Wie%Wi~Oc+yOd+vOh+xO~OY+zO_+{O!n,OO~OY+zO_+{Oi%^X~Oi,QO~Oj,RO~O!m,TO~P9yO!m,VO~Of,WO~OT6iOV,XOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOg,YO~O!y,ZO~OZ(wOn(xOP%liQ%liS%liU%liW%liX%li[%li]%li^%li`%lia%lib%lik%lim%lio%lip%liq%lis%lit%liu%liv%lix%liy%li|%li}%li!O%li!P%li!Q%li!R%li!T%li!U%li!V%li!W%li!X%li!Y%li!Z%li![%li!]%li!^%li!`%li!a%li!c%li!m%li!o%li!s%li!y%li#W%li#b%li#d%li#e%li#p%li$T%li$]%li$^%li$a%li$d%li$l%li$z%li${%li$}%li%O%li%V%li&p%li'g%li&t%li!n%lic%lid%lih%lij%lif%lig%liY%li_%lii%lie%li~O#u,_O~O!}({O!m%da&s%da~O!x,bO~O!s%dO!m&dX!}&dX&s&dX~O!})QO!m'`a&s'`a~OS+^OY,iOm+^Os$aO!^+dO!_+^O!`+^O$aqO$drO~O!n,lO~P#JwO!o)WO~O!o%pO!s'RO~O!s#gO#peO!m&nX!}&nX&s&nX~O!})_O!m'ka&s'ka~O!s,rO~OV,sO!n%|X!}%|X~O!},uO!n'lX~O!n,wO~O!m&UX!}&UX&s&UX#O&UX~P9yO!})iO!m&|a&s&|a#O&|a~Oz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq&s!uq!x!uq!n!uq~P!'WO!n,|O~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#ia!}#ia~P!'WO!x&YX!}&YX~PAOO!})vO!x'Sa~O#O-QO~O!}-RO!n&{X~O!n-TO~O!x-UO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vi#X#Vi~P!'WO!x&XX!}&XX~P9yO!}*UO!x'Qa~O!x-[O~OT#jqz#jq!S#jq!b#jq!m#jq!v#jq#S#jq#u#jq#w#jq#z#jq#{#jq#|#jq#}#jq$O#jq$Q#jq$R#jq$S#jq$T#jq$U#jq$V#jq$W#jq$z#jq&s#jq!x#jq!}#jq#O#jq#X#jq!n#jq!q#jqV#jq~P!'WO#l#oi#U#oi#b#oi~P#*zOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pq!S#Pq!b#Pq!m#Pq&s#Pq!x#Pq!n#Pq~P!'WO#u-dO!x$ca!}$ca~O#U-fO#b-eO~O#b-gO~O#S-hO#U-fO#b-eO#l'SO~O#b-jO#l'SO~O#u-kO!x$ha!}$ha~O!`'mO#S'kO#U'lO#b'jO$drO!x&_X!}&_X~P0aO!}*sO!x'Xa~O!oXO#l'SO~O#S-pO#b-oO!x'[P~O!oXO!q-rO~O!q-uO!o'cq!m'cq&s'cq~O!^-wO!oXO!q-rO~O!q-{O#O-zO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$si!}$si&s$si~P!'WO!m$jq&s$jq!x$jq!n$jq~PCqO#O-zO#l'SO~O!}-|Ow']X!o']X!m']X&s']X~O#b$nO#l'SO~OS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO$drO~P0aOS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO~P0aOS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n.ZO#b$nO$aqO$drO~P0aO!s.^O~O!s._O#b._O$}._O%T+oO~O$}.`O~O#X.aO~Oc%Xad%Xah%Xaj%Xaf%Xag%Xae%Xa~PhOc.dOd+sOP%WqQ%WqS%WqU%WqW%WqX%Wq[%Wq]%Wq^%Wq`%Wqa%Wqb%Wqk%Wqm%Wqo%Wqp%Wqq%Wqs%Wqt%Wqu%Wqv%Wqx%Wqy%Wq|%Wq}%Wq!O%Wq!P%Wq!Q%Wq!R%Wq!T%Wq!U%Wq!V%Wq!W%Wq!X%Wq!Y%Wq!Z%Wq![%Wq!]%Wq!^%Wq!`%Wq!a%Wq!c%Wq!m%Wq!o%Wq!s%Wq!y%Wq#W%Wq#b%Wq#d%Wq#e%Wq#p%Wq$T%Wq$]%Wq$^%Wq$a%Wq$d%Wq$l%Wq$z%Wq${%Wq$}%Wq%O%Wq%V%Wq&p%Wq'g%Wq&t%Wq!n%Wqh%Wqj%Wqf%Wqg%WqY%Wq_%Wqi%Wqe%Wq~Oc.iOd+vOh.hO~O!q(`O~OP6]OQ|OU^OW}O[:fOo>ROs#hOx:dOy:dO}`O!O]O!Q:kO!R}O!T:jO!U:eO!V:eO!Y:oO!c8gO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:hO$]:gO$^:hO$aqO$z:mO${!OO$}}O%O}O%V|O'g{O~O!m.lO!q.lO~OY+zO_+{O!n.nO~OY+zO_+{Oi%^a~O!x.rO~P>UO!m.tO~O!m.tO~P9yOQ|OW}O!R}O$}}O%O}O%V|O'g{O~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&ka!}&ka&s&ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$qi!}$qi&s$qi~P!'WOS+^Om+^Os$aO!_+^O!`+^O$aqO$drO~OY/PO~P$?VOS+^Om+^Os$aO!_+^O!`+^O$aqO~O!s/QO~O!n/SO~P#JwOw(SO!o)WO#l'SO~OV/VO!m&na!}&na&s&na~O!})_O!m'ki&s'ki~O!s/XO~OV/YO!n%|a!}%|a~O]/[Os/[O!s#gO#peO!n&oX!}&oX~O!},uO!n'la~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&Ua!}&Ua&s&Ua#O&Ua~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy&s!uy!x!uy!n!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#hi!}#hi~P!'WO_)yO!n&VX!}&VX~P9yO!}-RO!n&{a~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vq#X#Vq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#[i!}#[i~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O/cO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x&Xa!}&Xa~P!'WO#u/iO!x$ci!}$ci~O#b/jO~O#U/lO#b/kO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$ci!}$ci~P!'WO#u/mO!x$hi!}$hi~O!}/oO!x'[X~O#b/qO~O!x/rO~O!oXO!q/uO~O#l'SO!o'cy!m'cy&s'cy~O!m$jy&s$jy!x$jy!n$jy~PCqO#O/xO#l'SO~O!s#gO#peOw&aX!o&aX!}&aX!m&aX&s&aX~O!}-|Ow']a!o']a!m']a&s']a~OU$PO]0QO!R$PO!s$OO!v#}O#b$nO#p2XO~P$?uO!m#cO!o0VO&s#cO~O#X0YO~Oh0_O~OT:tOz:pO!S:vO!b:xO!m0`O!q0`O!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO~P!'WOY%]a_%]a!n%]ai%]a~PhO!x0bO~O!x0bO~P>UO!m0dO~OT6iOz6gO!S6jO!b6kO!v8sO!x0fO#O0eO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WO!x0fO~O!x0gO#b0hO#l'SO~O!x0iO~O!s0jO~O!m#cO#u0lO&s#cO~O!s0mO~O!})_O!m'kq&s'kq~O!s0nO~OV0oO!n%}X!}%}X~OT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!n!|i!}!|i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cq!}$cq~P!'WO#u0vO!x$cq!}$cq~O#b0wO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hq!}$hq~P!'WO#S0zO#b0yO!x&`X!}&`X~O!}/oO!x'[a~O#l'SO!o'c!R!m'c!R&s'c!R~O!oXO!q1PO~O!m$j!R&s$j!R!x$j!R!n$j!R~PCqO#O1RO#l'SO~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1^O!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOh1_O~OY%[i_%[i!n%[ii%[i~PhOY%]i_%]i!n%]ii%]i~PhO!x1bO~O!x1bO~P>UO!x1eO~O!m#cO#u1iO&s#cO~O$}1jO%V1jO~O!s1kO~OV1lO!n%}a!}%}a~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#]i!}#]i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cy!}$cy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hy!}$hy~P!'WO#b1nO~O!}/oO!x'[i~O!m$j!Z&s$j!Z!x$j!Z!n$j!Z~PCqOT:uOz:qO!S:wO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO~P!'WOV1uO{1tO~P!5xOV1uO{1tOT&}Xz&}X!S&}X!b&}X!o&}X!v&}X!y&}X#S&}X#W&}X#`&}X#a&}X#s&}X#u&}X#w&}X#z&}X#{&}X#|&}X#}&}X$O&}X$Q&}X$R&}X$S&}X$T&}X$U&}X$V&}X$W&}X$z&}X~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1xO!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOY%[q_%[q!n%[qi%[q~PhO!x1zO~O!x%gi~PCqOe1{O~O$}1|O%V1|O~O!s2OO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$c!R!}$c!R~P!'WO!m$j!c&s$j!c!x$j!c!n$j!c~PCqO!s2QO~O!`2SO!s2RO~O!s2VO!m$xi&s$xi~O!s'WO~O!s*]O~OT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$ka#u$ka#w$ka&s$ka!x$ka!n$ka!q$ka#X$ka!}$ka~P!'WO#S2]O~P*kO$l$tO~P#.YOT6iOz6gO!S6jO!b6kO!v8sO#O2[O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX&s'PX!x'PX!n'PX~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O3uO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'PX#X'PX#u'PX#w'PX!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~P!'WO#S3dO~P#.YOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Xa#u$Xa#w$Xa&s$Xa!x$Xa!n$Xa!q$Xa#X$Xa!}$Xa~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Ya#u$Ya#w$Ya&s$Ya!x$Ya!n$Ya!q$Ya#X$Ya!}$Ya~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Za#u$Za#w$Za&s$Za!x$Za!n$Za!q$Za#X$Za!}$Za~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$[a#u$[a#w$[a&s$[a!x$[a!n$[a!q$[a#X$[a!}$[a~P!'WOz2aO#u$[a#w$[a!q$[a#X$[a!}$[a~PNyOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$_a#u$_a#w$_a&s$_a!x$_a!n$_a!q$_a#X$_a!}$_a~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$|a#u$|a#w$|a&s$|a!x$|a!n$|a!q$|a#X$|a!}$|a~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#Ta#u#Ta#w#Ta&s#Ta!x#Ta!n#Ta!q#Ta#X#Ta!}#Ta~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m'Pa#u'Pa#w'Pa&s'Pa!x'Pa!n'Pa!q'Pa#X'Pa!}'Pa~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pi!S#Pi!b#Pi!m#Pi#u#Pi#w#Pi&s#Pi!x#Pi!n#Pi!q#Pi#X#Pi!}#Pi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#vi!S#vi!b#vi!m#vi#u#vi#w#vi&s#vi!x#vi!n#vi!q#vi#X#vi!}#vi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#xi#u#xi#w#xi&s#xi!x#xi!n#xi!q#xi#X#xi!}#xi~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq#u!uq#w!uq&s!uq!x!uq!n!uq!q!uq#X!uq!}!uq~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pq!S#Pq!b#Pq!m#Pq#u#Pq#w#Pq&s#Pq!x#Pq!n#Pq!q#Pq#X#Pq!}#Pq~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jq#u$jq#w$jq&s$jq!x$jq!n$jq!q$jq#X$jq!}$jq~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy#u!uy#w!uy&s!uy!x!uy!n!uy!q!uy#X!uy!}!uy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jy#u$jy#w$jy&s$jy!x$jy!n$jy!q$jy#X$jy!}$jy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!R#u$j!R#w$j!R&s$j!R!x$j!R!n$j!R!q$j!R#X$j!R!}$j!R~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!Z#u$j!Z#w$j!Z&s$j!Z!x$j!Z!n$j!Z!q$j!Z#X$j!Z!}$j!Z~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!c#u$j!c#w$j!c&s$j!c!x$j!c!n$j!c!q$j!c#X$j!c!}$j!c~P!'WOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S3vO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lO#u2uO#w2vO!q&zX#X&zX!}&zX~P0rOP6]OU^O[4POo8^Or2wOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S2tO#U2sO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX!q#xX#X#xX!}#xX~P$;lOP6]OU^O[4POo8^Or4xOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S4uO#U4tO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!o#xX!v#xX!}#xX#O#xX#X#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!m#xX&s#xX!x#xX!n#xXV#xX!q#xX~P$;lO!q3PO~P>UO!q5}O#O3gO~OT8vOz8tO!S8wO!b8xO!q3hO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q6OO#O3kO~O!q6PO#O3oO~O#O3oO#l'SO~O#O3pO#l'SO~O#O3sO#l'SO~OP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$l$tO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S5eO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Xa#O$Xa#X$Xa#u$Xa#w$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Ya#O$Ya#X$Ya#u$Ya#w$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Za#O$Za#X$Za#u$Za#w$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$[a#O$[a#X$[a#u$[a#w$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz4dO!}$[a#O$[a#X$[a#u$[a#w$[aV$[a!q$[a~PNyOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$_a#O$_a#X$_a#u$_a#w$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$|a#O$|a#X$|a#u$|a#w$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#Ta#O#Ta#X#Ta#u#Ta#w#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'Pa#O'Pa#X'Pa#u'Pa#w'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi#u#Pi#w#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi#u#vi#w#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#xi#O#xi#X#xi#u#xi#w#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq#u!uq#w!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq#u#Pq#w#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jq#O$jq#X$jq#u$jq#w$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy#u!uy#w!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jy#O$jy#X$jy#u$jy#w$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!R#O$j!R#X$j!R#u$j!R#w$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!Z#O$j!Z#X$j!Z#u$j!Z#w$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!c#O$j!c#X$j!c#u$j!c#w$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S5wO~P#.YO!y$hO#S5{O~O!x4ZO#l'SO~O!y$hO#S5|O~OT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$ka#O$ka#X$ka#u$ka#w$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O5vO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!m'PX#u'PX#w'PX&s'PX!x'PX!n'PX!q'PX#X'PX!}'PX~P!'WO#u4vO#w4wO!}&zX#O&zX#X&zXV&zX!q&zX~P0rO!q5QO~P>UO!q8bO#O5hO~OT8vOz8tO!S8wO!b8xO!q5iO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q8cO#O5lO~O!q8dO#O5pO~O#O5pO#l'SO~O#O5qO#l'SO~O#O5tO#l'SO~O$l$tO~P9yOo5zOs$lO~O#S7oO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Xa#O$Xa#X$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Ya#O$Ya#X$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Za#O$Za#X$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$[a#O$[a#X$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz6gO!}$[a#O$[a#X$[aV$[a!q$[a~PNyOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$_a#O$_a#X$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$ka#O$ka#X$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$|a#O$|a#X$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7sO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'jX~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7uO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&|X~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WO#S7zO~P>UO!m#Ta&s#Ta!x#Ta!n#Ta~PCqO!m'Pa&s'Pa!x'Pa!n'Pa~PCqO#S;dO#U;cO!x&WX!}&WX~P9yO!}7lO!x'Oa~Oz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#xi#O#xi#X#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WO!}7sO!x%da~O!x&UX!}&UX~P>UO!}7uO!x&|a~Oz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vi!}#Vi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jq#O$jq#X$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&ka!}&ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&Ua!}&Ua~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vq!}#Vq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jy#O$jy#X$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!R#O$j!R#X$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!Z#O$j!Z#X$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!c#O$j!c#X$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S8[O~P9yO#O8ZO!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~PGSO!y$hO#S8`O~O!y$hO#S8aO~O#u6zO#w6{O!}&zX#O&zX#X&zXV&zX!q&zX~P0rOr6|O#S#oO#U#nO!}#xX#O#xX#X#xXV#xX!q#xX~P2yOr;iO#S9XO#U9VOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!n#xX!}#xX~P9yOr9WO#S9WO#U9WOT#xXz#xX!S#xX!b#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX~P9yOr9]O#S;dO#U;cOT#xXz#xX!S#xX!b#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX#X#xX!x#xX!}#xX~P9yO$l$tO~P>UO!q7XO~P>UOT6iOz6gO!S6jO!b6kO!v8sO#O7iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'PX!}'PX~P!'WOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lO!}7lO!x'OX~O#S9yO~P>UOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Xa#X$Xa!x$Xa!}$Xa~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Ya#X$Ya!x$Ya!}$Ya~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Za#X$Za!x$Za!}$Za~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$[a#X$[a!x$[a!}$[a~P!'WOz8tO$z#dOT$[a!S$[a!b$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a#X$[a!x$[a!}$[a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$_a#X$_a!x$_a!}$_a~P!'WO!q=dO#O7rO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$ka#X$ka!x$ka!}$ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$|a#X$|a!x$|a!}$|a~P!'WOT8vOz8tO!S8wO!b8xO!q7wO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi#X#yi!x#yi!}#yi~P!'WOz8tO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pi!S#Pi!b#Pi!q#Pi#X#Pi!x#Pi!}#Pi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#vi!S#vi!b#vi!q#vi#X#vi!x#vi!}#vi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q#xi#X#xi!x#xi!}#xi~P!'WO!q=eO#O7|O~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uq!S!uq!b!uq!q!uq!v!uq#X!uq!x!uq!}!uq~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pq!S#Pq!b#Pq!q#Pq#X#Pq!x#Pq!}#Pq~P!'WO!q=iO#O8TO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jq#X$jq!x$jq!}$jq~P!'WO#O8TO#l'SO~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uy!S!uy!b!uy!q!uy!v!uy#X!uy!x!uy!}!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jy#X$jy!x$jy!}$jy~P!'WO#O8UO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!R#X$j!R!x$j!R!}$j!R~P!'WO#O8XO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!Z#X$j!Z!x$j!Z!}$j!Z~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!c#X$j!c!x$j!c!}$j!c~P!'WO#S:bO~P>UO#O:aO!q'PX!x'PX~PGSO$l$tO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$l$tO$z:nO${!OO~P$;lOo8_Os$lO~O#S<jO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S<kO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Xa!q$Xa!n$Xa!}$Xa~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Ya!q$Ya!n$Ya!}$Ya~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Za!q$Za!n$Za!}$Za~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$[a!q$[a!n$[a!}$[a~P!'WOz:pO$z#dOT$[a!S$[a!b$[a!m$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a!n$[a!}$[a~P!'WOz:qO$z#dOT$[a!S$[a!b$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$_a!q$_a!n$_a!}$_a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$ka!q$ka!n$ka!}$ka~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$|a!q$|a!n$|a!}$|a~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi!n#yi!}#yi~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi~P!'WOT:tOz:pO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi~P!'WOT:tOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi!b#yi~P!'WOz:pO#S#QO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi!n#yi!}#yi~P!'WOz:qO#S#QO#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi~P!'WOz:pO#S#QO#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi!n#yi!}#yi~P!'WOz:qO#S#QO#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi~P!'WOz:pO#S#QO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi!n#yi!}#yi~P!'WOz:qO#S#QO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi~P!'WOz:pO#S#QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO#S#QO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!n#yi!}#yi~P!'WOz:qO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi~P!'WOz:pO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi~P!'WOz:pO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!n#yi!}#yi~P!'WOz:qO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi~P!'WOz:pO$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!n#yi!}#yi~P!'WOz:qO$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi~P!'WOz:pO$S;YO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi~P!'WOz:pO$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!n#yi!}#yi~P!'WOz:qO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Ta!}#Ta!q#Ta#X#Ta~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'Pa!}'Pa!q'Pa#X'Pa~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pi!S#Pi!b#Pi!m#Pi!q#Pi!n#Pi!}#Pi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pi!S#Pi!b#Pi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#vi!S#vi!b#vi!m#vi!q#vi!n#vi!}#vi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#vi!S#vi!b#vi~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#xi!q#xi!n#xi!}#xi~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uq!S!uq!b!uq!m!uq!q!uq!v!uq!n!uq!}!uq~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uq!S!uq!b!uq!v!uq~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pq!S#Pq!b#Pq!m#Pq!q#Pq!n#Pq!}#Pq~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pq!S#Pq!b#Pq~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jq!q$jq!n$jq!}$jq~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uy!S!uy!b!uy!m!uy!q!uy!v!uy!n!uy!}!uy~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uy!S!uy!b!uy!v!uy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jy!q$jy!n$jy!}$jy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!R!q$j!R!n$j!R!}$j!R~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!Z!q$j!Z!n$j!Z!}$j!Z~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!c!q$j!c!n$j!c!}$j!c~P!'WO#S=TO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S=UO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT6iOz6gO!S6jO!b6kO!v8sO#O=SO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O=RO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX!q'PX!n'PX!}'PX~P!'WOT&zXz&zX!S&zX!b&zX!o&zX!q&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX!}&zX~O#u9ZO#w9[O#X&zX!x&zX~P.8oO!y$hO#S=^O~O!q9hO~P>UO!y$hO#S=cO~O!q>OO#O9}O~OT8vOz8tO!S8wO!b8xO!q:OO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#Ta!q#Ta!n#Ta!}#Ta~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m'Pa!q'Pa!n'Pa!}'Pa~P!'WO!q>PO#O:RO~O!q>QO#O:YO~O#O:YO#l'SO~O#O:ZO#l'SO~O#O:_O#l'SO~O#u;eO#w;gO!m&zX!n&zX~P.8oO#u;fO#w;hOT&zXz&zX!S&zX!b&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX~O!q;tO~P>UO!q;uO~P>UO!q>XO#O<oO~O!q>YO#O9WO~OT8vOz8tO!S8wO!b8xO!q<pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!q<qO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q>ZO#O<vO~O!q>[O#O<{O~O#O<{O#l'SO~O#O9WO#l'SO~O#O<|O#l'SO~O#O=PO#l'SO~O!y$hO#S=|O~Oo=[Os$lO~O!y$hO#S=}O~O!y$hO#S>UO~O!y$hO#S>VO~O!y$hO#S>WO~Oo={Os$lO~Oo>TOs$lO~Oo>SOs$lO~O%O$U$}$d!d$V#b%V#e'g!s#d~",
        goto: "%&y'mPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'nP'uPP'{(OPPP(hP(OP(O*ZP*ZPP2W:j:mPP*Z:sBpPBsPBsPP:sCSCVCZ:s:sPPPC^PP:sK^!$S!$S:s!$WP!$W!$W!%UP!.]!7pP!?oP*ZP*Z*ZPPPPP!?rPPPPPPP*Z*Z*Z*ZPP*Z*ZP!E]!GRP!GV!Gy!GR!GR!HP*Z*ZP!HY!Hl!Ib!J`!Jd!J`!Jo!J}!J}!KV!KY!KY*ZPP*ZPP!K^#%[#%[#%`P#%fP(O#%j(O#&S#&V#&V#&](O#&`(O(O#&f#&i(O#&r#&u(O(O(O(O(O#&x(O(O(O(O(O(O(O(O(O#&{!KR(O(O#'_#'o#'r(O(OP#'u#'|#(S#(o#(y#)P#)Z#)b#)h#*d#4X#5T#5Z#5a#5k#5q#5w#6]#6c#6i#6o#6u#6{#7R#7]#7g#7m#7s#7}PPPPPPPP#8T#8X#8}#NO#NR#N]$(f$(r$)X$)_$)b$)e$)k$,X$5v$>_$>b$>h$>k$>n$>w$>{$?X$?k$Bk$CO$C{$K{PP%%y%%}%&Z%&p%&vQ!nQT!qV!rQUOR%x!mRVO}!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a|!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ%^!ZQ%g!aQ%l!eQ'd$dQ'q$iQ)[%kQ*y'tQ,](xU-n*v*x+OQ.W+cQ.{,[S/t-s-tQ0T.SS0}/s/wQ1V0RQ1o1OR2P1p0u!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nQ#j]Q$}!PQ%O!QQ%P!RQ,S(kQ.b+sR.f+vR&q#jQ)z&pR/a-R0uhPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#l^k#p_j#k#s&s&w3x3y7l8f8g8h8iR#u`T&|#t'OR-Y*U0thPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#va-r#OZ#f#m#w$V$W$X$Y$Z$[$u$v%W%Y%[%`%s%|&O&Q&U&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&u&v&{'X'Z'[(](p)q)s)u*O*[*^+S+V,`,c,y,{,}-V-W-X-i-x.k.w/`/h/n/y0r0u0x1Q1X1d1m1q2q2r2x2y2z2{2|2}3O3Q3R3S3T3U3V3W3X3Y3Z3[3]3^3_3`3a3b3c3e3f3i3j3l3m3n3q3r3t4Y4y4z4{4|4}5O5P5R5S5T5U5V5W5X5Y5Z5[5]5^5_5`5a5b5c5d5f5g5j5k5m5n5o5r5s5u6R6V6}7O7P7Q7R7S7U7V7W7Y7Z7[7]7^7_7`7a7b7c7d7e7f7g7h7j7k7n7p7q7x7y7{7}8O8P8Q8R8S8V8W8Y8]9U9^9_9`9a9b9c9f9g9i9j9k9l9m9n9o9p9q9r9s9t9u9v9w9x9z9{:P:Q:T:V:W:[:^:`:c;j;k;l;m;n;o;p;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<a<b<c<d<e<f<g<h<i<l<m<n<r<s<t<u<w<x<y<z<}=O=Q=V=W=_=`=a=q=rQ']$]Y(Q$s7T9e;q;rS(U2Z6QR(X$tT&X!})v!w$Qg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[3ZfPVX[_bgjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#}$R$S$U$h$y$}%P%R%S%T%U%c%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)_)c)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[3scPVX[_bdegjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#{#}$R$S$U$h$y$}%P%R%S%T%U%c%m%n%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)^)_)c)g)h)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u,x-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2W2X2Y2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[0phPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0`0a0d0e0i0v1R1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT1Z0V1]R&]#P!n#[Z#f#w$V$W$X$Y$[$s$v%W%Y%[&Q&_&`&a&b&c&d&e&f'X'Z'[(])q)s*^+V,{-x/y1Q1d1q7j7k!Y2j2Z2x2y2z2{2}3O3Q3R3S3T3U3V3W3X3a3b3c3e3f3i3j3l3m3n3q3r3t!^4m2r4y4z4{4|5O5P5R5S5T5U5V5W5X5Y5b5c5d5f5g5j5k5m5n5o5r5s5u6Q6R#Q6p#m%`%s&u&v&{(p*O+S,`,c,y-V-X.w2q6}7O7P7Q7S7T7U7Y7Z7[7]7^7_7`7a7n7p7q7x7{7}8Q8S8V8W8Y8]9U:c=V=W#^8}%|&O&U)u,}-W-i/h/n0r0u0x1m4Y6V7V7W7y8O8P8R9^9_9`9a9c9e9f9g9i9j9k9l9m9n9o9p9x9z9{:P:Q:T:V:W:[:^:`<f<g=_=q=r!^;S.k/`;j;k;l;m;p;q;s;v;x;z;|<O<Q<S<U<h<l<n<r<t<w<x<z<}=O=Q=`=ao;T1X;r;w;y;{;}<P<R<T<V<i<m<s<u<yS$iu#hQ$qwU't$j$l&oQ'v$kS'x$m$rQ*|'uQ+O'wQ+R'yQ4X5xS4[5z5{Q4]5|Q6U8^S6W8_8`Q6X8aQ9d=YS9|=[=^Q:S=cQ=]=yS=b={=|Q=f=}Q=o>RS=p>S>VS=s>T>UR=t>WT'n$h*s!csPVXt!S!j!r!s!w$h$}%P%S%U'i(T(`)W*s+]+g+r+u,g,k.b.d.l0`0a0i1aQ$^rR*`'^Q*x'sQ-t*{R/w-wQ(W$tQ)U%hQ)n%vQ*i'fQ+k(XR-c*jQ(V$tQ)Y%jQ)m%vQ*e'eS*h'f)nS+j(W(XS-b*i*jQ.]+kQ/T,mQ/e-`R/g-cQ(U$tQ)T%hQ)V%iQ)l%vU*g'f)m)nU+i(V(W(XQ,f)UU-a*h*i*jS.[+j+kS/f-b-cQ0X.]R0t/gT+e(T+g[%e!_$b'c+a.R0QR,d)Qb$ov(T+[+]+`+g.P.Q0PR+T'{S+e(T+gT,j)W,kR0W.XT1[0V1]0w|PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$x{${Q+p([R._+nT$z{${Q(b$}Q(j%PQ(o%SQ(r%UQ.j+yQ0].fQ0^.iR1g0iR(e%OX+|(c(d+},PR(f%OX(h%P%S%U0iR%S!T_%a!]%R(l,T,V.t0dR%U!UR.x,XR,[(wQ)X%jS*d'e)YS-_*e,mS/d-`/TR0s/eQ%q!fU)]%m%n%rU,o)^)g)hR/_,xR)d%pR/],uSSO!mR!oSQ!rVR%y!rQ!jPS!sV!rQ!wX[%u!j!s!w+r0a1aQ+r(`Q0a.lR1a0`Q)j%sS,z)j7vR7v7WQ-S)zR/b-SQ&x#qS*R&x7mR7m9YS*V&{&|R-Z*VQ)w&YR-P)w!l'T#|'h*n*q*v+W+[,m-`-s-v-y.P.z/s/v/z0P1O1p4^4_4`5y6Y6Z6[:U:X:]=g=h=j=u=v=w=xR*Z'T1^dPVX[_bjklmnoprxyz!S!W!X!Y!]!e!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%p%}&S&W&p&s&t&w'O'U'Y'^'z(O(R(S(`(l({)P)_)c)i)p)t)v*P*T*U*o+P+d+r+u+z,T,V,X,u-Q-R-d-k-z-|.b.d.l.t/[/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n`#zd#{%m)^)g,x2W2YQ#{eQ%m!fQ)^%nQ)g%rQ,x)h!v2Wg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[R2Y2X|tPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aW$`t'i+],gS'i$h*sS+](T+gT,g)W,kQ'_$^R*a'_Q*t'oR-m*tQ/p-oS0{/p0|R0|/qQ-}+XR/|-}Q+g(TR.Y+gS+`(T+gS,h)W,kQ.Q+]W.T+`,h.Q/OR/O,gQ)R%eR,e)RQ'|$oR+U'|Q1]0VR1w1]Q${{R(^${Q+t(aR.c+tQ+w(bR.g+wQ+}(cQ,P(dT.m+},PQ(|%`S,a(|7tR7t7VQ(y%^R,^(yQ,k)WR/R,kQ)`%oS,q)`/WR/W,rQ,v)dR/^,vT!uV!rj!iPVX!j!r!s!w(`+r.l0`0a1aQ%Q!SQ(a$}W(h%P%S%U0iQ.e+uQ0Z.bR0[.d|ZPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ#f[U#m_#s&wQ#wbQ$VkQ$WlQ$XmQ$YnQ$ZoQ$[pQ$sx^$uy2_4b6e8q:m:nQ$vzQ%W!WQ%Y!XQ%[!YW%`!]%R(l,VU%s!g&p-RQ%|!yQ&O!zQ&Q!{S&U!})v^&^#R2a4d6g8t:p:qQ&_#SQ&`#TQ&a#UQ&b#VQ&c#WQ&d#XQ&e#YQ&f#ZQ&g#[Q&h#]Q&i#^Q&j#_Q&k#`Q&l#aQ&m#bQ&u#nQ&v#oS&{#t'OQ'X$RQ'Z$SQ'[$UQ(]$yQ(p%TQ)q%}Q)s&SQ)u&WQ*O&tS*['U4ZQ*^'Y^*_2[3u5v8Z:a=R=SQ+S'zQ+V(OQ,`({Q,c)PQ,y)iQ,{)pQ,})tQ-V*PQ-W*TQ-X*U^-]2]3v5w8[:b=T=UQ-i*oQ-x+PQ.k+zQ.w,XQ/`-QQ/h-dQ/n-kQ/y-zQ0r/cQ0u/iQ0x/mQ1Q/xU1X0V1]9WQ1d0eQ1m0vQ1q1RQ2Z2^Q2qjQ2r3yQ2x3zQ2y3|Q2z4OQ2{4QQ2|4SQ2}4UQ3O2`Q3Q2bQ3R2cQ3S2dQ3T2eQ3U2fQ3V2gQ3W2hQ3X2iQ3Y2jQ3Z2kQ3[2lQ3]2mQ3^2nQ3_2oQ3`2pQ3a2sQ3b2tQ3c2uQ3e2vQ3f2wQ3i3PQ3j3dQ3l3gQ3m3hQ3n3kQ3q3oQ3r3pQ3t3sQ4Y4WQ4y3{Q4z3}Q4{4PQ4|4RQ4}4TQ5O4VQ5P4cQ5R4eQ5S4fQ5T4gQ5U4hQ5V4iQ5W4jQ5X4kQ5Y4lQ5Z4mQ5[4nQ5]4oQ5^4pQ5_4qQ5`4rQ5a4sQ5b4tQ5c4uQ5d4vQ5f4wQ5g4xQ5j5QQ5k5eQ5m5hQ5n5iQ5o5lQ5r5pQ5s5qQ5u5tQ6Q4aQ6R3xQ6V6TQ6}6^Q7O6_Q7P6`Q7Q6aQ7R6bQ7S6cQ7T6dQ7U6fU7V,T.t0dQ7W%cQ7Y6hQ7Z6iQ7[6jQ7]6kQ7^6lQ7_6mQ7`6nQ7a6oQ7b6pQ7c6qQ7d6rQ7e6sQ7f6tQ7g6uQ7h6vQ7j6xQ7k6yQ7n6zQ7p6{Q7q6|Q7x7XQ7y7iQ7{7oQ7}7rQ8O7sQ8P7uQ8Q7wQ8R7zQ8S7|Q8V8TQ8W8UQ8Y8XQ8]8fU9U#k&s7lQ9^8jQ9_8kQ9`8lQ9a8mQ9b8nQ9c8oQ9e8pQ9f8rQ9g8sQ9i8uQ9j8vQ9k8wQ9l8xQ9m8yQ9n8zQ9o8{Q9p8|Q9q8}Q9r9OQ9s9PQ9t9QQ9u9RQ9v9SQ9w9TQ9x9ZQ9z9[Q9{9]Q:P9hQ:Q9yQ:T9}Q:V:OQ:W:RQ:[:YQ:^:ZQ:`:_Q:c8iQ;j:dQ;k:eQ;l:fQ;m:gQ;n:hQ;o:iQ;p:jQ;q:kQ;r:lQ;s:oQ;v:rQ;w:sQ;x:tQ;y:uQ;z:vQ;{:wQ;|:xQ;}:yQ<O:zQ<P:{Q<Q:|Q<R:}Q<S;OQ<T;PQ<U;QQ<V;RQ<W;SQ<X;TQ<Y;UQ<Z;VQ<[;WQ<];XQ<^;YQ<_;ZQ<`;[Q<a;]Q<b;^Q<c;_Q<d;`Q<e;aQ<f;cQ<g;dQ<h;eQ<i;fQ<l;gQ<m;hQ<n;iQ<r;tQ<s;uQ<t<jQ<u<kQ<w<oQ<x<pQ<y<qQ<z<vQ<}<{Q=O<|Q=Q=PQ=V8hQ=W8gQ=_=ZQ=`9VQ=a9XQ=q=mR=r=nR){&pQ%t!gQ)O%cT)y&p-R$SiPVX[bklmnopxyz!S!W!X!Y!j!r!s!w!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y$}%P%S%U%}&S'Y(O(`)p+P+r+u-z.b.d.l/x0`0a0e0i1R1a2[2]6x6y!t3w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x6S3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O8e_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|=X!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v=k+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]=l0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UQ#r_Q&r#kQ&z#sR)}&sS#q_#s^$Tj3x3y8f8g8h8iS*Q&w7lT9Y#k&sQ&}#tR*X'OR&T!|R&Z!}Q&Y!}R-O)vQ#|gQ'V#}S'h$h*sQ*Y'SQ*n'iQ*q'mQ*v'rQ+W(PS+[(T+gQ,m)ZQ-`*fQ-s*zQ-v*}Q-y+QS.P+]+`Q.z,ZQ/s-rQ/v-uQ/z-{Q0P.QQ1O/uQ1p1PQ4^5}Q4_6OQ4`6PQ5y6]Q6Y8bQ6Z8cQ6[8dQ:U=dQ:X=eQ:]=iQ=g>OQ=h>PQ=j>QQ=u>XQ=v>YQ=w>ZR=x>[0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n!v$Pg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[S$]r'^Q%k!eS%o!f%rQ)b%pU+X(R(S+dQ,p)_Q,t)cQ/Z,uQ/{-|R0p/[|vPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a#U#i[bklmnopxyz!W!X!Y!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y%}&S'Y(O)p+P-z/x0e1R2[2]6x6yd+^(T)W+]+`+g,g,h,k.Q/O!t6w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x;b3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O=z_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|>]!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v>^+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]>_0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UR'p$hQ'o$hR-l*sR$_rR-q*wQ+Y(RQ+Z(SR.X+dT+f(T+ge+_(T)W+]+`+g,g,h,k.Q/OQ%f!_Q'b$bQ*c'cQ.U+aQ0S.RR1U0QQ#eZQ%X!WQ%Z!XQ%]!YQ'}$pQ(s%VQ(t%WQ(u%YQ(v%[Q(}%bQ)S%fQ)[%kQ)f%qQ)k%tQ*b'bQ,n)]Q-^*cQ.V+bQ.W+cQ.e+xQ.o,QQ.p,RQ.q,SQ.v,WQ.y,YQ.},bQ/U,oQ/}.OQ0T.SQ0U.UQ0W.XQ0[.hQ0k/QQ0q/_Q1S0OQ1V0RQ1W0SQ1`0_Q1h0jQ1r1TQ1s1UQ1v1[Q1y1_Q1}1jQ2T1{R2U1|Q$pvS+b(T+gU.O+[+]+`S0O.P.QR1T0P|!aPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ$dtW+c(T)W+g,kW.S+]+`,g,hT0R.Q/O0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR.|,_0w}PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$w{${Q(i%PQ(n%SQ(q%UR1f0iQ%b!]Q(m%RQ,U(lQ.s,TQ.u,VQ0c.tR1c0dQ%q!fR)]%rR)e%p",
        nodeNames: "\u26A0 ( HeredocString EscapeSequence abstract LogicOp array as Boolean break case catch clone const continue default declare do echo else elseif enddeclare endfor endforeach endif endswitch endwhile enum extends final finally fn for foreach from function global goto if implements include include_once LogicOp insteadof interface list match namespace new null LogicOp print require require_once return switch throw trait try unset use var Visibility while LogicOp yield LineComment BlockComment TextInterpolation PhpClose Text PhpOpen Template TextInterpolation EmptyStatement ; } { Block : LabelStatement Name ExpressionStatement ConditionalExpression LogicOp MatchExpression ) ( ParenthesizedExpression MatchBlock MatchArm , => AssignmentExpression ArrayExpression ValueList & VariadicUnpacking ... Pair [ ] ListExpression ValueList Pair Pair SubscriptExpression MemberExpression -> ?-> VariableName DynamicVariable $ ${ CallExpression ArgList NamedArgument SpreadArgument CastExpression UnionType LogicOp OptionalType NamedType QualifiedName \\ NamespaceName ScopedExpression :: ClassMemberName AssignOp UpdateExpression UpdateOp YieldExpression BinaryExpression LogicOp LogicOp LogicOp BitOp BitOp BitOp CompareOp CompareOp BitOp ArithOp ConcatOp ArithOp ArithOp IncludeExpression RequireExpression CloneExpression UnaryExpression ControlOp LogicOp PrintIntrinsic FunctionExpression static ParamList Parameter #[ Attributes Attribute VariadicParameter PropertyParameter UseList ArrowFunction NewExpression class BaseClause ClassInterfaceClause DeclarationList ConstDeclaration VariableDeclarator PropertyDeclaration VariableDeclarator MethodDeclaration UseDeclaration UseList UseInsteadOfClause UseAsClause UpdateExpression ArithOp ShellExpression ThrowExpression Integer Float String MemberExpression SubscriptExpression UnaryExpression ArithOp Interpolation String IfStatement ColonBlock SwitchStatement Block CaseStatement DefaultStatement ColonBlock WhileStatement EmptyStatement DoStatement ForStatement ForSpec SequenceExpression ForeachStatement ForSpec Pair GotoStatement ContinueStatement BreakStatement ReturnStatement TryStatement CatchDeclarator DeclareStatement EchoStatement UnsetStatement ConstDeclaration FunctionDefinition ClassDeclaration InterfaceDeclaration TraitDeclaration EnumDeclaration EnumBody EnumCase NamespaceDefinition NamespaceUseDeclaration UseGroup UseClause UseClause GlobalDeclaration FunctionStaticDeclaration Program",
        maxTerm: 304,
        nodeProps: [
          ["group", -36, 2, 8, 49, 81, 83, 85, 88, 93, 94, 102, 106, 107, 110, 111, 114, 118, 123, 126, 130, 132, 133, 147, 148, 149, 150, 153, 154, 164, 165, 179, 181, 182, 183, 184, 185, 191, "Expression", -28, 74, 78, 80, 82, 192, 194, 199, 201, 202, 205, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 230, 231, "Statement", -3, 119, 121, 122, "Type"],
          ["openedBy", 69, "phpOpen", 76, "{", 86, "(", 101, "#["],
          ["closedBy", 71, "phpClose", 77, "}", 87, ")", 158, "]"]
        ],
        propSources: [phpHighlighting],
        skippedNodes: [0],
        repeatNodeCount: 29,
        tokenData: "!F|_R!]OX$zXY&^YZ'sZ]$z]^&^^p$zpq&^qr)Rrs+Pst+otu2buv5evw6rwx8Vxy>]yz>yz{?g{|@}|}Bb}!OCO!O!PDh!P!QKT!Q!R!!o!R![!$q![!]!,P!]!^!-a!^!_!-}!_!`!1S!`!a!2d!a!b!3t!b!c!7^!c!d!7z!d!e!9W!e!}!7z!}#O!;^#O#P!;z#P#Q!<h#Q#R!=U#R#S!7z#S#T!=u#T#U!7z#U#V!9W#V#o!7z#o#p!Co#p#q!D]#q#r!Er#r#s!F`#s$f$z$f$g&^$g&j!7z&j$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zP%PV&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zP%kO&wPP%nWOY$zYZ%fZ!a$z!b;'S$z;'S;=`&W<%l~$z~O$z~~%fP&ZP;=`<%l$zV&ed&wP&vUOX$zXY&^YZ'sZ]$z]^&^^p$zpq&^q!^$z!^!_%k!_$f$z$f$g&^$g$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zV'zW&wP&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dU(iW&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dR)YW$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`;'S$z;'S;=`&W<%lO$zR)yW$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`*c!`;'S$z;'S;=`&W<%lO$zR*jV$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+YV'fS&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+v]&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b!},o!}#O1f#O;'S,o;'S;=`/s<%lO,oV,vZ&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,oV-nZ!dUOY,oYZ%fZ],o]^$z^!a,o!a!b.a!b;'S,o;'S;=`/s<%l~,o~O,o~~%fU.dWOY.|YZ/nZ].|]^/n^!`.|!a;'S.|;'S;=`/h<%lO.|U/RV!dUOY.|Z].|^!a.|!a!b.a!b;'S.|;'S;=`/h<%lO.|U/kP;=`<%l.|U/sO!dUV/vP;=`<%l,oV0OZ&wPOY,oYZ0qZ],o]^0x^!^,o!^!_-i!_!`,o!`!a$z!a;'S,o;'S;=`/s<%lO,oV0xO&wP!dUV1PV&wP!dUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV1oZ&wP$dQ!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,o_2i`&wP#dQOY$zYZ%fZ!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o#p4w#p$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$z_3ra&wP#b^OY$zYZ%fZ!Q$z!Q![3k![!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$zV5OV&wP#eUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR5lW&wP$VQOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR6]V#wQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV6yY#SU&wPOY$zYZ%fZv$zvw7iw!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR7pV#|Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR8^Z&wP%VQOY8VYZ9PZw8Vwx;_x!^8V!^!_;{!_#O8V#O#P<y#P;'S8V;'S;=`>V<%lO8VR9WV&wP%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ9rV%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ:^O%VQQ:aRO;'S9m;'S;=`:j;=`O9mQ:oW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l9m<%lO9mQ;[P;=`<%l9mR;fV&wP%VQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR<Q]%VQOY8VYZ9PZw8Vwx;_x!a8V!a!b9m!b#O8V#O#P<y#P;'S8V;'S;=`>V<%l~8V~O8V~~%fR=OW&wPOY8VYZ9PZ!^8V!^!_;{!_;'S8V;'S;=`=h;=`<%l9m<%lO8VR=mW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l8V<%lO9mR>YP;=`<%l8VR>dV!yQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV?QV!xU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR?nY&wP$VQOY$zYZ%fZz$zz{@^{!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR@eW$WQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRAUY$TQ&wPOY$zYZ%fZ{$z{|At|!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRA{V$zQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRBiV!}Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_CXZ$TQ%TW&wPOY$zYZ%fZ}$z}!OAt!O!^$z!^!_%k!_!`6U!`!aCz!a;'S$z;'S;=`&W<%lO$zVDRV#`U&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVDo[&wP$UQOY$zYZ%fZ!O$z!O!PEe!P!Q$z!Q![Fs![!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVEjX&wPOY$zYZ%fZ!O$z!O!PFV!P!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVF^V#UU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRFz_&wP%OQOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#SJc#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zRHO]&wPOY$zYZ%fZ{$z{|Hw|}$z}!OHw!O!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRH|X&wPOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRIpZ&wP%OQOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_#R$z#R#SHw#S;'S$z;'S;=`&W<%lO$zRJhX&wPOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVK[[&wP$VQOY$zYZ%fZz$zz{LQ{!P$z!P!Q,o!Q!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVLVX&wPOYLQYZLrZzLQz{N_{!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQVLwT&wPOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMZTOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMmVOzMWz{Mj{!PMW!P!QNS!Q;'SMW;'S;=`NX<%lOMWUNXO!eUUN[P;=`<%lMWVNdZ&wPOYLQYZLrZzLQz{N_{!PLQ!P!Q! V!Q!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQV! ^V!eU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV! vZOYLQYZLrZzLQz{N_{!aLQ!a!bMW!b;'SLQ;'S;=`!!i<%l~LQ~OLQ~~%fV!!lP;=`<%lLQZ!!vm&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!d$z!d!e!&o!e!g$z!g!hGy!h!q$z!q!r!(a!r!z$z!z!{!){!{#R$z#R#S!%}#S#U$z#U#V!&o#V#X$z#X#YGy#Y#c$z#c#d!(a#d#l$z#l#m!){#m;'S$z;'S;=`&W<%lO$zZ!$xa&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#S!%}#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zZ!&SX&wPOY$zYZ%fZ!Q$z!Q![!$q![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!&tY&wPOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!'k[&wP$}YOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_#R$z#R#S!&o#S;'S$z;'S;=`&W<%lO$zZ!(fX&wPOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!)YZ&wP$}YOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_#R$z#R#S!(a#S;'S$z;'S;=`&W<%lO$zZ!*Q]&wPOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zZ!+Q_&wP$}YOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#R$z#R#S!){#S#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zR!,WX!qQ&wPOY$zYZ%fZ![$z![!]!,s!]!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!,zV#sQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!-hV!mU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!.S[$RQOY$zYZ%fZ!^$z!^!_!.x!_!`!/i!`!a*c!a!b!0]!b;'S$z;'S;=`&W<%l~$z~O$z~~%fR!/PW$SQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!/pX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a*c!a;'S$z;'S;=`&W<%lO$zP!0bR!iP!_!`!0k!r!s!0p#d#e!0pP!0pO!iPP!0sQ!j!k!0y#[#]!0yP!0|Q!r!s!0k#d#e!0kV!1ZX#uQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`!a!1v!a;'S$z;'S;=`&W<%lO$zV!1}V#OU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!2kX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`!3W!`!a!.x!a;'S$z;'S;=`&W<%lO$zR!3_V$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!3{[!vQ&wPOY$zYZ%fZ}$z}!O!4q!O!^$z!^!_%k!_!`$z!`!a!6P!a!b!6m!b;'S$z;'S;=`&W<%lO$zV!4vX&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a!5c!a;'S$z;'S;=`&W<%lO$zV!5jV#aU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!6WV!gU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!6tW#zQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!7eV$]Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_!8Ra&wP!s^OY$zYZ%fZ!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$z_!9_e&wP!s^OY$zYZ%fZr$zrs!:psw$zwx8Vx!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$zR!:wV&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!;eV#WU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!<RV#pU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!<oV#XQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!=]W$OQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!=zZ&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%lO!=uR!>rV&wPO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?[VO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?tRO;'S!?X;'S;=`!?};=`O!?XQ!@QWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!?X<%lO!?XQ!@oO${QQ!@rP;=`<%l!?XR!@x]OY!=uYZ!>mZ!a!=u!a!b!?X!b#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%l~!=u~O!=u~~%fR!AvW&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_;'S!=u;'S;=`!B`;=`<%l!?X<%lO!=uR!BcWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!=u<%lO!?XR!CSV${Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!ClP;=`<%l!=uV!CvV!oU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!DfY#}Q#lS&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`#p$z#p#q!EU#q;'S$z;'S;=`&W<%lO$zR!E]V#{Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!EyV!nQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!FgV$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z",
        tokenizers: [expression, interpolated, semicolon2, 0, 1, 2, 3, eofToken],
        topRules: { "Template": [0, 72], "Program": [1, 232] },
        dynamicPrecedences: { "284": 1 },
        specialized: [{ term: 81, get: (value, stack) => keywords3(value) << 1, external: keywords3 }, { term: 81, get: (value) => spec_Name[value] || -1 }],
        tokenPrec: 29354
      });
    }
  });

  // node_modules/@codemirror/lang-php/dist/index.js
  var dist_exports9 = {};
  __export(dist_exports9, {
    php: () => php,
    phpLanguage: () => phpLanguage
  });
  function php(config = {}) {
    let support = [], base4;
    if (config.baseLanguage === null)
      ;
    else if (config.baseLanguage) {
      base4 = config.baseLanguage;
    } else {
      let htmlSupport = html({ matchClosingTags: false });
      support.push(htmlSupport.support);
      base4 = htmlSupport.language;
    }
    return new LanguageSupport(phpLanguage.configure({
      wrap: base4 && parseMixed((node) => {
        if (!node.type.isTop)
          return null;
        return {
          parser: base4.parser,
          overlay: (node2) => node2.name == "Text"
        };
      }),
      top: config.plain ? "Program" : "Template"
    }), support);
  }
  var phpLanguage;
  var init_dist17 = __esm({
    "node_modules/@codemirror/lang-php/dist/index.js"() {
      init_index_es8();
      init_dist3();
      init_dist11();
      init_dist5();
      phpLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "php",
        parser: /* @__PURE__ */ parser9.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              IfStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b|elseif\b|endif\b)/ }),
              TryStatement: /* @__PURE__ */ continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
              SwitchBody: (context) => {
                let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
              },
              ColonBlock: (cx2) => cx2.baseIndent + cx2.unit,
              "Block EnumBody DeclarationList": /* @__PURE__ */ delimitedIndent({ closing: "}" }),
              ArrowFunction: (cx2) => cx2.baseIndent + cx2.unit,
              "String BlockComment": () => null,
              Statement: /* @__PURE__ */ continuedIndent({ except: /^({|end(for|foreach|switch|while)\b)/ })
            }),
            /* @__PURE__ */ foldNodeProp.add({
              "Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList": foldInside,
              ColonBlock(tree) {
                return { from: tree.from + 1, to: tree.to };
              },
              BlockComment(tree) {
                return { from: tree.from + 2, to: tree.to - 2 };
              }
            })
          ]
        }),
        languageData: {
          commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
          indentOnInput: /^\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\{|\})$/,
          wordChars: "$",
          closeBrackets: { stringPrefixes: ["b", "B"] }
        }
      });
    }
  });

  // node_modules/@lezer/python/dist/index.es.js
  function IndentLevel(parent, depth) {
    this.parent = parent;
    this.depth = depth;
    this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
  }
  function countIndent(space5) {
    let depth = 0;
    for (let i = 0; i < space5.length; i++)
      depth += space5.charCodeAt(i) == tab ? 8 - depth % 8 : 1;
    return depth;
  }
  var printKeyword, indent, dedent, newline$1, newlineBracketed, newlineEmpty, eof2, ParenL3, ParenthesizedExpression, TupleExpression, ComprehensionExpression, BracketL2, ArrayExpression, ArrayComprehensionExpression, BraceL2, DictionaryExpression, DictionaryComprehensionExpression, SetExpression, SetComprehensionExpression, ArgList, subscript, FormatReplacement, importList, ParamList, SequencePattern, MappingPattern, PatternArgList, newline2, carriageReturn, space4, tab, hash2, parenOpen, dot, bracketed, newlines, indentation, topIndent, trackIndent, legacyPrint, pythonHighlighting, spec_identifier5, parser10;
  var init_index_es9 = __esm({
    "node_modules/@lezer/python/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      printKeyword = 1;
      indent = 189;
      dedent = 190;
      newline$1 = 191;
      newlineBracketed = 192;
      newlineEmpty = 193;
      eof2 = 194;
      ParenL3 = 22;
      ParenthesizedExpression = 23;
      TupleExpression = 47;
      ComprehensionExpression = 48;
      BracketL2 = 53;
      ArrayExpression = 54;
      ArrayComprehensionExpression = 55;
      BraceL2 = 57;
      DictionaryExpression = 58;
      DictionaryComprehensionExpression = 59;
      SetExpression = 60;
      SetComprehensionExpression = 61;
      ArgList = 63;
      subscript = 230;
      FormatReplacement = 71;
      importList = 255;
      ParamList = 121;
      SequencePattern = 142;
      MappingPattern = 143;
      PatternArgList = 146;
      newline2 = 10;
      carriageReturn = 13;
      space4 = 32;
      tab = 9;
      hash2 = 35;
      parenOpen = 40;
      dot = 46;
      bracketed = /* @__PURE__ */ new Set([
        ParenthesizedExpression,
        TupleExpression,
        ComprehensionExpression,
        importList,
        ArgList,
        ParamList,
        ArrayExpression,
        ArrayComprehensionExpression,
        subscript,
        SetExpression,
        SetComprehensionExpression,
        DictionaryExpression,
        DictionaryComprehensionExpression,
        FormatReplacement,
        SequencePattern,
        MappingPattern,
        PatternArgList
      ]);
      newlines = new ExternalTokenizer((input, stack) => {
        if (input.next < 0) {
          input.acceptToken(eof2);
        } else if (input.next != newline2 && input.next != carriageReturn)
          ;
        else if (stack.context.depth < 0) {
          input.acceptToken(newlineBracketed, 1);
        } else {
          input.advance();
          let spaces2 = 0;
          while (input.next == space4 || input.next == tab) {
            input.advance();
            spaces2++;
          }
          let empty = input.next == newline2 || input.next == carriageReturn || input.next == hash2;
          input.acceptToken(empty ? newlineEmpty : newline$1, -spaces2);
        }
      }, { contextual: true, fallback: true });
      indentation = new ExternalTokenizer((input, stack) => {
        let cDepth = stack.context.depth;
        if (cDepth < 0)
          return;
        let prev = input.peek(-1);
        if ((prev == newline2 || prev == carriageReturn) && stack.context.depth >= 0) {
          let depth = 0, chars2 = 0;
          for (; ; ) {
            if (input.next == space4)
              depth++;
            else if (input.next == tab)
              depth += 8 - depth % 8;
            else
              break;
            input.advance();
            chars2++;
          }
          if (depth != cDepth && input.next != newline2 && input.next != carriageReturn && input.next != hash2) {
            if (depth < cDepth)
              input.acceptToken(dedent, -chars2);
            else
              input.acceptToken(indent);
          }
        }
      });
      topIndent = new IndentLevel(null, 0);
      trackIndent = new ContextTracker({
        start: topIndent,
        reduce(context, term) {
          return context.depth < 0 && bracketed.has(term) ? context.parent : context;
        },
        shift(context, term, stack, input) {
          if (term == indent)
            return new IndentLevel(context, countIndent(input.read(input.pos, stack.pos)));
          if (term == dedent)
            return context.parent;
          if (term == ParenL3 || term == BracketL2 || term == BraceL2)
            return new IndentLevel(context, -1);
          return context;
        },
        hash(context) {
          return context.hash;
        }
      });
      legacyPrint = new ExternalTokenizer((input) => {
        for (let i = 0; i < 5; i++) {
          if (input.next != "print".charCodeAt(i))
            return;
          input.advance();
        }
        if (/\w/.test(String.fromCharCode(input.next)))
          return;
        for (let off = 0; ; off++) {
          let next2 = input.peek(off);
          if (next2 == space4 || next2 == tab)
            continue;
          if (next2 != parenOpen && next2 != dot && next2 != newline2 && next2 != carriageReturn && next2 != hash2)
            input.acceptToken(printKeyword);
          return;
        }
      });
      pythonHighlighting = styleTags({
        'async "*" "**" FormatConversion FormatSpec': tags.modifier,
        "for while if elif else try except finally return raise break continue with pass assert await yield match case": tags.controlKeyword,
        "in not and or is del": tags.operatorKeyword,
        "from def class global nonlocal lambda": tags.definitionKeyword,
        import: tags.moduleKeyword,
        "with as print": tags.keyword,
        Boolean: tags.bool,
        None: tags.null,
        VariableName: tags.variableName,
        "CallExpression/VariableName": tags.function(tags.variableName),
        "FunctionDefinition/VariableName": tags.function(tags.definition(tags.variableName)),
        "ClassDefinition/VariableName": tags.definition(tags.className),
        PropertyName: tags.propertyName,
        "CallExpression/MemberExpression/PropertyName": tags.function(tags.propertyName),
        Comment: tags.lineComment,
        Number: tags.number,
        String: tags.string,
        FormatString: tags.special(tags.string),
        UpdateOp: tags.updateOperator,
        "ArithOp!": tags.arithmeticOperator,
        BitOp: tags.bitwiseOperator,
        CompareOp: tags.compareOperator,
        AssignOp: tags.definitionOperator,
        Ellipsis: tags.punctuation,
        At: tags.meta,
        "( )": tags.paren,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace,
        ".": tags.derefOperator,
        ", ;": tags.separator
      });
      spec_identifier5 = { __proto__: null, await: 40, or: 50, and: 52, in: 56, not: 58, is: 60, if: 66, else: 68, lambda: 72, yield: 90, from: 92, async: 98, for: 100, None: 152, True: 154, False: 154, del: 168, pass: 172, break: 176, continue: 180, return: 184, raise: 192, import: 196, as: 198, global: 202, nonlocal: 204, assert: 208, elif: 218, while: 222, try: 228, except: 230, finally: 232, with: 236, def: 240, class: 250, match: 261, case: 267 };
      parser10 = LRParser.deserialize({
        version: 14,
        states: "!LfO`Q$IXOOO%fQ$I[O'#G|OOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'UQ$IWO'#ClO(wQ$I[O'#G{OOQ$IS'#G|'#G|OOQ$IS'#DS'#DSOOQ$IS'#G{'#G{O)eQ$IWO'#D]O)xQ$IWO'#DdO*YQ$IWO'#DhOOQ$IS'#Ds'#DsO*mO`O'#DsO*uOpO'#DsO*}O!bO'#DtO+YO#tO'#DtO+eO&jO'#DtO+pO,UO'#DtO-rQ$I[O'#GmOOQ$IS'#Gm'#GmO'UQ$IWO'#GlO/UQ$I[O'#GlOOQ$IS'#E]'#E]O/mQ$IWO'#E^OOQ$IS'#Gk'#GkO/wQ$IWO'#GjOOQ$IV'#Gj'#GjO0SQ$IWO'#FPOOQ$IS'#GX'#GXO0XQ$IWO'#FOOOQ$IV'#Hx'#HxOOQ$IV'#Gi'#GiOOQ$IT'#Fh'#FhQ`Q$IXOOO'UQ$IWO'#CoO0gQ$IWO'#C{O0nQ$IWO'#DPO0|Q$IWO'#HQO1^Q$I[O'#EQO'UQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1rQ$IWO'#EZO2YQ$IWO'#E_O0SQ$IWO'#EaO2mQ$I[O'#EaO0SQ$IWO'#EdO/mQ$IWO'#EgO/mQ$IWO'#EkO/mQ$IWO'#EnO2xQ$IWO'#EpO3PQ$IWO'#EuO3[Q$IWO'#EqO/mQ$IWO'#EuO0SQ$IWO'#EwO0SQ$IWO'#E|O3aQ$IWO'#FROOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'UQ$IWO,58|O'UQ$IWO,58|O'UQ$IWO,58|O'UQ$IWO,58|O'UQ$IWO,58|O'UQ$IWO,58|O3hQ$IWO'#DmOOQ$IS,5:W,5:WO3{Q$IWO'#H[OOQ$IS,5:Z,5:ZO4YQ%1`O,5:ZO4_Q$I[O,59WO0gQ$IWO,59`O0gQ$IWO,59`O0gQ$IWO,59`O6}Q$IWO,59`O7SQ$IWO,59`O7ZQ$IWO,59hO7bQ$IWO'#G{O8hQ$IWO'#GzOOQ$IS'#Gz'#GzOOQ$IS'#DY'#DYO9PQ$IWO,59_O'UQ$IWO,59_O9_Q$IWO,59_OOQ$IS,59w,59wO9dQ$IWO,5:PO'UQ$IWO,5:POOQ$IS,5:O,5:OO9rQ$IWO,5:OO9wQ$IWO,5:VO'UQ$IWO,5:VO'UQ$IWO,5:TOOQ$IS,5:S,5:SO:YQ$IWO,5:SO:_Q$IWO,5:UOOOO'#Fp'#FpO:dO`O,5:_OOQ$IS,5:_,5:_OOOO'#Fq'#FqO:lOpO,5:_O:tQ$IWO'#DuOOOO'#Fr'#FrO;UO!bO,5:`OOQ$IS,5:`,5:`OOOO'#Fu'#FuO;aO#tO,5:`OOOO'#Fv'#FvO;lO&jO,5:`OOOO'#Fw'#FwO;wO,UO,5:`OOQ$IS'#Fx'#FxO<SQ$I[O,5:dO>tQ$I[O,5=WO?_Q%GlO,5=WO@OQ$I[O,5=WOOQ$IS,5:x,5:xO@gQ$IXO'#GQOAvQ$IWO,5;TOOQ$IV,5=U,5=UOBRQ$I[O'#HtOBjQ$IWO,5;kOOQ$IS-E:V-E:VOOQ$IV,5;j,5;jO3VQ$IWO'#EwOOQ$IT-E9f-E9fOBrQ$I[O,59ZODyQ$I[O,59gOEdQ$IWO'#G}OEoQ$IWO'#G}O0SQ$IWO'#G}OEzQ$IWO'#DROFSQ$IWO,59kOFXQ$IWO'#HRO'UQ$IWO'#HRO/mQ$IWO,5=lOOQ$IS,5=l,5=lO/mQ$IWO'#D|OOQ$IS'#D}'#D}OFvQ$IWO'#FzOGWQ$IWO,58zOGWQ$IWO,58zO)kQ$IWO,5:jOGfQ$I[O'#HTOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGyQ$IWO,5:yOH[Q$IWO,5:{OOQ$IS'#F}'#F}OHjQ$I[O,5:{OHxQ$IWO,5:{OH}Q$IWO'#HwOOQ$IS,5;O,5;OOI]Q$IWO'#HsOOQ$IS,5;R,5;RO3[Q$IWO,5;VO3[Q$IWO,5;YOInQ$I[O'#HyO'UQ$IWO'#HyOIxQ$IWO,5;[O2xQ$IWO,5;[O/mQ$IWO,5;aO0SQ$IWO,5;cOI}Q$IXO'#ElOKWQ$IZO,5;]ONlQ$IWO'#HzO3[Q$IWO,5;aONwQ$IWO,5;cON|Q$IWO,5;hO! UQ$I[O,5;mO'UQ$IWO,5;mO!#xQ$I[O1G.hO!$PQ$I[O1G.hO!&pQ$I[O1G.hO!&zQ$I[O1G.hO!)eQ$I[O1G.hO!)xQ$I[O1G.hO!*]Q$IWO'#HZO!*kQ$I[O'#GmO/mQ$IWO'#HZO!*uQ$IWO'#HYOOQ$IS,5:X,5:XO!*}Q$IWO,5:XO!+SQ$IWO'#H]O!+_Q$IWO'#H]O!+rQ$IWO,5=vOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.z1G.zO!,rQ$I[O1G.zO!,yQ$I[O1G.zO0gQ$IWO1G.zO!-fQ$IWO1G/SOOQ$IS'#DX'#DXO/mQ$IWO,59rOOQ$IS1G.y1G.yO!-mQ$IWO1G/cO!-}Q$IWO1G/cO!.VQ$IWO1G/dO'UQ$IWO'#HSO!.[Q$IWO'#HSO!.aQ$I[O1G.yO!.qQ$IWO,59gO!/wQ$IWO,5=rO!0XQ$IWO,5=rO!0aQ$IWO1G/kO!0fQ$I[O1G/kOOQ$IS1G/j1G/jO!0vQ$IWO,5=mO!1mQ$IWO,5=mO/mQ$IWO1G/oO!2[Q$IWO1G/qO!2aQ$I[O1G/qO!2qQ$I[O1G/oOOQ$IS1G/n1G/nOOQ$IS1G/p1G/pOOOO-E9n-E9nOOQ$IS1G/y1G/yOOOO-E9o-E9oO!3RQ$IWO'#HhO/mQ$IWO'#HhO!3aQ$IWO,5:aOOOO-E9p-E9pOOQ$IS1G/z1G/zOOOO-E9s-E9sOOOO-E9t-E9tOOOO-E9u-E9uOOQ$IS-E9v-E9vO!3lQ%GlO1G2rO!4]Q$I[O1G2rO'UQ$IWO,5<eOOQ$IS,5<e,5<eOOQ$IS-E9w-E9wOOQ$IS,5<l,5<lOOQ$IS-E:O-E:OOOQ$IV1G0o1G0oO0SQ$IWO'#F|O!4tQ$I[O,5>`OOQ$IS1G1V1G1VO!5]Q$IWO1G1VOOQ$IS'#DT'#DTO/mQ$IWO,5=iOOQ$IS,5=i,5=iO!5bQ$IWO'#FiO!5mQ$IWO,59mO!5uQ$IWO1G/VO!6PQ$I[O,5=mOOQ$IS1G3W1G3WOOQ$IS,5:h,5:hO!6pQ$IWO'#GlOOQ$IS,5<f,5<fOOQ$IS-E9x-E9xO!7RQ$IWO1G.fOOQ$IS1G0U1G0UO!7aQ$IWO,5=oO!7qQ$IWO,5=oO/mQ$IWO1G0eO/mQ$IWO1G0eO0SQ$IWO1G0gOOQ$IS-E9{-E9{O!8SQ$IWO1G0gO!8_Q$IWO1G0gO!8dQ$IWO,5>cO!8rQ$IWO,5>cO!9QQ$IWO,5>_O!9hQ$IWO,5>_O!9yQ$IZO1G0qO!=[Q$IZO1G0tO!@jQ$IWO,5>eO!@tQ$IWO,5>eO!@|Q$I[O,5>eO/mQ$IWO1G0vO!AWQ$IWO1G0vO3[Q$IWO1G0{ONwQ$IWO1G0}OOQ$IV,5;W,5;WO!A]Q$IYO,5;WO!AbQ$IZO1G0wO!DvQ$IWO'#GUO3[Q$IWO1G0wO3[Q$IWO1G0wO!ETQ$IWO,5>fO!EbQ$IWO,5>fO0SQ$IWO,5>fOOQ$IV1G0{1G0{O!EjQ$IWO'#EyO!E{Q%1`O1G0}OOQ$IV1G1S1G1SO3[Q$IWO1G1SO!FTQ$IWO'#FTOOQ$IV1G1X1G1XO! UQ$I[O1G1XOOQ$IS,5=u,5=uOOQ$IS'#Dn'#DnO/mQ$IWO,5=uO!FYQ$IWO,5=tO!FmQ$IWO,5=tOOQ$IS1G/s1G/sO!FuQ$IWO,5=wO!GVQ$IWO,5=wO!G_Q$IWO,5=wO!GrQ$IWO,5=wO!HSQ$IWO,5=wOOQ$IS1G3b1G3bOOQ$IS7+$f7+$fO!5uQ$IWO7+$nO!IuQ$IWO1G.zO!I|Q$IWO1G.zOOQ$IS1G/^1G/^OOQ$IS,5<V,5<VO'UQ$IWO,5<VOOQ$IS7+$}7+$}O!JTQ$IWO7+$}OOQ$IS-E9i-E9iOOQ$IS7+%O7+%OO!JeQ$IWO,5=nO'UQ$IWO,5=nOOQ$IS7+$e7+$eO!JjQ$IWO7+$}O!JrQ$IWO7+%OO!JwQ$IWO1G3^OOQ$IS7+%V7+%VO!KXQ$IWO1G3^O!KaQ$IWO7+%VOOQ$IS,5<U,5<UO'UQ$IWO,5<UO!KfQ$IWO1G3XOOQ$IS-E9h-E9hO!L]Q$IWO7+%ZOOQ$IS7+%]7+%]O!LkQ$IWO1G3XO!MYQ$IWO7+%]O!M_Q$IWO1G3_O!MoQ$IWO1G3_O!MwQ$IWO7+%ZO!M|Q$IWO,5>SO!NdQ$IWO,5>SO!NdQ$IWO,5>SO!NrO!LQO'#DwO!N}OSO'#HiOOOO1G/{1G/{O# SQ$IWO1G/{O# [Q%GlO7+(^O# {Q$I[O1G2PP#!fQ$IWO'#FyOOQ$IS,5<h,5<hOOQ$IS-E9z-E9zOOQ$IS7+&q7+&qOOQ$IS1G3T1G3TOOQ$IS,5<T,5<TOOQ$IS-E9g-E9gOOQ$IS7+$q7+$qO#!sQ$IWO,5=WO##^Q$IWO,5=WO##oQ$I[O,5<WO#$SQ$IWO1G3ZOOQ$IS-E9j-E9jOOQ$IS7+&P7+&PO#$dQ$IWO7+&POOQ$IS7+&R7+&RO#$rQ$IWO'#HvO0SQ$IWO'#HuO#%WQ$IWO7+&ROOQ$IS,5<k,5<kO#%cQ$IWO1G3}OOQ$IS-E9}-E9}OOQ$IS,5<g,5<gO#%qQ$IWO1G3yOOQ$IS-E9y-E9yO#&XQ$IZO7+&]O!DvQ$IWO'#GSO3[Q$IWO7+&]O3[Q$IWO7+&`O#)jQ$I[O,5<oO'UQ$IWO,5<oO#)tQ$IWO1G4POOQ$IS-E:R-E:RO#*OQ$IWO1G4PO3[Q$IWO7+&bO/mQ$IWO7+&bOOQ$IV7+&g7+&gO!E{Q%1`O7+&iO#*WQ$IXO1G0rOOQ$IV-E:S-E:SO3[Q$IWO7+&cO3[Q$IWO7+&cOOQ$IV,5<p,5<pO#+|Q$IWO,5<pOOQ$IV7+&c7+&cO#,XQ$IZO7+&cO#/gQ$IWO,5<qO#/rQ$IWO1G4QOOQ$IS-E:T-E:TO#0PQ$IWO1G4QO#0XQ$IWO'#H|O#0gQ$IWO'#H|O0SQ$IWO'#H|OOQ$IS'#H|'#H|O#0rQ$IWO'#H{OOQ$IS,5;e,5;eO#0zQ$IWO,5;eO/mQ$IWO'#E{OOQ$IV7+&i7+&iO3[Q$IWO7+&iOOQ$IV7+&n7+&nO#1PQ$IYO,5;oOOQ$IV7+&s7+&sOOQ$IS1G3a1G3aOOQ$IS,5<Y,5<YO#1UQ$IWO1G3`OOQ$IS-E9l-E9lO#1iQ$IWO,5<ZO#1tQ$IWO,5<ZO#2XQ$IWO1G3cOOQ$IS-E9m-E9mO#2iQ$IWO1G3cO#2qQ$IWO1G3cO#3RQ$IWO1G3cO#2iQ$IWO1G3cOOQ$IS<<HY<<HYO#3^Q$I[O1G1qOOQ$IS<<Hi<<HiP#3kQ$IWO'#FkO7ZQ$IWO1G3YO#3xQ$IWO1G3YO#3}Q$IWO<<HiOOQ$IS<<Hj<<HjO#4_Q$IWO7+(xOOQ$IS<<Hq<<HqO#4oQ$I[O1G1pP#5`Q$IWO'#FjO#5mQ$IWO7+(yO#5}Q$IWO7+(yO#6VQ$IWO<<HuO#6[Q$IWO7+(sOOQ$IS<<Hw<<HwO#7RQ$IWO,5<XO'UQ$IWO,5<XOOQ$IS-E9k-E9kOOQ$IS<<Hu<<HuOOQ$IS,5<_,5<_O/mQ$IWO,5<_O#7WQ$IWO1G3nOOQ$IS-E9q-E9qO#7nQ$IWO1G3nOOOO'#Ft'#FtO#7|O!LQO,5:cOOOO,5>T,5>TOOOO7+%g7+%gO#8XQ$IWO1G2rO#8rQ$IWO1G2rP'UQ$IWO'#FlO/mQ$IWO<<IkO#9TQ$IWO,5>bO#9fQ$IWO,5>bO0SQ$IWO,5>bO#9wQ$IWO,5>aOOQ$IS<<Im<<ImP0SQ$IWO'#GPP/mQ$IWO'#F{OOQ$IV-E:Q-E:QO3[Q$IWO<<IwOOQ$IV,5<n,5<nO3[Q$IWO,5<nOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#9|Q$I[O1G2ZP#:WQ$IWO'#GTO#:_Q$IWO7+)kO#:iQ$IZO<<I|O3[Q$IWO<<I|OOQ$IV<<JT<<JTO3[Q$IWO<<JTOOQ$IV'#GR'#GRO#=wQ$IZO7+&^OOQ$IV<<I}<<I}O#?sQ$IZO<<I}OOQ$IV1G2[1G2[O0SQ$IWO1G2[O3[Q$IWO<<I}O0SQ$IWO1G2]P/mQ$IWO'#GVO#CRQ$IWO7+)lO#C`Q$IWO7+)lOOQ$IS'#Ez'#EzO/mQ$IWO,5>hO#ChQ$IWO,5>hOOQ$IS,5>h,5>hO#CsQ$IWO,5>gO#DUQ$IWO,5>gOOQ$IS1G1P1G1POOQ$IS,5;g,5;gO#D^Q$IWO1G1ZP#DcQ$IWO'#FnO#DsQ$IWO1G1uO#EWQ$IWO1G1uO#EhQ$IWO1G1uP#EsQ$IWO'#FoO#FQQ$IWO7+(}O#FbQ$IWO7+(}O#FbQ$IWO7+(}O#FjQ$IWO7+(}O#FzQ$IWO7+(tO7ZQ$IWO7+(tOOQ$ISAN>TAN>TO#GeQ$IWO<<LeOOQ$ISAN>aAN>aO/mQ$IWO1G1sO#GuQ$I[O1G1sP#HPQ$IWO'#FmOOQ$IS1G1y1G1yP#H^Q$IWO'#FsO#HkQ$IWO7+)YOOOO-E9r-E9rO#IRQ$IWO7+(^OOQ$ISAN?VAN?VO#IlQ$IWO,5<jO#JQQ$IWO1G3|OOQ$IS-E9|-E9|O#JcQ$IWO1G3|OOQ$IS1G3{1G3{OOQ$IVAN?cAN?cOOQ$IV1G2Y1G2YO3[Q$IWOAN?hO#JtQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E:P-E:POOQ$IV<<Ix<<IxO3[Q$IWOAN?iO3[Q$IWO7+'vOOQ$IVAN?iAN?iOOQ$IS7+'w7+'wO#NSQ$IWO<<MWOOQ$IS1G4S1G4SO/mQ$IWO1G4SOOQ$IS,5<r,5<rO#NaQ$IWO1G4ROOQ$IS-E:U-E:UOOQ$IU'#GY'#GYO#NrQ$IYO7+&uO#N}Q$IWO'#FUO$ uQ$IWO7+'aO$!VQ$IWO7+'aOOQ$IS7+'a7+'aO$!bQ$IWO<<LiO$!rQ$IWO<<LiO$!rQ$IWO<<LiO$!zQ$IWO'#HUOOQ$IS<<L`<<L`O$#UQ$IWO<<L`OOQ$IS7+'_7+'_O0SQ$IWO1G2UP0SQ$IWO'#GOO$#oQ$IWO7+)hO$$QQ$IWO7+)hOOQ$IVG25SG25SO3[Q$IWOG25SOOQ$IVG25TG25TOOQ$IV<<Kb<<KbOOQ$IS7+)n7+)nP$$cQ$IWO'#GWOOQ$IU-E:W-E:WOOQ$IV<<Ja<<JaO$%VQ$I[O'#FWOOQ$IS'#FY'#FYO$%gQ$IWO'#FXO$&XQ$IWO'#FXOOQ$IS'#FX'#FXO$&^Q$IWO'#IOO#N}Q$IWO'#F`O#N}Q$IWO'#F`O$&uQ$IWO'#FaO#N}Q$IWO'#FbO$&|Q$IWO'#IPOOQ$IS'#IP'#IPO$'kQ$IWO,5;pOOQ$IS<<J{<<J{O$'sQ$IWO<<J{O$(TQ$IWOANBTO$(eQ$IWOANBTO$(mQ$IWO'#HVOOQ$IS'#HV'#HVO0nQ$IWO'#DaO$)WQ$IWO,5=pOOQ$ISANAzANAzOOQ$IS7+'p7+'pO$)oQ$IWO<<MSOOQ$IVLD*nLD*nO4YQ%1`O'#G[O$*QQ$I[O,5;yO#N}Q$IWO'#FdOOQ$IS,5;},5;}OOQ$IS'#FZ'#FZO$*rQ$IWO,5;sO$*wQ$IWO,5;sOOQ$IS'#F^'#F^O#N}Q$IWO'#GZO$+iQ$IWO,5;wO$,TQ$IWO,5>jO$,eQ$IWO,5>jO0SQ$IWO,5;vO$,vQ$IWO,5;zO$,{Q$IWO,5;zO#N}Q$IWO'#IQO$-QQ$IWO'#IQO$-VQ$IWO,5;{OOQ$IS,5;|,5;|O'UQ$IWO'#FgOOQ$IU1G1[1G1[O3[Q$IWO1G1[OOQ$ISAN@gAN@gO$-[Q$IWOG27oO$-lQ$IWO,59{OOQ$IS1G3[1G3[OOQ$IS,5<v,5<vOOQ$IS-E:Y-E:YO$-qQ$I[O'#FWO$-xQ$IWO'#IRO$.WQ$IWO'#IRO$.`Q$IWO,5<OOOQ$IS1G1_1G1_O$.eQ$IWO1G1_O$.jQ$IWO,5<uOOQ$IS-E:X-E:XO$/UQ$IWO,5<yO$/mQ$IWO1G4UOOQ$IS-E:]-E:]OOQ$IS1G1b1G1bOOQ$IS1G1f1G1fO$/}Q$IWO,5>lO#N}Q$IWO,5>lOOQ$IS1G1g1G1gO$0]Q$I[O,5<ROOQ$IU7+&v7+&vO$!zQ$IWO1G/gO#N}Q$IWO,5<PO$0dQ$IWO,5>mO$0kQ$IWO,5>mOOQ$IS1G1j1G1jOOQ$IS7+&y7+&yP#N}Q$IWO'#G_O$0sQ$IWO1G4WO$0}Q$IWO1G4WO$1VQ$IWO1G4WOOQ$IS7+%R7+%RO$1eQ$IWO1G1kO$1sQ$I[O'#FWO$1zQ$IWO,5<xOOQ$IS,5<x,5<xO$2YQ$IWO1G4XOOQ$IS-E:[-E:[O#N}Q$IWO,5<wO$2aQ$IWO,5<wO$2fQ$IWO7+)rOOQ$IS-E:Z-E:ZO$2pQ$IWO7+)rO#N}Q$IWO,5<QP#N}Q$IWO'#G^O$2xQ$IWO1G2cO#N}Q$IWO1G2cP$3WQ$IWO'#G]O$3_Q$IWO<<M^O$3iQ$IWO1G1lO$3wQ$IWO7+'}O7ZQ$IWO'#C{O7ZQ$IWO,59`O7ZQ$IWO,59`O7ZQ$IWO,59`O$4VQ$I[O,5=WO7ZQ$IWO1G.zO/mQ$IWO1G/VO/mQ$IWO7+$nP$4jQ$IWO'#FyO'UQ$IWO'#GlO$4wQ$IWO,59`O$4|Q$IWO,59`O$5TQ$IWO,59kO$5YQ$IWO1G/SO0nQ$IWO'#DPO7ZQ$IWO,59h",
        stateData: "$5p~O%[OS%XOS%WOSQOS~OPhOTeOdsOfXOmtOq!SOtuO}vO!O!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO#v![O%VqO%gQO%hQO%lRO%mVO&R[O&S]O&V^O&Y_O&``O&caO&ebO~OT!bO]!bO_!cOf!jO!V!lO!d!nO%b!]O%c!^O%d!_O%e!`O%f!`O%g!aO%h!aO%i!bO%j!bO%k!bO~Oi%pXj%pXk%pXl%pXm%pXn%pXq%pXx%pXy%pX!s%pX#^%pX%V%pX%Y%pX%r%pXe%pX!R%pX!S%pX%s%pX!U%pX!Y%pX!O%pX#V%pXr%pX!j%pX~P$bOdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO%gQO%hQO%lRO%mVO&R[O&S]O&V^O&Y_O&``O&caO&ebO~Ox%oXy%oX#^%oX%V%oX%Y%oX%r%oX~Oi!qOj!rOk!pOl!pOm!sOn!tOq!uO!s%oX~P(cOT!{Oe!}Om/jOt/xO}vO~P'UOT#POm/jOt/xO!U#QO~P'UOT#TO_#UOm/jOt/xO!Y#VO~P'UO&T#YO&U#[O~O&W#]O&X#[O~O!Z#_O&Z#`O&_#bO~O!Z#_O&a#cO&b#bO~O!Z#_O&U#bO&d#eO~O!Z#_O&X#bO&f#gO~OT%aX]%aX_%aXf%aXi%aXj%aXk%aXl%aXm%aXn%aXq%aXx%aX!V%aX!d%aX%b%aX%c%aX%d%aX%e%aX%f%aX%g%aX%h%aX%i%aX%j%aX%k%aXe%aX!R%aX!S%aX~O&R[O&S]O&V^O&Y_O&``O&caO&ebOy%aX!s%aX#^%aX%V%aX%Y%aX%r%aX%s%aX!U%aX!Y%aX!O%aX#V%aXr%aX!j%aX~P+{Ox#lOy%`X!s%`X#^%`X%V%`X%Y%`X%r%`X~Om/jOt/xO~P'UO#^#oO%V#qO%Y#qO~O%mVO~O!R#vO#l!YO#q!ZO#tlO~OmtO~P'UOT#{O_#|O%mVOyuP~OT$QOm/jOt/xO!O$RO~P'UOy$TO!s$YO%r$UO#^!tX%V!tX%Y!tX~OT$QOm/jOt/xO#^!}X%V!}X%Y!}X~P'UOm/jOt/xO#^#RX%V#RX%Y#RX~P'UO!d$`O!m$`O%mVO~OT$jO~P'UO!S$lO#j$mO#l$nO~Oy$oO~OT$vO~P'UOT%PO_%POe%ROm/jOt/xO~P'UOm/jOt/xOy%UO~P'UO&Q%WO~O_!cOf!jO!V!lO!d!nOT`a]`ai`aj`ak`al`am`an`aq`ax`ay`a!s`a#^`a%V`a%Y`a%b`a%c`a%d`a%e`a%f`a%g`a%h`a%i`a%j`a%k`a%r`ae`a!R`a!S`a%s`a!U`a!Y`a!O`a#V`ar`a!j`a~Ol%]O~Om%]O~P'UOm/jO~P'UOi/lOj/mOk/kOl/kOm/tOn/uOq/yOe%oX!R%oX!S%oX%s%oX!U%oX!Y%oX!O%oX#V%oX!j%oX~P(cO%s%_Oe%nXx%nX!R%nX!S%nX!U%nXy%nX~Oe%aOx%bO!R%fO!S%eO~Oe%aO~Ox%iO!R%fO!S%eO!U%zX~O!U%mO~Ox%nOy%pO!R%fO!S%eO!Y%uX~O!Y%tO~O!Y%uO~O&T#YO&U%wO~O&W#]O&X%wO~OT%zOm/jOt/xO}vO~P'UO!Z#_O&Z#`O&_%}O~O!Z#_O&a#cO&b%}O~O!Z#_O&U%}O&d#eO~O!Z#_O&X%}O&f#gO~OT!la]!la_!laf!lai!laj!lak!lal!lam!lan!laq!lax!lay!la!V!la!d!la!s!la#^!la%V!la%Y!la%b!la%c!la%d!la%e!la%f!la%g!la%h!la%i!la%j!la%k!la%r!lae!la!R!la!S!la%s!la!U!la!Y!la!O!la#V!lar!la!j!la~P#yOx&SOy%`a!s%`a#^%`a%V%`a%Y%`a%r%`a~P$bOT&UOmtOtuOy%`a!s%`a#^%`a%V%`a%Y%`a%r%`a~P'UOx&SOy%`a!s%`a#^%`a%V%`a%Y%`a%r%`a~OPhOTeOmtOtuO}vO!O!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$tX%V$tX%Y$tX~P'UO#^#oO%V&ZO%Y&ZO~O!d&[Of&hX%V&hX#V&hX#^&hX%Y&hX#U&hX~Of!jO%V&^O~Oicajcakcalcamcancaqcaxcayca!sca#^ca%Vca%Yca%rcaeca!Rca!Sca%sca!Uca!Yca!Oca#Vcarca!jca~P$bOqoaxoayoa#^oa%Voa%Yoa%roa~Oi!qOj!rOk!pOl!pOm!sOn!tO!soa~PDbO%r&`Ox%qXy%qX~O%mVOx%qXy%qX~Ox&cOyuX~Oy&eO~Ox%nO#^%uX%V%uX%Y%uXe%uXy%uX!Y%uX!j%uX%r%uX~OT/sOm/jOt/xO}vO~P'UO%r$UO#^Sa%VSa%YSa~Ox&nO#^%wX%V%wX%Y%wXl%wX~P$bOx&qO!O&pO#^#Ra%V#Ra%Y#Ra~O#V&rO#^#Ta%V#Ta%Y#Ta~O!d$`O!m$`O#U&tO%mVO~O#U&tO~Ox&vO#^&kX%V&kX%Y&kX~Ox&xO#^&gX%V&gX%Y&gXy&gX~Ox&|Ol&mX~P$bOl'PO~OPhOTeOmtOtuO}vO!O!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO%V'UO~P'UOr'YO#g'WO#h'XOP#eaT#ead#eaf#eam#eaq#eat#ea}#ea!O#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea#v#ea%S#ea%V#ea%g#ea%h#ea%l#ea%m#ea&R#ea&S#ea&V#ea&Y#ea&`#ea&c#ea&e#ea%U#ea%Y#ea~Ox'ZO#V']Oy&nX~Of'_O~Of!jOy$oO~Oy'cO~P$bOT!bO]!bO_!cOf!jO!V!lO!d!nO%d!_O%e!`O%f!`O%g!aO%h!aO%i!bO%j!bO%k!bOiUijUikUilUimUinUiqUixUiyUi!sUi#^Ui%VUi%YUi%bUi%rUieUi!RUi!SUi%sUi!UUi!YUi!OUi#VUirUi!jUi~O%c!^O~P! ]O%cUi~P! ]OT!bO]!bO_!cOf!jO!V!lO!d!nO%g!aO%h!aO%i!bO%j!bO%k!bOiUijUikUilUimUinUiqUixUiyUi!sUi#^Ui%VUi%YUi%bUi%cUi%dUi%rUieUi!RUi!SUi%sUi!UUi!YUi!OUi#VUirUi!jUi~O%e!`O%f!`O~P!$WO%eUi%fUi~P!$WO_!cOf!jO!V!lO!d!nOiUijUikUilUimUinUiqUixUiyUi!sUi#^Ui%VUi%YUi%bUi%cUi%dUi%eUi%fUi%gUi%hUi%rUieUi!RUi!SUi%sUi!UUi!YUi!OUi#VUirUi!jUi~OT!bO]!bO%i!bO%j!bO%k!bO~P!'UOTUi]Ui%iUi%jUi%kUi~P!'UO!R%fO!S%eOe%}Xx%}X~O%r'gO%s'gO~P+{Ox'iOe%|X~Oe'kO~Ox'lOy'nO!U&PX~Om/jOt/xOx'lOy'oO!U&PX~P'UO!U'qO~Ok!pOl!pOm!sOn!tOihiqhixhiyhi!shi#^hi%Vhi%Yhi%rhi~Oj!rO~P!+wOjhi~P!+wOi/lOj/mOk/kOl/kOm/tOn/uO~Or'sO~P!-QOT'xOe'yOm/jOt/xO~P'UOe'yOx'zO~Oe'|O~O!S(OO~Oe(POx'zO!R%fO!S%eO~P$bOi/lOj/mOk/kOl/kOm/tOn/uOeoa!Roa!Soa%soa!Uoa!Yoa!Ooa#Voaroa!joa~PDbOT'xOm/jOt/xO!U%za~P'UOx(SO!U%za~O!U(TO~Ox(SO!R%fO!S%eO!U%za~P$bOT(XOm/jOt/xO!Y%ua#^%ua%V%ua%Y%uae%uay%ua!j%ua%r%ua~P'UOx(YO!Y%ua#^%ua%V%ua%Y%uae%uay%ua!j%ua%r%ua~O!Y(]O~Ox(YO!R%fO!S%eO!Y%ua~P$bOx(`O!R%fO!S%eO!Y%{a~P$bOx(cOy&[X!Y&[X!j&[X~Oy(fO!Y(hO!j(iO~OT&UOmtOtuOy%`i!s%`i#^%`i%V%`i%Y%`i%r%`i~P'UOx(jOy%`i!s%`i#^%`i%V%`i%Y%`i%r%`i~O!d&[Of&ha%V&ha#V&ha#^&ha%Y&ha#U&ha~O%V(oO~OT#{O_#|O%mVO~Ox&cOyua~OmtOtuO~P'UOx(YO#^%ua%V%ua%Y%uae%uay%ua!Y%ua!j%ua%r%ua~P$bOx(tO#^%`X%V%`X%Y%`X%r%`X~O%r$UO#^Si%VSi%YSi~O#^%wa%V%wa%Y%wal%wa~P'UOx(wO#^%wa%V%wa%Y%wal%wa~OT({Of(}O%mVO~O#U)OO~O%mVO#^&ka%V&ka%Y&ka~Ox)QO#^&ka%V&ka%Y&ka~Om/jOt/xO#^&ga%V&ga%Y&gay&ga~P'UOx)TO#^&ga%V&ga%Y&gay&ga~Or)XO#a)WOP#_iT#_id#_if#_im#_iq#_it#_i}#_i!O#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i#v#_i%S#_i%V#_i%g#_i%h#_i%l#_i%m#_i&R#_i&S#_i&V#_i&Y#_i&`#_i&c#_i&e#_i%U#_i%Y#_i~Or)YOP#biT#bid#bif#bim#biq#bit#bi}#bi!O#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi#v#bi%S#bi%V#bi%g#bi%h#bi%l#bi%m#bi&R#bi&S#bi&V#bi&Y#bi&`#bi&c#bi&e#bi%U#bi%Y#bi~OT)[Ol&ma~P'UOx)]Ol&ma~Ox)]Ol&ma~P$bOl)aO~O%T)dO~Or)gO#g'WO#h)fOP#eiT#eid#eif#eim#eiq#eit#ei}#ei!O#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei#v#ei%S#ei%V#ei%g#ei%h#ei%l#ei%m#ei&R#ei&S#ei&V#ei&Y#ei&`#ei&c#ei&e#ei%U#ei%Y#ei~Om/jOt/xOy$oO~P'UOm/jOt/xOy&na~P'UOx)mOy&na~OT)qO_)rOe)uO%i)sO%mVO~Oy$oO&q)wO~O%V){O~OT%PO_%POm/jOt/xOe%|a~P'UOx*POe%|a~Om/jOt/xOy*SO!U&Pa~P'UOx*TO!U&Pa~Om/jOt/xOx*TOy*WO!U&Pa~P'UOm/jOt/xOx*TO!U&Pa~P'UOx*TOy*WO!U&Pa~Ok/kOl/kOm/tOn/uOehiihiqhixhi!Rhi!Shi%shi!Uhiyhi!Yhi#^hi%Vhi%Yhi!Ohi#Vhirhi!jhi%rhi~Oj/mO~P!H_Ojhi~P!H_OT'xOe*]Om/jOt/xO~P'UOl*_O~Oe*]Ox*aO~Oe*bO~OT'xOm/jOt/xO!U%zi~P'UOx*cO!U%zi~O!U*dO~OT(XOm/jOt/xO!Y%ui#^%ui%V%ui%Y%uie%uiy%ui!j%ui%r%ui~P'UOx*gO!R%fO!S%eO!Y%{i~Ox*jO!Y%ui#^%ui%V%ui%Y%uie%uiy%ui!j%ui%r%ui~O!Y*kO~O_*mOm/jOt/xO!Y%{i~P'UOx*gO!Y%{i~O!Y*oO~OT*qOm/jOt/xOy&[a!Y&[a!j&[a~P'UOx*rOy&[a!Y&[a!j&[a~O!Z#_O&^*uO!Y!kX~O!Y*wO~Oy(fO!Y*xO~OT&UOmtOtuOy%`q!s%`q#^%`q%V%`q%Y%`q%r%`q~P'UOx$miy$mi!s$mi#^$mi%V$mi%Y$mi%r$mi~P$bOT&UOmtOtuO~P'UOT&UOm/jOt/xO#^%`a%V%`a%Y%`a%r%`a~P'UOx*yO#^%`a%V%`a%Y%`a%r%`a~Ox$`a#^$`a%V$`a%Y$`al$`a~P$bO#^%wi%V%wi%Y%wil%wi~P'UOx*|O#^#Rq%V#Rq%Y#Rq~Ox*}O#V+PO#^&jX%V&jX%Y&jXe&jX~OT+ROf(}O%mVO~O%mVO#^&ki%V&ki%Y&ki~Om/jOt/xO#^&gi%V&gi%Y&giy&gi~P'UOr+VO#a)WOP#_qT#_qd#_qf#_qm#_qq#_qt#_q}#_q!O#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q#v#_q%S#_q%V#_q%g#_q%h#_q%l#_q%m#_q&R#_q&S#_q&V#_q&Y#_q&`#_q&c#_q&e#_q%U#_q%Y#_q~Ol$wax$wa~P$bOT)[Ol&mi~P'UOx+^Ol&mi~OPhOTeOmtOq!SOtuO}vO!O!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO#v![O~P'UOx+hOy$oO#V+hO~O#h+iOP#eqT#eqd#eqf#eqm#eqq#eqt#eq}#eq!O#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq#v#eq%S#eq%V#eq%g#eq%h#eq%l#eq%m#eq&R#eq&S#eq&V#eq&Y#eq&`#eq&c#eq&e#eq%U#eq%Y#eq~O#V+jOx$yay$ya~Om/jOt/xOy&ni~P'UOx+lOy&ni~Oy$TO%r+nOe&pXx&pX~O%mVOe&pXx&pX~Ox+rOe&oX~Oe+tO~O%T+vO~OT%PO_%POm/jOt/xOe%|i~P'UOy+xOx$ca!U$ca~Om/jOt/xOy+yOx$ca!U$ca~P'UOm/jOt/xOy*SO!U&Pi~P'UOx+|O!U&Pi~Om/jOt/xOx+|O!U&Pi~P'UOx+|Oy,PO!U&Pi~Oe$_ix$_i!U$_i~P$bOT'xOm/jOt/xO~P'UOl,RO~OT'xOe,SOm/jOt/xO~P'UOT'xOm/jOt/xO!U%zq~P'UOx$^i!Y$^i#^$^i%V$^i%Y$^ie$^iy$^i!j$^i%r$^i~P$bOT(XOm/jOt/xO~P'UO_*mOm/jOt/xO!Y%{q~P'UOx,TO!Y%{q~O!Y,UO~OT(XOm/jOt/xO!Y%uq#^%uq%V%uq%Y%uqe%uqy%uq!j%uq%r%uq~P'UOy,VO~OT*qOm/jOt/xOy&[i!Y&[i!j&[i~P'UOx,[Oy&[i!Y&[i!j&[i~O!Z#_O&^*uO!Y!ka~OT&UOm/jOt/xO#^%`i%V%`i%Y%`i%r%`i~P'UOx,^O#^%`i%V%`i%Y%`i%r%`i~O%mVO#^&ja%V&ja%Y&jae&ja~Ox,aO#^&ja%V&ja%Y&jae&ja~Oe,dO~Ol$wix$wi~P$bOT)[O~P'UOT)[Ol&mq~P'UOr,gOP#dyT#dyd#dyf#dym#dyq#dyt#dy}#dy!O#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy#v#dy%S#dy%V#dy%g#dy%h#dy%l#dy%m#dy&R#dy&S#dy&V#dy&Y#dy&`#dy&c#dy&e#dy%U#dy%Y#dy~OPhOTeOmtOq!SOtuO}vO!O!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO#v![O%U,kO%Y,kO~P'UO#h,lOP#eyT#eyd#eyf#eym#eyq#eyt#ey}#ey!O#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey#v#ey%S#ey%V#ey%g#ey%h#ey%l#ey%m#ey&R#ey&S#ey&V#ey&Y#ey&`#ey&c#ey&e#ey%U#ey%Y#ey~Om/jOt/xOy&nq~P'UOx,pOy&nq~O%r+nOe&pax&pa~OT)qO_)rO%i)sO%mVOe&oa~Ox,tOe&oa~O#y,xO~OT%PO_%POm/jOt/xO~P'UOm/jOt/xOy,yOx$ci!U$ci~P'UOm/jOt/xOx$ci!U$ci~P'UOy,yOx$ci!U$ci~Om/jOt/xOy*SO~P'UOm/jOt/xOy*SO!U&Pq~P'UOx,|O!U&Pq~Om/jOt/xOx,|O!U&Pq~P'UOq-PO!R%fO!S%eOe%vq!U%vq!Y%vqx%vq~P!-QO_*mOm/jOt/xO!Y%{y~P'UOx$ai!Y$ai~P$bO_*mOm/jOt/xO~P'UOT*qOm/jOt/xO~P'UOT*qOm/jOt/xOy&[q!Y&[q!j&[q~P'UOT&UOm/jOt/xO#^%`q%V%`q%Y%`q%r%`q~P'UO#V-TOx$ra#^$ra%V$ra%Y$rae$ra~O%mVO#^&ji%V&ji%Y&jie&ji~Ox-VO#^&ji%V&ji%Y&jie&ji~Or-YOP#d!RT#d!Rd#d!Rf#d!Rm#d!Rq#d!Rt#d!R}#d!R!O#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R#v#d!R%S#d!R%V#d!R%g#d!R%h#d!R%l#d!R%m#d!R&R#d!R&S#d!R&V#d!R&Y#d!R&`#d!R&c#d!R&e#d!R%U#d!R%Y#d!R~Om/jOt/xOy&ny~P'UOT)qO_)rO%i)sO%mVOe&oi~O#y,xO%U-`O%Y-`O~OT-jOf-hO!V-gO!Z-iO!f-cO!n-eO!o-eO%h-bO%mVO&R[O&S]O&V^O~Om/jOt/xOx$cq!U$cq~P'UOy-oOx$cq!U$cq~Om/jOt/xOy*SO!U&Py~P'UOx-pO!U&Py~Om/jOt-tO~P'UOq-PO!R%fO!S%eOe%vy!U%vy!Y%vyx%vy~P!-QO%mVO#^&jq%V&jq%Y&jqe&jq~Ox-xO#^&jq%V&jq%Y&jqe&jq~OT)qO_)rO%i)sO%mVO~Of-|O!d-zOx#zX#V#zX%b#zXe#zX~Oq#zXy#zX!U#zX!Y#zX~P$$qO%g.OO%h.OOq#{Xx#{Xy#{X#V#{X%b#{X!U#{Xe#{X!Y#{X~O!f.QO~Ox.UO#V.WO%b.ROq&rXy&rX!U&rXe&rX~O_.ZO~P$ ZOf-|Oq&sXx&sXy&sX#V&sX%b&sX!U&sXe&sX!Y&sX~Oq._Oy$oO~Om/jOt/xOx$cy!U$cy~P'UOm/jOt/xOy*SO!U&P!R~P'UOx.cO!U&P!R~Oe%yXq%yX!R%yX!S%yX!U%yX!Y%yXx%yX~P!-QOq-PO!R%fO!S%eOe%xa!U%xa!Y%xax%xa~O%mVO#^&jy%V&jy%Y&jye&jy~O!d-zOf$Raq$Rax$Ray$Ra#V$Ra%b$Ra!U$Rae$Ra!Y$Ra~O!f.lO~O%g.OO%h.OOq#{ax#{ay#{a#V#{a%b#{a!U#{ae#{a!Y#{a~O%b.ROq$Pax$Pay$Pa#V$Pa!U$Pae$Pa!Y$Pa~Oq&ray&ra!U&rae&ra~P#N}Ox.qOq&ray&ra!U&rae&ra~O!U.tO~Oe.tO~Oy.vO~O!Y.wO~Om/jOt/xOy*SO!U&P!Z~P'UOy.zO~O%r.{O~P$$qOx.|O#V.WO%b.ROe&uX~Ox.|Oe&uX~Oe/OO~O!f/PO~O#V.WOq$}ax$}ay$}a%b$}a!U$}ae$}a!Y$}a~O#V.WO%b.ROq%Rax%Ray%Ra!U%Rae%Ra~Oq&riy&ri!U&rie&ri~P#N}Ox/RO#V.WO%b.RO!Y&ta~Oy$Za~P$bOe&ua~P#N}Ox/ZOe&ua~O_/]O!Y&ti~P$ ZOx/_O!Y&ti~Ox/_O#V.WO%b.RO!Y&ti~O#V.WO%b.ROe$Xix$Xi~O%r/bO~P$$qO#V.WO%b.ROe%Qax%Qa~Oe&ui~P#N}Oy/eO~O_/]O!Y&tq~P$ ZOx/gO!Y&tq~O#V.WO%b.ROx%Pi!Y%Pi~O_/]O~P$ ZO_/]O!Y&ty~P$ ZO#V.WO%b.ROe$Yix$Yi~O#V.WO%b.ROx%Pq!Y%Pq~Ox*yO#^%`a%V%`a%Y%`a%r%`a~P$bOT&UOm/jOt/xO~P'UOl/oO~Om/oO~P'UOy/pO~Or/qO~P!-QO&S&V&c&e&R!Z&Z&a&d&f&Y&`&Y%m~",
        goto: "!:f&vPPPP&wP'P*e*}+h,S,o-]P-zP'P.k.k'PPPP'P2PPPPPPP2P4oPP4oP6{7U=QPP=T=u=xPP'P'PPP>UPP'P'PPP'P'P'P'P'P>Y?P'PP?SP?YC]FuPGZ'PPPPG_Ge&wP&w&wP&wP&wP&wP&wP&w&w&wP&wPP&wPP&wPGkPGrGxPGrPGrGrPPPGrPIwPJQJWJ^IwPGrJdPGrPJkJqPJuKZKxLcJuJuLiLvJuJuJuJuM[MbMeMjMmMsMyNVNiNoNy! P! m! s! y!!P!!Z!!a!!g!!m!!s!!y!#]!#g!#m!#s!#y!$T!$Z!$a!$g!$m!$w!$}!%X!%_!%h!%n!%}!&V!&a!&hPPPPPPPPP!&n!&v!'P!'Z!'fPPPPPPPPPPPP!,U!-j!1`!4lPP!4t!5S!5]!6R!5x!6[!6b!6e!6h!6k!6s!7dPPPPPPPPPP!7g!7jPPPPPPPPP!7p!7|!8Y!8`!8i!8l!8r!8x!9O!9RP!9Z!9d!:`!:c]iOr#o$o)d+d'udOSXYZehrstvx|}!R!S!T!U!X![!d!e!f!g!h!i!j!l!p!q!r!t!u!{#P#T#U#_#l#o$Q$R$T$V$Y$j$l$m$o$v%P%U%]%`%b%e%i%n%p%z&S&U&a&e&n&p&q&x&|'P'W'Z'h'i'l'n'o's'x'z(O(S(X(Y(`(c(j(l(t(w)T)W)[)])a)d)m)w*P*S*T*W*^*_*a*c*f*g*j*m*q*r*y*{*|+T+]+^+d+k+l+o+w+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p._.c.z/j/k/l/m/o/p/q/r/s/u/y}!dP#k#x$Z$i$u%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n!P!eP#k#x$Z$i$u$w%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n!R!fP#k#x$Z$i$u$w$x%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n!T!gP#k#x$Z$i$u$w$x$y%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n!V!hP#k#x$Z$i$u$w$x$y$z%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n!X!iP#k#x$Z$i$u$w$x$y$z${%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n!]!iP!o#k#x$Z$i$u$w$x$y$z${$|%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/n'uSOSXYZehrstvx|}!R!S!T!U!X![!d!e!f!g!h!i!j!l!p!q!r!t!u!{#P#T#U#_#l#o$Q$R$T$V$Y$j$l$m$o$v%P%U%]%`%b%e%i%n%p%z&S&U&a&e&n&p&q&x&|'P'W'Z'h'i'l'n'o's'x'z(O(S(X(Y(`(c(j(l(t(w)T)W)[)])a)d)m)w*P*S*T*W*^*_*a*c*f*g*j*m*q*r*y*{*|+T+]+^+d+k+l+o+w+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p._.c.z/j/k/l/m/o/p/q/r/s/u/y&ZUOXYZhrtv|}!R!S!T!X!j!l!p!q!r!t!u#_#l#o$R$T$V$Y$m$o%P%U%]%`%b%i%n%p%z&S&a&e&p&q&x'P'W'Z'h'i'l'n'o's'z(S(Y(`(c(j(l(t)T)W)a)d)m)w*P*S*T*W*^*_*a*c*f*g*j*q*r*y*|+T+d+k+l+o+w+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p.c.z/j/k/l/m/o/p/q/r/u/y%eWOXYZhrv|}!R!S!T!X!j!l#_#l#o$R$T$V$Y$m$o%P%U%`%b%i%n%p%z&S&a&e&p&q&x'P'W'Z'h'i'l'n'o's'z(S(Y(`(c(j(l(t)T)W)a)d)m)w*P*S*T*W*^*a*c*f*g*j*q*r*y*|+T+d+k+l+o+w+x+y+{+|,P,T,V,X,Z,[,^,p,r,y,|-o-p.c/p/q/rQ$OuQ.d-tR/v/x'ldOSXYZehrstvx|}!R!S!T!U!X![!d!e!f!g!h!i!l!p!q!r!t!u!{#P#T#U#_#l#o$Q$R$T$V$Y$j$l$m$o$v%P%U%]%`%b%e%i%n%p%z&S&U&a&e&n&p&q&x&|'P'W'Z'h'l'n'o's'x'z(O(S(X(Y(`(c(j(l(t(w)T)W)[)])a)d)m)w*S*T*W*^*_*a*c*f*g*j*m*q*r*y*{*|+T+]+^+d+k+l+o+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p._.c.z/j/k/l/m/o/p/q/r/s/u/yW#rl!O!P$aW#zu&c-t/xQ$c!QQ$s!YQ$t!ZW%O!j'i*P+wS&b#{#|Q'S$nQ(m&[Q({&rU(|&t(})OU)P&v)Q+SQ)o']W)p'_+r,t-^S+q)q)rY,`*},a-U-V-xQ,c+PQ,m+hQ,o+jl-a,x-g-h-j.S.U.Z.q.v.{/Q/]/b/eQ-w-TQ.[-iQ.h-|Q.s.WU/W.|/Z/cX/^/R/_/f/gR&a#z!_!xXY!S!T!l%U%b%i'l'n'o'z(S)W*S*T*W*^*a*c+x+y+{+|,P,y,|-o-p.cR%`!wQ!|XQ%{#_Q&j$VR&m$YT-s-P.z![!kP!o#k#x$Z$i$u$w$x$y$z${$|%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/nQ&_#sR'b$tR'h%OQ%X!nR.f-z'tcOSXYZehrstvx|}!R!S!T!U!X![!d!e!f!g!h!i!j!l!p!q!r!t!u!{#P#T#U#_#l#o$Q$R$T$V$Y$j$l$m$o$v%P%U%]%`%b%e%i%n%p%z&S&U&a&e&n&p&q&x&|'P'W'Z'h'i'l'n'o's'x'z(O(S(X(Y(`(c(j(l(t(w)T)W)[)])a)d)m)w*P*S*T*W*^*_*a*c*f*g*j*m*q*r*y*{*|+T+]+^+d+k+l+o+w+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p._.c.z/j/k/l/m/o/p/q/r/s/u/yS#ic#j!P-e,x-g-h-i-j-|.S.U.Z.q.v.{.|/Q/R/Z/]/_/b/c/e/f/g'tcOSXYZehrstvx|}!R!S!T!U!X![!d!e!f!g!h!i!j!l!p!q!r!t!u!{#P#T#U#_#l#o$Q$R$T$V$Y$j$l$m$o$v%P%U%]%`%b%e%i%n%p%z&S&U&a&e&n&p&q&x&|'P'W'Z'h'i'l'n'o's'x'z(O(S(X(Y(`(c(j(l(t(w)T)W)[)])a)d)m)w*P*S*T*W*^*_*a*c*f*g*j*m*q*r*y*{*|+T+]+^+d+k+l+o+w+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p._.c.z/j/k/l/m/o/p/q/r/s/u/yT#ic#jS#`_#aS#c`#dS#ea#fS#gb#hT*u(f*vT(g%{(iQ$XwR+p)pX$Vw$W$X&lZkOr$o)d+dXoOr)d+dQ$p!WQ&z$gQ&{$hQ'^$rQ'a$tQ)b'RQ)h'WQ)j'XQ)k'YQ)x'`Q)z'bQ+W)WQ+Y)XQ+Z)YQ+_)`S+a)c)yQ+e)fQ+f)gQ+g)iQ,e+VQ,f+XQ,h+`Q,i+bQ,n+iQ-X,gQ-Z,lQ-[,mQ-y-YQ.`-mR.y.aWoOr)d+dR#unQ'`$sR)c'SQ+o)pR,r+pQ)y'`R+b)cZmOnr)d+dQ'd$uR)|'eT,v+v,wu-l,x-g-h-j-|.S.U.Z.q.v.{.|/Q/Z/]/b/c/et-l,x-g-h-j-|.S.U.Z.q.v.{.|/Q/Z/]/b/c/eQ.[-iX/^/R/_/f/g!P-d,x-g-h-i-j-|.S.U.Z.q.v.{.|/Q/R/Z/]/_/b/c/e/f/gQ.P-cR.m.Qg.S-f.T.i.p.u/T/V/X/d/h/iu-k,x-g-h-j-|.S.U.Z.q.v.{.|/Q/Z/]/b/c/eX-}-a-k.h/WR.j-|V/Y.|/Z/cR.a-mQrOR#wrQ&d#}R(r&dS%o#S$PS(Z%o(^T(^%r&fQ%c!zQ%j#OW'{%c%j(Q(UQ(Q%gR(U%lQ&o$ZR(x&oQ(a%sQ*h([T*n(a*hQ'j%QR*Q'jS'm%T%UY*U'm*V+},}-qU*V'n'o'pU+}*W*X*YS,},O,PR-q-OQ#Z]R%v#ZQ#^^R%x#^Q#a_R%|#aQ(d%yS*s(d*tR*t(eQ*v(fR,]*vQ#d`R&O#dQ#faR&P#fQ#hbR&Q#hQ#jcR&R#jQ#mfQ&T#kW&W#m&T(u*zQ(u&iR*z/nQ$WwS&k$W&lR&l$XQ&y$eR)U&yQ&]#rR(n&]Q$a!PR&s$aQ+O(|S,b+O-WR-W,cQ&w$cR)R&wQ#pjR&Y#pQ+d)dR,j+dQ)V&zR+U)VQ&}$iS)^&})_R)_'OQ'V$pR)e'VQ'[$qS)n'[+mR+m)oQ+s)tR,u+sWnOr)d+dR#tnQ,w+vR-_,wd.T-f.i.p.u/T/V/X/d/h/iR.o.TU-{-a.h/WR.g-{Q/S.uS/`/S/aR/a/TS.}.i.jR/[.}Q.V-fR.r.VSqOrT+c)d+dWpOr)d+dR'T$oYjOr$o)d+dR&X#o[wOr#o$o)d+dR&j$V&YPOXYZhrtv|}!R!S!T!X!j!l!p!q!r!t!u#_#l#o$R$T$V$Y$m$o%P%U%]%`%b%i%n%p%z&S&a&e&p&q&x'P'W'Z'h'i'l'n'o's'z(S(Y(`(c(j(l(t)T)W)a)d)m)w*P*S*T*W*^*_*a*c*f*g*j*q*r*y*|+T+d+k+l+o+w+x+y+{+|,P,R,T,V,X,Z,[,^,p,r,y,|-P-o-p.c.z/j/k/l/m/o/p/q/r/u/yQ!oSQ#keQ#xsU$Zx%e(OS$i!U$lQ$u![Q$w!dQ$x!eQ$y!fQ$z!gQ${!hQ$|!iQ%g!{Q%l#PQ%r#TQ%s#UQ&f$QQ'O$jQ'e$vQ(k&UU(v&n(w*{W)Z&|)]+]+^Q*['xQ*e(XQ+[)[Q,W*mQ.x._R/n/sQ!zXQ#OYQ$g!SQ$h!TQ%T!lQ'p%U^'w%b%i'z(S*^*a*c^*R'l*T+{+|,|-p.cQ*X'nQ*Y'oQ+X)WQ+z*SQ,O*WQ,z+xQ,{+yQ-O,PQ-n,yR.b-o[fOr#o$o)d+d!^!wXY!S!T!l%U%b%i'l'n'o'z(S)W*S*T*W*^*a*c+x+y+{+|,P,y,|-o-p.cQ#SZQ#nhS$Pv|Q$^}W$e!R$Y'P)aS$q!X$mW$}!j'i*P+wQ%y#_`&V#l&S(j(l(t*y,^/rQ&g$RQ&h$TQ&i$VQ'f%PQ'v%`W(W%n(Y*f*jQ([%pQ(e%zQ(p&aS(s&e/pQ(y&pQ(z&qU)S&x)T+TQ)i'WY)l'Z)m+k+l,pQ)}'hS*Z's/qW*l(`*g,T,XW*p(c*r,Z,[Q+u)wQ,Y*qQ,_*|Q,q+oQ-S,VR-],rhTOr#l#o$o&S&e's(j(l)d+d$z!vXYZhv|}!R!S!T!X!j!l#_$R$T$V$Y$m%P%U%`%b%i%n%p%z&a&p&q&x'P'W'Z'h'i'l'n'o'z(S(Y(`(c(t)T)W)a)m)w*P*S*T*W*^*a*c*f*g*j*q*r*y*|+T+k+l+o+w+x+y+{+|,P,T,V,X,Z,[,^,p,r,y,|-o-p.c/p/q/rQ#ytW%Y!p!t/k/uQ%Z!qQ%[!rQ%^!uQ%h/jS'r%]/oQ't/lQ'u/mQ,Q*_Q-R,RS-r-P.zR/w/yU#}u-t/xR(q&c[gOr#o$o)d+dX!yX#_$V$YQ#XZQ$SvR$]|Q%d!zQ%k#OQ%q#SQ'f$}Q(R%gQ(V%lQ(_%rQ(b%sQ*i([Q-Q,QQ-v-RR.e-uQ$[xQ'}%eR*`(OQ-u-PR/U.zR#RYR#WZR%S!jQ%Q!jV*O'i*P+w!]!mP!o#k#x$Z$i$u$w$x$y$z${$|%g%l%r%s&f'O'e(k(v)Z*[*e+[,W.x/nR%V!lR%{#_Q(h%{R*x(iQ$f!RQ&m$YQ)`'PR+`)aQ#slQ$_!OQ$b!PR&u$aQ({&tR+R)OQ({&tQ+Q(}R+R)OR$d!QXpOr)d+dQ$k!UR'Q$lQ$r!XR'R$mR)v'_Q)t'_V,s+r,t-^Q-m,xQ.X-gR.Y-hU-f,x-g-hQ.^-jQ.i-|Q.n.SU.p.U.q/QQ.u.ZQ/T.vQ/V.{U/X.|/Z/cQ/d/]Q/h/bR/i/eR.]-iR.k-|",
        nodeNames: "\u26A0 print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
        maxTerm: 267,
        context: trackIndent,
        nodeProps: [
          ["group", -14, 4, 80, 82, 83, 85, 87, 89, 91, 93, 94, 95, 97, 100, 103, "Statement Statement", -22, 6, 16, 19, 23, 38, 47, 48, 54, 55, 58, 59, 60, 61, 62, 65, 68, 69, 70, 74, 75, 76, 77, "Expression", -10, 105, 107, 110, 112, 113, 117, 119, 124, 126, 129, "Statement", -9, 134, 135, 138, 139, 141, 142, 143, 144, 145, "Pattern"],
          ["openedBy", 21, "(", 52, "[", 56, "{"],
          ["closedBy", 22, ")", 53, "]", 57, "}"]
        ],
        propSources: [pythonHighlighting],
        skippedNodes: [0, 2],
        repeatNodeCount: 38,
        tokenData: ")'WMgR!`OX%TXY!EQY[%T[]!EQ]p%Tpq!EQqr!Gkrs!Ktst#J]tu%Tuv&'{vw&*kwx&+}xy'*fyz'+rz{'-O{|'/z|}'1^}!O'2j!O!P'5]!P!Q'Ae!Q!R'Da!R!['Ho![!](&g!]!^()V!^!_(*c!_!`(-_!`!a(.q!a!b%T!b!c(1j!c!d(3O!d!e(4|!e!h(3O!h!i(?z!i!t(3O!t!u(J[!u!w(3O!w!x(>S!x!}(3O!}#O(Ll#O#P!Fp#P#Q(Mx#Q#R) U#R#S(3O#S#T%T#T#U(3O#U#V(4|#V#Y(3O#Y#Z(?z#Z#f(3O#f#g(J[#g#i(3O#i#j(>S#j#o(3O#o#p)!h#p#q)#d#q#r)$v#r#s)%z#s$g%T$g;'S(3O;'S;=`(4v<%lO(3O<r%f]&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<Q&j]&^7[&TS&Z`&d!bOr'crs!,gsw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'c<Q'r]&^7[&TS&WW&Z`&d!b&f#tOr'crs&_sw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'c;p(t]&^7[&WW&f#tOr)mrs*ssw)mwxKmx#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)m;p)z]&^7[&TS&WW&d!b&f#tOr)mrs*ssw)mwx(kx#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)m;p*|]&^7[&TS&d!bOr)mrs+usw)mwx(kx#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)m;p,O]&^7[&TS&d!bOr)mrs,wsw)mwx(kx#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)m8r-QZ&^7[&TS&d!bOw,wwx-sx#O,w#O#P/}#P#o,w#o#p3n#p#q,w#q#r0l#r;'S,w;'S;=`7w<%lO,w8r-xZ&^7[Ow,wwx.kx#O,w#O#P/}#P#o,w#o#p3n#p#q,w#q#r0l#r;'S,w;'S;=`7w<%lO,w8r.pZ&^7[Ow,wwx/cx#O,w#O#P/}#P#o,w#o#p3n#p#q,w#q#r0l#r;'S,w;'S;=`7w<%lO,w7[/hT&^7[O#o/c#p#q/c#r;'S/c;'S;=`/w<%lO/c7[/zP;=`<%l/c8r0SW&^7[O#o,w#o#p0l#p#q,w#q#r0l#r;'S,w;'S;=`7Q;=`<%l0l<%lO,w!f0sX&TS&d!bOw0lwx1`x#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z<%lO0l!f1cXOw0lwx2Ox#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z<%lO0l!f2RWOw0lx#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z<%lO0l!f2nRO;'S0l;'S;=`2w;=`O0l!f3OY&TS&d!bOw0lwx1`x#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z;=`<%l0l<%lO0l!f3sX&TSOw4`wx4zx#O4`#O#P5y#P#o4`#o#p0l#p;'S4`;'S;=`6t<%lO4`S4eV&TSOw4`wx4zx#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`S4}VOw4`wx5dx#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`S5gUOw4`x#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`S5|RO;'S4`;'S;=`6V;=`O4`S6[W&TSOw4`wx4zx#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l4`<%lO4`S6wP;=`<%l4`!f6}P;=`<%l0l8r7XY&TS&d!bOw0lwx1`x#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z;=`<%l,w<%lO0l8r7zP;=`<%l,w;p8SW&^7[O#o)m#o#p8l#p#q)m#q#r8l#r;'S)m;'S;=`Jf;=`<%l8l<%lO)m%d8wZ&TS&WW&d!b&f#tOr8lrs9jsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l%d9qZ&TS&d!bOr8lrs:dsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l%d:kZ&TS&d!bOr8lrs0lsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l%d;eZ&WW&f#tOr8lrs9jsw8lwx<Wx#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l%d<_Z&WW&f#tOr8lrs9jsw8lwx=Qx#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l#|=XX&WW&f#tOr=Qrs=ts#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`<%lO=Q#|=wXOr=Qrs>ds#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`<%lO=Q#|>gWOr=Qs#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`<%lO=Q#|?SRO;'S=Q;'S;=`?];=`O=Q#|?dY&WW&f#tOr=Qrs=ts#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`;=`<%l=Q<%lO=Q#|@XX&WWOr@trsA`s#O@t#O#PB_#P#o@t#o#p=Q#p;'S@t;'S;=`CY<%lO@tW@yV&WWOr@trsA`s#O@t#O#PB_#P;'S@t;'S;=`CY<%lO@tWAcVOr@trsAxs#O@t#O#PB_#P;'S@t;'S;=`CY<%lO@tWA{UOr@ts#O@t#O#PB_#P;'S@t;'S;=`CY<%lO@tWBbRO;'S@t;'S;=`Bk;=`O@tWBpW&WWOr@trsA`s#O@t#O#PB_#P;'S@t;'S;=`CY;=`<%l@t<%lO@tWC]P;=`<%l@t#|CcP;=`<%l=Q%dCiRO;'S8l;'S;=`Cr;=`O8l%dC}[&TS&WW&d!b&f#tOr8lrs9jsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`;=`<%l8l<%lO8l%dDzZ&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P#oEm#o#p8l#p;'SEm;'S;=`JY<%lOEm[EtX&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm[FfX&TSOrEmrsGRswEmwxGsx#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm[GWX&TSOrEmrs4`swEmwxGsx#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm[GxX&WWOrEmrsFaswEmwxHex#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm[HjX&WWOrEmrsFaswEmwx@tx#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm[IYRO;'SEm;'S;=`Ic;=`OEm[IjY&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P;'SEm;'S;=`JY;=`<%lEm<%lOEm[J]P;=`<%lEm%dJcP;=`<%l8l;pJq[&TS&WW&d!b&f#tOr8lrs9jsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`;=`<%l)m<%lO8l;pKjP;=`<%l)m;pKv]&^7[&WW&f#tOr)mrs*ssw)mwxLox#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)m:YLxZ&^7[&WW&f#tOrLorsMks#OLo#O#P! Z#P#oLo#o#p@S#p#qLo#q#r=Q#r;'SLo;'S;=`!!o<%lOLo:YMpZ&^7[OrLorsNcs#OLo#O#P! Z#P#oLo#o#p@S#p#qLo#q#r=Q#r;'SLo;'S;=`!!o<%lOLo:YNhZ&^7[OrLors/cs#OLo#O#P! Z#P#oLo#o#p@S#p#qLo#q#r=Q#r;'SLo;'S;=`!!o<%lOLo:Y! `W&^7[O#oLo#o#p=Q#p#qLo#q#r=Q#r;'SLo;'S;=`! x;=`<%l=Q<%lOLo:Y!!PY&WW&f#tOr=Qrs=ts#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`;=`<%lLo<%lO=Q:Y!!rP;=`<%lLo<Q!!zW&^7[O#o'c#o#p!#d#p#q'c#q#r!#d#r;'S'c;'S;=`!+^;=`<%l!#d<%lO'c%t!#qZ&TS&WW&Z`&d!b&f#tOr!#drs!$dsw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W<%lO!#d%t!$mZ&TS&Z`&d!bOr!#drs!%`sw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W<%lO!#d%t!%iZ&TS&Z`&d!bOr!#drs!&[sw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W<%lO!#d!v!&eX&TS&Z`&d!bOw!&[wx1`x#O!&[#O#P!'Q#P#o!&[#o#p!(V#p;'S!&[;'S;=`!(w<%lO!&[!v!'TRO;'S!&[;'S;=`!'^;=`O!&[!v!'gY&TS&Z`&d!bOw!&[wx1`x#O!&[#O#P!'Q#P#o!&[#o#p!(V#p;'S!&[;'S;=`!(w;=`<%l!&[<%lO!&[!v!([X&TSOw4`wx4zx#O4`#O#P5y#P#o4`#o#p!&[#p;'S4`;'S;=`6t<%lO4`!v!(zP;=`<%l!&[%t!)QRO;'S!#d;'S;=`!)Z;=`O!#d%t!)h[&TS&WW&Z`&d!b&f#tOr!#drs!$dsw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W;=`<%l!#d<%lO!#d%t!*eZ&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P#oEm#o#p!#d#p;'SEm;'S;=`JY<%lOEm%t!+ZP;=`<%l!#d<Q!+k[&TS&WW&Z`&d!b&f#tOr!#drs!$dsw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W;=`<%l'c<%lO!#d<Q!,dP;=`<%l'c<Q!,r]&^7[&TS&Z`&d!bOr'crs!-ksw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'c9S!-vZ&^7[&TS&Z`&d!bOw!-kwx-sx#O!-k#O#P!.i#P#o!-k#o#p!(V#p#q!-k#q#r!&[#r;'S!-k;'S;=`!0P<%lO!-k9S!.nW&^7[O#o!-k#o#p!&[#p#q!-k#q#r!&[#r;'S!-k;'S;=`!/W;=`<%l!&[<%lO!-k9S!/aY&TS&Z`&d!bOw!&[wx1`x#O!&[#O#P!'Q#P#o!&[#o#p!(V#p;'S!&[;'S;=`!(w;=`<%l!-k<%lO!&[9S!0SP;=`<%l!-k<b!0b]&^7[&WW&ap&f#tOr!1Zrs*ssw!1Zwx!<Tx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1Z<b!1j]&^7[&TS&WW&ap&d!b&f#tOr!1Zrs*ssw!1Zwx!0Vx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1Z<b!2hW&^7[O#o!1Z#o#p!3Q#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!:z;=`<%l!3Q<%lO!1Z&U!3_Z&TS&WW&ap&d!b&f#tOr!3Qrs9jsw!3Qwx!4Qx#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t<%lO!3Q&U!4ZZ&WW&ap&f#tOr!3Qrs9jsw!3Qwx!4|x#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t<%lO!3Q&U!5VZ&WW&ap&f#tOr!3Qrs9jsw!3Qwx!5xx#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t<%lO!3Q$n!6RX&WW&ap&f#tOr!5xrs=ts#O!5x#O#P!6n#P#o!5x#o#p!7s#p;'S!5x;'S;=`!8e<%lO!5x$n!6qRO;'S!5x;'S;=`!6z;=`O!5x$n!7TY&WW&ap&f#tOr!5xrs=ts#O!5x#O#P!6n#P#o!5x#o#p!7s#p;'S!5x;'S;=`!8e;=`<%l!5x<%lO!5x$n!7xX&WWOr@trsA`s#O@t#O#PB_#P#o@t#o#p!5x#p;'S@t;'S;=`CY<%lO@t$n!8hP;=`<%l!5x&U!8nRO;'S!3Q;'S;=`!8w;=`O!3Q&U!9U[&TS&WW&ap&d!b&f#tOr!3Qrs9jsw!3Qwx!4Qx#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t;=`<%l!3Q<%lO!3Q&U!:RZ&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P#oEm#o#p!3Q#p;'SEm;'S;=`JY<%lOEm&U!:wP;=`<%l!3Q<b!;X[&TS&WW&ap&d!b&f#tOr!3Qrs9jsw!3Qwx!4Qx#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t;=`<%l!1Z<%lO!3Q<b!<QP;=`<%l!1Z<b!<`]&^7[&WW&ap&f#tOr!1Zrs*ssw!1Zwx!=Xx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1Z:z!=dZ&^7[&WW&ap&f#tOr!=XrsMks#O!=X#O#P!>V#P#o!=X#o#p!7s#p#q!=X#q#r!5x#r;'S!=X;'S;=`!?m<%lO!=X:z!>[W&^7[O#o!=X#o#p!5x#p#q!=X#q#r!5x#r;'S!=X;'S;=`!>t;=`<%l!5x<%lO!=X:z!>}Y&WW&ap&f#tOr!5xrs=ts#O!5x#O#P!6n#P#o!5x#o#p!7s#p;'S!5x;'S;=`!8e;=`<%l!=X<%lO!5x:z!?pP;=`<%l!=X<r!?xW&^7[O#o%T#o#p!@b#p#q%T#q#r!@b#r;'S%T;'S;=`!Cu;=`<%l!@b<%lO%T&f!@qZ&TS&WW&Z`&ap&d!b&f#tOr!@brs!$dsw!@bwx!4Qx#O!@b#O#P!Ad#P#o!@b#o#p!Bu#p;'S!@b;'S;=`!Co<%lO!@b&f!AgRO;'S!@b;'S;=`!Ap;=`O!@b&f!BP[&TS&WW&Z`&ap&d!b&f#tOr!@brs!$dsw!@bwx!4Qx#O!@b#O#P!Ad#P#o!@b#o#p!Bu#p;'S!@b;'S;=`!Co;=`<%l!@b<%lO!@b&f!B|Z&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P#oEm#o#p!@b#p;'SEm;'S;=`JY<%lOEm&f!CrP;=`<%l!@b<r!DU[&TS&WW&Z`&ap&d!b&f#tOr!@brs!$dsw!@bwx!4Qx#O!@b#O#P!Ad#P#o!@b#o#p!Bu#p;'S!@b;'S;=`!Co;=`<%l%T<%lO!@b<r!D}P;=`<%l%TMg!Eec&^7[&TS&WW%[1s&Z`&ap&d!b&f#tOX%TXY!EQY[%T[]!EQ]p%Tpq!EQqr%Trs&_sw%Twx!0Vx#O%T#O#P!Fp#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TMg!Fu[&^7[OY%TYZ!EQZ]%T]^!EQ^#o%T#o#p!@b#p#q%T#q#r!@b#r;'S%T;'S;=`!Cu;=`<%l!@b<%lO%T<u!G|d&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`!I[!`#O%T#O#P!?s#P#T%T#T#U!Jh#U#f%T#f#g!Jh#g#h!Jh#h#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u!Io]kR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u!J{]!jR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{!LTa&bp&^7[&TS&R,X&Z`&d!bOY!MYYZ'cZ]!MY]^'c^r!MYrs#HTsw!MYwx# vx#O!MY#O#P#@t#P#o!MY#o#p#E^#p#q!MY#q#r#Ac#r;'S!MY;'S;=`#G}<%lO!MYGZ!Mka&^7[&TS&WW&R,X&Z`&d!b&f#tOY!MYYZ'cZ]!MY]^'c^r!MYrs!Npsw!MYwx# vx#O!MY#O#P#@t#P#o!MY#o#p#E^#p#q!MY#q#r#Ac#r;'S!MY;'S;=`#G}<%lO!MYGZ!N}]&^7[&TS&R,X&Z`&d!bOr'crs!,gsw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'cFy#!Ra&^7[&WW&R,X&f#tOY##WYZ)mZ]##W]^)m^r##Wrs#$lsw##Wwx#;fx#O##W#O#P#%p#P#o##W#o#p#3d#p#q##W#q#r#&_#r;'S##W;'S;=`#;`<%lO##WFy##ga&^7[&TS&WW&R,X&d!b&f#tOY##WYZ)mZ]##W]^)m^r##Wrs#$lsw##Wwx# vx#O##W#O#P#%p#P#o##W#o#p#3d#p#q##W#q#r#&_#r;'S##W;'S;=`#;`<%lO##WFy#$w]&^7[&TS&R,X&d!bOr)mrs+usw)mwx(kx#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)mFy#%uW&^7[O#o##W#o#p#&_#p#q##W#q#r#&_#r;'S##W;'S;=`#:P;=`<%l#&_<%lO##W0m#&l_&TS&WW&R,X&d!b&f#tOY#&_YZ8lZ]#&_]^8l^r#&_rs#'ksw#&_wx#(gx#O#&_#O#P#1w#P#o#&_#o#p#3d#p;'S#&_;'S;=`#9y<%lO#&_0m#'tZ&TS&R,X&d!bOr8lrs:dsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l0m#(p_&WW&R,X&f#tOY#&_YZ8lZ]#&_]^8l^r#&_rs#'ksw#&_wx#)ox#O#&_#O#P#1w#P#o#&_#o#p#3d#p;'S#&_;'S;=`#9y<%lO#&_0m#)x_&WW&R,X&f#tOY#&_YZ8lZ]#&_]^8l^r#&_rs#'ksw#&_wx#*wx#O#&_#O#P#1w#P#o#&_#o#p#3d#p;'S#&_;'S;=`#9y<%lO#&_/V#+Q]&WW&R,X&f#tOY#*wYZ=QZ]#*w]^=Q^r#*wrs#+ys#O#*w#O#P#,k#P#o#*w#o#p#-|#p;'S#*w;'S;=`#1q<%lO#*w/V#,OX&R,XOr=Qrs>ds#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`<%lO=Q/V#,nRO;'S#*w;'S;=`#,w;=`O#*w/V#-Q^&WW&R,X&f#tOY#*wYZ=QZ]#*w]^=Q^r#*wrs#+ys#O#*w#O#P#,k#P#o#*w#o#p#-|#p;'S#*w;'S;=`#1q;=`<%l#*w<%lO#*w/V#.T]&WW&R,XOY#.|YZ@tZ]#.|]^@t^r#.|rs#/vs#O#.|#O#P#0b#P#o#.|#o#p#*w#p;'S#.|;'S;=`#1k<%lO#.|,a#/TZ&WW&R,XOY#.|YZ@tZ]#.|]^@t^r#.|rs#/vs#O#.|#O#P#0b#P;'S#.|;'S;=`#1k<%lO#.|,a#/{V&R,XOr@trsAxs#O@t#O#PB_#P;'S@t;'S;=`CY<%lO@t,a#0eRO;'S#.|;'S;=`#0n;=`O#.|,a#0u[&WW&R,XOY#.|YZ@tZ]#.|]^@t^r#.|rs#/vs#O#.|#O#P#0b#P;'S#.|;'S;=`#1k;=`<%l#.|<%lO#.|,a#1nP;=`<%l#.|/V#1tP;=`<%l#*w0m#1zRO;'S#&_;'S;=`#2T;=`O#&_0m#2b`&TS&WW&R,X&d!b&f#tOY#&_YZ8lZ]#&_]^8l^r#&_rs#'ksw#&_wx#(gx#O#&_#O#P#1w#P#o#&_#o#p#3d#p;'S#&_;'S;=`#9y;=`<%l#&_<%lO#&_0m#3m_&TS&WW&R,XOY#4lYZEmZ]#4l]^Em^r#4lrs#5nsw#4lwx#6bx#O#4l#O#P#8b#P#o#4l#o#p#&_#p;'S#4l;'S;=`#9s<%lO#4l,e#4u]&TS&WW&R,XOY#4lYZEmZ]#4l]^Em^r#4lrs#5nsw#4lwx#6bx#O#4l#O#P#8b#P;'S#4l;'S;=`#9s<%lO#4l,e#5uX&TS&R,XOrEmrsGRswEmwxGsx#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm,e#6i]&WW&R,XOY#4lYZEmZ]#4l]^Em^r#4lrs#5nsw#4lwx#7bx#O#4l#O#P#8b#P;'S#4l;'S;=`#9s<%lO#4l,e#7i]&WW&R,XOY#4lYZEmZ]#4l]^Em^r#4lrs#5nsw#4lwx#.|x#O#4l#O#P#8b#P;'S#4l;'S;=`#9s<%lO#4l,e#8eRO;'S#4l;'S;=`#8n;=`O#4l,e#8w^&TS&WW&R,XOY#4lYZEmZ]#4l]^Em^r#4lrs#5nsw#4lwx#6bx#O#4l#O#P#8b#P;'S#4l;'S;=`#9s;=`<%l#4l<%lO#4l,e#9vP;=`<%l#4l0m#9|P;=`<%l#&_Fy#:^`&TS&WW&R,X&d!b&f#tOY#&_YZ8lZ]#&_]^8l^r#&_rs#'ksw#&_wx#(gx#O#&_#O#P#1w#P#o#&_#o#p#3d#p;'S#&_;'S;=`#9y;=`<%l##W<%lO#&_Fy#;cP;=`<%l##WFy#;qa&^7[&WW&R,X&f#tOY##WYZ)mZ]##W]^)m^r##Wrs#$lsw##Wwx#<vx#O##W#O#P#%p#P#o##W#o#p#3d#p#q##W#q#r#&_#r;'S##W;'S;=`#;`<%lO##WEc#=R_&^7[&WW&R,X&f#tOY#<vYZLoZ]#<v]^Lo^r#<vrs#>Qs#O#<v#O#P#>z#P#o#<v#o#p#-|#p#q#<v#q#r#*w#r;'S#<v;'S;=`#@n<%lO#<vEc#>XZ&^7[&R,XOrLorsNcs#OLo#O#P! Z#P#oLo#o#p@S#p#qLo#q#r=Q#r;'SLo;'S;=`!!o<%lOLoEc#?PW&^7[O#o#<v#o#p#*w#p#q#<v#q#r#*w#r;'S#<v;'S;=`#?i;=`<%l#*w<%lO#<vEc#?r^&WW&R,X&f#tOY#*wYZ=QZ]#*w]^=Q^r#*wrs#+ys#O#*w#O#P#,k#P#o#*w#o#p#-|#p;'S#*w;'S;=`#1q;=`<%l#<v<%lO#*wEc#@qP;=`<%l#<vGZ#@yW&^7[O#o!MY#o#p#Ac#p#q!MY#q#r#Ac#r;'S!MY;'S;=`#Fl;=`<%l#Ac<%lO!MY0}#Ar_&TS&WW&R,X&Z`&d!b&f#tOY#AcYZ!#dZ]#Ac]^!#d^r#Acrs#Bqsw#Acwx#(gx#O#Ac#O#P#Co#P#o#Ac#o#p#E^#p;'S#Ac;'S;=`#Ff<%lO#Ac0}#B|Z&TS&R,X&Z`&d!bOr!#drs!%`sw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W<%lO!#d0}#CrRO;'S#Ac;'S;=`#C{;=`O#Ac0}#D[`&TS&WW&R,X&Z`&d!b&f#tOY#AcYZ!#dZ]#Ac]^!#d^r#Acrs#Bqsw#Acwx#(gx#O#Ac#O#P#Co#P#o#Ac#o#p#E^#p;'S#Ac;'S;=`#Ff;=`<%l#Ac<%lO#Ac0}#Eg_&TS&WW&R,XOY#4lYZEmZ]#4l]^Em^r#4lrs#5nsw#4lwx#6bx#O#4l#O#P#8b#P#o#4l#o#p#Ac#p;'S#4l;'S;=`#9s<%lO#4l0}#FiP;=`<%l#AcGZ#F{`&TS&WW&R,X&Z`&d!b&f#tOY#AcYZ!#dZ]#Ac]^!#d^r#Acrs#Bqsw#Acwx#(gx#O#Ac#O#P#Co#P#o#Ac#o#p#E^#p;'S#Ac;'S;=`#Ff;=`<%l!MY<%lO#AcGZ#HQP;=`<%l!MYGZ#Hb]&^7[&TS&R,X&Z`&d!bOr'crs#IZsw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'cGZ#IjZ&X#|&^7[&TS&V,X&Z`&d!bOw!-kwx-sx#O!-k#O#P!.i#P#o!-k#o#p!(V#p#q!-k#q#r!&[#r;'S!-k;'S;=`!0P<%lO!-kMg#JpaQ1s&^7[&TS&WW&Z`&ap&d!b&f#tOY#J]YZ%TZ]#J]]^%T^r#J]rs#Kusw#J]wx%;ax#O#J]#O#P& a#P#o#J]#o#p&%b#p#q#J]#q#r&!^#r;'S#J];'S;=`&'u<%lO#J]Lu#LSaQ1s&^7[&TS&Z`&d!bOY#MXYZ'cZ]#MX]^'c^r#MXrs%6usw#MXwx#Nox#O#MX#O#P%*Z#P#o#MX#o#p%4^#p#q#MX#q#r%+W#r;'S#MX;'S;=`%6o<%lO#MXLu#MjaQ1s&^7[&TS&WW&Z`&d!b&f#tOY#MXYZ'cZ]#MX]^'c^r#MXrs#Kusw#MXwx#Nox#O#MX#O#P%*Z#P#o#MX#o#p%4^#p#q#MX#q#r%+W#r;'S#MX;'S;=`%6o<%lO#MXLe#NzaQ1s&^7[&WW&f#tOY$!PYZ)mZ]$!P]^)m^r$!Prs$#esw$!Pwx%#ix#O$!P#O#P$6g#P#o$!P#o#p$Hf#p#q$!P#q#r$7d#r;'S$!P;'S;=`%#c<%lO$!PLe$!`aQ1s&^7[&TS&WW&d!b&f#tOY$!PYZ)mZ]$!P]^)m^r$!Prs$#esw$!Pwx#Nox#O$!P#O#P$6g#P#o$!P#o#p$Hf#p#q$!P#q#r$7d#r;'S$!P;'S;=`%#c<%lO$!PLe$#paQ1s&^7[&TS&d!bOY$!PYZ)mZ]$!P]^)m^r$!Prs$$usw$!Pwx#Nox#O$!P#O#P$6g#P#o$!P#o#p$Hf#p#q$!P#q#r$7d#r;'S$!P;'S;=`%#c<%lO$!PLe$%QaQ1s&^7[&TS&d!bOY$!PYZ)mZ]$!P]^)m^r$!Prs$&Vsw$!Pwx#Nox#O$!P#O#P$6g#P#o$!P#o#p$Hf#p#q$!P#q#r$7d#r;'S$!P;'S;=`%#c<%lO$!PIg$&b_Q1s&^7[&TS&d!bOY$&VYZ,wZ]$&V]^,w^w$&Vwx$'ax#O$&V#O#P$+X#P#o$&V#o#p$0h#p#q$&V#q#r$,U#r;'S$&V;'S;=`$6a<%lO$&VIg$'h_Q1s&^7[OY$&VYZ,wZ]$&V]^,w^w$&Vwx$(gx#O$&V#O#P$+X#P#o$&V#o#p$0h#p#q$&V#q#r$,U#r;'S$&V;'S;=`$6a<%lO$&VIg$(n_Q1s&^7[OY$&VYZ,wZ]$&V]^,w^w$&Vwx$)mx#O$&V#O#P$+X#P#o$&V#o#p$0h#p#q$&V#q#r$,U#r;'S$&V;'S;=`$6a<%lO$&VHP$)tZQ1s&^7[OY$)mYZ/cZ]$)m]^/c^#o$)m#o#p$*g#p#q$)m#q#r$*g#r;'S$)m;'S;=`$+R<%lO$)m1s$*lTQ1sOY$*gZ]$*g^;'S$*g;'S;=`$*{<%lO$*g1s$+OP;=`<%l$*gHP$+UP;=`<%l$)mIg$+`[Q1s&^7[OY$&VYZ,wZ]$&V]^,w^#o$&V#o#p$,U#p#q$&V#q#r$,U#r;'S$&V;'S;=`$5j;=`<%l0l<%lO$&V3Z$,_]Q1s&TS&d!bOY$,UYZ0lZ]$,U]^0l^w$,Uwx$-Wx#O$,U#O#P$/S#P#o$,U#o#p$0h#p;'S$,U;'S;=`$5d<%lO$,U3Z$-]]Q1sOY$,UYZ0lZ]$,U]^0l^w$,Uwx$.Ux#O$,U#O#P$/S#P#o$,U#o#p$0h#p;'S$,U;'S;=`$5d<%lO$,U3Z$.Z]Q1sOY$,UYZ0lZ]$,U]^0l^w$,Uwx$*gx#O$,U#O#P$/S#P#o$,U#o#p$0h#p;'S$,U;'S;=`$5d<%lO$,U3Z$/XWQ1sOY$,UYZ0lZ]$,U]^0l^;'S$,U;'S;=`$/q;=`<%l0l<%lO$,U3Z$/xY&TS&d!bOw0lwx1`x#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z;=`<%l$,U<%lO0l3Z$0o]Q1s&TSOY$1hYZ4`Z]$1h]^4`^w$1hwx$2bx#O$1h#O#P$4Q#P#o$1h#o#p$,U#p;'S$1h;'S;=`$5^<%lO$1h1w$1oZQ1s&TSOY$1hYZ4`Z]$1h]^4`^w$1hwx$2bx#O$1h#O#P$4Q#P;'S$1h;'S;=`$5^<%lO$1h1w$2gZQ1sOY$1hYZ4`Z]$1h]^4`^w$1hwx$3Yx#O$1h#O#P$4Q#P;'S$1h;'S;=`$5^<%lO$1h1w$3_ZQ1sOY$1hYZ4`Z]$1h]^4`^w$1hwx$*gx#O$1h#O#P$4Q#P;'S$1h;'S;=`$5^<%lO$1h1w$4VWQ1sOY$1hYZ4`Z]$1h]^4`^;'S$1h;'S;=`$4o;=`<%l4`<%lO$1h1w$4tW&TSOw4`wx4zx#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l$1h<%lO4`1w$5aP;=`<%l$1h3Z$5gP;=`<%l$,UIg$5qY&TS&d!bOw0lwx1`x#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z;=`<%l$&V<%lO0lIg$6dP;=`<%l$&VLe$6n[Q1s&^7[OY$!PYZ)mZ]$!P]^)m^#o$!P#o#p$7d#p#q$!P#q#r$7d#r;'S$!P;'S;=`%!b;=`<%l8l<%lO$!P6X$7q_Q1s&TS&WW&d!b&f#tOY$7dYZ8lZ]$7d]^8l^r$7drs$8psw$7dwx$;Qx#O$7d#O#P$Fv#P#o$7d#o#p$Hf#p;'S$7d;'S;=`%![<%lO$7d6X$8y_Q1s&TS&d!bOY$7dYZ8lZ]$7d]^8l^r$7drs$9xsw$7dwx$;Qx#O$7d#O#P$Fv#P#o$7d#o#p$Hf#p;'S$7d;'S;=`%![<%lO$7d6X$:R_Q1s&TS&d!bOY$7dYZ8lZ]$7d]^8l^r$7drs$,Usw$7dwx$;Qx#O$7d#O#P$Fv#P#o$7d#o#p$Hf#p;'S$7d;'S;=`%![<%lO$7d6X$;Z_Q1s&WW&f#tOY$7dYZ8lZ]$7d]^8l^r$7drs$8psw$7dwx$<Yx#O$7d#O#P$Fv#P#o$7d#o#p$Hf#p;'S$7d;'S;=`%![<%lO$7d6X$<c_Q1s&WW&f#tOY$7dYZ8lZ]$7d]^8l^r$7drs$8psw$7dwx$=bx#O$7d#O#P$Fv#P#o$7d#o#p$Hf#p;'S$7d;'S;=`%![<%lO$7d4q$=k]Q1s&WW&f#tOY$=bYZ=QZ]$=b]^=Q^r$=brs$>ds#O$=b#O#P$@`#P#o$=b#o#p$At#p;'S$=b;'S;=`$Fp<%lO$=b4q$>i]Q1sOY$=bYZ=QZ]$=b]^=Q^r$=brs$?bs#O$=b#O#P$@`#P#o$=b#o#p$At#p;'S$=b;'S;=`$Fp<%lO$=b4q$?g]Q1sOY$=bYZ=QZ]$=b]^=Q^r$=brs$*gs#O$=b#O#P$@`#P#o$=b#o#p$At#p;'S$=b;'S;=`$Fp<%lO$=b4q$@eWQ1sOY$=bYZ=QZ]$=b]^=Q^;'S$=b;'S;=`$@};=`<%l=Q<%lO$=b4q$AUY&WW&f#tOr=Qrs=ts#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`;=`<%l$=b<%lO=Q4q$A{]Q1s&WWOY$BtYZ@tZ]$Bt]^@t^r$Btrs$Cns#O$Bt#O#P$E^#P#o$Bt#o#p$=b#p;'S$Bt;'S;=`$Fj<%lO$Bt1{$B{ZQ1s&WWOY$BtYZ@tZ]$Bt]^@t^r$Btrs$Cns#O$Bt#O#P$E^#P;'S$Bt;'S;=`$Fj<%lO$Bt1{$CsZQ1sOY$BtYZ@tZ]$Bt]^@t^r$Btrs$Dfs#O$Bt#O#P$E^#P;'S$Bt;'S;=`$Fj<%lO$Bt1{$DkZQ1sOY$BtYZ@tZ]$Bt]^@t^r$Btrs$*gs#O$Bt#O#P$E^#P;'S$Bt;'S;=`$Fj<%lO$Bt1{$EcWQ1sOY$BtYZ@tZ]$Bt]^@t^;'S$Bt;'S;=`$E{;=`<%l@t<%lO$Bt1{$FQW&WWOr@trsA`s#O@t#O#PB_#P;'S@t;'S;=`CY;=`<%l$Bt<%lO@t1{$FmP;=`<%l$Bt4q$FsP;=`<%l$=b6X$F{WQ1sOY$7dYZ8lZ]$7d]^8l^;'S$7d;'S;=`$Ge;=`<%l8l<%lO$7d6X$Gp[&TS&WW&d!b&f#tOr8lrs9jsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`;=`<%l$7d<%lO8l6X$Ho_Q1s&TS&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Lpx#O$In#O#P$Np#P#o$In#o#p$7d#p;'S$In;'S;=`%!U<%lO$In2P$Iw]Q1s&TS&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Lpx#O$In#O#P$Np#P;'S$In;'S;=`%!U<%lO$In2P$Jw]Q1s&TSOY$InYZEmZ]$In]^Em^r$Inrs$Kpsw$Inwx$Lpx#O$In#O#P$Np#P;'S$In;'S;=`%!U<%lO$In2P$Kw]Q1s&TSOY$InYZEmZ]$In]^Em^r$Inrs$1hsw$Inwx$Lpx#O$In#O#P$Np#P;'S$In;'S;=`%!U<%lO$In2P$Lw]Q1s&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Mpx#O$In#O#P$Np#P;'S$In;'S;=`%!U<%lO$In2P$Mw]Q1s&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Btx#O$In#O#P$Np#P;'S$In;'S;=`%!U<%lO$In2P$NuWQ1sOY$InYZEmZ]$In]^Em^;'S$In;'S;=`% _;=`<%lEm<%lO$In2P% fY&TS&WWOrEmrsFaswEmwxGsx#OEm#O#PIV#P;'SEm;'S;=`JY;=`<%l$In<%lOEm2P%!XP;=`<%l$In6X%!_P;=`<%l$7dLe%!m[&TS&WW&d!b&f#tOr8lrs9jsw8lwx;^x#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`;=`<%l$!P<%lO8lLe%#fP;=`<%l$!PLe%#taQ1s&^7[&WW&f#tOY$!PYZ)mZ]$!P]^)m^r$!Prs$#esw$!Pwx%$yx#O$!P#O#P$6g#P#o$!P#o#p$Hf#p#q$!P#q#r$7d#r;'S$!P;'S;=`%#c<%lO$!PJ}%%U_Q1s&^7[&WW&f#tOY%$yYZLoZ]%$y]^Lo^r%$yrs%&Ts#O%$y#O#P%(a#P#o%$y#o#p$At#p#q%$y#q#r$=b#r;'S%$y;'S;=`%*T<%lO%$yJ}%&[_Q1s&^7[OY%$yYZLoZ]%$y]^Lo^r%$yrs%'Zs#O%$y#O#P%(a#P#o%$y#o#p$At#p#q%$y#q#r$=b#r;'S%$y;'S;=`%*T<%lO%$yJ}%'b_Q1s&^7[OY%$yYZLoZ]%$y]^Lo^r%$yrs$)ms#O%$y#O#P%(a#P#o%$y#o#p$At#p#q%$y#q#r$=b#r;'S%$y;'S;=`%*T<%lO%$yJ}%(h[Q1s&^7[OY%$yYZLoZ]%$y]^Lo^#o%$y#o#p$=b#p#q%$y#q#r$=b#r;'S%$y;'S;=`%)^;=`<%l=Q<%lO%$yJ}%)eY&WW&f#tOr=Qrs=ts#O=Q#O#P?P#P#o=Q#o#p@S#p;'S=Q;'S;=`C`;=`<%l%$y<%lO=QJ}%*WP;=`<%l%$yLu%*b[Q1s&^7[OY#MXYZ'cZ]#MX]^'c^#o#MX#o#p%+W#p#q#MX#q#r%+W#r;'S#MX;'S;=`%5l;=`<%l!#d<%lO#MX6i%+g_Q1s&TS&WW&Z`&d!b&f#tOY%+WYZ!#dZ]%+W]^!#d^r%+Wrs%,fsw%+Wwx$;Qx#O%+W#O#P%2l#P#o%+W#o#p%4^#p;'S%+W;'S;=`%5f<%lO%+W6i%,q_Q1s&TS&Z`&d!bOY%+WYZ!#dZ]%+W]^!#d^r%+Wrs%-psw%+Wwx$;Qx#O%+W#O#P%2l#P#o%+W#o#p%4^#p;'S%+W;'S;=`%5f<%lO%+W6i%-{_Q1s&TS&Z`&d!bOY%+WYZ!#dZ]%+W]^!#d^r%+Wrs%.zsw%+Wwx$;Qx#O%+W#O#P%2l#P#o%+W#o#p%4^#p;'S%+W;'S;=`%5f<%lO%+W3k%/V]Q1s&TS&Z`&d!bOY%.zYZ!&[Z]%.z]^!&[^w%.zwx$-Wx#O%.z#O#P%0O#P#o%.z#o#p%1f#p;'S%.z;'S;=`%2f<%lO%.z3k%0TWQ1sOY%.zYZ!&[Z]%.z]^!&[^;'S%.z;'S;=`%0m;=`<%l!&[<%lO%.z3k%0vY&TS&Z`&d!bOw!&[wx1`x#O!&[#O#P!'Q#P#o!&[#o#p!(V#p;'S!&[;'S;=`!(w;=`<%l%.z<%lO!&[3k%1m]Q1s&TSOY$1hYZ4`Z]$1h]^4`^w$1hwx$2bx#O$1h#O#P$4Q#P#o$1h#o#p%.z#p;'S$1h;'S;=`$5^<%lO$1h3k%2iP;=`<%l%.z6i%2qWQ1sOY%+WYZ!#dZ]%+W]^!#d^;'S%+W;'S;=`%3Z;=`<%l!#d<%lO%+W6i%3h[&TS&WW&Z`&d!b&f#tOr!#drs!$dsw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W;=`<%l%+W<%lO!#d6i%4g_Q1s&TS&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Lpx#O$In#O#P$Np#P#o$In#o#p%+W#p;'S$In;'S;=`%!U<%lO$In6i%5iP;=`<%l%+WLu%5y[&TS&WW&Z`&d!b&f#tOr!#drs!$dsw!#dwx;^x#O!#d#O#P!(}#P#o!#d#o#p!*^#p;'S!#d;'S;=`!+W;=`<%l#MX<%lO!#dLu%6rP;=`<%l#MXLu%7SaQ1s&^7[&TS&Z`&d!bOY#MXYZ'cZ]#MX]^'c^r#MXrs%8Xsw#MXwx#Nox#O#MX#O#P%*Z#P#o#MX#o#p%4^#p#q#MX#q#r%+W#r;'S#MX;'S;=`%6o<%lO#MXIw%8f_Q1s&^7[&TS&Z`&d!bOY%8XYZ!-kZ]%8X]^!-k^w%8Xwx$'ax#O%8X#O#P%9e#P#o%8X#o#p%1f#p#q%8X#q#r%.z#r;'S%8X;'S;=`%;Z<%lO%8XIw%9l[Q1s&^7[OY%8XYZ!-kZ]%8X]^!-k^#o%8X#o#p%.z#p#q%8X#q#r%.z#r;'S%8X;'S;=`%:b;=`<%l!&[<%lO%8XIw%:kY&TS&Z`&d!bOw!&[wx1`x#O!&[#O#P!'Q#P#o!&[#o#p!(V#p;'S!&[;'S;=`!(w;=`<%l%8X<%lO!&[Iw%;^P;=`<%l%8XMV%;naQ1s&^7[&WW&ap&f#tOY%<sYZ!1ZZ]%<s]^!1Z^r%<srs$#esw%<swx%Jux#O%<s#O#P%>Z#P#o%<s#o#p%H^#p#q%<s#q#r%?W#r;'S%<s;'S;=`%Jo<%lO%<sMV%=UaQ1s&^7[&TS&WW&ap&d!b&f#tOY%<sYZ!1ZZ]%<s]^!1Z^r%<srs$#esw%<swx%;ax#O%<s#O#P%>Z#P#o%<s#o#p%H^#p#q%<s#q#r%?W#r;'S%<s;'S;=`%Jo<%lO%<sMV%>b[Q1s&^7[OY%<sYZ!1ZZ]%<s]^!1Z^#o%<s#o#p%?W#p#q%<s#q#r%?W#r;'S%<s;'S;=`%Il;=`<%l!3Q<%lO%<s6y%?g_Q1s&TS&WW&ap&d!b&f#tOY%?WYZ!3QZ]%?W]^!3Q^r%?Wrs$8psw%?Wwx%@fx#O%?W#O#P%Fl#P#o%?W#o#p%H^#p;'S%?W;'S;=`%If<%lO%?W6y%@q_Q1s&WW&ap&f#tOY%?WYZ!3QZ]%?W]^!3Q^r%?Wrs$8psw%?Wwx%Apx#O%?W#O#P%Fl#P#o%?W#o#p%H^#p;'S%?W;'S;=`%If<%lO%?W6y%A{_Q1s&WW&ap&f#tOY%?WYZ!3QZ]%?W]^!3Q^r%?Wrs$8psw%?Wwx%Bzx#O%?W#O#P%Fl#P#o%?W#o#p%H^#p;'S%?W;'S;=`%If<%lO%?W5c%CV]Q1s&WW&ap&f#tOY%BzYZ!5xZ]%Bz]^!5x^r%Bzrs$>ds#O%Bz#O#P%DO#P#o%Bz#o#p%Ef#p;'S%Bz;'S;=`%Ff<%lO%Bz5c%DTWQ1sOY%BzYZ!5xZ]%Bz]^!5x^;'S%Bz;'S;=`%Dm;=`<%l!5x<%lO%Bz5c%DvY&WW&ap&f#tOr!5xrs=ts#O!5x#O#P!6n#P#o!5x#o#p!7s#p;'S!5x;'S;=`!8e;=`<%l%Bz<%lO!5x5c%Em]Q1s&WWOY$BtYZ@tZ]$Bt]^@t^r$Btrs$Cns#O$Bt#O#P$E^#P#o$Bt#o#p%Bz#p;'S$Bt;'S;=`$Fj<%lO$Bt5c%FiP;=`<%l%Bz6y%FqWQ1sOY%?WYZ!3QZ]%?W]^!3Q^;'S%?W;'S;=`%GZ;=`<%l!3Q<%lO%?W6y%Gh[&TS&WW&ap&d!b&f#tOr!3Qrs9jsw!3Qwx!4Qx#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t;=`<%l%?W<%lO!3Q6y%Hg_Q1s&TS&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Lpx#O$In#O#P$Np#P#o$In#o#p%?W#p;'S$In;'S;=`%!U<%lO$In6y%IiP;=`<%l%?WMV%Iy[&TS&WW&ap&d!b&f#tOr!3Qrs9jsw!3Qwx!4Qx#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t;=`<%l%<s<%lO!3QMV%JrP;=`<%l%<sMV%KSaQ1s&^7[&WW&ap&f#tOY%<sYZ!1ZZ]%<s]^!1Z^r%<srs$#esw%<swx%LXx#O%<s#O#P%>Z#P#o%<s#o#p%H^#p#q%<s#q#r%?W#r;'S%<s;'S;=`%Jo<%lO%<sKo%Lf_Q1s&^7[&WW&ap&f#tOY%LXYZ!=XZ]%LX]^!=X^r%LXrs%&Ts#O%LX#O#P%Me#P#o%LX#o#p%Ef#p#q%LX#q#r%Bz#r;'S%LX;'S;=`& Z<%lO%LXKo%Ml[Q1s&^7[OY%LXYZ!=XZ]%LX]^!=X^#o%LX#o#p%Bz#p#q%LX#q#r%Bz#r;'S%LX;'S;=`%Nb;=`<%l!5x<%lO%LXKo%NkY&WW&ap&f#tOr!5xrs=ts#O!5x#O#P!6n#P#o!5x#o#p!7s#p;'S!5x;'S;=`!8e;=`<%l%LX<%lO!5xKo& ^P;=`<%l%LXMg& h[Q1s&^7[OY#J]YZ%TZ]#J]]^%T^#o#J]#o#p&!^#p#q#J]#q#r&!^#r;'S#J];'S;=`&&p;=`<%l!@b<%lO#J]7Z&!o_Q1s&TS&WW&Z`&ap&d!b&f#tOY&!^YZ!@bZ]&!^]^!@b^r&!^rs%,fsw&!^wx%@fx#O&!^#O#P&#n#P#o&!^#o#p&%b#p;'S&!^;'S;=`&&j<%lO&!^7Z&#sWQ1sOY&!^YZ!@bZ]&!^]^!@b^;'S&!^;'S;=`&$];=`<%l!@b<%lO&!^7Z&$l[&TS&WW&Z`&ap&d!b&f#tOr!@brs!$dsw!@bwx!4Qx#O!@b#O#P!Ad#P#o!@b#o#p!Bu#p;'S!@b;'S;=`!Co;=`<%l&!^<%lO!@b7Z&%k_Q1s&TS&WWOY$InYZEmZ]$In]^Em^r$Inrs$Jpsw$Inwx$Lpx#O$In#O#P$Np#P#o$In#o#p&!^#p;'S$In;'S;=`%!U<%lO$In7Z&&mP;=`<%l&!^Mg&'P[&TS&WW&Z`&ap&d!b&f#tOr!@brs!$dsw!@bwx!4Qx#O!@b#O#P!Ad#P#o!@b#o#p!Bu#p;'S!@b;'S;=`!Co;=`<%l#J]<%lO!@bMg&'xP;=`<%l#J]Gz&(`_%jQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGz&)r]!s,W&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGz&+O_%dQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{&,^a&_`&^7[&WW&R,X&ap&f#tOY&-cYZ!1ZZ]&-c]^!1Z^r&-crs&.ysw&-cwx'(^x#O&-c#O#P&N}#P#o&-c#o#p'%g#p#q&-c#q#r' l#r;'S&-c;'S;=`'(W<%lO&-cGk&-ta&^7[&TS&WW&R,X&ap&d!b&f#tOY&-cYZ!1ZZ]&-c]^!1Z^r&-crs&.ysw&-cwx&Mwx#O&-c#O#P&N}#P#o&-c#o#p'%g#p#q&-c#q#r' l#r;'S&-c;'S;=`'(W<%lO&-cFy&/Ua&^7[&TS&R,X&d!bOY&0ZYZ)mZ]&0Z]^)m^r&0Zrs&Hisw&0Zwx&1ox#O&0Z#O#P&2s#P#o&0Z#o#p&@g#p#q&0Z#q#r&3b#r;'S&0Z;'S;=`&Hc<%lO&0ZFy&0ja&^7[&TS&WW&R,X&d!b&f#tOY&0ZYZ)mZ]&0Z]^)m^r&0Zrs&.ysw&0Zwx&1ox#O&0Z#O#P&2s#P#o&0Z#o#p&@g#p#q&0Z#q#r&3b#r;'S&0Z;'S;=`&Hc<%lO&0ZFy&1z]&^7[&WW&R,X&f#tOr)mrs*ssw)mwxKmx#O)m#O#P7}#P#o)m#o#pDs#p#q)m#q#r8l#r;'S)m;'S;=`Kg<%lO)mFy&2xW&^7[O#o&0Z#o#p&3b#p#q&0Z#q#r&3b#r;'S&0Z;'S;=`&GS;=`<%l&3b<%lO&0Z0m&3o_&TS&WW&R,X&d!b&f#tOY&3bYZ8lZ]&3b]^8l^r&3brs&4nsw&3bwx&>Ox#O&3b#O#P&>z#P#o&3b#o#p&@g#p;'S&3b;'S;=`&F|<%lO&3b0m&4w_&TS&R,X&d!bOY&3bYZ8lZ]&3b]^8l^r&3brs&5vsw&3bwx&>Ox#O&3b#O#P&>z#P#o&3b#o#p&@g#p;'S&3b;'S;=`&F|<%lO&3b0m&6P_&TS&R,X&d!bOY&3bYZ8lZ]&3b]^8l^r&3brs&7Osw&3bwx&>Ox#O&3b#O#P&>z#P#o&3b#o#p&@g#p;'S&3b;'S;=`&F|<%lO&3b-o&7X]&TS&R,X&d!bOY&7OYZ0lZ]&7O]^0l^w&7Owx&8Qx#O&7O#O#P&8r#P#o&7O#o#p&:T#p;'S&7O;'S;=`&=x<%lO&7O-o&8VX&R,XOw0lwx2Ox#O0l#O#P2k#P#o0l#o#p3n#p;'S0l;'S;=`6z<%lO0l-o&8uRO;'S&7O;'S;=`&9O;=`O&7O-o&9X^&TS&R,X&d!bOY&7OYZ0lZ]&7O]^0l^w&7Owx&8Qx#O&7O#O#P&8r#P#o&7O#o#p&:T#p;'S&7O;'S;=`&=x;=`<%l&7O<%lO&7O-o&:[]&TS&R,XOY&;TYZ4`Z]&;T]^4`^w&;Twx&;}x#O&;T#O#P&<i#P#o&;T#o#p&7O#p;'S&;T;'S;=`&=r<%lO&;T,]&;[Z&TS&R,XOY&;TYZ4`Z]&;T]^4`^w&;Twx&;}x#O&;T#O#P&<i#P;'S&;T;'S;=`&=r<%lO&;T,]&<SV&R,XOw4`wx5dx#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`,]&<lRO;'S&;T;'S;=`&<u;=`O&;T,]&<|[&TS&R,XOY&;TYZ4`Z]&;T]^4`^w&;Twx&;}x#O&;T#O#P&<i#P;'S&;T;'S;=`&=r;=`<%l&;T<%lO&;T,]&=uP;=`<%l&;T-o&={P;=`<%l&7O0m&>XZ&WW&R,X&f#tOr8lrs9jsw8lwx<Wx#O8l#O#PCf#P#o8l#o#pDs#p;'S8l;'S;=`J`<%lO8l0m&>}RO;'S&3b;'S;=`&?W;=`O&3b0m&?e`&TS&WW&R,X&d!b&f#tOY&3bYZ8lZ]&3b]^8l^r&3brs&4nsw&3bwx&>Ox#O&3b#O#P&>z#P#o&3b#o#p&@g#p;'S&3b;'S;=`&F|;=`<%l&3b<%lO&3b0m&@p_&TS&WW&R,XOY&AoYZEmZ]&Ao]^Em^r&Aors&Bqsw&Aowx&Dqx#O&Ao#O#P&Ee#P#o&Ao#o#p&3b#p;'S&Ao;'S;=`&Fv<%lO&Ao,e&Ax]&TS&WW&R,XOY&AoYZEmZ]&Ao]^Em^r&Aors&Bqsw&Aowx&Dqx#O&Ao#O#P&Ee#P;'S&Ao;'S;=`&Fv<%lO&Ao,e&Bx]&TS&R,XOY&AoYZEmZ]&Ao]^Em^r&Aors&Cqsw&Aowx&Dqx#O&Ao#O#P&Ee#P;'S&Ao;'S;=`&Fv<%lO&Ao,e&Cx]&TS&R,XOY&AoYZEmZ]&Ao]^Em^r&Aors&;Tsw&Aowx&Dqx#O&Ao#O#P&Ee#P;'S&Ao;'S;=`&Fv<%lO&Ao,e&DxX&WW&R,XOrEmrsFaswEmwxHex#OEm#O#PIV#P;'SEm;'S;=`JY<%lOEm,e&EhRO;'S&Ao;'S;=`&Eq;=`O&Ao,e&Ez^&TS&WW&R,XOY&AoYZEmZ]&Ao]^Em^r&Aors&Bqsw&Aowx&Dqx#O&Ao#O#P&Ee#P;'S&Ao;'S;=`&Fv;=`<%l&Ao<%lO&Ao,e&FyP;=`<%l&Ao0m&GPP;=`<%l&3bFy&Ga`&TS&WW&R,X&d!b&f#tOY&3bYZ8lZ]&3b]^8l^r&3brs&4nsw&3bwx&>Ox#O&3b#O#P&>z#P#o&3b#o#p&@g#p;'S&3b;'S;=`&F|;=`<%l&0Z<%lO&3bFy&HfP;=`<%l&0ZFy&Hta&^7[&TS&R,X&d!bOY&0ZYZ)mZ]&0Z]^)m^r&0Zrs&Iysw&0Zwx&1ox#O&0Z#O#P&2s#P#o&0Z#o#p&@g#p#q&0Z#q#r&3b#r;'S&0Z;'S;=`&Hc<%lO&0ZC{&JU_&^7[&TS&R,X&d!bOY&IyYZ,wZ]&Iy]^,w^w&Iywx&KTx#O&Iy#O#P&K}#P#o&Iy#o#p&:T#p#q&Iy#q#r&7O#r;'S&Iy;'S;=`&Mq<%lO&IyC{&K[Z&^7[&R,XOw,wwx.kx#O,w#O#P/}#P#o,w#o#p3n#p#q,w#q#r0l#r;'S,w;'S;=`7w<%lO,wC{&LSW&^7[O#o&Iy#o#p&7O#p#q&Iy#q#r&7O#r;'S&Iy;'S;=`&Ll;=`<%l&7O<%lO&IyC{&Lu^&TS&R,X&d!bOY&7OYZ0lZ]&7O]^0l^w&7Owx&8Qx#O&7O#O#P&8r#P#o&7O#o#p&:T#p;'S&7O;'S;=`&=x;=`<%l&Iy<%lO&7OC{&MtP;=`<%l&IyGk&NU]&^7[&WW&R,X&ap&f#tOr!1Zrs*ssw!1Zwx!<Tx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1ZGk' SW&^7[O#o&-c#o#p' l#p#q&-c#q#r' l#r;'S&-c;'S;=`'&u;=`<%l' l<%lO&-c1_' {_&TS&WW&R,X&ap&d!b&f#tOY' lYZ!3QZ]' l]^!3Q^r' lrs&4nsw' lwx'!zx#O' l#O#P'#x#P#o' l#o#p'%g#p;'S' l;'S;=`'&o<%lO' l1_'#VZ&WW&R,X&ap&f#tOr!3Qrs9jsw!3Qwx!4|x#O!3Q#O#P!8k#P#o!3Q#o#p!9z#p;'S!3Q;'S;=`!:t<%lO!3Q1_'#{RO;'S' l;'S;=`'$U;=`O' l1_'$e`&TS&WW&R,X&ap&d!b&f#tOY' lYZ!3QZ]' l]^!3Q^r' lrs&4nsw' lwx'!zx#O' l#O#P'#x#P#o' l#o#p'%g#p;'S' l;'S;=`'&o;=`<%l' l<%lO' l1_'%p_&TS&WW&R,XOY&AoYZEmZ]&Ao]^Em^r&Aors&Bqsw&Aowx&Dqx#O&Ao#O#P&Ee#P#o&Ao#o#p' l#p;'S&Ao;'S;=`&Fv<%lO&Ao1_'&rP;=`<%l' lGk''U`&TS&WW&R,X&ap&d!b&f#tOY' lYZ!3QZ]' l]^!3Q^r' lrs&4nsw' lwx'!zx#O' l#O#P'#x#P#o' l#o#p'%g#p;'S' l;'S;=`'&o;=`<%l&-c<%lO' lGk'(ZP;=`<%l&-cGk'(k]&^7[&WW&R,X&ap&f#tOr!1Zrs*ssw!1Zwx')dx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1ZGk')sZ&U!f&^7[&WW&S,X&ap&f#tOr!=XrsMks#O!=X#O#P!>V#P#o!=X#o#p!7s#p#q!=X#q#r!5x#r;'S!=X;'S;=`!?m<%lO!=XG{'*y]f,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u',V]eR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'-caT,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vxz%Tz{'.h{!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'.{__R&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'0__%g,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u'1q]xR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TMg'2}`%h,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`!a'4P!a#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TB^'4d]&q&j&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'5pa!dQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!O%T!O!P'6u!P!Q%T!Q!['9c![#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'7W_&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!O%T!O!P'8V!P#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'8j]!m,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'9vi!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!['9c![!g%T!g!h';e!h!l%T!l!m'@X!m#O%T#O#P!?s#P#R%T#R#S'9c#S#X%T#X#Y';e#Y#^%T#^#_'@X#_#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy';vc&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx{%T{|'=R|}%T}!O'=R!O!Q%T!Q!['>c![#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'=d_&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!['>c![#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'>ve!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!['>c![!l%T!l!m'@X!m#O%T#O#P!?s#P#R%T#R#S'>c#S#^%T#^#_'@X#_#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'@l]!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{'Axa%iR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!P%T!P!Q'B}!Q!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGz'Cb_%kQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'Dtw!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!O%T!O!P'G_!P!Q%T!Q!['Ho![!d%T!d!e'Jw!e!g%T!g!h';e!h!l%T!l!m'@X!m!q%T!q!r'M}!r!z%T!z!{(!}!{#O%T#O#P!?s#P#R%T#R#S'Ho#S#U%T#U#V'Jw#V#X%T#X#Y';e#Y#^%T#^#_'@X#_#c%T#c#d'M}#d#l%T#l#m(!}#m#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'Gp_&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!['9c![#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'ISk!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!O%T!O!P'G_!P!Q%T!Q!['Ho![!g%T!g!h';e!h!l%T!l!m'@X!m#O%T#O#P!?s#P#R%T#R#S'Ho#S#X%T#X#Y';e#Y#^%T#^#_'@X#_#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'KYb&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!R'Lb!R!S'Lb!S#O%T#O#P!?s#P#R%T#R#S'Lb#S#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'Lub!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!R'Lb!R!S'Lb!S#O%T#O#P!?s#P#R%T#R#S'Lb#S#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy'N`a&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!Y( e!Y#O%T#O#P!?s#P#R%T#R#S( e#S#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy( xa!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q!Y( e!Y#O%T#O#P!?s#P#R%T#R#S( e#S#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy(#`e&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q![($q![!c%T!c!i($q!i#O%T#O#P!?s#P#R%T#R#S($q#S#T%T#T#Z($q#Z#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy(%Ue!f,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!Q%T!Q![($q![!c%T!c!i($q!i#O%T#O#P!?s#P#R%T#R#S($q#S#T%T#T#Z($q#Z#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TMg(&z_y1s&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`('y!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u((^]%sR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{()j]#^,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{(*vakR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!^%T!^!_(+{!_!`!I[!`!a!I[!a#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGz(,`_%eQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{(-r_%r,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`!I[!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{(/U`kR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`!I[!`!a(0W!a#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGz(0k_%fQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TG{(2P_]Q#tP&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TMg(3ee&^7[&TS&WW&Q&j&Z`&ap&d!b&f#t%m,XOr%Trs&_sw%Twx!0Vx!Q%T!Q![(3O![!c%T!c!}(3O!}#O%T#O#P!?s#P#R%T#R#S(3O#S#T%T#T#o(3O#o#p!Bu#p#q%T#q#r!@b#r$g%T$g;'S(3O;'S;=`(4v<%lO(3OMg(4yP;=`<%l(3OMg(5ci&^7[&TS&WW&Q&j&Z`&ap&d!b&f#t%m,XOr%Trs(7Qsw%Twx(:jx!Q%T!Q![(3O![!c%T!c!t(3O!t!u(>S!u!}(3O!}#O%T#O#P!?s#P#R%T#R#S(3O#S#T%T#T#f(3O#f#g(>S#g#o(3O#o#p!Bu#p#q%T#q#r!@b#r$g%T$g;'S(3O;'S;=`(4v<%lO(3OGZ(7_a&^7[&TS&R,X&Z`&d!bOY!MYYZ'cZ]!MY]^'c^r!MYrs(8dsw!MYwx# vx#O!MY#O#P#@t#P#o!MY#o#p#E^#p#q!MY#q#r#Ac#r;'S!MY;'S;=`#G}<%lO!MYGZ(8q]&^7[&TS&R,X&Z`&d!bOr'crs(9jsw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'cD](9wZ&^7[&TS&V,X&Z`&d!bOw!-kwx-sx#O!-k#O#P!.i#P#o!-k#o#p!(V#p#q!-k#q#r!&[#r;'S!-k;'S;=`!0P<%lO!-kGk(:wa&^7[&WW&R,X&ap&f#tOY&-cYZ!1ZZ]&-c]^!1Z^r&-crs&.ysw&-cwx(;|x#O&-c#O#P&N}#P#o&-c#o#p'%g#p#q&-c#q#r' l#r;'S&-c;'S;=`'(W<%lO&-cGk(<Z]&^7[&WW&R,X&ap&f#tOr!1Zrs*ssw!1Zwx(=Sx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1ZFT(=aZ&^7[&WW&S,X&ap&f#tOr!=XrsMks#O!=X#O#P!>V#P#o!=X#o#p!7s#p#q!=X#q#r!5x#r;'S!=X;'S;=`!?m<%lO!=XMg(>ie&^7[&TS&WW&Q&j&Z`&ap&d!b&f#t%m,XOr%Trs(7Qsw%Twx(:jx!Q%T!Q![(3O![!c%T!c!}(3O!}#O%T#O#P!?s#P#R%T#R#S(3O#S#T%T#T#o(3O#o#p!Bu#p#q%T#q#r!@b#r$g%T$g;'S(3O;'S;=`(4v<%lO(3OMg(@ai&^7[&TS&WW&Q&j&Z`&ap&d!b&f#t%m,XOr%Trs(BOsw%Twx(EYx!Q%T!Q![(3O![!c%T!c!t(3O!t!u(Hd!u!}(3O!}#O%T#O#P!?s#P#R%T#R#S(3O#S#T%T#T#f(3O#f#g(Hd#g#o(3O#o#p!Bu#p#q%T#q#r!@b#r$g%T$g;'S(3O;'S;=`(4v<%lO(3OGZ(B]]&^7[&TS&Z`&d!b&`,XOr'crs(CUsw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'cGZ(Ca]&^7[&TS&Z`&d!bOr'crs(DYsw'cwx(kx#O'c#O#P!!u#P#o'c#o#p!*^#p#q'c#q#r!#d#r;'S'c;'S;=`!,a<%lO'cD](DgZ&^7[&TS&e,X&Z`&d!bOw!-kwx-sx#O!-k#O#P!.i#P#o!-k#o#p!(V#p#q!-k#q#r!&[#r;'S!-k;'S;=`!0P<%lO!-kGk(Eg]&^7[&WW&ap&f#t&Y,XOr!1Zrs*ssw!1Zwx(F`x#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1ZGk(Fk]&^7[&WW&ap&f#tOr!1Zrs*ssw!1Zwx(Gdx#O!1Z#O#P!2c#P#o!1Z#o#p!9z#p#q!1Z#q#r!3Q#r;'S!1Z;'S;=`!;}<%lO!1ZFT(GqZ&^7[&WW&c,X&ap&f#tOr!=XrsMks#O!=X#O#P!>V#P#o!=X#o#p!7s#p#q!=X#q#r!5x#r;'S!=X;'S;=`!?m<%lO!=XMg(Hye&^7[&TS&WW&Q&j&Z`&ap&d!b&f#t%m,XOr%Trs(BOsw%Twx(EYx!Q%T!Q![(3O![!c%T!c!}(3O!}#O%T#O#P!?s#P#R%T#R#S(3O#S#T%T#T#o(3O#o#p!Bu#p#q%T#q#r!@b#r$g%T$g;'S(3O;'S;=`(4v<%lO(3OMg(Jqm&^7[&TS&WW&Q&j&Z`&ap&d!b&f#t%m,XOr%Trs(7Qsw%Twx(:jx!Q%T!Q![(3O![!c%T!c!h(3O!h!i(Hd!i!t(3O!t!u(>S!u!}(3O!}#O%T#O#P!?s#P#R%T#R#S(3O#S#T%T#T#U(3O#U#V(>S#V#Y(3O#Y#Z(Hd#Z#o(3O#o#p!Bu#p#q%T#q#r!@b#r$g%T$g;'S(3O;'S;=`(4v<%lO(3OG{(MP]!V,X&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u(N]]!UR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGz) i_%cQ&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%TGy)!qZ&TS&WW!ZGmOrEmrsFaswEmwxGsx#OEm#O#PIV#P#oEm#o#p!@b#p;'SEm;'S;=`JY<%lOEmG{)#w_%bR&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx!_%T!_!`&)_!`#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T<u)%XZ!Y7_&TS&WW&Z`&ap&d!b&f#tOr!@brs!$dsw!@bwx!4Qx#O!@b#O#P!Ad#P#o!@b#o#p!Bu#p;'S!@b;'S;=`!Co<%lO!@bGy)&_]%l,V&^7[&TS&WW&Z`&ap&d!b&f#tOr%Trs&_sw%Twx!0Vx#O%T#O#P!?s#P#o%T#o#p!Bu#p#q%T#q#r!@b#r;'S%T;'S;=`!Dz<%lO%T",
        tokenizers: [legacyPrint, indentation, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, newlines],
        topRules: { "Script": [0, 3] },
        specialized: [{ term: 213, get: (value) => spec_identifier5[value] || -1 }],
        tokenPrec: 7285
      });
    }
  });

  // node_modules/@codemirror/lang-python/dist/index.js
  var dist_exports10 = {};
  __export(dist_exports10, {
    globalCompletion: () => globalCompletion,
    localCompletionSource: () => localCompletionSource2,
    python: () => python,
    pythonLanguage: () => pythonLanguage
  });
  function defID2(type7) {
    return (node, def, outer) => {
      if (outer)
        return false;
      let id2 = node.node.getChild("VariableName");
      if (id2)
        def(id2, type7);
      return true;
    };
  }
  function getScope2(doc2, node) {
    let cached = cache2.get(node);
    if (cached)
      return cached;
    let completions2 = [], top3 = true;
    function def(node2, type7) {
      let name2 = doc2.sliceString(node2.from, node2.to);
      completions2.push({ label: name2, type: type7 });
    }
    node.cursor(IterMode.IncludeAnonymous).iterate((node2) => {
      if (node2.name) {
        let gather = gatherCompletions2[node2.name];
        if (gather && gather(node2, def, top3) || !top3 && ScopeNodes2.has(node2.name))
          return false;
        top3 = false;
      } else if (node2.to - node2.from > 8192) {
        for (let c2 of getScope2(doc2, node2.node))
          completions2.push(c2);
        return false;
      }
    });
    cache2.set(node, completions2);
    return completions2;
  }
  function localCompletionSource2(context) {
    let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
    if (dontComplete2.indexOf(inner.name) > -1)
      return null;
    let isWord = inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier3.test(context.state.sliceDoc(inner.from, inner.to));
    if (!isWord && !context.explicit)
      return null;
    let options = [];
    for (let pos = inner; pos; pos = pos.parent) {
      if (ScopeNodes2.has(pos.name))
        options = options.concat(getScope2(context.state.doc, pos));
    }
    return {
      options,
      from: isWord ? inner.from : context.pos,
      validFor: Identifier3
    };
  }
  function indentBody(context, node) {
    let base4 = context.lineIndent(node.from);
    let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
    if (/^\s*($|#)/.test(line.text) && context.node.to < to + 100 && !/\S/.test(context.state.sliceDoc(to, context.node.to)) && context.lineIndent(context.pos, -1) <= base4)
      return null;
    if (/^\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base4)
      return null;
    return base4 + context.unit;
  }
  function python() {
    return new LanguageSupport(pythonLanguage, [
      pythonLanguage.data.of({ autocomplete: localCompletionSource2 }),
      pythonLanguage.data.of({ autocomplete: globalCompletion })
    ]);
  }
  var cache2, ScopeNodes2, gatherCompletions2, Identifier3, dontComplete2, globals, snippets2, globalCompletion, pythonLanguage;
  var init_dist18 = __esm({
    "node_modules/@codemirror/lang-python/dist/index.js"() {
      init_index_es9();
      init_dist5();
      init_dist3();
      init_dist9();
      cache2 = /* @__PURE__ */ new NodeWeakMap();
      ScopeNodes2 = /* @__PURE__ */ new Set([
        "Script",
        "Body",
        "FunctionDefinition",
        "ClassDefinition",
        "LambdaExpression",
        "ForStatement",
        "MatchClause"
      ]);
      gatherCompletions2 = {
        FunctionDefinition: /* @__PURE__ */ defID2("function"),
        ClassDefinition: /* @__PURE__ */ defID2("class"),
        ForStatement(node, def, outer) {
          if (outer)
            for (let child = node.node.firstChild; child; child = child.nextSibling) {
              if (child.name == "VariableName")
                def(child, "variable");
              else if (child.name == "in")
                break;
            }
        },
        ImportStatement(_node, def) {
          var _a2, _b2;
          let { node } = _node;
          let isFrom = ((_a2 = node.firstChild) === null || _a2 === void 0 ? void 0 : _a2.name) == "from";
          for (let ch2 = node.getChild("import"); ch2; ch2 = ch2.nextSibling) {
            if (ch2.name == "VariableName" && ((_b2 = ch2.nextSibling) === null || _b2 === void 0 ? void 0 : _b2.name) != "as")
              def(ch2, isFrom ? "variable" : "namespace");
          }
        },
        AssignStatement(node, def) {
          for (let child = node.node.firstChild; child; child = child.nextSibling) {
            if (child.name == "VariableName")
              def(child, "variable");
            else if (child.name == ":" || child.name == "AssignOp")
              break;
          }
        },
        ParamList(node, def) {
          for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
            if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
              def(child, "variable");
            prev = child;
          }
        },
        CapturePattern: /* @__PURE__ */ defID2("variable"),
        AsPattern: /* @__PURE__ */ defID2("variable"),
        __proto__: null
      };
      Identifier3 = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
      dontComplete2 = ["String", "FormatString", "Comment", "PropertyName"];
      globals = /* @__PURE__ */ [
        "__annotations__",
        "__builtins__",
        "__debug__",
        "__doc__",
        "__import__",
        "__name__",
        "__loader__",
        "__package__",
        "__spec__",
        "False",
        "None",
        "True"
      ].map((n2) => ({ label: n2, type: "constant" })).concat(/* @__PURE__ */ [
        "ArithmeticError",
        "AssertionError",
        "AttributeError",
        "BaseException",
        "BlockingIOError",
        "BrokenPipeError",
        "BufferError",
        "BytesWarning",
        "ChildProcessError",
        "ConnectionAbortedError",
        "ConnectionError",
        "ConnectionRefusedError",
        "ConnectionResetError",
        "DeprecationWarning",
        "EOFError",
        "Ellipsis",
        "EncodingWarning",
        "EnvironmentError",
        "Exception",
        "FileExistsError",
        "FileNotFoundError",
        "FloatingPointError",
        "FutureWarning",
        "GeneratorExit",
        "IOError",
        "ImportError",
        "ImportWarning",
        "IndentationError",
        "IndexError",
        "InterruptedError",
        "IsADirectoryError",
        "KeyError",
        "KeyboardInterrupt",
        "LookupError",
        "MemoryError",
        "ModuleNotFoundError",
        "NameError",
        "NotADirectoryError",
        "NotImplemented",
        "NotImplementedError",
        "OSError",
        "OverflowError",
        "PendingDeprecationWarning",
        "PermissionError",
        "ProcessLookupError",
        "RecursionError",
        "ReferenceError",
        "ResourceWarning",
        "RuntimeError",
        "RuntimeWarning",
        "StopAsyncIteration",
        "StopIteration",
        "SyntaxError",
        "SyntaxWarning",
        "SystemError",
        "SystemExit",
        "TabError",
        "TimeoutError",
        "TypeError",
        "UnboundLocalError",
        "UnicodeDecodeError",
        "UnicodeEncodeError",
        "UnicodeError",
        "UnicodeTranslateError",
        "UnicodeWarning",
        "UserWarning",
        "ValueError",
        "Warning",
        "ZeroDivisionError"
      ].map((n2) => ({ label: n2, type: "type" }))).concat(/* @__PURE__ */ [
        "bool",
        "bytearray",
        "bytes",
        "classmethod",
        "complex",
        "float",
        "frozenset",
        "int",
        "list",
        "map",
        "memoryview",
        "object",
        "range",
        "set",
        "staticmethod",
        "str",
        "super",
        "tuple",
        "type"
      ].map((n2) => ({ label: n2, type: "class" }))).concat(/* @__PURE__ */ [
        "abs",
        "aiter",
        "all",
        "anext",
        "any",
        "ascii",
        "bin",
        "breakpoint",
        "callable",
        "chr",
        "compile",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "exec",
        "exit",
        "filter",
        "format",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "license",
        "locals",
        "max",
        "min",
        "next",
        "oct",
        "open",
        "ord",
        "pow",
        "print",
        "property",
        "quit",
        "repr",
        "reversed",
        "round",
        "setattr",
        "slice",
        "sorted",
        "sum",
        "vars",
        "zip"
      ].map((n2) => ({ label: n2, type: "function" })));
      snippets2 = [
        /* @__PURE__ */ snippetCompletion("def ${name}(${params}):\n	${}", {
          label: "def",
          detail: "function",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("for ${name} in ${collection}:\n	${}", {
          label: "for",
          detail: "loop",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("while ${}:\n	${}", {
          label: "while",
          detail: "loop",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("try:\n	${}\nexcept ${error}:\n	${}", {
          label: "try",
          detail: "/ except block",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("if ${}:\n	\n", {
          label: "if",
          detail: "block",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("if ${}:\n	${}\nelse:\n	${}", {
          label: "if",
          detail: "/ else block",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("class ${name}:\n	def __init__(self, ${params}):\n			${}", {
          label: "class",
          detail: "definition",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("import ${module}", {
          label: "import",
          detail: "statement",
          type: "keyword"
        }),
        /* @__PURE__ */ snippetCompletion("from ${module} import ${names}", {
          label: "from",
          detail: "import",
          type: "keyword"
        })
      ];
      globalCompletion = /* @__PURE__ */ ifNotIn(dontComplete2, /* @__PURE__ */ completeFromList(/* @__PURE__ */ globals.concat(snippets2)));
      pythonLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "python",
        parser: /* @__PURE__ */ parser10.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              Body: (context) => {
                var _a2;
                return (_a2 = indentBody(context, context.node)) !== null && _a2 !== void 0 ? _a2 : context.continue();
              },
              IfStatement: (cx2) => /^\s*(else:|elif )/.test(cx2.textAfter) ? cx2.baseIndent : cx2.continue(),
              TryStatement: (cx2) => /^\s*(except |finally:|else:)/.test(cx2.textAfter) ? cx2.baseIndent : cx2.continue(),
              "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /* @__PURE__ */ delimitedIndent({ closing: ")" }),
              "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /* @__PURE__ */ delimitedIndent({ closing: "}" }),
              "ArrayExpression ArrayComprehensionExpression": /* @__PURE__ */ delimitedIndent({ closing: "]" }),
              "String FormatString": () => null,
              Script: (context) => {
                if (context.pos + /\s*/.exec(context.textAfter)[0].length >= context.node.to) {
                  let endBody = null;
                  for (let cur = context.node, to = cur.to; ; ) {
                    cur = cur.lastChild;
                    if (!cur || cur.to != to)
                      break;
                    if (cur.type.name == "Body")
                      endBody = cur;
                  }
                  if (endBody) {
                    let bodyIndent = indentBody(context, endBody);
                    if (bodyIndent != null)
                      return bodyIndent;
                  }
                }
                return context.continue();
              }
            }),
            /* @__PURE__ */ foldNodeProp.add({
              "ArrayExpression DictionaryExpression SetExpression TupleExpression": foldInside,
              Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })
            })
          ]
        }),
        languageData: {
          closeBrackets: {
            brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
            stringPrefixes: [
              "f",
              "fr",
              "rf",
              "r",
              "u",
              "b",
              "br",
              "rb",
              "F",
              "FR",
              "RF",
              "R",
              "U",
              "B",
              "BR",
              "RB"
            ]
          },
          commentTokens: { line: "#" },
          indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/
        }
      });
    }
  });

  // node_modules/@lezer/rust/dist/index.es.js
  function isNum(ch2) {
    return ch2 >= 48 && ch2 <= 57;
  }
  function isNum_(ch2) {
    return isNum(ch2) || ch2 == 95;
  }
  var closureParamDelim, tpOpen, tpClose, RawString2, Float, _b, _e, _f, _r, _E, Zero2, Dot2, Plus, Minus, Hash, Quote2, Pipe, LessThan, GreaterThan2, literalTokens, closureParam, tpDelim, rustHighlighting, spec_identifier6, parser11;
  var init_index_es10 = __esm({
    "node_modules/@lezer/rust/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      closureParamDelim = 1;
      tpOpen = 2;
      tpClose = 3;
      RawString2 = 4;
      Float = 5;
      _b = 98;
      _e = 101;
      _f = 102;
      _r = 114;
      _E = 69;
      Zero2 = 48;
      Dot2 = 46;
      Plus = 43;
      Minus = 45;
      Hash = 35;
      Quote2 = 34;
      Pipe = 124;
      LessThan = 60;
      GreaterThan2 = 62;
      literalTokens = new ExternalTokenizer((input, stack) => {
        if (isNum(input.next)) {
          let isFloat = false;
          do {
            input.advance();
          } while (isNum_(input.next));
          if (input.next == Dot2) {
            isFloat = true;
            input.advance();
            if (isNum(input.next)) {
              do {
                input.advance();
              } while (isNum_(input.next));
            } else if (input.next == Dot2 || input.next > 127 || /\w/.test(String.fromCharCode(input.next))) {
              return;
            }
          }
          if (input.next == _e || input.next == _E) {
            isFloat = true;
            input.advance();
            if (input.next == Plus || input.next == Minus)
              input.advance();
            if (!isNum_(input.next))
              return;
            do {
              input.advance();
            } while (isNum_(input.next));
          }
          if (input.next == _f) {
            let after = input.peek(1);
            if (after == Zero2 + 3 && input.peek(2) == Zero2 + 2 || after == Zero2 + 6 && input.peek(2) == Zero2 + 4) {
              input.advance(3);
              isFloat = true;
            } else {
              return;
            }
          }
          if (isFloat)
            input.acceptToken(Float);
        } else if (input.next == _b || input.next == _r) {
          if (input.next == _b)
            input.advance();
          if (input.next != _r)
            return;
          input.advance();
          let count = 0;
          while (input.next == Hash) {
            count++;
            input.advance();
          }
          if (input.next != Quote2)
            return;
          input.advance();
          content:
            for (; ; ) {
              if (input.next < 0)
                return;
              let isQuote = input.next == Quote2;
              input.advance();
              if (isQuote) {
                for (let i = 0; i < count; i++) {
                  if (input.next != Hash)
                    continue content;
                  input.advance();
                }
                input.acceptToken(RawString2);
                return;
              }
            }
        }
      });
      closureParam = new ExternalTokenizer((input) => {
        if (input.next == Pipe)
          input.acceptToken(closureParamDelim, 1);
      });
      tpDelim = new ExternalTokenizer((input) => {
        if (input.next == LessThan)
          input.acceptToken(tpOpen, 1);
        else if (input.next == GreaterThan2)
          input.acceptToken(tpClose, 1);
      });
      rustHighlighting = styleTags({
        "const macro_rules struct union enum type fn impl trait let static": tags.definitionKeyword,
        "mod use crate": tags.moduleKeyword,
        "pub unsafe async mut extern default move": tags.modifier,
        "for if else loop while match continue break return await": tags.controlKeyword,
        "as in ref": tags.operatorKeyword,
        "where _ crate super dyn": tags.keyword,
        "self": tags.self,
        String: tags.string,
        Char: tags.character,
        RawString: tags.special(tags.string),
        Boolean: tags.bool,
        Identifier: tags.variableName,
        "CallExpression/Identifier": tags.function(tags.variableName),
        BoundIdentifier: tags.definition(tags.variableName),
        "FunctionItem/BoundIdentifier": tags.function(tags.definition(tags.variableName)),
        LoopLabel: tags.labelName,
        FieldIdentifier: tags.propertyName,
        "CallExpression/FieldExpression/FieldIdentifier": tags.function(tags.propertyName),
        Lifetime: tags.special(tags.variableName),
        ScopeIdentifier: tags.namespace,
        TypeIdentifier: tags.typeName,
        "MacroInvocation/Identifier MacroInvocation/ScopedIdentifier/Identifier": tags.macroName,
        "MacroInvocation/TypeIdentifier MacroInvocation/ScopedIdentifier/TypeIdentifier": tags.macroName,
        '"!"': tags.macroName,
        UpdateOp: tags.updateOperator,
        LineComment: tags.lineComment,
        BlockComment: tags.blockComment,
        Integer: tags.integer,
        Float: tags.float,
        ArithOp: tags.arithmeticOperator,
        LogicOp: tags.logicOperator,
        BitOp: tags.bitwiseOperator,
        CompareOp: tags.compareOperator,
        "=": tags.definitionOperator,
        ".. ... => ->": tags.punctuation,
        "( )": tags.paren,
        "[ ]": tags.squareBracket,
        "{ }": tags.brace,
        ". DerefOp": tags.derefOperator,
        "&": tags.operator,
        ", ; ::": tags.separator,
        "Attribute/...": tags.meta
      });
      spec_identifier6 = { __proto__: null, self: 28, super: 32, crate: 34, impl: 46, true: 72, false: 72, pub: 88, in: 92, const: 96, unsafe: 104, async: 108, move: 110, if: 114, let: 118, ref: 142, mut: 144, _: 198, else: 200, match: 204, as: 248, return: 252, await: 262, break: 270, continue: 276, while: 312, loop: 316, for: 320, macro_rules: 327, mod: 334, extern: 342, struct: 346, where: 364, union: 379, enum: 382, type: 390, default: 395, fn: 396, trait: 412, use: 420, static: 438, dyn: 476 };
      parser11 = LRParser.deserialize({
        version: 14,
        states: "$2xQ]Q_OOP$wOWOOO&sQWO'#CnO)WQWO'#I`OOQP'#I`'#I`OOQQ'#Ie'#IeO)hO`O'#C}OOQR'#Ih'#IhO)sQWO'#IuOOQO'#Hk'#HkO)xQWO'#DpOOQR'#Iw'#IwO)xQWO'#DpO*ZQWO'#DpOOQO'#Iv'#IvO,SQWO'#J`O,ZQWO'#EiOOQV'#Hp'#HpO,cQYO'#F{OOQV'#El'#ElOOQV'#Em'#EmOOQV'#En'#EnO.YQ_O'#EkO0_Q_O'#EoO2gQWOOO4QQ_O'#FPO7hQWO'#J`OOQV'#FY'#FYO7{Q_O'#F^O:WQ_O'#FaOOQO'#F`'#F`O=sQ_O'#FcO=}Q_O'#FbO@VQWO'#FgOOQO'#J`'#J`OOQV'#Io'#IoOA]Q_O'#InOEPQWO'#InOOQV'#Fw'#FwOF[QWO'#JuOFcQWO'#F|OOQO'#IO'#IOOGrQWO'#GhOOQV'#Im'#ImOOQV'#Il'#IlOOQV'#Hj'#HjQGyQ_OOOKeQ_O'#DUOKlQYO'#CqOOQP'#I_'#I_OOQV'#Hg'#HgQ]Q_OOOLuQWO'#I`ONsQYO'#DXO!!eQWO'#JuO!!lQWO'#JuO!!vQ_O'#DfO!%]Q_O'#E}O!(sQ_O'#FWO!,ZQWO'#FZO!.^QXO'#FbO!.cQ_O'#EeO!!vQ_O'#FmO!0uQWO'#FoO!0zQWO'#FoO!1PQ^O'#FqO!1WQWO'#JuO!1_QWO'#FtO!1dQWO'#FxO!2WQWO'#JjO!2_QWO'#GOO!2_QWO'#G`O!2_QWO'#GbO!2_QWO'#GsOOQO'#Ju'#JuO!2dQWO'#GhO!2lQYO'#GpO!2_QWO'#GqO!3uQ^O'#GtO!3|QWO'#GuO!4hQWO'#HOP!4sOpO'#CcPOOO)CC})CC}OOOO'#Hi'#HiO!5OO`O,59iOOQV,59i,59iO!5ZQYO,5?aOOQO-E;i-E;iOOQO,5:[,5:[OOQP,59Z,59ZO)xQWO,5:[O)xQWO,5:[O!5oQWO,5?kO!5zQYO,5;qO!6PQYO,5;TO!6hQWO,59QO!7kQXO'#CnO!7xQXO'#I`O!9SQWO'#CoO,^QWO'#EiOOQV-E;n-E;nO!9eQWO'#FsOOQV,5<g,5<gO!9SQWO'#CoO!9jQWO'#CoO!9oQWO'#I`O! yQWO'#JuO!9yQWO'#J`O!:aQWO,5;VOOQO'#In'#InO!0zQWO'#DaO!<aQWO'#DcO!<iQWO,5;ZO.YQ_O,5;ZOOQO,5;[,5;[OOQV'#Er'#ErOOQV'#Es'#EsOOQV'#Et'#EtOOQV'#Eu'#EuOOQV'#Ev'#EvOOQV'#Ew'#EwOOQV'#Ex'#ExOOQV'#Ey'#EyO.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;fO!=PQ_O,5;kO!@gQ_O'#FROOQO,5;l,5;lO!BrQWO,5;pO.YQ_O,5;wOKlQYO,5;gO!D_QWO,5;kO!EOQWO,5;xOOQO,5;x,5;xO!E]QWO,5;xO!EbQ_O,5;xO!GmQWO'#CfO!GrQWO,5<QO!G|Q_O,5<QOOQO,5;{,5;{O!JjQXO'#CnO!K{QXO'#I`OOQS'#Dk'#DkOOQP'#Ir'#IrO!LuQ[O'#IrO!L}QXO'#DjO!M{QWO'#DnO!M{QWO'#DnO!N^QWO'#DnOOQP'#It'#ItO!NcQXO'#ItO# ^Q^O'#DoO# hQWO'#DrO# pQ^O'#DzO# zQ^O'#D|O#!RQWO'#EPO#!^QXO'#FdOOQP'#ES'#ESOOQP'#Iq'#IqO#!lQXO'#JfOOQP'#Je'#JeO#!tQXO,5;}O#!yQXO'#I`O!1PQ^O'#DyO!1PQ^O'#FdO##sQWO,5;|OOQO,5;|,5;|OKlQYO,5;|O#$ZQWO'#FhOOQO,5<R,5<ROOQV,5=l,5=lO#&`QYO'#FzOOQV,5<h,5<hO#&gQWO,5<hO#&nQWO,5=SO!1WQWO,59rO!1dQWO,5<dO#&uQWO,5=iO!2_QWO,5<jO!2_QWO,5<zO!2_QWO,5<|O!2_QWO,5=QO#&|QWO,5=]O#'TQWO,5=SO!2_QWO,5=]O!3|QWO,5=aO#']QWO,5=jOOQO-E;|-E;|O#'hQWO'#JjOOQV-E;h-E;hO#(PQWO'#HRO#(WQ_O,59pOOQV,59p,59pO#(_QWO,59pO#(dQ_O,59pO#)SQZO'#CuO#+[QZO'#CvOOQV'#C|'#C|O#-wQWO'#HTO#.OQYO'#IdOOQO'#Hh'#HhO#.WQWO'#CwO#.WQWO'#CwO#.iQWO'#CwOOQR'#Ic'#IcO#.nQZO'#IbO#1TQYO'#HTO#1qQYO'#H[O#2}QYO'#H_OKlQYO'#H`OOQR'#Hb'#HbO#4ZQWO'#HeO#4`QYO,59]OOQR'#Ib'#IbO#5PQZO'#CtO#7[QYO'#HUO#7aQWO'#HTO#7fQYO'#CrO#8VQWO'#H]O#7fQYO'#HcOOQV-E;e-E;eO#8_QWO,59sOOQV,59{,59{O#8mQYO,5=[OOQV,59},59}O!0zQWO,59}O#;aQWO'#IpOOQO'#Ip'#IpO!1PQ^O'#DhO!0zQWO,5:QO#;hQWO,5;iO#<OQWO,5;rO#<fQ_O,5;rOOQO,5;u,5;uO#@PQ_O,5;|O#BXQWO,5;PO!0zQWO,5<XO#B`QWO,5<ZOOQV,5<Z,5<ZO#BkQWO,5<]O!1PQ^O'#EOOOQQ'#D_'#D_O#BsQWO,59rO#BxQWO,5<`O#B}QWO,5<dOOQO,5@U,5@UO#CVQWO,5=iOOQQ'#Cv'#CvO#C[QYO,5<jO#CmQYO,5<zO#CxQYO,5<|O#DTQYO,5=_O#DcQYO,5=SO#E{QYO'#GQO#FYQYO,5=[O#FmQWO,5=[O#F{QYO,5=[O#HUQYO,5=]O#HdQWO,5=`O!1PQ^O,5=`O#HrQWO'#CnO#ITQWO'#I`OOQO'#Jy'#JyO#IfQWO'#IQO#IkQWO'#GwOOQO'#Jz'#JzO#JSQWO'#GzOOQO'#G|'#G|OOQO'#Jx'#JxO#IkQWO'#GwO#JZQWO'#GxO#J`QWO,5=aO#JeQWO,5=jO!1dQWO,5=jO#'`QWO,5=jPOOO'#Hf'#HfP#JjOpO,58}POOO,58},58}OOOO-E;g-E;gOOQV1G/T1G/TO#JuQWO1G4{O#JzQ^O'#CyPOQQ'#Cx'#CxOOQO1G/v1G/vOOQP1G.u1G.uO)xQWO1G/vO#NTQ!fO'#ETO#N[Q!fO'#EaO#NcQ!fO'#EbO$ kQWO1G1yO$!_Q_O1G1yOOQP1G5V1G5VOOQO1G1]1G1]O$&RQWO1G0oO$&WQWO'#CiO!7xQXO'#I`O!6PQYO1G.lO!5oQWO,5<_O!9SQWO,59ZO!9SQWO,59ZO!5oQWO,5?kO$&iQWO1G0uO$(vQWO1G0wO$*nQWO1G0wO$+UQWO1G0wO$-YQWO1G0wO$-aQWO1G0wO$/bQWO1G0wO$/iQWO1G0wO$1jQWO1G0wO$1qQWO1G0wO$3YQWO1G1QO$5ZQWO1G1VO$5zQ_O'#JcO$8SQWO'#JcOOQO'#Jb'#JbO$8^QWO,5;mOOQO'#Dw'#DwOOQO1G1[1G1[OOQO1G1Y1G1YO$8cQWO1G1cOOQO1G1R1G1RO$8jQ_O'#HrO$:xQWO,5@OO.YQ_O1G1dOOQO1G1d1G1dO$;QQWO1G1dO$;_QWO1G1dO$;dQWO1G1eOOQO1G1l1G1lO$;lQWO1G1lOOQP,5?^,5?^O$;vQ^O,5:kO$<aQXO,5:YO!M{QWO,5:YO!M{QWO,5:YO!1PQ^O,5:gO$=bQWO'#IyOOQO'#Ix'#IxO$=pQWO,5:ZO# ^Q^O,5:ZO$=uQWO'#DsOOQP,5:^,5:^O$>WQWO,5:fOOQP,5:h,5:hO!1PQ^O,5:hO!1PQ^O,5:mO$>]QYO,5<OO$>gQ_O'#HsO$>tQXO,5@QOOQV1G1i1G1iOOQP,5:e,5:eO$>|QXO,5<OO$?[QWO1G1hO$?dQWO'#CnO$?oQWO'#FiOOQO'#Fi'#FiO$?wQWO'#FjO.YQ_O'#FkOOQO'#Ji'#JiO$?|QWO'#JhOOQO'#Jg'#JgO$@UQWO,5<SOOQQ'#Hv'#HvO$@ZQYO,5<fOOQV,5<f,5<fO$@bQYO,5<fOOQV1G2S1G2SO$@iQWO1G2nO$@qQWO1G/^O$@vQWO1G2OO#CVQWO1G3TO$AOQYO1G2UO#CmQYO1G2fO#CxQYO1G2hO$AaQYO1G2lO!2_QWO1G2wO#DcQYO1G2nO#HUQYO1G2wO$AiQWO1G2{O$AnQWO1G3UO!1dQWO1G3UO$AsQWO1G3UOOQV1G/[1G/[O$A{QWO1G/[O$BQQ_O1G/[O#7aQWO,5=oO$BXQYO,5?OO$BmQWO,5?OO$BrQZO'#IeOOQO-E;f-E;fOOQR,59c,59cO#.WQWO,59cO#.WQWO,59cOOQR,5=n,5=nO$E_QYO'#HVO$FwQZO,5=oO!5oQWO,5={O$IZQWO,5=oO$IbQZO,5=vO$KqQYO,5=vO$>]QYO,5=vO$LRQWO'#KRO$L^QWO,5=xOOQR,5=y,5=yO$LcQWO,5=zO$>]QYO,5>PO$>]QYO,5>POOQO1G.w1G.wO$>]QYO1G.wO$LnQYO,5=pO$LvQZO,59^OOQR,59^,59^O$>]QYO,5=wO% YQZO,5=}OOQR,5=},5=}O%#lQWO1G/_O!6PQYO1G/_O#FYQYO1G2vO%#qQWO1G2vO%$PQYO1G2vOOQV1G/i1G/iO%%YQWO,5:SO%%bQ_O1G/lO%*kQWO1G1^O%+RQWO1G1hOOQO1G1h1G1hO$>]QYO1G1hO%+iQ^O'#EgOOQV1G0k1G0kOOQV1G1s1G1sO!!vQ_O1G1sO!0zQWO1G1uO!1PQ^O1G1wO!.cQ_O1G1wOOQP,5:j,5:jO$>]QYO1G/^OOQO'#Cn'#CnO%+vQWO1G1zOOQV1G2O1G2OO%,OQWO'#CnO%,WQWO1G3TO%,]QWO1G3TO%,bQYO'#GQO%,sQWO'#G]O%-UQYO'#G_O%.hQYO'#GXOOQV1G2U1G2UO%/wQWO1G2UO%/|QWO1G2UO$ARQWO1G2UOOQV1G2f1G2fO%/wQWO1G2fO#CpQWO1G2fO%0UQWO'#GdOOQV1G2h1G2hO%0gQWO1G2hO#C{QWO1G2hO%0lQYO'#GSO$>]QYO1G2lO$AdQWO1G2lOOQV1G2y1G2yO%1xQWO1G2yO%3hQ^O'#GkO%3rQWO1G2nO#DfQWO1G2nO%4QQYO,5<lO%4[QYO,5<lO%4jQYO,5<lO%5XQYO,5<lOOQQ,5<l,5<lO!1WQWO'#JuO%5dQYO,5<lO%5lQWO1G2vOOQV1G2v1G2vO%5tQWO1G2vO$>]QYO1G2vOOQV1G2w1G2wO%5tQWO1G2wO%5yQWO1G2wO#HXQWO1G2wOOQV1G2z1G2zO.YQ_O1G2zO$>]QYO1G2zO%6RQWO1G2zOOQO,5>l,5>lOOQO-E<O-E<OOOQO,5=c,5=cOOQO,5=e,5=eOOQO,5=g,5=gOOQO,5=h,5=hO%6aQWO'#J|OOQO'#J{'#J{O%6iQWO,5=fO%6nQWO,5=cO!1dQWO,5=dOOQV1G2{1G2{O$>]QYO1G3UPOOO-E;d-E;dPOOO1G.i1G.iOOQO7+*g7+*gO%7VQYO'#IcO%7nQYO'#IfO%7yQYO'#IfO%8RQYO'#IfO%8^QYO,59eOOQO7+%b7+%bOOQP7+$a7+$aO%8cQ!fO'#JTOOQS'#EX'#EXOOQS'#EY'#EYOOQS'#EZ'#EZOOQS'#JT'#JTO%;UQWO'#EWOOQS'#E`'#E`OOQS'#JR'#JROOQS'#Hn'#HnO%;ZQ!fO,5:oOOQV,5:o,5:oOOQV'#JQ'#JQO%;bQ!fO,5:{OOQV,5:{,5:{O%;iQ!fO,5:|OOQV,5:|,5:|OOQV7+'e7+'eOOQV7+&Z7+&ZO%;pQ!fO,59TOOQO,59T,59TO%>YQWO7+$WO%>_QWO1G1yOOQV1G1y1G1yO!9SQWO1G.uO%>dQWO,5?}O%>nQ_O'#HqO%@|QWO,5?}OOQO1G1X1G1XOOQO7+&}7+&}O%AUQWO,5>^OOQO-E;p-E;pO%AcQWO7+'OO.YQ_O7+'OOOQO7+'O7+'OOOQO7+'P7+'PO%AjQWO7+'POOQO7+'W7+'WOOQP1G0V1G0VO%ArQXO1G/tO!M{QWO1G/tO%BsQXO1G0RO%CkQ^O'#HlO%C{QWO,5?eOOQP1G/u1G/uO%DWQWO1G/uO%D]QWO'#D_OOQO'#Dt'#DtO%DhQWO'#DtO%DmQWO'#I{OOQO'#Iz'#IzO%DuQWO,5:_O%DzQWO'#DtO%EPQWO'#DtOOQP1G0Q1G0QOOQP1G0S1G0SOOQP1G0X1G0XO%EXQXO1G1jO%EdQXO'#FeOOQP,5>_,5>_O!1PQ^O'#FeOOQP-E;q-E;qO$>]QYO1G1jOOQO7+'S7+'SOOQO,5<T,5<TO%ErQWO,5<UO.YQ_O,5<UO%EwQWO,5<VO%FRQWO'#HtO%FdQWO,5@SOOQO1G1n1G1nOOQQ-E;t-E;tOOQV1G2Q1G2QO%FlQYO1G2QO#DcQYO7+(YO$>]QYO7+$xOOQV7+'j7+'jO%FsQWO7+(oO%FxQWO7+(oOOQV7+'p7+'pO%/wQWO7+'pO%F}QWO7+'pO%GVQWO7+'pOOQV7+(Q7+(QO%/wQWO7+(QO#CpQWO7+(QOOQV7+(S7+(SO%0gQWO7+(SO#C{QWO7+(SO$>]QYO7+(WO%GeQWO7+(WO#HUQYO7+(cO%GjQWO7+(YO#DfQWO7+(YOOQV7+(c7+(cO%5tQWO7+(cO%5yQWO7+(cO#HXQWO7+(cOOQV7+(g7+(gO$>]QYO7+(pO%GxQWO7+(pO!1dQWO7+(pOOQV7+$v7+$vO%G}QWO7+$vO%HSQZO1G3ZO%JfQWO1G4jOOQO1G4j1G4jOOQR1G.}1G.}O#.WQWO1G.}O%JkQWO'#KQOOQO'#HW'#HWO%J|QWO'#HXO%KXQWO'#KQOOQO'#KP'#KPO%KaQWO,5=qO%KfQYO'#H[O%LrQWO'#GmO%L}QYO'#CtO%MXQWO'#GmO$>]QYO1G3ZOOQR1G3g1G3gO#7aQWO1G3ZO%M^QZO1G3bO$>]QYO1G3bO& mQYO'#IVO& }QWO,5@mOOQR1G3d1G3dOOQR1G3f1G3fO.YQ_O1G3fOOQR1G3k1G3kO&!VQYO7+$cO&!_QYO'#KOOOQQ'#J}'#J}O&!gQYO1G3[O&!lQZO1G3cOOQQ7+$y7+$yO&${QWO7+$yO&%QQWO7+(bOOQV7+(b7+(bO%5tQWO7+(bO$>]QYO7+(bO#FYQYO7+(bO&%YQWO7+(bO!.cQ_O1G/nO&%hQWO7+%WO$?[QWO7+'SO&%pQWO'#EhO&%{Q^O'#EhOOQU'#Ho'#HoO&%{Q^O,5;ROOQV,5;R,5;RO&&VQWO,5;RO&&[Q^O,5;RO!0zQWO7+'_OOQV7+'a7+'aO&&iQWO7+'cO&&qQWO7+'cO&&xQWO7+$xO&'TQ!fO7+'fO&'[Q!fO7+'fOOQV7+(o7+(oO!1dQWO7+(oO&'cQYO,5<lO&'nQYO,5<lO!1dQWO'#GWO&'|QWO'#JpO&([QWO'#G^O!BxQWO'#G^O&(aQWO'#JpOOQO'#Jo'#JoO&(iQWO,5<wOOQO'#DX'#DXO&(nQYO'#JrO&)}QWO'#JrO$>]QYO'#JrOOQO'#Jq'#JqO&*YQWO,5<yO&*_QWO'#GZO#D^QWO'#G[O&*gQWO'#G[O&*oQWO'#JmOOQO'#Jl'#JlO&*zQYO'#GTOOQO,5<s,5<sO&+PQWO7+'pO&+UQWO'#JtO&+dQWO'#GeO#BxQWO'#GeO&+uQWO'#JtOOQO'#Js'#JsO&+}QWO,5=OO$>]QYO'#GUO&,SQYO'#JkOOQQ,5<n,5<nO&,kQWO7+(WOOQV7+(e7+(eO&.TQ^O'#D|O&._QWO'#GlO&.gQ^O'#JwOOQO'#Gn'#GnO&.nQWO'#JwOOQO'#Jv'#JvO&.vQWO,5=VO&.{QWO'#I`O&/]Q^O'#GmO&/dQWO'#IqO&/rQWO'#GmOOQV7+(Y7+(YO&/zQWO7+(YO$>]QYO7+(YO&0SQYO'#HxO&0hQYO1G2WOOQQ1G2W1G2WOOQQ,5<m,5<mO$>]QYO,5<qO&0pQWO,5<rO&0uQWO7+(bO&1QQWO7+(fO&1XQWO7+(fOOQV7+(f7+(fO.YQ_O7+(fO$>]QYO7+(fO&1dQWO'#IRO&1nQWO,5@hOOQO1G3Q1G3QOOQO1G2}1G2}OOQO1G3P1G3POOQO1G3R1G3ROOQO1G3S1G3SOOQO1G3O1G3OO&1vQWO7+(pO$>]QYO,59fO&2RQ^O'#ISO&2xQYO,5?QOOQR1G/P1G/PO&3QQ!bO,5:pO&3VQ!fO,5:rOOQS-E;l-E;lOOQV1G0Z1G0ZOOQV1G0g1G0gOOQV1G0h1G0hO&3^QWO'#JTOOQO1G.o1G.oOOQV<<Gr<<GrO&3iQWO1G5iO$5zQ_O,5>]O&3qQWO,5>]OOQO-E;o-E;oOOQO<<Jj<<JjO&3{QWO<<JjOOQO<<Jk<<JkO&4SQXO7+%`O&5TQWO,5>WOOQO-E;j-E;jOOQP7+%a7+%aO!1PQ^O,5:`O&5cQWO'#HmO&5wQWO,5?gOOQP1G/y1G/yOOQO,5:`,5:`O&6PQWO,5:`O%DzQWO,5:`O$>]QYO,5<PO&6UQXO,5<PO&6dQXO7+'UO.YQ_O1G1pO&6oQWO1G1pOOQO,5>`,5>`OOQO-E;r-E;rOOQV7+'l7+'lO&6yQWO<<KtO#DfQWO<<KtO&7XQWO<<HdOOQV<<LZ<<LZO!1dQWO<<LZOOQV<<K[<<K[O&7dQWO<<K[O%/wQWO<<K[O&7iQWO<<K[OOQV<<Kl<<KlO%/wQWO<<KlOOQV<<Kn<<KnO%0gQWO<<KnO&7qQWO<<KrO$>]QYO<<KrOOQV<<K}<<K}O%5tQWO<<K}O%5yQWO<<K}O#HXQWO<<K}OOQV<<Kt<<KtO&7yQWO<<KtO$>]QYO<<KtO&8RQWO<<L[O$>]QYO<<L[O&8^QWO<<L[OOQV<<Hb<<HbO$>]QYO7+(uOOQO7+*U7+*UOOQR7+$i7+$iO&8cQWO,5@lOOQO'#Gm'#GmO&8kQWO'#GmO&8vQYO'#IUO&8cQWO,5@lOOQR1G3]1G3]O&:cQYO,5=vO&;rQYO,5=XO&;|QWO,5=XOOQO,5=X,5=XOOQR7+(u7+(uO&<RQZO7+(uO&>eQZO7+(|O&@tQWO,5>qOOQO-E<T-E<TO&APQWO7+)QOOQO<<G}<<G}O&AWQYO'#ITO&AcQYO,5@jOOQQ7+(v7+(vOOQQ<<He<<HeO$>]QYO<<K|OOQV<<K|<<K|O&0uQWO<<K|O&AkQWO<<K|O%5tQWO<<K|O&AsQWO7+%YOOQV<<Hr<<HrOOQO<<Jn<<JnO.YQ_O,5;SO&AzQWO,5;SO.YQ_O'#EjO&BPQWO,5;SOOQU-E;m-E;mO&B[QWO1G0mOOQV1G0m1G0mO&%{Q^O1G0mOOQV<<Jy<<JyO!.cQ_O<<J}OOQV<<J}<<J}OOQV<<Hd<<HdO.YQ_O<<HdO&BaQWO'#FvO&BfQWO<<KQO&BnQ!fO<<KQO&BuQWO<<KQO&BzQWO<<KQO&CSQ!fO<<KQOOQV<<KQ<<KQO&CZQWO<<LZO&C`QWO,5@[O$>]QYO,5<xO&ChQWO,5<xO&CmQWO'#H{O&C`QWO,5@[OOQV1G2c1G2cO&DRQWO,5@^O$>]QYO,5@^O&D^QYO'#H|O&EsQWO,5@^OOQO1G2e1G2eO%,nQWO,5<uOOQO,5<v,5<vO&E{QYO'#HzO&G_QWO,5@XO%,bQYO,5=pO$>]QYO,5<oO&GjQWO,5@`O.YQ_O,5=PO&GrQWO,5=PO&G}QWO,5=PO&H`QWO'#H}O&GjQWO,5@`OOQV1G2j1G2jO&HtQYO,5<pO%0lQYO,5>PO&I]QYO,5@VOOQV<<Kr<<KrO&ItQWO,5=XO&KfQ^O,5:hO&KmQWO,5=XO$>]QYO,5=WO&KuQWO,5@cO&K}QWO,5@cO&MvQ^O'#IPO&KuQWO,5@cOOQO1G2q1G2qO&NTQWO,5=WO&N]QWO<<KtO&NkQYO,5>oO&NvQYO,5>dO' UQYO,5>dOOQQ,5>d,5>dOOQQ-E;v-E;vOOQQ7+'r7+'rO' aQYO1G2]O$>]QYO1G2^OOQV<<LQ<<LQO.YQ_O<<LQO' lQWO<<LQO' sQWO<<LQOOQO,5>m,5>mOOQO-E<P-E<POOQV<<L[<<L[O.YQ_O<<L[O'!OQYO1G/QO'!ZQYO,5>nOOQQ,5>n,5>nO'!fQYO,5>nOOQQ-E<Q-E<QOOQS1G0[1G0[O'$tQ!fO1G0^O'%RQ!fO1G0^O'%YQWO1G3wOOQOAN@UAN@UO'%dQWO1G/zOOQO,5>X,5>XOOQO-E;k-E;kO!1PQ^O1G/zOOQO1G/z1G/zO'%oQWO1G/zO'%tQXO1G1kO$>]QYO1G1kO'&PQWO7+'[OOQVANA`ANA`O'&ZQWOANA`O$>]QYOANA`O'&cQWOANA`OOQVAN>OAN>OO.YQ_OAN>OO'&qQWOANAuOOQVAN@vAN@vO'&vQWOAN@vOOQVANAWANAWOOQVANAYANAYOOQVANA^ANA^O'&{QWOANA^OOQVANAiANAiO%5tQWOANAiO%5yQWOANAiO''TQWOANA`OOQVANAvANAvO.YQ_OANAvO''cQWOANAvO$>]QYOANAvOOQR<<La<<LaO''nQWO1G6WO%JkQWO,5>pOOQO'#HY'#HYO''vQWO'#HZOOQO,5>p,5>pOOQO-E<S-E<SO'(RQYO1G2sO'(]QWO1G2sOOQO1G2s1G2sO$>]QYO<<LaOOQR<<Ll<<LlOOQQ,5>o,5>oOOQQ-E<R-E<RO&0uQWOANAhOOQVANAhANAhO%5tQWOANAhO$>]QYOANAhO'(bQWO1G1rO')UQ^O1G0nO.YQ_O1G0nO'*zQWO,5;UO'+RQWO1G0nP'+WQWO'#ERP&%{Q^O'#HpOOQV7+&X7+&XO'+cQWO7+&XO&&qQWOAN@iO'+hQWOAN>OO!5oQWO,5<bOOQS,5>a,5>aO'+oQWOAN@lO'+tQWOAN@lOOQS-E;s-E;sOOQVAN@lAN@lO'+|QWOAN@lOOQVANAuANAuO',UQWO1G5vO',^QWO1G2dO$>]QYO1G2dO&'|QWO,5>gOOQO,5>g,5>gOOQO-E;y-E;yO',iQWO1G5xO',qQWO1G5xO&(nQYO,5>hO',|QWO,5>hO$>]QYO,5>hOOQO-E;z-E;zO'-XQWO'#JnOOQO1G2a1G2aOOQO,5>f,5>fOOQO-E;x-E;xO&'cQYO,5<lO'-gQYO1G2ZO'.RQWO1G5zO'.ZQWO1G2kO.YQ_O1G2kO'.eQWO1G2kO&+UQWO,5>iOOQO,5>i,5>iOOQO-E;{-E;{OOQQ,5>c,5>cOOQQ-E;u-E;uO'.pQWO1G2sO'/QQWO1G2rO'/]QWO1G5}O'/eQ^O,5>kOOQO'#Go'#GoOOQO,5>k,5>kO'/lQWO,5>kOOQO-E;}-E;}O$>]QYO1G2rO'/zQYO7+'xO'0VQWOANAlOOQVANAlANAlO.YQ_OANAlO'0^QWOANAvOOQS7+%x7+%xO'0eQWO7+%xO'0pQ!fO7+%xO'0}QWO7+%fO!1PQ^O7+%fO'1YQXO7+'VOOQVG26zG26zO'1eQWOG26zO'1sQWOG26zO$>]QYOG26zO'1{QWOG23jOOQVG27aG27aOOQVG26bG26bOOQVG26xG26xOOQVG27TG27TO%5tQWOG27TO'2SQWOG27bOOQVG27bG27bO.YQ_OG27bO'2ZQWOG27bOOQO1G4[1G4[OOQO7+(_7+(_OOQRANA{ANA{OOQVG27SG27SO%5tQWOG27SO&0uQWOG27SO'2fQ^O7+&YO'4PQWO7+'^O'4sQ^O7+&YO.YQ_O7+&YP.YQ_O,5;SP'6PQWO,5;SP'6UQWO,5;SOOQV<<Is<<IsOOQVG26TG26TOOQVG23jG23jOOQO1G1|1G1|OOQVG26WG26WO'6aQWOG26WP&B}QWO'#HuO'6fQWO7+(OOOQO1G4R1G4RO'6qQWO7++dO'6yQWO1G4SO$>]QYO1G4SO%,nQWO'#HyO'7UQWO,5@YO'7dQWO7+(VO.YQ_O7+(VOOQO1G4T1G4TOOQO1G4V1G4VO'7nQWO1G4VO'7|QWO7+(^OOQVG27WG27WO'8XQWOG27WOOQS<<Id<<IdO'8`QWO<<IdO'8kQWO<<IQOOQVLD,fLD,fO'8vQWOLD,fO'9OQWOLD,fOOQVLD)ULD)UOOQVLD,oLD,oOOQVLD,|LD,|O'9^QWOLD,|O.YQ_OLD,|OOQVLD,nLD,nO%5tQWOLD,nO'9eQ^O<<ItO';OQWO<<JxO';rQ^O<<ItP'=OQWO1G0nP'=oQ^O1G0nP.YQ_O1G0nP'?bQWO1G0nOOQVLD+rLD+rO'?gQWO7+)nOOQO,5>e,5>eOOQO-E;w-E;wO'?rQWO<<KqOOQVLD,rLD,rOOQSAN?OAN?OOOQV!$(!Q!$(!QO'?|QWO!$(!QOOQV!$(!h!$(!hO'@UQWO!$(!hOOQV!$(!Y!$(!YO'@]Q^OAN?`POQU7+&Y7+&YP'AvQWO7+&YP'BgQ^O7+&YP.YQ_O7+&YOOQV!)9El!)9ElOOQV!)9FS!)9FSPOQU<<It<<ItP'DYQWO<<ItP'DyQ^O<<ItPOQUAN?`AN?`O'FlQWO'#CnO'FsQXO'#CnO'GlQWO'#I`O'IRQXO'#I`O'IxQWO'#DpO'IxQWO'#DpO!.cQ_O'#EkO'JZQ_O'#EoO'JbQ_O'#FPO'MfQ_O'#FbO'MmQXO'#I`O'NdQ_O'#E}O( gQ_O'#FWO'IxQWO,5:[O'IxQWO,5:[O!.cQ_O,5;ZO!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;fO(!jQ_O,5;kO(%nQWO,5;kO(&OQWO,5;|O(&VQYO'#CuO(&bQYO'#CvO(&mQWO'#CwO(&mQWO'#CwO('OQYO'#CtO('ZQWO,5;iO('bQWO,5;rO('iQ_O,5;rO((oQ_O,5;|O'IxQWO1G/vO((vQWO1G0uO(*eQWO1G0wO(*oQWO1G0wO(,dQWO1G0wO(,kQWO1G0wO(.]QWO1G0wO(.dQWO1G0wO(0UQWO1G0wO(0]QWO1G0wO(0dQWO1G1QO(0tQWO1G1VO(1UQYO'#IeO(&mQWO,59cO(&mQWO,59cO(1aQWO1G1^O(1hQWO1G1hO(&mQWO1G.}O(1oQWO'#DpO!.^QXO'#FbO(1tQWO,5;ZO(1{QWO'#Cw",
        stateData: "(2_~O&|OSUOS&}PQ~OPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'TQO'ZkO'^UO'gcO'qiO(QdO~O&}!sO~OZbX[bXdbXdlXobXwjX}bX!lbX!qbX!tbX#ObX#PbX#pbX'gbX'qbX'rbX'xbX'ybX'zbX'{bX'|bX'}bX(ObX(PbX(QbX(RbX(TbX~OybXXbX!ebX!PbXvbX#RbX~P$|OZ'SX['SXd'SXd'XXo'SXw'kXy'SX}'SX!l'SX!q'SX!t'SX#O'SX#P'SX#p'SX'g'SX'q'SX'r'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SXv'SX~OX'SX!e'SX!P'SX#R'SX~P'ZOr!uO']!wO'_!uO~Od!xO~O^RO_RO`ROaRO'TQO~Od!}O~Od#PO[(SXo(SXy(SX}(SX!l(SX!q(SX!t(SX#O(SX#P(SX#p(SX'g(SX'q(SX'r(SX'x(SX'y(SX'z(SX'{(SX'|(SX'}(SX(O(SX(P(SX(Q(SX(R(SX(T(SXv(SX~OZ#OO~P*`OZ#RO[#QO~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'T#SO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!j#eO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xO[#}Oo#xO}#zO!l#yO!q#jO!t#yO#O#xO#P#uO#p$OO'g#gO'q#yO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~OPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXy#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sXX#sX!e#sX!P#sXv#sX#R#sX~P)xOX(SX!e(SX!P(SXw(SX#R(SX~P*`OPoOQ!QOSVOTVOX$ROZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!P$XO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOQ!QOSVOTVO[$gO^$pO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j$rOP(XP~P<cOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q$uO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw$vO~Oo'bX#O'bX#P'bX#p'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(R'bX(T'bX~OP%tXQ%tXS%tXT%tXZ%tX[%tX^%tX_%tX`%tXa%tXd%tXg%tXs%tXt%tXu%tXw%tXy%tX|%tX}%tX!Q%tX!U%tX!W%tX!X%tX!Z%tX!]%tX!l%tX!q%tX!t%tX#Y%tX#r%tX#{%tX$O%tX$b%tX$d%tX$f%tX$i%tX$m%tX$q%tX$s%tX%T%tX%V%tX%Z%tX%]%tX%^%tX%f%tX%j%tX%s%tX&z%tX'Q%tX'T%tX'Z%tX'^%tX'g%tX'q%tX(Q%tXv%tX~P@[Oy$xO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bXv'bX~P@[Ow$yO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Oy$zO~PEsO!Q$}O!U%UO!W!lO$m%OO$q%PO$s%QO%T%RO%V%SO%Z%TO%]!lO%^%VO%f%WO%j%XO%s%YO~O!Q!lO!U!lO!W!lO$q%[O%]!lO~O%^%VO~PGaOPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'TQO'ZkO'^UO'gcO'qiO(QdO~Ov%`O~P]OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~P'ZO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~O}%}O'T{XQ{XZ{X[{X^{X_{X`{Xa{Xd{Xg{X!q{X$f{X&W{X'Z{X(Q{X~PMuOg&PO%f%WO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Ow!PO~P! yOw!PO!X&RO~PEvOPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!]&UO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#qXy#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qXX#qX!e#qX!P#qXv#qX#R#qX~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zXy#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zXX#zX!e#zX!P#zXv#zX#R#zX~P)xO'ZkO[#}Xo#}Xy#}X}#}X!l#}X!q#}X!t#}X#O#}X#P#}X#p#}X'g#}X'q#}X'r#}X'x#}X'y#}X'z#}X'{#}X'|#}X'}#}X(O#}X(P#}X(Q#}X(R#}X(T#}XX#}X!e#}X!P#}Xv#}Xw#}X#R#}X~OPoO~OPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~O!S&_O~Ow!PO~O!j&bO~P<cO'T&cO~PEvOZ&eO~O'T&cO~O'^UOw(^Xy(^X!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Oa&hO~P!1iO'T&iO~O_&nO'T&cO~OQ&oOZ&pO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!j&uO~P<cO^&wO_&wO`&wOa&wOd'POw&|O'T&vO(Q&}O~O!i'UO!j'TO'T&cO~O&}!sO'O'VO'P'XO~Or!uO']'ZO'_!uO~OQ']O^'ia_'ia`'iaa'ia'T'ia~O['cOw'dO}'bO~OQ']O~OQ!QO^#TO_#TO`#TOa'kOd#ZO'T#SO~O['lO~OZbXdlXXbXobXPbX!SbX!ebX'rbX!PbX!ObXybX!ZbX#RbXvbX~O[bXwbX}bX~P!6mOZ'SXd'XXX'SX['SXo'SXw'SX}'SX#p'SXP'SX!S'SX!e'SX'r'SX!P'SX!O'SXy'SX!Z'SX#R'SXv'SX~O^#TO_#TO`#TOa'kO'T#SO~OZ'mO~Od'oO~OZ'SXd'XX~PMuOZ'pOX(SX!e(SX!P(SXw(SX#R(SX~P*`O[#}O}#zO(O#|O(R#fOo#_ay#_a!l#_a!q#_a!t#_a#O#_a#P#_a#p#_a'g#_a'q#_a'r#_a'x#_a'y#_a'z#_a'{#_a'|#_a'}#_a(P#_a(Q#_a(T#_aX#_a!e#_a!P#_av#_aw#_a#R#_a~Ow!PO!X&RO~Oy#caX#ca!e#ca!P#cav#ca#R#ca~P2gOPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#say#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#saX#sa!e#sa!P#sav#sa#R#sa~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P(UP~P)xOu(SO#w(TO'T(RO~O[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#sa!t#sa#p#sa'q#sa~Oo#xO#O#xO#P#uOy#saX#sa!e#sa!P#sav#sa#R#sa~P!B}Oy(YO!e(WOX(WX~P2gOX(ZO~OPoOQ!QOSVOTVOX(ZOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZ#RO~O!P(_O!e(WO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZbXdlXwjX}jX!tbX'qbX~OP!RX!S!RX!e!RX'p!RX'r!RX!O!RXo!RXy!RX!P!RXX!RX!Z!RX#R!RXv!RX~P!JUOZ'SXd'XXw'kX}'kX!t'SX'q'SX~OP!`X!S!`X!e!`X'r!`X!O!`Xo!`Xy!`X!P!`XX!`X!Z!`X#R!`Xv!`X~P!KgOT(aOu(aO~O!t(bO'q(bOP!^X!S!^X!e!^X'r!^X!O!^Xo!^Xy!^X!P!^XX!^X!Z!^X#R!^Xv!^X~O^9rO_9rO`9yOa9yO'T9pO~Od(eO~O'p(fOP'hX!S'hX!e'hX'r'hX!O'hXo'hXy'hX!P'hXX'hX!Z'hX#R'hXv'hX~O!j&bO!P'lP~P<cOw(kO}(jO~O!j&bOX'lP~P<cO!j(oO~P<cOZ'pO!t(bO'q(bO~O!S(qO'r(pOP$WX!e$WX~O!e(rOP(YX~OP(tO~OP!aX!S!aX!e!aX'r!aX!O!aXo!aXy!aX!P!aXX!aX!Z!aX#R!aXv!aX~P!KgOy$UaX$Ua!e$Ua!P$Uav$Ua#R$Ua~P2gO!l(|O'Q#VO'T(xOv(ZP~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'T#SO~Ov)TO~P#$iOy)VO~PEsO%^)WO~PGaOa)ZO~P!1iO%f)`O~PEvO_)aO'T&cO~O!i)fO!j)eO'T&cO~O'^UO!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Ov%uX~P2gOv)gO~PGyOv)gO~Ov)gO~P]OQiXQ'XXZiXd'XX}iX#piX(PiX~ORiXwiX$fiX$|iX[iXoiXyiX!liX!qiX!tiX#OiX#PiX'giX'qiX'riX'xiX'yiX'ziX'{iX'|iX'}iX(OiX(QiX(RiX(TiX!PiX!eiXXiXPiXviX!SiX#RiX~P#(kOQjXQlXRjXZjXdlX}jX#pjX(PjXwjX$fjX$|jX[jXojXyjX!ljX!qjX!tjX#OjX#PjX'gjX'qjX'rjX'xjX'yjX'zjX'{jX'|jX'}jX(OjX(QjX(RjX(TjX!PjX!ejXXjX!SjXPjXvjX#RjX~O%^)jO~PGaOQ']Od)kO~O^)mO_)mO`)mOa)mO'T%dO~Od)qO~OQ']OZ)uO})sOR'UX#p'UX(P'UXw'UX$f'UX$|'UX['UXo'UXy'UX!l'UX!q'UX!t'UX#O'UX#P'UX'g'UX'q'UX'r'UX'x'UX'y'UX'z'UX'{'UX'|'UX'}'UX(O'UX(Q'UX(R'UX(T'UX!P'UX!e'UXX'UXP'UXv'UX!S'UX#R'UX~OQ!QO^:bO_:^O`TOaTOd:aO%^)jO'T:_O~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!j)yO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!P)|O!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO(P*OO~OR*QO#p*RO(P*PO~OQhXQ'XXZhXd'XX}hX(PhX~ORhX#phXwhX$fhX$|hX[hXohXyhX!lhX!qhX!thX#OhX#PhX'ghX'qhX'rhX'xhX'yhX'zhX'{hX'|hX'}hX(OhX(QhX(RhX(ThX!PhX!ehXXhXPhXvhX!ShX#RhX~P#4kOQ*SO~O})sO~OQ!QO^%vO_%cO`TOaTOd%jO$f%wO%^%xO'T%dO~PGaO!Q*VO!j*VO~O^*YO`*YOa*YO!O*ZO~OQ&oOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO[#}Oo:YO}#zO!l:ZO!q#jO!t:ZO#O:YO#P:VO#p$OO'g#gO'q:ZO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~Ow'dX~P#9vOy#qaX#qa!e#qa!P#qav#qa#R#qa~P2gOy#zaX#za!e#za!P#zav#za#R#za~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!S&_O!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zay#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#zaX#za!e#za!P#zav#za#R#za~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q*eO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw*fO~P#9vO$b*iO$d*jO$f*kO~O!O*lO'r(pO~O!S*nO~O'T*oO~Ow$yOy*qO~O'T*rO~OQ*uOw*vOy*yO}*wO$|*xO~OQ*uOw*vO$|*xO~OQ*uOw+QO$|*xO~OQ*uOo+VOy+XO!S+UO~OQ*uO}+ZO~OQ!QOZ%rO[%qO^%vO`TOaTOd%jOg%yO}%pO!U!lO!W!lO!q%oO$f%wO$q%[O%]!lO%^%xO&W%{O'T%dO'Z%eO(Q%zO~OR+bO_+^O!Q+cO~P#DkO_%cO!Q!lOw&UX$|&UX(P&UX~P#DkOw$yO$f+hO$|*xO(P*PO~OQ!QOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ*uOw$yO!S+UO$|*xO~Oo+nOy+mO!S+oO'r(pO~OdlXy!RX#pbXv!RX!e!RX~Od'XXy(mX#p'SXv(mX!e(mX~Od+qO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q+vO~Ov(oP~P!3|O#p+{O~Oy+|O~O!S+}O~O&}!sO'O'VO'P,PO~Od,QO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UO~P#DkOS,^OT,^OZ,^O['cO_,YOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~O!P,dO~P#KkOX,gO~P#KkOv,iO~P#KkOo'tX#O'tX#P'tX#p'tX'r'tX'x'tX'y'tX'z'tX'{'tX'|'tX'}'tX(O'tX(P'tX(R'tX(T'tX~Oy,jO['tX}'tX!l'tX!q'tX!t'tX'g'tX'q'tX(Q'tXv'tX~P#NjOP$giQ$giS$giT$giZ$gi[$gi^$gi_$gi`$gia$gid$gig$gis$git$giu$giw$giy$gi|$gi}$gi!Q$gi!U$gi!W$gi!X$gi!Z$gi!]$gi!l$gi!q$gi!t$gi#Y$gi#r$gi#{$gi$O$gi$b$gi$d$gi$f$gi$i$gi$m$gi$q$gi$s$gi%T$gi%V$gi%Z$gi%]$gi%^$gi%f$gi%j$gi%s$gi&z$gi'Q$gi'T$gi'Z$gi'^$gi'g$gi'q$gi(Q$giv$gi~P#NjOX,kO~O['cOo,lOw'dO}'bOX]X~Oy#ciX#ci!e#ci!P#civ#ci#R#ci~P2gO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei(P#ei~P$'PO[#}O}#zO(O#|O(R#fOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei'x#ei(P#ei(Q#ei(T#eiw#ei~P$)QO'g#gO(P#gO~P$'PO[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O!q#ei~P$+`O!q#jO~P$+`O[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'r#ei~P$-hO'r#lO~P$-hO[#}O}#zO!q#jO#P#uO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#eiX#ei!e#ei!P#eiv#ei#R#ei~O'}#ei~P$/pO'}#mO~P$/pO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#ni!t#ni#p#ni'q#ni~Oo#xO#O#xO#P#uOy#niX#ni!e#ni!P#niv#ni#R#ni~P$1xO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#si!t#si#p#si'q#si~Oo#xO#O#xO#P#uOy#siX#si!e#si!P#siv#si#R#si~P$3yOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO~P)xO!e,sO!P(VX~P2gO!P,uO~OX,vO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOX&fX!e&fX!P&fX~P)xO!e(WOX(Wa~Oy,zO!e(WOX(WX~P2gOX,{O~O!P,|O!e(WO~O!P-OO!e(WO~P2gOSVOTVOsVOtVOuVO'^UO'g$[O~P!6POP!baZca!S!ba!e!ba!tca'qca'r!ba!O!bao!bay!ba!P!baX!ba!Z!ba#R!bav!ba~O!e-TO'r(pO!P'mXX'mX~O!P-VO~O!i-`O!j-_O!l-[O'T-XOv'nP~OX-aO~O_%cO!Q!lO~P#DkO!j-gOP&gX!e&gX~P<cO!e(rOP(Ya~O!S-iO'r(pOP$Wa!e$Wa~Ow!PO(P*PO~OvbX!S!kX!ebX~O'Q#VO'T(xO~O!S-mO~O!e-oOv([X~Ov-qO~Ov-sO~P,cOv-sO~P#$iO_-uO'T&cO~O!S-vO~Ow$yOy-wO~OQ*uOw*vOy-zO}*wO$|*xO~OQ*uOo.UO~Oy._O~O!S.`O~O!j.bO'T&cO~Ov.cO~Ov.cO~PGyOQ']O^'Wa_'Wa`'Waa'Wa'T'Wa~Od.gO~OQ'XXQ'kXR'kXZ'kXd'XX}'kX#p'kX(P'kXw'kX$f'kX$|'kX['kXo'kXy'kX!l'kX!q'kX!t'kX#O'kX#P'kX'g'kX'q'kX'r'kX'x'kX'y'kX'z'kX'{'kX'|'kX'}'kX(O'kX(Q'kX(R'kX(T'kX!P'kX!e'kXX'kXP'kXv'kX!S'kX#R'kX~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t.kO#V.mO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(sP~PGaO#Q.tOR%wa#p%wa(P%waw%wa$f%wa$|%wa[%wao%way%wa}%wa!l%wa!q%wa!t%wa#O%wa#P%wa'g%wa'q%wa'r%wa'x%wa'y%wa'z%wa'{%wa'|%wa'}%wa(O%wa(Q%wa(R%wa(T%wa!P%wa!e%waX%waP%wav%wa!S%wa#R%wa~O%^.vO~PGaO(P*POR&Oa#p&Oaw&Oa$f&Oa$|&Oa[&Oao&Oay&Oa}&Oa!l&Oa!q&Oa!t&Oa#O&Oa#P&Oa'g&Oa'q&Oa'r&Oa'x&Oa'y&Oa'z&Oa'{&Oa'|&Oa'}&Oa(O&Oa(Q&Oa(R&Oa(T&Oa!P&Oa!e&OaX&OaP&Oav&Oa!S&Oa#R&Oa~O_%cO!Q!lO!j.xO(P*OO~P#DkO!e.yO(P*PO!P(uX~O!P.{O~OX.|Oy.}O(P*PO~O'Z%eOR(qP~OQ']O})sORfa#pfa(Pfawfa$ffa$|fa[faofayfa!lfa!qfa!tfa#Ofa#Pfa'gfa'qfa'rfa'xfa'yfa'zfa'{fa'|fa'}fa(Ofa(Qfa(Rfa(Tfa!Pfa!efaXfaPfavfa!Sfa#Rfa~OQ']O})sOR&Va#p&Va(P&Vaw&Va$f&Va$|&Va[&Vao&Vay&Va!l&Va!q&Va!t&Va#O&Va#P&Va'g&Va'q&Va'r&Va'x&Va'y&Va'z&Va'{&Va'|&Va'}&Va(O&Va(Q&Va(R&Va(T&Va!P&Va!e&VaX&VaP&Vav&Va!S&Va#R&Va~O!P/UO~Ow$yO$f/ZO$|*xO(P*PO~OQ!QOZ/[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOo/^O'r(pO~O#W/_OP!YiQ!YiS!YiT!YiZ!Yi[!Yi^!Yi_!Yi`!Yia!Yid!Yig!Yio!Yis!Yit!Yiu!Yiw!Yiy!Yi|!Yi}!Yi!Q!Yi!U!Yi!W!Yi!X!Yi!Z!Yi!]!Yi!l!Yi!q!Yi!t!Yi#O!Yi#P!Yi#Y!Yi#p!Yi#r!Yi#{!Yi$O!Yi$b!Yi$d!Yi$f!Yi$i!Yi$m!Yi$q!Yi$s!Yi%T!Yi%V!Yi%Z!Yi%]!Yi%^!Yi%f!Yi%j!Yi%s!Yi&z!Yi'Q!Yi'T!Yi'Z!Yi'^!Yi'g!Yi'q!Yi'r!Yi'x!Yi'y!Yi'z!Yi'{!Yi'|!Yi'}!Yi(O!Yi(P!Yi(Q!Yi(R!Yi(T!YiX!Yi!e!Yi!P!Yiv!Yi!i!Yi!j!Yi#V!Yi#R!Yi~Oy#ziX#zi!e#zi!P#ziv#zi#R#zi~P2gOy$UiX$Ui!e$Ui!P$Uiv$Ui#R$Ui~P2gOv/eO!j&bO'Q`O~P<cOw/nO}/mO~Oy!RX#pbX~Oy/oO~O#p/pO~OR+bO_+dO!Q/sO'T&iO'Z%eO~Oa/zO|!VO'Q#VO'T(ROv(cP~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(eP~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw(`Py(`P~PGaOw*vO~Oy-zO$|*xO~Oa/zO|!VO'Q#VO'T*oOv(gP~Ow+QO~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zO(R0`O~PGaOy0dO~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t0hO'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V0nO!P(jP~P%1}Ow!POy0pO#Q0rO$|*xO~OR0uO!e0sO~P#(kOR0uO!S+UO!e0sO(P*OO~OR0uOo0wO!S+UO!e0sOQ'VXZ'VX}'VX#p'VX(P'VX~OR0uOo0wO!e0sO~OR0uO!e0sO~O$f/ZO(P*PO~Ow$yO~Ow$yO$|*xO~Oo0}Oy0|O!S1OO'r(pO~O!e1POv(pX~Ov1RO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q1VO~Oo1YOQ'VXR'VXZ'VX}'VX!e'VX(P'VX~O!e1ZO(P*POR'YX~O!e1ZOR'YX~O!e1ZO(P*OOR'YX~OR1]O~O!S1^OS'wXT'wXZ'wX['wX_'wXd'wXo'wXs'wXu'wXw'wXy'wX}'wX!P'wX!e'wX!l'wX!q'wX!t'wX!y'wX#O'wX#P'wX#Q'wX#R'wX'Q'wX'Z'wX'^'wX'g'wX'r'wX'v'wX'x'wX'y'wX'z'wX'{'wX'|'wX'}'wX(O'wX(P'wX(Q'wX(R'wXX'wXv'wX~O}1_O~O!P1aO~P#KkOX1bO~P#KkOv1cO~P#KkOS,^OT,^OZ,^O['cO_1dOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~OX1fO~Oy,jO~O!e,sO!P(Va~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P&eX!e&eX~P)xO!e,sO!P(Va~OX&fa!e&fa!P&fa~P2gOX1kO~P2gO!P1mO!e(WO~OP!biZci!S!bi!e!bi!tci'qci'r!bi!O!bio!biy!bi!P!biX!bi!Z!bi#R!biv!bi~O'r(pOP!oi!S!oi!e!oi!O!oio!oiy!oi!P!oiX!oi!Z!oi#R!oiv!oi~O!j&bO!P&`X!e&`XX&`X~P<cO!e-TO!P'maX'ma~O!P1qO~Ov!RX!S!kX!e!RX~O!S1rO~O!e1sOv'oX~Ov1uO~O'T-XO~O!j1xO'T-XO~O(P*POP$Wi!e$Wi~O!S1yO'r(pOP$XX!e$XX~O!S1|O~Ov$_a!e$_a~P2gO!l(|O'Q#VO'T(xOv&hX!e&hX~O!e-oOv([a~Ov2QO~P,cOy2UO~O#p2VO~Oy2WO$|*xO~Ow*vOy2WO}*wO$|*xO~Oo2aO~Ow!POy2fO#Q2hO$|*xO~O!S2jO~Ov2lO~O#Q2mOR%wi#p%wi(P%wiw%wi$f%wi$|%wi[%wio%wiy%wi}%wi!l%wi!q%wi!t%wi#O%wi#P%wi'g%wi'q%wi'r%wi'x%wi'y%wi'z%wi'{%wi'|%wi'}%wi(O%wi(Q%wi(R%wi(T%wi!P%wi!e%wiX%wiP%wiv%wi!S%wi#R%wi~Od2nO~O^2qO!j.sO!q2rO'Q#VO'Z%eO~O(P*PO!P%{X!e%{X~O!e2sO!P(tX~O!P2uO~OQ!QOZ%rO[%qO^2wO_%cO`TOaTOd%jOg%yO}%pO!j2xO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO^2yO!j2xO(P*OO~O!P%aX!e%aX~P#4kO^2yO~O(P*POR&Oi#p&Oiw&Oi$f&Oi$|&Oi[&Oio&Oiy&Oi}&Oi!l&Oi!q&Oi!t&Oi#O&Oi#P&Oi'g&Oi'q&Oi'r&Oi'x&Oi'y&Oi'z&Oi'{&Oi'|&Oi'}&Oi(O&Oi(Q&Oi(R&Oi(T&Oi!P&Oi!e&OiX&OiP&Oiv&Oi!S&Oi#R&Oi~O_%cO!Q!lO!P&yX!e&yX~P#DkO!e.yO!P(ua~OR3QO(P*PO~O!e3ROR(rX~OR3TO~O(P*POR&Pi#p&Piw&Pi$f&Pi$|&Pi[&Pio&Piy&Pi}&Pi!l&Pi!q&Pi!t&Pi#O&Pi#P&Pi'g&Pi'q&Pi'r&Pi'x&Pi'y&Pi'z&Pi'{&Pi'|&Pi'}&Pi(O&Pi(Q&Pi(R&Pi(T&Pi!P&Pi!e&PiX&PiP&Piv&Pi!S&Pi#R&Pi~O!P3UO~O$f3VO(P*PO~Ow$yO$f3VO$|*xO(P*PO~Ow!PO!Z!YO~O!Z3aO#R3_O'r(pO~O!j&bO'Q#VO~P<cOv3eO~Ov3eO!j&bO'Q`O~P<cO!O3hO'r(pO~Ow!PO~P#9vOo3kOy3jO(P*PO~O!P3oO~P%;pOv3rO~P%;pOR0uO!S+UO!e0sO~OR0uOo0wO!S+UO!e0sO~Oa/zO|!VO'Q#VO'T(RO~O!S3uO~O!e3wOv(dX~Ov3yO~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO~PGaO!e3|O(P*PO!P(fX~O!P4OO~O!S4PO(P*OO~O!S+UO(P*PO~O!e4ROw(aXy(aX~OQ4TO~Oy2WO~Oa/zO|!VO'Q#VO'T*oO~Oo4WOw*vO}*wOv%XX!e%XX~O!e4ZOv(hX~Ov4]O~O(P4_Oy(_Xw(_X$|(_XR(_Xo(_X!e(_X~Oy4aO(P*PO~OQ!QOSVOTVO[$gO^4bO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j4cO'Z%eO~P&,sO!S4eO'r(pO~O#V4gO~P%1}O!e4hO!P(kX~O!P4jO~O!P%aX!S!aX!e%aX'r!aX~P!KgO!j&bO~P&,sO!e4hO!P(kX!S'eX'r'eX~O^2yO!j2xO~Ow!POy2fO~O_4pO!Q/sO'T&iO'Z%eOR&lX!e&lX~OR4rO!e0sO~O!S4tO~Ow$yO$|*xO(P*PO~Oy4uO~P2gOo4vOy4uO(P*PO~Ov&uX!e&uX~P!3|O!e1POv(pa~Oo4|Oy4{O(P*PO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UOR&vX!e&vX~P#DkO!e1ZOR'Ya~O!y5SO~O!P5TO~P#KkO!S1^OX'wX#R'wX~O!e,sO!P(Vi~O!P&ea!e&ea~P2gOX5WO~P2gOP!bqZcq!S!bq!e!bq!tcq'qcq'r!bq!O!bqo!bqy!bq!P!bqX!bq!Z!bq#R!bqv!bq~O'r(pO!P&`a!e&`aX&`a~O!i-`O!j-_O!l5YO'T-XOv&aX!e&aX~O!e1sOv'oa~O!S5[O~O!S5`O'r(pOP$Xa!e$Xa~O(P*POP$Wq!e$Wq~Ov$^i!e$^i~P2gOw!POy5bO#Q5dO$|*xO~Oo5gOy5fO(P*PO~Oy5iO~Oy5iO$|*xO~Oy5mO(P*PO~Ow!POy5bO~Oo5tOy5sO(P*PO~O!S5vO~O!e2sO!P(ta~O^2yO!j2xO'Z%eO~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t5zO#V5|O$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&xX!e&xX~PGaOQ!QOZ%rO[%qO^6OO_%cO`TOaTOd%jOg%yO}%pO!j6PO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(P*OO(Q%zO~PGaO!P%aa!e%aa~P#4kO^6QO~O#Q6ROR%wq#p%wq(P%wqw%wq$f%wq$|%wq[%wqo%wqy%wq}%wq!l%wq!q%wq!t%wq#O%wq#P%wq'g%wq'q%wq'r%wq'x%wq'y%wq'z%wq'{%wq'|%wq'}%wq(O%wq(Q%wq(R%wq(T%wq!P%wq!e%wqX%wqP%wqv%wq!S%wq#R%wq~O(P*POR&Oq#p&Oqw&Oq$f&Oq$|&Oq[&Oqo&Oqy&Oq}&Oq!l&Oq!q&Oq!t&Oq#O&Oq#P&Oq'g&Oq'q&Oq'r&Oq'x&Oq'y&Oq'z&Oq'{&Oq'|&Oq'}&Oq(O&Oq(Q&Oq(R&Oq(T&Oq!P&Oq!e&OqX&OqP&Oqv&Oq!S&Oq#R&Oq~O(P*PO!P&ya!e&ya~OX6SO~P2gO'Z%eOR&wX!e&wX~O!e3ROR(ra~O$f6YO(P*PO~Ow![q~P#9vO#R6]O~O!Z3aO#R6]O'r(pO~Ov6bO~O#R6fO~Oy6gO!P6hO~O!P6hO~P%;pOy6kO~Ov6kOy6gO~Ov6kO~P%;pOy6mO~O!e3wOv(da~O!S6pO~Oa/zO|!VO'Q#VO'T(ROv&oX!e&oX~O!e3|O(P*PO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&pX!e&pX~PGaO!e3|O!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw&nX!e&nXy&nX~PGaO!e4ROw(aay(aa~O!e4ZOv(ha~Oo7SOv%Xa!e%Xa~Oo7SOw*vO}*wOv%Xa!e%Xa~Oa/zO|!VO'Q#VO'T*oOv&qX!e&qX~O(P*POy$xaw$xa$|$xaR$xao$xa!e$xa~O(P4_Oy(_aw(_a$|(_aR(_ao(_a!e(_a~O!P%aa!S!aX!e%aa'r!aX~P!KgOQ!QOSVOTVO[$gO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O^7ZO~P&JUO^6QO!j6PO~O!e4hO!P(ka~O!e4hO!P(ka!S'eX'r'eX~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t7_O'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V7aO!P&sX!e&sX~P&L]O!S7cO'r(pO~Ow!POy5bO$|*xO(P*PO~O!S+UOR&la!e&la~Oo0wO!S+UOR&la!e&la~Oo0wOR&la!e&la~O(P*POR$yi!e$yi~Oy7fO~P2gOo7gOy7fO(P*PO~O(P*PORni!eni~O(P*POR&va!e&va~O(P*OOR&va!e&va~OS,^OT,^OZ,^O_,^Od,^Oo,^Os,^Ou,^Oy,^O!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O~O(P7iO(Q7iO(R7iO~P'!qO!P7kO~P#KkO!P&ei!e&ei~P2gO'r(pOv!hi!e!hi~O!S7mO~O(P*POP$Xi!e$Xi~Ov$^q!e$^q~P2gOw!POy7oO~Ow!POy7oO#Q7rO$|*xO~Oy7tO~Oy7uO~Oy7vO(P*PO~Ow!POy7oO$|*xO(P*PO~Oo7{Oy7zO(P*PO~O!e2sO!P(ti~O(P*PO!P%}X!e%}X~O!P%ai!e%ai~P#4kO^8OO~O!e8TO['bXv$`i}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[iv$`i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R#^a~P2gO#R8WO~O!Z3aO#R8XO'r(pO~Ov8[O~Oy8^O~P2gOy8`O~Oy6gO!P8aO~Ov8`Oy6gO~O!e3wOv(di~O(P*POv%Qi!e%Qi~O!e3|O!P(fi~O!e3|O(P*PO!P(fi~O(P*PO!P&pa!e&pa~O(P8hOw(bX!e(bXy(bX~O(P*PO!S$wiy$wiw$wi$|$wiR$wio$wi!e$wi~O!e4ZOv(hi~Ov%Xi!e%Xi~P2gOo8kOv%Xi!e%Xi~O!P%ai!S!aX!e%ai'r!aX~P!KgO(P*PO!P%`i!e%`i~O!e4hO!P(ki~O#V8nO~P&L]O!P&sa!S'eX!e&sa'r'eX~O(P*POR$zq!e$zq~Oy8pO~P2gOy7zO~P2gO(P8rO(Q8rO(R8rO~O(P8rO(Q8rO(R8rO~P'!qO'r(pOv!hq!e!hq~O(P*POP$Xq!e$Xq~Ow!POy8uO$|*xO(P*PO~Ow!POy8uO~Oy8xO~P2gOy8zO~P2gOo8|Oy8zO(P*PO~OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[qv$`q}#[q!i#[q!j#[q!l#[q!q#[q#V#[q'Q#[q'T#[q'^#[q'g#[q~O!e9PO['bXv$`q}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'2fO#R9UO~O!Z3aO#R9UO'r(pO~Oy9WO~O(P*POv%Qq!e%Qq~O!e3|O!P(fq~O(P*PO!P&pi!e&pi~O(P8hOw(ba!e(bay(ba~Ov%Xq!e%Xq~P2gO!P&si!S'eX!e&si'r'eX~O(P*PO!P%`q!e%`q~Oy9]O~P2gO(P9^O(Q9^O(R9^O~O'r(pOv!hy!e!hy~Ow!POy9_O~Ow!POy9_O$|*xO(P*PO~Oy9aO~P2gOQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[yv$`y}#[y!i#[y!j#[y!l#[y!q#[y#V#[y'Q#[y'T#[y'^#[y'g#[y~O!e9dO['bXv$`y}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'9eO!e9eO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R9hO~O(P*PO!P&pq!e&pq~Ov%Xy!e%Xy~P2gOw!POy9iO~Oy9jO~P2gOQ#[!RS#[!RT#[!R[#[!R^#[!R_#[!R`#[!Ra#[!Rd#[!Rs#[!Rt#[!Ru#[!Rv$`!R}#[!R!i#[!R!j#[!R!l#[!R!q#[!R#V#[!R'Q#[!R'T#[!R'^#[!R'g#[!R~O!e9kO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[q}#[q!i#[q!j#[q!l#[q!q#[q!t'bX#V#[q'Q#[q'T#[q'^#[q'g#[q'q'bX(Q'bX~P@[O!e9nO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[y}#[y!i#[y!j#[y!l#[y!q#[y!t'bX#V#[y'Q#[y'T#[y'^#[y'g#[y'q'bX(Q'bX~P@[OwbX~P$|OwjX}jX!tbX'qbX~P!6mOZ'SXd'XXo'SXw'kX!t'SX'q'SX'r'SX~O['SXd'SXw'SX}'SX!l'SX!q'SX#O'SX#P'SX#p'SX'g'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SX~P'GTOP'SX}'kX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTO^9qO_9qO`9qOa9qO'T9oO~O!j:OO~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXw#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sX~P'IxO#Q$uO~P!.cO}'kXP'SX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTOo#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qX~P!.cOo#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zX~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#saw#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#sa~P'IxOo:YO#O:YO#P:VOw#sa~P!B}Ow$Ua~P#9vOQ'XXd'XX}iX~OQlXdlX}jX~O^:sO_:sO`:sOa:sO'T:_O~OQ'XXd'XX}hX~Ow#qa~P#9vOw#za~P#9vO!S&_Oo#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#za~P!.cO#Q*eO~P!.cOw#ci~P#9vO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#ei~O'g#ei(P#ei~P((}O'g#gO(P#gO~P((}O[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#ei~O!q#ei~P(*yO!q#jO~P(*yO[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#ei~O'r#ei~P(,rO'r#lO~P(,rO[#}O}#zO!q#jO#P:VO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#ei~O'}#ei~P(.kO'}#mO~P(.kOo:YO#O:YO#P:VOw#ni~P$1xOo:YO#O:YO#P:VOw#si~P$3yOQ'XXd'XX}'kX~Ow#zi~P#9vOw$Ui~P#9vOd9}O~Ow#ca~P#9vOd:uO~OU'x_'v'P'O'^s!y'^'T'Z~",
        goto: "$Ku(vPPPPPPP(wPP)OPP)^PPPP)d-hP0f5aP7R7R8v7R>wD_DpPDvHQPPPPPPK`P! P! _PPPPP!!VP!$oP!$oPP!&oP!(rP!(w!)n!*f!*f!*f!(w!+]P!(w!.Q!.TPP!.ZP!(w!(w!(w!(wP!(w!(wP!(w!(w!.y!/dP!/dJ}J}J}PPPP!/d!.y!/sPP!$oP!0^!0a!0g!1h!1t!3t!3t!5r!7t!1t!1t!9p!;_!=O!>k!@U!Am!CS!De!1t!1tP!1tP!1t!1t!Et!1tP!Ge!1t!1tP!Ie!1tP!1t!7t!7t!1t!7t!1t!Kl!Mt!Mw!7t!1t!Mz!M}!M}!M}!NR!$oP!$oP!$oP! P! PP!N]! P! PP!Ni# }! PP! PP#!^##c##k#$Z#$_#$e#$e#$mP#&s#&s#&y#'o#'{! PP! PP#(]#(l! PP! PPP#(x#)W#)d#)|#)^! P! PP! P! P! PP#*S#*S#*Y#*`#*S#*S! P! PP#*m#*v#+Q#+Q#,x#.l#.x#.x#.{#.{5a5a5a5a5a5a5a5aP5a#/O#/U#/p#1{#2R#2b#6^#6d#6j#6|#7W#8w#9R#9b#9h#9n#9x#:S#:Y#:g#:m#:s#:}#;]#;g#=u#>R#>`#>f#>n#>u#?PPPPPPPP#?V#BaP#F^#Jx#Ls#Nr$&^P$&aPPP$)_$)h$)z$/U$1d$1m$3fP!(w$4`$7r$:i$>T$>^$>c$>fPPP$>i$A`$A|P$BaPPPPPPPPPP$BvP$EU$EX$E[$Eb$Ee$Eh$Ek$En$Et$HO$HR$HU$HX$H[$H_$Hb$He$Hh$Hk$Hn$Jt$Jw$Jz#*S$KW$K^$Ka$Kd$Kh$Kl$Ko$KrQ!tPT'V!s'Wi!SOlm!P!T$T$W$y%b)U*f/gQ'i#QR,n'l(OSOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%X%_%b&U&Y&[&b&u&z&|'P'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n+z,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1P1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:gS(z$v-oQ*p&eQ*t&hQ-k(yQ-y)ZW0Z+Q0Y4Z7UR4Y0[&w!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#r]Ofgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hb#[b#Q$y'l(b)S)U*Z-t!h$bo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m$b%k!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g!W:y!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:|%n$_%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g$e%l!Q!n$O$u%n%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g'hZOY[fgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r%_%b%i%j&U&Y&[&b&u'a'}(W(Y(d(e(f(j(o(p(r(|)i)p)q*f*i*k*l+Z+n,s,z-R-T-g-m.i.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:x$^%l!Q!n$O$u%n%o%p%q%y%{&P&p&r(q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ&j!hQ&k!iQ&l!jQ&m!kQ&s!oQ)[%QQ)]%RQ)^%SQ)_%TQ)b%WQ+`&oS,R']1ZQ.W)`S/r*u4TR4n0s+yTOY[bfgilmop!O!P!Q!T!Y!Z![!_!`!c!n!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$O$T$W$`$a$e$g$h$q$r$u$y%X%_%b%i%j%n%o%p%q%y%{&P&U&Y&[&b&o&p&r&u&z&|'P']'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(q(r(|)S)U)i)p)q)s)x)y*O*P*R*V*Z*[*^*e*f*i*k*l*n*w*x+U+V+Z+h+n+o+z+},q,s,z-R-T-g-i-m-t-v.U.`.i.p.t.x.y.}/Z/[/^/b/d/g/{/}0`0e0g0m0r0w0}1O1P1Y1Z1h1r1y1|2a2h2j2m2s2v3V3_3a3f3h3k3u3{3|4R4U4W4_4c4e4h4t4v4|5[5`5d5g5t5v6R6Y6]6a6p6v6x7S7^7c7g7m7r7{8W8X8g8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:xQ'[!xQ'h#PQ)l%gU)r%m*T*WR.f)kQ,T']R5P1Z#t%s!Q!n$O$u%p%q&P&p&r(q)x)y*O*R*V*[*^*e*n*w+V+h+o+}-i-v.U.`.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2v3V3u3{3|4U4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)x%oQ+_&oQ,U']n,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7kS.q)s2sQ/O*PQ/Q*SQ/q*uS0Q*x4RQ0a+U[0o+Z.j0g4h5y7^Q2v.pS4d0e2rQ4m0sQ5Q1ZQ6T3RQ6z4PQ7O4TQ7X4_R9Y8h&jVOfgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u']'}(W(Y(b(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1Z1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fU&g!g%P%[o,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7k$nsOfgilm!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y'}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9z9{:O:P:Q:R:S:T:U:V:W:X:Y:eS$tp9xS&O!W#bS&Q!X#cQ&`!bQ*_&RQ*a&VS*d&[:fQ*h&^Q,T']Q-j(wQ/i*jQ0p+[S2f.X0qQ3]/_Q3^/`Q3g/hQ3i/kQ5P1ZU5b2R2g4lU7o5c5e5rQ8]6dS8u7p7qS9_8v8wR9i9`i{Ob!O!P!T$y%_%b)S)U)i-thxOb!O!P!T$y%_%b)S)U)i-tW/v*v/t3w6qQ/}*wW0[+Q0Y4Z7UQ3{/{Q6x3|R8g6v!h$do!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ&d!dQ&f!fQ&n!mW&x!q%X&|1PQ'S!rQ)X$}Q)Y%OQ)a%VU)d%Y'T'UQ*s&hS+s&z'PS-Y(k1sQ-u)WQ-x)ZS.a)e)fS0x+c/sQ1S+zQ1W+{S1v-_-`Q2k.bQ3s/pQ5]1xR5h2V${sOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$zsOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR3]/_V&T!Y!`*i!i$lo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!k$^o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!i$co!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&e^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR(l$fQ-[(kR5Y1sQ(S#|S({$v-oS-Z(k1sQ-l(yW/u*v/t3w6qS1w-_-`Q3v/vR5^1xQ'e#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,o'mk,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ'f#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,p'mR*g&]X/c*f/d/g3f!}aOb!O!P!T#z$v$y%_%b'}(y)S)U)i)s*f*v*w+Q+Z,s-o-t.j/b/d/g/t/{0Y0g1h2s3f3w3|4Z4h5y6a6q6v7U7^Q3`/aQ6_3bQ8Y6`R9V8Z${rOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#nfOfglmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!T9u!Y!_!`*i*l/^3h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#rfOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!X9u!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$srOfglmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#U#oh#d$P$Q$V$s%^&W&X'q't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b}:P&S&]/k3[6d:[:]:c:d:h:j:k:l:m:n:o:p:q:r:v:w:{#W#ph#d$P$Q$V$s%^&W&X'q'r't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b!P:Q&S&]/k3[6d:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{#S#qh#d$P$Q$V$s%^&W&X'q'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b{:R&S&]/k3[6d:[:]:c:d:h:k:l:m:n:o:p:q:r:v:w:{#Q#rh#d$P$Q$V$s%^&W&X'q'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9by:S&S&]/k3[6d:[:]:c:d:h:l:m:n:o:p:q:r:v:w:{#O#sh#d$P$Q$V$s%^&W&X'q'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bw:T&S&]/k3[6d:[:]:c:d:h:m:n:o:p:q:r:v:w:{!|#th#d$P$Q$V$s%^&W&X'q'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bu:U&S&]/k3[6d:[:]:c:d:h:n:o:p:q:r:v:w:{!x#vh#d$P$Q$V$s%^&W&X'q'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bq:W&S&]/k3[6d:[:]:c:d:h:p:q:r:v:w:{!v#wh#d$P$Q$V$s%^&W&X'q'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bo:X&S&]/k3[6d:[:]:c:d:h:q:r:v:w:{$]#{h#`#d$P$Q$V$s%^&S&W&X&]'q'r's't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n/k0z1i1l1}3P3[4w5V5a6^6d6e7R7e7h7s7y8j8q8{9[9b:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{${jOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$v!aOfgilmp!O!P!T!Y!Z!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ&Y![Q&Z!]R:e9{#rpOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hQ&[!^!W9x!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:f:zR$moR-f(rR$wqT(}$v-oQ/f*fS3d/d/gR6c3fQ3m/mQ3p/nQ6i3nR6l3qQ$zwQ)V${Q*q&fQ+f&qQ+i&sQ-w)YW.Z)b+j+k+lS/X*]+gW2b.W.[.].^U3W/Y/]0yU5o2c2d2eS6W3X3ZS7w5p5qS8Q6V6XQ8y7xS8}8R8SR9c9O^|O!O!P!T%_%b)iX)R$y)S)U-tQ&r!nQ*^&PQ*|&jQ+P&kQ+T&lQ+W&mQ+]&nQ+l&sQ-})[Q.Q)]Q.T)^Q.V)_Q.Y)aQ.^)bQ2S-uQ2e.WR4U0VU+a&o*u4TR4o0sQ+Y&mQ+k&sS.])b+l^0v+_+`/q/r4m4n7OS2d.W.^S4Q0R0SR5q2eS0R*x4RQ0a+UR7X4_U+d&o*u4TR4p0sQ*z&jQ+O&kQ+S&lQ+g&qQ+j&sS-{)[*|S.P)]+PS.S)^+TU.[)b+k+lQ/Y*]Q0X*{Q0q+[Q2X-|Q2Y-}Q2].QQ2_.TU2c.W.].^Q2g.XS3Z/]0yS5c2R4lQ5j2ZS5p2d2eQ6X3XS7q5e5rQ7x5qQ8R6VQ8v7pQ9O8SR9`8wQ0T*xR6|4RQ*y&jQ*}&kU-z)[*z*|U.O)]+O+PS2W-{-}S2[.P.QQ4X0ZQ5i2YQ5k2]R7T4YQ/w*vQ3t/tQ6r3wR8d6qQ*{&jS-|)[*|Q2Z-}Q4X0ZR7T4YQ+R&lU.R)^+S+TS2^.S.TR5l2_Q0]+QQ4V0YQ7V4ZR8l7UQ+[&nS.X)a+]S2R-u.YR5e2SQ0i+ZQ4f0gQ7`4hR8m7^Q.m)sQ0i+ZQ2p.jQ4f0gQ5|2sQ7`4hQ7}5yR8m7^Q0i+ZR4f0gX'O!q%X&|1PX&{!q%X&|1PW'O!q%X&|1PS+u&z'PR1U+z_|O!O!P!T%_%b)iQ%a!PS)h%_%bR.d)i$^%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ*U%yR*X%{$c%n!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gW)t%m%x*T*WQ.e)jR2{.vR.m)sR5|2sQ'W!sR,O'WQ!TOQ$TlQ$WmQ%b!P[%|!T$T$W%b)U/gQ)U$yR/g*f$b%i!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g[)n%i)p.i:`:t:xQ)p%jQ.i)qQ:`%nQ:t:aR:x:uQ!vUR'Y!vS!OO!TU%]!O%_)iQ%_!PR)i%b#rYOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hh!yY!|#U$`'a'n(d,q-R9s9|:gQ!|[b#Ub#Q$y'l(b)S)U*Z-t!h$`o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ'a!}Q'n#ZQ(d$aQ,q'oQ-R(e!W9s!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ9|9tR:g9}Q-U(gR1p-UQ1t-[R5Z1tQ,c'bQ,f'cQ,h'dW1`,c,f,h5UR5U1_Q/d*fS3c/d3fR3f/gfbO!O!P!T$y%_%b)S)U)i-tp#Wb'}(y.j/b/t/{0Y0g1h5y6a6q6v7U7^Q'}#zS(y$v-oQ.j)sW/b*f/d/g3fQ/t*vQ/{*wQ0Y+QQ0g+ZQ1h,sQ5y2sQ6q3wQ6v3|Q7U4ZR7^4hQ,t(OQ1g,rT1j,t1gS(X$Q([Q(^$VU,x(X(^,}R,}(`Q(s$mR-h(sQ-p)OR2P-pQ3n/mQ3q/nT6j3n3qQ)S$yS-r)S-tR-t)UQ4`0aR7Y4``0t+^+_+`+a+d/q/r7OR4q0tQ8i6zR9Z8iQ4S0TR6}4SQ3x/wQ6n3tT6s3x6nQ3}/|Q6t3zU6y3}6t8eR8e6uQ4[0]Q7Q4VT7W4[7QhzOb!O!P!T$y%_%b)S)U)i-tQ$|xW%Zz$|%f)v$b%f!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR)v%nS4i0i0nS7]4f4gT7b4i7]W&z!q%X&|1PS+r&z+zR+z'PQ1Q+wR4z1QU1[,S,T,UR5R1[S3S/Q7OR6U3SQ2t.mQ5x2pT5}2t5xQ.z)zR3O.z^_O!O!P!T%_%b)iY#Xb$y)S)U-t$l#_fgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!h$io!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'j#Q'lQ-P(bR/V*Z&v!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!{Y[#U#Z9s9tW&{!q%X&|1P['`!|!}'n'o9|9}S(c$`$aS+t&z'PU,X'a,q:gS-Q(d(eQ1T+zR1n-RS%t!Q&oQ&q!nQ(V$OQ(w$uS)w%o.pQ)z%pQ)}%qS*]&P&rQ+e&pQ,S']Q-d(qQ.l)sU.w)x)y2vS/O*O*PQ/P*RQ/T*VQ/W*[Q/]*^Q/`*eQ/l*nQ/|*wS0S*x4RQ0a+UQ0c+VQ0y+hQ0{+oQ1X+}Q1{-iQ2T-vQ2`.UQ2i.`Q2z.tQ2|.xQ2}.yQ3X/ZQ3Y/[S3z/{/}Q4^0`Q4l0rQ4s0wQ4x1OQ4}1YQ5O1ZQ5_1yQ5n2aQ5r2hQ5u2jQ5w2mQ5{2sQ6V3VQ6o3uQ6u3{Q6w3|Q7P4UQ7X4_Q7[4eQ7d4tQ7n5`Q7p5dQ7|5vQ8P6RQ8S6YQ8c6pS8f6v6xQ8o7cQ8w7rR9X8g$^%m!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)j%nQ*T%yR*W%{$y%h!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x'pWOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$x%g!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x_&y!q%X&z&|'P+z1PR,V']$zrOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!j$]o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ,T']R5P1Z_}O!O!P!T%_%b)i^|O!O!P!T%_%b)iQ#YbX)R$y)S)U-tbhO!O!T3_6]8W8X9U9hS#`f9uQ#dgQ$PiQ$QlQ$VmQ$spW%^!P%_%b)iU&S!Y!`*iQ&W!ZQ&X![Q&]!_Q'q#eQ'r#oS's#p:QQ't#qQ'u#rQ'v#sQ'w#tQ'x#uQ'y#vQ'z#wQ'{#xQ'|#yQ(O#zQ(U#}Q([$TQ(`$WQ*b&YQ*c&[Q,r'}Q,w(WQ,y(YQ-n(|Q/k*lQ0z+nQ1i,sQ1l,zQ1}-mQ3P.}Q3[/^Q4w0}Q5V1hQ5a1|Q6^3aQ6d3hQ6e3kQ7R4WQ7e4vQ7h4|Q7s5gQ7y5tQ8j7SQ8q7gQ8{7{Q9[8kQ9b8|Q:[9wQ:]9xQ:c9zQ:d9{Q:h:OQ:i:PQ:j:RQ:k:SQ:l:TQ:m:UQ:n:VQ:o:WQ:p:XQ:q:YQ:r:ZQ:v:eQ:w:fR:{9v^tO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6[3_Q8V6]Q9R8WQ9T8XQ9g9UR9m9hQ&V!YQ&^!`R/h*iQ$joQ&a!cQ&t!pU(g$e$g(jS(n$h0eQ(u$qQ(v$rQ*`&UQ*m&bQ+p&uQ-S(fS-b(o4cQ-c(pQ-e(rW/a*f/d/g3fQ/j*kW0f+Z0g4h7^Q1o-TQ1z-gQ3b/bQ4k0mQ5X1rQ7l5[Q8Z6aR8t7m!h$_o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mR-P(b'qXOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$zqOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$fo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&d^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!zY[$`$a9s9t['_!|!}(d(e9|9}W)o%i%j:`:aU,W'a-R:gW.h)p)q:t:uT2o.i:xQ(i$eQ(m$gR-W(jV(h$e$g(jR-^(kR-](k$znOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$ko!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'g#O'pj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ,m'jQ.u)uR8_6f`,b'b'c'd,c,f,h1_5UQ1e,lX3l/m/n3n3qj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ7j5TR8s7k^uO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6Z3_Q8U6]Q9Q8WQ9S8XQ9f9UR9l9hR(Q#zR(P#zQ$SlR(]$TR$ooR$noR)Q$vR)P$vQ)O$vR2O-ohwOb!O!P!T$y%_%b)S)U)i-t$l!lz!Q!n$O$u$|%f%n%o%p%q%y%{&P&o&p&r'](q)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR${xR0b+UR0W*xR0U*xR6{4PR/y*vR/x*vR0P*wR0O*wR0_+QR0^+Q%XyObxz!O!P!Q!T!n$O$u$y$|%_%b%f%n%o%p%q%y%{&P&o&p&r'](q)S)U)i)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-t-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR0k+ZR0j+ZQ'R!qQ)c%XQ+w&|R4y1PX'Q!q%X&|1PR+y&|R+x&|T/S*S4TT/R*S4TR.o)sR.n)sR){%p",
        nodeNames: "\u26A0 | < > RawString Float LineComment BlockComment SourceFile ] InnerAttribute ! [ MetaItem self Metavariable super crate Identifier ScopedIdentifier :: QualifiedScope AbstractType impl SelfType MetaType TypeIdentifier ScopedTypeIdentifier ScopeIdentifier TypeArgList TypeBinding = Lifetime String Escape Char Boolean Integer } { Block ; ConstItem Vis pub ( in ) const BoundIdentifier : UnsafeBlock unsafe AsyncBlock async move IfExpression if LetDeclaration let LiteralPattern ArithOp MetaPattern SelfPattern ScopedIdentifier TuplePattern ScopedTypeIdentifier , StructPattern FieldPatternList FieldPattern ref mut FieldIdentifier .. RefPattern SlicePattern CapturedPattern ReferencePattern & MutPattern RangePattern ... OrPattern MacroPattern ParenthesizedTokens TokenBinding Identifier TokenRepetition ArithOp BitOp LogicOp UpdateOp CompareOp -> => ArithOp BracketedTokens BracedTokens _ else MatchExpression match MatchBlock MatchArm Attribute Guard UnaryExpression ArithOp DerefOp LogicOp ReferenceExpression TryExpression BinaryExpression ArithOp ArithOp BitOp BitOp BitOp BitOp LogicOp LogicOp AssignmentExpression TypeCastExpression as ReturnExpression return RangeExpression CallExpression ArgList AwaitExpression await FieldExpression GenericFunction BreakExpression break LoopLabel ContinueExpression continue IndexExpression ArrayExpression TupleExpression MacroInvocation UnitExpression ClosureExpression ParamList Parameter Parameter ParenthesizedExpression StructExpression FieldInitializerList ShorthandFieldInitializer FieldInitializer BaseFieldInitializer MatchArm WhileExpression while LoopExpression loop ForExpression for MacroInvocation MacroDefinition macro_rules MacroRule EmptyStatement ModItem mod DeclarationList AttributeItem ForeignModItem extern StructItem struct TypeParamList ConstrainedTypeParameter TraitBounds HigherRankedTraitBound RemovedTraitBound OptionalTypeParameter ConstParameter WhereClause where LifetimeClause TypeBoundClause FieldDeclarationList FieldDeclaration OrderedFieldDeclarationList UnionItem union EnumItem enum EnumVariantList EnumVariant TypeItem type FunctionItem default fn ParamList Parameter SelfParameter VariadicParameter VariadicParameter ImplItem TraitItem trait AssociatedType LetDeclaration UseDeclaration use ScopedIdentifier UseAsClause ScopedIdentifier UseList ScopedUseList UseWildcard ExternCrateDeclaration StaticItem static ExpressionStatement ExpressionStatement GenericType FunctionType ForLifetimes ParamList VariadicParameter Parameter VariadicParameter Parameter ReferenceType PointerType TupleType UnitType ArrayType MacroInvocation EmptyType DynamicType dyn BoundedType",
        maxTerm: 359,
        nodeProps: [
          ["group", -42, 4, 5, 14, 15, 16, 17, 18, 19, 33, 35, 36, 37, 40, 51, 53, 56, 101, 107, 111, 112, 113, 122, 123, 125, 127, 128, 130, 132, 133, 134, 137, 139, 140, 141, 142, 143, 144, 148, 149, 155, 157, 159, "Expression", -16, 22, 24, 25, 26, 27, 222, 223, 230, 231, 232, 233, 234, 235, 236, 237, 239, "Type", -20, 42, 161, 162, 165, 166, 169, 170, 172, 188, 190, 194, 196, 204, 205, 207, 208, 209, 217, 218, 220, "Statement", -17, 49, 60, 62, 63, 64, 65, 68, 74, 75, 76, 77, 78, 80, 81, 83, 84, 99, "Pattern"],
          ["openedBy", 9, "[", 38, "{", 47, "("],
          ["closedBy", 12, "]", 39, "}", 45, ")"]
        ],
        propSources: [rustHighlighting],
        skippedNodes: [0, 6, 7, 240],
        repeatNodeCount: 32,
        tokenData: "#?|_R!VOX$hXY1_YZ2ZZ]$h]^1_^p$hpq1_qr2srs4qst5Ztu6Vuv9lvw;jwx=nxy!!ayz!#]z{!$X{|!&R|}!'T}!O!(P!O!P!*Q!P!Q!-|!Q!R!6X!R![!7|![!]!Jw!]!^!Lu!^!_!Mq!_!`# x!`!a##y!a!b#&Q!b!c#&|!c!}#'x!}#O#)o#O#P#*k#P#Q#1b#Q#R#2^#R#S#'x#S#T$h#T#U#'x#U#V#3`#V#f#'x#f#g#6s#g#o#'x#o#p#<Q#p#q#<|#q#r#?Q#r${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$hU$oZ'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU%iT'_Q'OSOz%xz{&^{!P%x!P!Q'S!Q~%xS%}T'OSOz%xz{&^{!P%x!P!Q'S!Q~%xS&aTOz&pz{&^{!P&p!P!Q({!Q~&pS&sTOz%xz{&^{!P%x!P!Q'S!Q~%xS'VSOz&p{!P&p!P!Q'c!Q~&pS'fSOz'r{!P'r!P!Q'c!Q~'rS'uTOz(Uz{(l{!P(U!P!Q'c!Q~(US(]T'PS'OSOz(Uz{(l{!P(U!P!Q'c!Q~(US(oSOz'rz{(l{!P'r!Q~'rS)QO'PSU)VZ'_QOY)xYZ+hZr)xrs&psz)xz{)Q{!P)x!P!Q0w!Q#O)x#O#P&p#P~)xU)}Z'_QOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU*uZ'_QOY)xYZ+hZr)xrs&psz)xz{+|{!P)x!P!Q,g!Q#O)x#O#P&p#P~)xU+mT'_QOz%xz{&^{!P%x!P!Q'S!Q~%xQ,RT'_QOY+|YZ,bZr+|s#O+|#P~+|Q,gO'_QU,lZ'_QOY-_YZ0cZr-_rs'rsz-_z{+|{!P-_!P!Q,g!Q#O-_#O#P'r#P~-_U-dZ'_QOY.VYZ/RZr.Vrs(Usz.Vz{/k{!P.V!P!Q,g!Q#O.V#O#P(U#P~.VU.`Z'_Q'PS'OSOY.VYZ/RZr.Vrs(Usz.Vz{/k{!P.V!P!Q,g!Q#O.V#O#P(U#P~.VU/[T'_Q'PS'OSOz(Uz{(l{!P(U!P!Q'c!Q~(UU/pZ'_QOY-_YZ0cZr-_rs'rsz-_z{/k{!P-_!P!Q+|!Q#O-_#O#P'r#P~-_U0hT'_QOz(Uz{(l{!P(U!P!Q'c!Q~(UU1OT'_Q'PSOY+|YZ,bZr+|s#O+|#P~+|_1hZ'_Q&|X'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_2dT'_Q&|X'OSOz%xz{&^{!P%x!P!Q'S!Q~%x_2|]ZX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`#O$h#O#P%x#P~$h_4OZ#PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_4zT']Q'OS'^XOz%xz{&^{!P%x!P!Q'S!Q~%x_5dZ'QX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_6`g'_Q'vW'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!c$h!c!}7w!}#O$h#O#P%x#P#R$h#R#S7w#S#T$h#T#o7w#o${$h${$|7w$|4w$h4w5b7w5b5i$h5i6S7w6S~$h_8Qh'_Q_X'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![7w![!c$h!c!}7w!}#O$h#O#P%x#P#R$h#R#S7w#S#T$h#T#o7w#o${$h${$|7w$|4w$h4w5b7w5b5i$h5i6S7w6S~$h_9u](TP'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_:wZ#OX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_;s_!qX'_Q'OSOY$hYZ%bZr$hrs%xsv$hvw<rwz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_<{Z'}X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_=ui'_Q'OSOY?dYZA`Zr?drsBdsw?dwx@dxz?dz{CO{!P?d!P!QDv!Q!c?d!c!}Et!}#O?d#O#PId#P#R?d#R#SEt#S#T?d#T#oEt#o${?d${$|Et$|4w?d4w5bEt5b5i?d5i6SEt6S~?d_?k]'_Q'OSOY$hYZ%bZr$hrs%xsw$hwx@dxz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_@mZ'_Q'OSsXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_AgV'_Q'OSOw%xwxA|xz%xz{&^{!P%x!P!Q'S!Q~%x]BTT'OSsXOz%xz{&^{!P%x!P!Q'S!Q~%x]BiV'OSOw%xwxA|xz%xz{&^{!P%x!P!Q'S!Q~%x_CT]'_QOY)xYZ+hZr)xrs&psw)xwxC|xz)xz{)Q{!P)x!P!Q0w!Q#O)x#O#P&p#P~)x_DTZ'_QsXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_D{]'_QOY)xYZ+hZr)xrs&psw)xwxC|xz)xz{+|{!P)x!P!Q,g!Q#O)x#O#P&p#P~)x_E}j'_Q'OS'ZXOY$hYZ%bZr$hrs%xsw$hwx@dxz$hz{)Q{!P$h!P!Q*p!Q![Go![!c$h!c!}Go!}#O$h#O#P%x#P#R$h#R#SGo#S#T$h#T#oGo#o${$h${$|Go$|4w$h4w5bGo5b5i$h5i6SGo6S~$h_Gxh'_Q'OS'ZXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![Go![!c$h!c!}Go!}#O$h#O#P%x#P#R$h#R#SGo#S#T$h#T#oGo#o${$h${$|Go$|4w$h4w5bGo5b5i$h5i6SGo6S~$h]IiX'OSOzBdz{JU{!PBd!P!QKS!Q#iBd#i#jKi#j#lBd#l#mMX#m~Bd]JXVOw&pwxJnxz&pz{&^{!P&p!P!Q({!Q~&p]JsTsXOz%xz{&^{!P%x!P!Q'S!Q~%x]KVUOw&pwxJnxz&p{!P&p!P!Q'c!Q~&p]Kn['OSOz%xz{&^{!P%x!P!Q'S!Q![Ld![!c%x!c!iLd!i#T%x#T#ZLd#Z#o%x#o#pNq#p~%x]LiY'OSOz%xz{&^{!P%x!P!Q'S!Q![MX![!c%x!c!iMX!i#T%x#T#ZMX#Z~%x]M^Y'OSOz%xz{&^{!P%x!P!Q'S!Q![M|![!c%x!c!iM|!i#T%x#T#ZM|#Z~%x]NRY'OSOz%xz{&^{!P%x!P!Q'S!Q![Bd![!c%x!c!iBd!i#T%x#T#ZBd#Z~%x]NvY'OSOz%xz{&^{!P%x!P!Q'S!Q![! f![!c%x!c!i! f!i#T%x#T#Z! f#Z~%x]! k['OSOz%xz{&^{!P%x!P!Q'S!Q![! f![!c%x!c!i! f!i#T%x#T#Z! f#Z#q%x#q#rBd#r~%x_!!jZ}X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!#fZ!PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!$`](QX'_QOY)xYZ+hZr)xrs&psz)xz{)Q{!P)x!P!Q0w!Q!_)x!_!`!%X!`#O)x#O#P&p#P~)x_!%`Z#OX'_QOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!&[](PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_!'^Z!eX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!(Y^'gX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`!a!)U!a#O$h#O#P%x#P~$h_!)_Z#QX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!*Z[(OX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!O$h!O!P!+P!P!Q*p!Q#O$h#O#P%x#P~$h_!+Y^!lX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!O$h!O!P!,U!P!Q*p!Q!_$h!_!`!-Q!`#O$h#O#P%x#P~$h_!,_Z!tX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hV!-ZZ'qP'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!.T]'_Q'xXOY)xYZ+hZr)xrs&psz)xz{!.|{!P)x!P!Q!/d!Q!_)x!_!`!%X!`#O)x#O#P&p#P~)x_!/TT&}]'_QOY+|YZ,bZr+|s#O+|#P~+|_!/kZ'_QUXOY!0^YZ0cZr!0^rs!3`sz!0^z{!5k{!P!0^!P!Q!/d!Q#O!0^#O#P!3`#P~!0^_!0eZ'_QUXOY!1WYZ/RZr!1Wrs!2Usz!1Wz{!4q{!P!1W!P!Q!/d!Q#O!1W#O#P!2U#P~!1W_!1cZ'_QUX'PS'OSOY!1WYZ/RZr!1Wrs!2Usz!1Wz{!4q{!P!1W!P!Q!/d!Q#O!1W#O#P!2U#P~!1W]!2_VUX'PS'OSOY!2UYZ(UZz!2Uz{!2t{!P!2U!P!Q!3z!Q~!2U]!2yVUXOY!3`YZ'rZz!3`z{!2t{!P!3`!P!Q!4f!Q~!3`]!3eVUXOY!2UYZ(UZz!2Uz{!2t{!P!2U!P!Q!3z!Q~!2U]!4PVUXOY!3`YZ'rZz!3`z{!4f{!P!3`!P!Q!3z!Q~!3`X!4kQUXOY!4fZ~!4f_!4xZ'_QUXOY!0^YZ0cZr!0^rs!3`sz!0^z{!4q{!P!0^!P!Q!5k!Q#O!0^#O#P!3`#P~!0^Z!5rV'_QUXOY!5kYZ,bZr!5krs!4fs#O!5k#O#P!4f#P~!5k_!6bhuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!7|![#O$h#O#P%x#P#R$h#R#S!7|#S#U$h#U#V!By#V#]$h#]#^!9_#^#c$h#c#d!Ee#d#i$h#i#j!9_#j#l$h#l#m!Gy#m~$h_!8VbuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!7|![#O$h#O#P%x#P#R$h#R#S!7|#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!9fe'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R$h!R!S!:w!S!T$h!T!U!=y!U!W$h!W!X!>y!X!Y$h!Y!Z!<}!Z#O$h#O#P%x#P#g$h#g#h!?y#h~$h_!;O_'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!S$h!S!T!;}!T!W$h!W!X!<}!X#O$h#O#P%x#P~$h_!<U]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y$h!Y!Z!<}!Z#O$h#O#P%x#P~$h_!=WZuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!>Q]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!S$h!S!T!<}!T#O$h#O#P%x#P~$h_!?Q]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!U$h!U!V!<}!V#O$h#O#P%x#P~$h_!@Q]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#]$h#]#^!@y#^~$h_!AQ]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#n$h#n#o!Ay#o~$h_!BQ]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#X$h#X#Y!<}#Y~$h_!CQ_'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R!DP!R!S!DP!S#O$h#O#P%x#P#R$h#R#S!DP#S~$h_!DYcuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R!DP!R!S!DP!S#O$h#O#P%x#P#R$h#R#S!DP#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!El^'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y!Fh!Y#O$h#O#P%x#P#R$h#R#S!Fh#S~$h_!FqbuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y!Fh!Y#O$h#O#P%x#P#R$h#R#S!Fh#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!HQb'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!IY![!c$h!c!i!IY!i#O$h#O#P%x#P#R$h#R#S!IY#S#T$h#T#Z!IY#Z~$h_!IcfuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!IY![!c$h!c!i!IY!i#O$h#O#P%x#P#R$h#R#S!IY#S#T$h#T#Z!IY#Z#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!KQ]!SX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![$h![!]!Ky!]#O$h#O#P%x#P~$h_!LSZdX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!MOZyX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!Mz^#PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!^$h!^!_!Nv!_!`3u!`#O$h#O#P%x#P~$h_# P]'yX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#!R^oX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`!a#!}!a#O$h#O#P%x#P~$h_##WZ#RX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#$S^#PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`!a#%O!a#O$h#O#P%x#P~$h_#%X]'zX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#&ZZ(RX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hV#'VZ'pP'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#(Th'_Q'OS!yW'TPOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$h_#)xZ[X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU#*pX'OSOz#+]z{#+s{!P#+]!P!Q#,X!Q#i#+]#i#j#,j#j#l#+]#l#m#.Y#m~#+]U#+dTrQ'OSOz%xz{&^{!P%x!P!Q'S!Q~%xU#+xTrQOz&pz{&^{!P&p!P!Q({!Q~&pU#,^SrQOz&p{!P&p!P!Q'c!Q~&pU#,o['OSOz%xz{&^{!P%x!P!Q'S!Q![#-e![!c%x!c!i#-e!i#T%x#T#Z#-e#Z#o%x#o#p#/r#p~%xU#-jY'OSOz%xz{&^{!P%x!P!Q'S!Q![#.Y![!c%x!c!i#.Y!i#T%x#T#Z#.Y#Z~%xU#._Y'OSOz%xz{&^{!P%x!P!Q'S!Q![#.}![!c%x!c!i#.}!i#T%x#T#Z#.}#Z~%xU#/SY'OSOz%xz{&^{!P%x!P!Q'S!Q![#+]![!c%x!c!i#+]!i#T%x#T#Z#+]#Z~%xU#/wY'OSOz%xz{&^{!P%x!P!Q'S!Q![#0g![!c%x!c!i#0g!i#T%x#T#Z#0g#Z~%xU#0l['OSOz%xz{&^{!P%x!P!Q'S!Q![#0g![!c%x!c!i#0g!i#T%x#T#Z#0g#Z#q%x#q#r#+]#r~%x_#1kZXX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#2g]'{X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#3kj'_Q'OS!yW'TPOY$hYZ%bZr$hrs#5]sw$hwx#5sxz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$h]#5dT'OS'^XOz%xz{&^{!P%x!P!Q'S!Q~%x_#5z]'_Q'OSOY?dYZA`Zr?drsBdsw?dwx@dxz?dz{CO{!P?d!P!QDv!Q#O?d#O#PId#P~?d_#7Oi'_Q'OS!yW'TPOY$hYZ%bZr$hrs%xst#8mtz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$hV#8tg'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!c$h!c!}#:]!}#O$h#O#P%x#P#R$h#R#S#:]#S#T$h#T#o#:]#o${$h${$|#:]$|4w$h4w5b#:]5b5i$h5i6S#:]6S~$hV#:fh'_Q'OS'TPOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![#:]![!c$h!c!}#:]!}#O$h#O#P%x#P#R$h#R#S#:]#S#T$h#T#o#:]#o${$h${$|#:]$|4w$h4w5b#:]5b5i$h5i6S#:]6S~$h_#<ZZwX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#=V_'rX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P#p$h#p#q#>U#q~$h_#>_Z'|X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#?ZZvX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h",
        tokenizers: [closureParam, tpDelim, literalTokens, 0, 1, 2, 3],
        topRules: { "SourceFile": [0, 8] },
        specialized: [{ term: 281, get: (value) => spec_identifier6[value] || -1 }],
        tokenPrec: 15596
      });
    }
  });

  // node_modules/@codemirror/lang-rust/dist/index.js
  var dist_exports11 = {};
  __export(dist_exports11, {
    rust: () => rust,
    rustLanguage: () => rustLanguage
  });
  function rust() {
    return new LanguageSupport(rustLanguage);
  }
  var rustLanguage;
  var init_dist19 = __esm({
    "node_modules/@codemirror/lang-rust/dist/index.js"() {
      init_index_es10();
      init_dist5();
      rustLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "rust",
        parser: /* @__PURE__ */ parser11.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              IfExpression: /* @__PURE__ */ continuedIndent({ except: /^\s*({|else\b)/ }),
              "String BlockComment": () => null,
              "AttributeItem": (cx2) => cx2.continue(),
              "Statement MatchArm": /* @__PURE__ */ continuedIndent()
            }),
            /* @__PURE__ */ foldNodeProp.add((type7) => {
              if (/(Block|edTokens|List)$/.test(type7.name))
                return foldInside;
              if (type7.name == "BlockComment")
                return (tree) => ({ from: tree.from + 2, to: tree.to - 2 });
              return void 0;
            })
          ]
        }),
        languageData: {
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          indentOnInput: /^\s*(?:\{|\})$/,
          closeBrackets: { stringPrefixes: ["b", "r", "br"] }
        }
      });
    }
  });

  // node_modules/@codemirror/lang-wast/dist/index.js
  var dist_exports12 = {};
  __export(dist_exports12, {
    wast: () => wast,
    wastLanguage: () => wastLanguage
  });
  function wast() {
    return new LanguageSupport(wastLanguage);
  }
  var spec_Keyword, parser12, wastLanguage;
  var init_dist20 = __esm({
    "node_modules/@codemirror/lang-wast/dist/index.js"() {
      init_dist5();
      init_dist4();
      init_dist7();
      spec_Keyword = { __proto__: null, anyref: 34, dataref: 34, eqref: 34, externref: 34, i31ref: 34, funcref: 34, i8: 34, i16: 34, i32: 34, i64: 34, f32: 34, f64: 34 };
      parser12 = /* @__PURE__ */ LRParser.deserialize({
        version: 14,
        states: "!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h",
        stateData: "!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O",
        goto: "xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV",
        nodeNames: "\u26A0 LineComment BlockComment Module ) ( App Identifier Type Keyword Number String",
        maxTerm: 17,
        nodeProps: [
          ["openedBy", 4, "("],
          ["closedBy", 5, ")"],
          ["group", -6, 6, 7, 8, 9, 10, 11, "Expression"]
        ],
        skippedNodes: [0, 1, 2],
        repeatNodeCount: 1,
        tokenData: "/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^",
        tokenizers: [0],
        topRules: { "Module": [0, 3] },
        specialized: [{ term: 9, get: (value) => spec_Keyword[value] || -1 }],
        tokenPrec: 0
      });
      wastLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "wast",
        parser: /* @__PURE__ */ parser12.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              App: /* @__PURE__ */ delimitedIndent({ closing: ")", align: false })
            }),
            /* @__PURE__ */ foldNodeProp.add({
              App: foldInside,
              BlockComment(tree) {
                return { from: tree.from + 2, to: tree.to - 2 };
              }
            }),
            /* @__PURE__ */ styleTags({
              Keyword: tags.keyword,
              Type: tags.typeName,
              Number: tags.number,
              String: tags.string,
              Identifier: tags.variableName,
              LineComment: tags.lineComment,
              BlockComment: tags.blockComment,
              "( )": tags.paren
            })
          ]
        }),
        languageData: {
          commentTokens: { line: ";;", block: { open: "(;", close: ";)" } },
          closeBrackets: { brackets: ["(", '"'] }
        }
      });
    }
  });

  // node_modules/@lezer/xml/dist/index.es.js
  function nameChar2(ch2) {
    return ch2 == 45 || ch2 == 46 || ch2 == 58 || ch2 >= 65 && ch2 <= 90 || ch2 == 95 || ch2 >= 97 && ch2 <= 122 || ch2 >= 161;
  }
  function isSpace3(ch2) {
    return ch2 == 9 || ch2 == 10 || ch2 == 13 || ch2 == 32;
  }
  function tagNameAfter2(input, offset2) {
    let pos = input.pos + offset2;
    if (cachedInput2 == input && cachedPos2 == pos)
      return cachedName2;
    while (isSpace3(input.peek(offset2)))
      offset2++;
    let name2 = "";
    for (; ; ) {
      let next2 = input.peek(offset2);
      if (!nameChar2(next2))
        break;
      name2 += String.fromCharCode(next2);
      offset2++;
    }
    cachedInput2 = input;
    cachedPos2 = pos;
    return cachedName2 = name2 || null;
  }
  function ElementContext2(name2, parent) {
    this.name = name2;
    this.parent = parent;
    this.hash = parent ? parent.hash : 0;
    for (let i = 0; i < name2.length; i++)
      this.hash += (this.hash << 4) + name2.charCodeAt(i) + (name2.charCodeAt(i) << 8);
  }
  function scanTo(type7, end2) {
    return new ExternalTokenizer((input) => {
      for (let endPos = 0, len = 0; ; len++) {
        if (input.next < 0) {
          if (len)
            input.acceptToken(type7);
          break;
        }
        if (input.next == end2.charCodeAt(endPos)) {
          endPos++;
          if (endPos == end2.length) {
            if (len >= end2.length)
              input.acceptToken(type7, 1 - end2.length);
            break;
          }
        } else {
          endPos = input.next == end2.charCodeAt(0) ? 1 : 0;
        }
        input.advance();
      }
    });
  }
  var StartTag2, StartCloseTag2, MissingCloseTag, mismatchedStartCloseTag, incompleteStartCloseTag, commentContent$12, piContent$1, cdataContent$1, Element3, OpenTag2, cachedName2, cachedInput2, cachedPos2, elementContext2, startTag, commentContent2, piContent, cdataContent, xmlHighlighting, parser13;
  var init_index_es11 = __esm({
    "node_modules/@lezer/xml/dist/index.es.js"() {
      init_dist7();
      init_dist4();
      StartTag2 = 1;
      StartCloseTag2 = 2;
      MissingCloseTag = 3;
      mismatchedStartCloseTag = 4;
      incompleteStartCloseTag = 5;
      commentContent$12 = 35;
      piContent$1 = 36;
      cdataContent$1 = 37;
      Element3 = 11;
      OpenTag2 = 13;
      cachedName2 = null;
      cachedInput2 = null;
      cachedPos2 = 0;
      elementContext2 = new ContextTracker({
        start: null,
        shift(context, term, stack, input) {
          return term == StartTag2 ? new ElementContext2(tagNameAfter2(input, 1) || "", context) : context;
        },
        reduce(context, term) {
          return term == Element3 && context ? context.parent : context;
        },
        reuse(context, node, _stack, input) {
          let type7 = node.type.id;
          return type7 == StartTag2 || type7 == OpenTag2 ? new ElementContext2(tagNameAfter2(input, 1) || "", context) : context;
        },
        hash(context) {
          return context ? context.hash : 0;
        },
        strict: false
      });
      startTag = new ExternalTokenizer((input, stack) => {
        if (input.next != 60)
          return;
        input.advance();
        if (input.next == 47) {
          input.advance();
          let name2 = tagNameAfter2(input, 0);
          if (!name2)
            return input.acceptToken(incompleteStartCloseTag);
          if (stack.context && name2 == stack.context.name)
            return input.acceptToken(StartCloseTag2);
          for (let cx2 = stack.context; cx2; cx2 = cx2.parent)
            if (cx2.name == name2)
              return input.acceptToken(MissingCloseTag, -2);
          input.acceptToken(mismatchedStartCloseTag);
        } else if (input.next != 33 && input.next != 63) {
          return input.acceptToken(StartTag2);
        }
      }, { contextual: true });
      commentContent2 = scanTo(commentContent$12, "-->");
      piContent = scanTo(piContent$1, "?>");
      cdataContent = scanTo(cdataContent$1, "]]>");
      xmlHighlighting = styleTags({
        Text: tags.content,
        "StartTag StartCloseTag EndTag SelfCloseEndTag": tags.angleBracket,
        TagName: tags.tagName,
        "MismatchedCloseTag/Tagname": [tags.tagName, tags.invalid],
        AttributeName: tags.attributeName,
        AttributeValue: tags.attributeValue,
        Is: tags.definitionOperator,
        "EntityReference CharacterReference": tags.character,
        Comment: tags.blockComment,
        ProcessingInst: tags.processingInstruction,
        DoctypeDecl: tags.documentMeta,
        Cdata: tags.special(tags.string)
      });
      parser13 = LRParser.deserialize({
        version: 14,
        states: ",SOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DS'#DSOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C{'#C{O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C|'#C|O$dOrO,59^OOOP,59^,59^OOOS'#C}'#C}O$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6y-E6yOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6z-E6zOOOP1G.x1G.xOOOS-E6{-E6{OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'jO!bO,59eOOOO-E6w-E6wO'xOpO1G.uO'xOpO1G.uOOOP1G.u1G.uO(QOpO7+$fOOOP7+$f7+$fO(YO!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(eO#tO'#CnOOOO1G.q1G.qO(sOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO({O#tO,59YOOOO,59Y,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.t",
        stateData: ")Z~OPQOSVOTWOVWOWWOXWOiXOxPO}TO!PUO~OuZOw]O~O^`Oy^O~OPQOQcOSVOTWOVWOWWOXWOxPO}TO!PUO~ORdO~P!SOseO|gO~OthO!OjO~O^lOy^O~OuZOwoO~O^qOy^O~O[vO`sOdwOy^O~ORyO~P!SO^{Oy^O~OseO|}O~OthO!O!PO~O^!QOy^O~O[!SOy^O~O[!VO`sOd!WOy^O~Oa!YOy^O~Oy^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oy^O~O[!_Oy^O~O[!aOy^O~O[!cO`sOd!dOy^O~O[!cO`sOd!dO~Oa!eOy^O~Oy^Oz!gO~Oy^O[ma`madma~O[!jOy^O~O[!kOy^O~O[!lO`sOd!mO~OW!pOX!pOz!rO{!pO~O[!sOy^O~OW!pOX!pOz!vO{!pO~O",
        goto: "%[wPPPPPPPPPPxxP!OP!UPP!_!iP!oxxxP!u!{#R$Z$j$p$v$|PPPP%SXWORYbXRORYb_t`qru!T!U!bQ!h!YS!o!e!fR!t!nQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!i!nQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!i!]R!n!eQu`S!UqrU![u!U!bR!b!TQ!q!gR!u!qQbRRxbQfTR|fQiUR!OiSXOYTaRb",
        nodeNames: "\u26A0 StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
        maxTerm: 47,
        context: elementContext2,
        nodeProps: [
          ["closedBy", 1, "SelfCloseEndTag EndTag", 13, "CloseTag MissingCloseTag"],
          ["openedBy", 12, "StartTag StartCloseTag", 19, "OpenTag", 20, "StartTag"]
        ],
        propSources: [xmlHighlighting],
        skippedNodes: [0],
        repeatNodeCount: 8,
        tokenData: "IX~R!XOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs'ssv$nvw(Zw}$n}!O*l!O!P$n!P!Q,{!Q![$n![!].e!]!^$n!^!_1v!_!`Cz!`!aDm!a!bE`!b!c$n!c!}.e!}#P$n#P#QFx#Q#R$n#R#S.e#S#T$n#T#o.e#o%W$n%W%o.e%o%p$n%p&a.e&a&b$n&b1p.e1p4U$n4U4d.e4d4e$n4e$IS.e$IS$I`$n$I`$Ib.e$Ib$Kh$n$Kh%#t.e%#t&/x$n&/x&Et.e&Et&FV$n&FV;'S.e;'S;:j1p;:j;=`&e<%l?&r$n?&r?Ah.e?Ah?BY$n?BY?Mn.e?MnO$nX$uWVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nP%dTVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_P%vP;=`<%l%_W&OT{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yW&bP;=`<%l%yX&hP;=`<%l$n_&t_VP{WyUOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ'zTzYVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_~(^VOp(sqs(sst)ht!](s!^;'S(s;'S;=`)b<%lO(s~(vVOp(sqs(st!](s!]!^)]!^;'S(s;'S;=`)b<%lO(s~)bOW~~)eP;=`<%l(s~)kTOp)zq!])z!^;'S)z;'S;=`*f<%lO)z~)}UOp)zq!])z!]!^*a!^;'S)z;'S;=`*f<%lO)z~*fOX~~*iP;=`<%l)zZ*sYVP{WOr$nrs%_sv$nw}$n}!O+c!O!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ+jYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a,Y!a;'S$n;'S;=`&e<%lO$nZ,cW|QVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n]-SYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a-r!a;'S$n;'S;=`&e<%lO$n]-{WdSVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_.p!O`S^QVP{WOr$nrs%_sv$nw}$n}!O.e!O!P.e!P!Q$n!Q![.e![!].e!]!^$n!^!_%y!_!c$n!c!}.e!}#R$n#R#S.e#S#T$n#T#o.e#o$}$n$}%O.e%O%W$n%W%o.e%o%p$n%p&a.e&a&b$n&b1p.e1p4U.e4U4d.e4d4e$n4e$IS.e$IS$I`$n$I`$Ib.e$Ib$Je$n$Je$Jg.e$Jg$Kh$n$Kh%#t.e%#t&/x$n&/x&Et.e&Et&FV$n&FV;'S.e;'S;:j1p;:j;=`&e<%l?&r$n?&r?Ah.e?Ah?BY$n?BY?Mn.e?MnO$n_1sP;=`<%l.eX1{W{WOq%yqr2esv%yw!a%y!a!bCd!b;'S%y;'S;=`&_<%lO%yX2j]{WOr%ysv%yw}%y}!O3c!O!f%y!f!g4e!g!}%y!}#O9t#O#W%y#W#X@Q#X;'S%y;'S;=`&_<%lO%yX3hV{WOr%ysv%yw}%y}!O3}!O;'S%y;'S;=`&_<%lO%yX4UT}P{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX4jV{WOr%ysv%yw!q%y!q!r5P!r;'S%y;'S;=`&_<%lO%yX5UV{WOr%ysv%yw!e%y!e!f5k!f;'S%y;'S;=`&_<%lO%yX5pV{WOr%ysv%yw!v%y!v!w6V!w;'S%y;'S;=`&_<%lO%yX6[V{WOr%ysv%yw!{%y!{!|6q!|;'S%y;'S;=`&_<%lO%yX6vV{WOr%ysv%yw!r%y!r!s7]!s;'S%y;'S;=`&_<%lO%yX7bV{WOr%ysv%yw!g%y!g!h7w!h;'S%y;'S;=`&_<%lO%yX7|X{WOr7wrs8isv7wvw8iw!`7w!`!a9W!a;'S7w;'S;=`9n<%lO7wP8lTO!`8i!`!a8{!a;'S8i;'S;=`9Q<%lO8iP9QOiPP9TP;=`<%l8iX9_TiP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX9qP;=`<%l7wX9yX{WOr%ysv%yw!e%y!e!f:f!f#V%y#V#W=t#W;'S%y;'S;=`&_<%lO%yX:kV{WOr%ysv%yw!f%y!f!g;Q!g;'S%y;'S;=`&_<%lO%yX;VV{WOr%ysv%yw!c%y!c!d;l!d;'S%y;'S;=`&_<%lO%yX;qV{WOr%ysv%yw!v%y!v!w<W!w;'S%y;'S;=`&_<%lO%yX<]V{WOr%ysv%yw!c%y!c!d<r!d;'S%y;'S;=`&_<%lO%yX<wV{WOr%ysv%yw!}%y!}#O=^#O;'S%y;'S;=`&_<%lO%yX=eT{WxPOr%ysv%yw;'S%y;'S;=`&_<%lO%yX=yV{WOr%ysv%yw#W%y#W#X>`#X;'S%y;'S;=`&_<%lO%yX>eV{WOr%ysv%yw#T%y#T#U>z#U;'S%y;'S;=`&_<%lO%yX?PV{WOr%ysv%yw#h%y#h#i?f#i;'S%y;'S;=`&_<%lO%yX?kV{WOr%ysv%yw#T%y#T#U<r#U;'S%y;'S;=`&_<%lO%yX@VV{WOr%ysv%yw#c%y#c#d@l#d;'S%y;'S;=`&_<%lO%yX@qV{WOr%ysv%yw#V%y#V#WAW#W;'S%y;'S;=`&_<%lO%yXA]V{WOr%ysv%yw#h%y#h#iAr#i;'S%y;'S;=`&_<%lO%yXAwV{WOr%ysv%yw#m%y#m#nB^#n;'S%y;'S;=`&_<%lO%yXBcV{WOr%ysv%yw#d%y#d#eBx#e;'S%y;'S;=`&_<%lO%yXB}V{WOr%ysv%yw#X%y#X#Y7w#Y;'S%y;'S;=`&_<%lO%yXCkT!PP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yZDTWaQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_DvW[UVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZEgYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aFV!a;'S$n;'S;=`&e<%lO$nZF`W!OQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZGPYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_#P$n#P#QGo#Q;'S$n;'S;=`&e<%lO$nZGvYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aHf!a;'S$n;'S;=`&e<%lO$nZHoWwQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n",
        tokenizers: [startTag, commentContent2, piContent, cdataContent, 0, 1, 2, 3],
        topRules: { "Document": [0, 6] },
        tokenPrec: 0
      });
    }
  });

  // node_modules/@codemirror/lang-xml/dist/index.js
  var dist_exports13 = {};
  __export(dist_exports13, {
    completeFromSchema: () => completeFromSchema2,
    xml: () => xml,
    xmlLanguage: () => xmlLanguage
  });
  function tagName(doc2, tag) {
    let name2 = tag && tag.getChild("TagName");
    return name2 ? doc2.sliceString(name2.from, name2.to) : "";
  }
  function elementName3(doc2, tree) {
    let tag = tree && tree.firstChild;
    return !tag || tag.name != "OpenTag" ? "" : tagName(doc2, tag);
  }
  function attrName(doc2, tag, pos) {
    let attr = tag && tag.getChildren("Attribute").find((a2) => a2.from <= pos && a2.to >= pos);
    let name2 = attr && attr.getChild("AttributeName");
    return name2 ? doc2.sliceString(name2.from, name2.to) : "";
  }
  function findParentElement2(tree) {
    for (let cur = tree && tree.parent; cur; cur = cur.parent)
      if (cur.name == "Element")
        return cur;
    return null;
  }
  function findLocation(state, pos) {
    var _a2;
    let at = syntaxTree(state).resolveInner(pos, -1), inTag = null;
    for (let cur = at; !inTag && cur.parent; cur = cur.parent)
      if (cur.name == "OpenTag" || cur.name == "CloseTag" || cur.name == "SelfClosingTag" || cur.name == "MismatchedCloseTag")
        inTag = cur;
    if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {
      let elt2 = inTag.parent;
      if (at.name == "TagName")
        return inTag.name == "CloseTag" || inTag.name == "MismatchedCloseTag" ? { type: "closeTag", from: at.from, context: elt2 } : { type: "openTag", from: at.from, context: findParentElement2(elt2) };
      if (at.name == "AttributeName")
        return { type: "attrName", from: at.from, context: inTag };
      if (at.name == "AttributeValue")
        return { type: "attrValue", from: at.from, context: inTag };
      let before = at == inTag || at.name == "Attribute" ? at.childBefore(pos) : at;
      if ((before === null || before === void 0 ? void 0 : before.name) == "StartTag")
        return { type: "openTag", from: pos, context: findParentElement2(elt2) };
      if ((before === null || before === void 0 ? void 0 : before.name) == "StartCloseTag" && before.to <= pos)
        return { type: "closeTag", from: pos, context: elt2 };
      if ((before === null || before === void 0 ? void 0 : before.name) == "Is")
        return { type: "attrValue", from: pos, context: inTag };
      if (before)
        return { type: "attrName", from: pos, context: inTag };
      return null;
    } else if (at.name == "StartCloseTag") {
      return { type: "closeTag", from: pos, context: at.parent };
    }
    while (at.parent && at.to == pos && !((_a2 = at.lastChild) === null || _a2 === void 0 ? void 0 : _a2.type.isError))
      at = at.parent;
    if (at.name == "Element" || at.name == "Text" || at.name == "Document")
      return { type: "tag", from: pos, context: at.name == "Element" ? at : findParentElement2(at) };
    return null;
  }
  function attrCompletion(spec) {
    return Object.assign(Object.assign({ type: "property" }, spec.completion || {}), { label: spec.name });
  }
  function valueCompletion(spec) {
    return typeof spec == "string" ? { label: `"${spec}"`, type: "constant" } : /^"/.test(spec.label) ? spec : Object.assign(Object.assign({}, spec), { label: `"${spec.label}"` });
  }
  function completeFromSchema2(eltSpecs, attrSpecs) {
    let allAttrs = [], globalAttrs = [];
    let attrValues = /* @__PURE__ */ Object.create(null);
    for (let s2 of attrSpecs) {
      let completion = attrCompletion(s2);
      allAttrs.push(completion);
      if (s2.global)
        globalAttrs.push(completion);
      if (s2.values)
        attrValues[s2.name] = s2.values.map(valueCompletion);
    }
    let allElements = [], topElements = [];
    let byName = /* @__PURE__ */ Object.create(null);
    for (let s2 of eltSpecs) {
      let attrs = globalAttrs, attrVals = attrValues;
      if (s2.attributes)
        attrs = attrs.concat(s2.attributes.map((s3) => {
          if (typeof s3 == "string")
            return allAttrs.find((a2) => a2.label == s3) || { label: s3, type: "property" };
          if (s3.values) {
            if (attrVals == attrValues)
              attrVals = Object.create(attrVals);
            attrVals[s3.name] = s3.values.map(valueCompletion);
          }
          return attrCompletion(s3);
        }));
      let elt2 = new Element4(s2, attrs, attrVals);
      byName[elt2.name] = elt2;
      allElements.push(elt2);
      if (s2.top)
        topElements.push(elt2);
    }
    if (!topElements.length)
      topElements = allElements;
    for (let i = 0; i < allElements.length; i++) {
      let s2 = eltSpecs[i], elt2 = allElements[i];
      if (s2.children) {
        for (let ch2 of s2.children)
          if (byName[ch2])
            elt2.children.push(byName[ch2]);
      } else {
        elt2.children = allElements;
      }
    }
    return (cx2) => {
      var _a2;
      let { doc: doc2 } = cx2.state, loc = findLocation(cx2.state, cx2.pos);
      if (!loc || loc.type == "tag" && !cx2.explicit)
        return null;
      let { type: type7, from: from3, context } = loc;
      if (type7 == "openTag") {
        let children = topElements;
        let parentName = elementName3(doc2, context);
        if (parentName) {
          let parent = byName[parentName];
          children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;
        }
        return {
          from: from3,
          options: children.map((ch2) => ch2.completion),
          validFor: Identifier4
        };
      } else if (type7 == "closeTag") {
        let parentName = elementName3(doc2, context);
        return parentName ? {
          from: from3,
          to: cx2.pos + (doc2.sliceString(cx2.pos, cx2.pos + 1) == ">" ? 1 : 0),
          options: [((_a2 = byName[parentName]) === null || _a2 === void 0 ? void 0 : _a2.closeNameCompletion) || { label: parentName + ">", type: "type" }],
          validFor: Identifier4
        } : null;
      } else if (type7 == "attrName") {
        let parent = byName[tagName(doc2, context)];
        return {
          from: from3,
          options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,
          validFor: Identifier4
        };
      } else if (type7 == "attrValue") {
        let attr = attrName(doc2, context, from3);
        if (!attr)
          return null;
        let parent = byName[tagName(doc2, context)];
        let values2 = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];
        if (!values2 || !values2.length)
          return null;
        return {
          from: from3,
          to: cx2.pos + (doc2.sliceString(cx2.pos, cx2.pos + 1) == '"' ? 1 : 0),
          options: values2,
          validFor: /^"[^"]*"?$/
        };
      } else if (type7 == "tag") {
        let parentName = elementName3(doc2, context), parent = byName[parentName];
        let closing3 = [], last = context && context.lastChild;
        if (parentName && (!last || last.name != "CloseTag" || tagName(doc2, last) != parentName))
          closing3.push(parent ? parent.closeCompletion : { label: "</" + parentName + ">", type: "type", boost: 2 });
        let options = closing3.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map((e) => e.openCompletion));
        if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {
          let openTag = context.firstChild;
          if (openTag.to > cx2.pos - 20 && !/\S/.test(cx2.state.sliceDoc(openTag.to, cx2.pos)))
            options = options.concat(parent.text);
        }
        return {
          from: from3,
          options,
          validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
        };
      } else {
        return null;
      }
    };
  }
  function xml(conf = {}) {
    return new LanguageSupport(xmlLanguage, xmlLanguage.data.of({
      autocomplete: completeFromSchema2(conf.elements || [], conf.attributes || [])
    }));
  }
  var Element4, Identifier4, xmlLanguage;
  var init_dist21 = __esm({
    "node_modules/@codemirror/lang-xml/dist/index.js"() {
      init_index_es11();
      init_dist5();
      Element4 = class {
        constructor(spec, attrs, attrValues) {
          this.attrs = attrs;
          this.attrValues = attrValues;
          this.children = [];
          this.name = spec.name;
          this.completion = Object.assign(Object.assign({ type: "type" }, spec.completion || {}), { label: this.name });
          this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name });
          this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 });
          this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" });
          this.text = spec.textContent ? spec.textContent.map((s2) => ({ label: s2, type: "text" })) : [];
        }
      };
      Identifier4 = /^[:\-\.\w\u00b7-\uffff]*$/;
      xmlLanguage = /* @__PURE__ */ LRLanguage.define({
        name: "xml",
        parser: /* @__PURE__ */ parser13.configure({
          props: [
            /* @__PURE__ */ indentNodeProp.add({
              Element(context) {
                let closed = /^\s*<\//.test(context.textAfter);
                return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
              },
              "OpenTag CloseTag SelfClosingTag"(context) {
                return context.column(context.node.from) + context.unit;
              }
            }),
            /* @__PURE__ */ foldNodeProp.add({
              Element(subtree) {
                let first = subtree.firstChild, last = subtree.lastChild;
                if (!first || first.name != "OpenTag")
                  return null;
                return { from: first.to, to: last.name == "CloseTag" ? last.from : subtree.to };
              }
            }),
            /* @__PURE__ */ bracketMatchingHandle.add({
              "OpenTag CloseTag": (node) => node.getChild("TagName")
            })
          ]
        }),
        languageData: {
          commentTokens: { block: { open: "<!--", close: "-->" } },
          indentOnInput: /^\s*<\/$/
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/apl.js
  var apl_exports = {};
  __export(apl_exports, {
    apl: () => apl
  });
  var builtInFuncs, isOperator, isNiladic, isFunction, isArrow, isComment, stringEater, apl;
  var init_apl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/apl.js"() {
      builtInFuncs = {
        "+": ["conjugate", "add"],
        "\u2212": ["negate", "subtract"],
        "\xD7": ["signOf", "multiply"],
        "\xF7": ["reciprocal", "divide"],
        "\u2308": ["ceiling", "greaterOf"],
        "\u230A": ["floor", "lesserOf"],
        "\u2223": ["absolute", "residue"],
        "\u2373": ["indexGenerate", "indexOf"],
        "?": ["roll", "deal"],
        "\u22C6": ["exponentiate", "toThePowerOf"],
        "\u235F": ["naturalLog", "logToTheBase"],
        "\u25CB": ["piTimes", "circularFuncs"],
        "!": ["factorial", "binomial"],
        "\u2339": ["matrixInverse", "matrixDivide"],
        "<": [null, "lessThan"],
        "\u2264": [null, "lessThanOrEqual"],
        "=": [null, "equals"],
        ">": [null, "greaterThan"],
        "\u2265": [null, "greaterThanOrEqual"],
        "\u2260": [null, "notEqual"],
        "\u2261": ["depth", "match"],
        "\u2262": [null, "notMatch"],
        "\u2208": ["enlist", "membership"],
        "\u2377": [null, "find"],
        "\u222A": ["unique", "union"],
        "\u2229": [null, "intersection"],
        "\u223C": ["not", "without"],
        "\u2228": [null, "or"],
        "\u2227": [null, "and"],
        "\u2371": [null, "nor"],
        "\u2372": [null, "nand"],
        "\u2374": ["shapeOf", "reshape"],
        ",": ["ravel", "catenate"],
        "\u236A": [null, "firstAxisCatenate"],
        "\u233D": ["reverse", "rotate"],
        "\u2296": ["axis1Reverse", "axis1Rotate"],
        "\u2349": ["transpose", null],
        "\u2191": ["first", "take"],
        "\u2193": [null, "drop"],
        "\u2282": ["enclose", "partitionWithAxis"],
        "\u2283": ["diclose", "pick"],
        "\u2337": [null, "index"],
        "\u234B": ["gradeUp", null],
        "\u2352": ["gradeDown", null],
        "\u22A4": ["encode", null],
        "\u22A5": ["decode", null],
        "\u2355": ["format", "formatByExample"],
        "\u234E": ["execute", null],
        "\u22A3": ["stop", "left"],
        "\u22A2": ["pass", "right"]
      };
      isOperator = /[\.\/⌿⍀¨⍣]/;
      isNiladic = /⍬/;
      isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
      isArrow = /←/;
      isComment = /[⍝#].*$/;
      stringEater = function(type7) {
        var prev;
        prev = false;
        return function(c2) {
          prev = c2;
          if (c2 === type7) {
            return prev === "\\";
          }
          return true;
        };
      };
      apl = {
        name: "apl",
        startState: function() {
          return {
            prev: false,
            func: false,
            op: false,
            string: false,
            escape: false
          };
        },
        token: function(stream, state) {
          var ch2;
          if (stream.eatSpace()) {
            return null;
          }
          ch2 = stream.next();
          if (ch2 === '"' || ch2 === "'") {
            stream.eatWhile(stringEater(ch2));
            stream.next();
            state.prev = true;
            return "string";
          }
          if (/[\[{\(]/.test(ch2)) {
            state.prev = false;
            return null;
          }
          if (/[\]}\)]/.test(ch2)) {
            state.prev = true;
            return null;
          }
          if (isNiladic.test(ch2)) {
            state.prev = false;
            return "atom";
          }
          if (/[¯\d]/.test(ch2)) {
            if (state.func) {
              state.func = false;
              state.prev = false;
            } else {
              state.prev = true;
            }
            stream.eatWhile(/[\w\.]/);
            return "number";
          }
          if (isOperator.test(ch2)) {
            return "operator";
          }
          if (isArrow.test(ch2)) {
            return "operator";
          }
          if (isFunction.test(ch2)) {
            state.func = true;
            state.prev = false;
            return builtInFuncs[ch2] ? "variableName.function.standard" : "variableName.function";
          }
          if (isComment.test(ch2)) {
            stream.skipToEnd();
            return "comment";
          }
          if (ch2 === "\u2218" && stream.peek() === ".") {
            stream.next();
            return "variableName.function";
          }
          stream.eatWhile(/[\w\$_]/);
          state.prev = true;
          return "keyword";
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/asciiarmor.js
  var asciiarmor_exports = {};
  __export(asciiarmor_exports, {
    asciiArmor: () => asciiArmor
  });
  function errorIfNotEmpty(stream) {
    var nonWS = stream.match(/^\s*\S/);
    stream.skipToEnd();
    return nonWS ? "error" : null;
  }
  var asciiArmor;
  var init_asciiarmor = __esm({
    "node_modules/@codemirror/legacy-modes/mode/asciiarmor.js"() {
      asciiArmor = {
        name: "asciiarmor",
        token: function(stream, state) {
          var m;
          if (state.state == "top") {
            if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
              state.state = "headers";
              state.type = m[1];
              return "tag";
            }
            return errorIfNotEmpty(stream);
          } else if (state.state == "headers") {
            if (stream.sol() && stream.match(/^\w+:/)) {
              state.state = "header";
              return "atom";
            } else {
              var result = errorIfNotEmpty(stream);
              if (result)
                state.state = "body";
              return result;
            }
          } else if (state.state == "header") {
            stream.skipToEnd();
            state.state = "headers";
            return "string";
          } else if (state.state == "body") {
            if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
              if (m[1] != state.type)
                return "error";
              state.state = "end";
              return "tag";
            } else {
              if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
                return null;
              } else {
                stream.next();
                return "error";
              }
            }
          } else if (state.state == "end") {
            return errorIfNotEmpty(stream);
          }
        },
        blankLine: function(state) {
          if (state.state == "headers")
            state.state = "body";
        },
        startState: function() {
          return { state: "top", type: null };
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/asn1.js
  var asn1_exports = {};
  __export(asn1_exports, {
    asn1: () => asn1
  });
  function words(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function asn1(parserConfig4) {
    var keywords47 = parserConfig4.keywords || defaults2.keywords, cmipVerbs = parserConfig4.cmipVerbs || defaults2.cmipVerbs, compareTypes = parserConfig4.compareTypes || defaults2.compareTypes, status = parserConfig4.status || defaults2.status, tags3 = parserConfig4.tags || defaults2.tags, storage = parserConfig4.storage || defaults2.storage, modifier = parserConfig4.modifier || defaults2.modifier, accessTypes = parserConfig4.accessTypes || defaults2.accessTypes, multiLineStrings5 = parserConfig4.multiLineStrings || defaults2.multiLineStrings, indentStatements3 = parserConfig4.indentStatements !== false;
    var isOperatorChar16 = /[\|\^]/;
    var curPunc14;
    function tokenBase48(stream, state) {
      var ch2 = stream.next();
      if (ch2 == '"' || ch2 == "'") {
        state.tokenize = tokenString30(ch2);
        return state.tokenize(stream, state);
      }
      if (/[\[\]\(\){}:=,;]/.test(ch2)) {
        curPunc14 = ch2;
        return "punctuation";
      }
      if (ch2 == "-") {
        if (stream.eat("-")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (/\d/.test(ch2)) {
        stream.eatWhile(/[\w\.]/);
        return "number";
      }
      if (isOperatorChar16.test(ch2)) {
        stream.eatWhile(isOperatorChar16);
        return "operator";
      }
      stream.eatWhile(/[\w\-]/);
      var cur = stream.current();
      if (keywords47.propertyIsEnumerable(cur))
        return "keyword";
      if (cmipVerbs.propertyIsEnumerable(cur))
        return "variableName";
      if (compareTypes.propertyIsEnumerable(cur))
        return "atom";
      if (status.propertyIsEnumerable(cur))
        return "comment";
      if (tags3.propertyIsEnumerable(cur))
        return "typeName";
      if (storage.propertyIsEnumerable(cur))
        return "modifier";
      if (modifier.propertyIsEnumerable(cur))
        return "modifier";
      if (accessTypes.propertyIsEnumerable(cur))
        return "modifier";
      return "variableName";
    }
    function tokenString30(quote2) {
      return function(stream, state) {
        var escaped = false, next2, end2 = false;
        while ((next2 = stream.next()) != null) {
          if (next2 == quote2 && !escaped) {
            var afterNext = stream.peek();
            if (afterNext) {
              afterNext = afterNext.toLowerCase();
              if (afterNext == "b" || afterNext == "h" || afterNext == "o")
                stream.next();
            }
            end2 = true;
            break;
          }
          escaped = !escaped && next2 == "\\";
        }
        if (end2 || !(escaped || multiLineStrings5))
          state.tokenize = null;
        return "string";
      };
    }
    function Context14(indented, column, type7, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type7;
      this.align = align;
      this.prev = prev;
    }
    function pushContext17(state, col, type7) {
      var indent5 = state.indented;
      if (state.context && state.context.type == "statement")
        indent5 = state.context.indented;
      return state.context = new Context14(indent5, col, type7, null, state.context);
    }
    function popContext17(state) {
      var t2 = state.context.type;
      if (t2 == ")" || t2 == "]" || t2 == "}")
        state.indented = state.context.indented;
      return state.context = state.context.prev;
    }
    return {
      name: "asn1",
      startState: function() {
        return {
          tokenize: null,
          context: new Context14(-2, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null)
            ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace())
          return null;
        curPunc14 = null;
        var style2 = (state.tokenize || tokenBase48)(stream, state);
        if (style2 == "comment")
          return style2;
        if (ctx.align == null)
          ctx.align = true;
        if ((curPunc14 == ";" || curPunc14 == ":" || curPunc14 == ",") && ctx.type == "statement") {
          popContext17(state);
        } else if (curPunc14 == "{")
          pushContext17(state, stream.column(), "}");
        else if (curPunc14 == "[")
          pushContext17(state, stream.column(), "]");
        else if (curPunc14 == "(")
          pushContext17(state, stream.column(), ")");
        else if (curPunc14 == "}") {
          while (ctx.type == "statement")
            ctx = popContext17(state);
          if (ctx.type == "}")
            ctx = popContext17(state);
          while (ctx.type == "statement")
            ctx = popContext17(state);
        } else if (curPunc14 == ctx.type)
          popContext17(state);
        else if (indentStatements3 && ((ctx.type == "}" || ctx.type == "top") && curPunc14 != ";" || ctx.type == "statement" && curPunc14 == "newstatement"))
          pushContext17(state, stream.column(), "statement");
        state.startOfLine = false;
        return style2;
      },
      languageData: {
        indentOnInput: /^\s*[{}]$/,
        commentTokens: { line: "--" }
      }
    };
  }
  var defaults2;
  var init_asn1 = __esm({
    "node_modules/@codemirror/legacy-modes/mode/asn1.js"() {
      defaults2 = {
        keywords: words("DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS MINACCESS MAXACCESS REVISION STATUS DESCRIPTION SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY IMPLIED EXPORTS"),
        cmipVerbs: words("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
        compareTypes: words("OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL TEXTUAL-CONVENTION"),
        status: words("current deprecated mandatory obsolete"),
        tags: words("APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS UNIVERSAL"),
        storage: words("BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING UTCTime InterfaceIndex IANAifType CMIP-Attribute REAL PACKAGE PACKAGES IpAddress PhysAddress NetworkAddress BITS BMPString TimeStamp TimeTicks TruthValue RowStatus DisplayString GeneralString GraphicString IA5String NumericString PrintableString SnmpAdminString TeletexString UTF8String VideotexString VisibleString StringStore ISO646String T61String UniversalString Unsigned32 Integer32 Gauge Gauge32 Counter Counter32 Counter64"),
        modifier: words("ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS DEFINED"),
        accessTypes: words("not-accessible accessible-for-notify read-only read-create read-write"),
        multiLineStrings: true
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/asterisk.js
  var asterisk_exports = {};
  __export(asterisk_exports, {
    asterisk: () => asterisk
  });
  function basicToken(stream, state) {
    var cur = "";
    var ch2 = stream.next();
    if (state.blockComment) {
      if (ch2 == "-" && stream.match("-;", true)) {
        state.blockComment = false;
      } else if (stream.skipTo("--;")) {
        stream.next();
        stream.next();
        stream.next();
        state.blockComment = false;
      } else {
        stream.skipToEnd();
      }
      return "comment";
    }
    if (ch2 == ";") {
      if (stream.match("--", true)) {
        if (!stream.match("-", false)) {
          state.blockComment = true;
          return "comment";
        }
      }
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 == "[") {
      stream.skipTo("]");
      stream.eat("]");
      return "header";
    }
    if (ch2 == '"') {
      stream.skipTo('"');
      return "string";
    }
    if (ch2 == "'") {
      stream.skipTo("'");
      return "string.special";
    }
    if (ch2 == "#") {
      stream.eatWhile(/\w/);
      cur = stream.current();
      if (dpcmd.indexOf(cur) !== -1) {
        stream.skipToEnd();
        return "strong";
      }
    }
    if (ch2 == "$") {
      var ch1 = stream.peek();
      if (ch1 == "{") {
        stream.skipTo("}");
        stream.eat("}");
        return "variableName.special";
      }
    }
    stream.eatWhile(/\w/);
    cur = stream.current();
    if (atoms.indexOf(cur) !== -1) {
      state.extenStart = true;
      switch (cur) {
        case "same":
          state.extenSame = true;
          break;
        case "include":
        case "switch":
        case "ignorepat":
          state.extenInclude = true;
          break;
        default:
          break;
      }
      return "atom";
    }
  }
  var atoms, dpcmd, apps, asterisk;
  var init_asterisk = __esm({
    "node_modules/@codemirror/legacy-modes/mode/asterisk.js"() {
      atoms = ["exten", "same", "include", "ignorepat", "switch"];
      dpcmd = ["#include", "#exec"];
      apps = [
        "addqueuemember",
        "adsiprog",
        "aelsub",
        "agentlogin",
        "agentmonitoroutgoing",
        "agi",
        "alarmreceiver",
        "amd",
        "answer",
        "authenticate",
        "background",
        "backgrounddetect",
        "bridge",
        "busy",
        "callcompletioncancel",
        "callcompletionrequest",
        "celgenuserevent",
        "changemonitor",
        "chanisavail",
        "channelredirect",
        "chanspy",
        "clearhash",
        "confbridge",
        "congestion",
        "continuewhile",
        "controlplayback",
        "dahdiacceptr2call",
        "dahdibarge",
        "dahdiras",
        "dahdiscan",
        "dahdisendcallreroutingfacility",
        "dahdisendkeypadfacility",
        "datetime",
        "dbdel",
        "dbdeltree",
        "deadagi",
        "dial",
        "dictate",
        "directory",
        "disa",
        "dumpchan",
        "eagi",
        "echo",
        "endwhile",
        "exec",
        "execif",
        "execiftime",
        "exitwhile",
        "extenspy",
        "externalivr",
        "festival",
        "flash",
        "followme",
        "forkcdr",
        "getcpeid",
        "gosub",
        "gosubif",
        "goto",
        "gotoif",
        "gotoiftime",
        "hangup",
        "iax2provision",
        "ices",
        "importvar",
        "incomplete",
        "ivrdemo",
        "jabberjoin",
        "jabberleave",
        "jabbersend",
        "jabbersendgroup",
        "jabberstatus",
        "jack",
        "log",
        "macro",
        "macroexclusive",
        "macroexit",
        "macroif",
        "mailboxexists",
        "meetme",
        "meetmeadmin",
        "meetmechanneladmin",
        "meetmecount",
        "milliwatt",
        "minivmaccmess",
        "minivmdelete",
        "minivmgreet",
        "minivmmwi",
        "minivmnotify",
        "minivmrecord",
        "mixmonitor",
        "monitor",
        "morsecode",
        "mp3player",
        "mset",
        "musiconhold",
        "nbscat",
        "nocdr",
        "noop",
        "odbc",
        "odbc",
        "odbcfinish",
        "originate",
        "ospauth",
        "ospfinish",
        "osplookup",
        "ospnext",
        "page",
        "park",
        "parkandannounce",
        "parkedcall",
        "pausemonitor",
        "pausequeuemember",
        "pickup",
        "pickupchan",
        "playback",
        "playtones",
        "privacymanager",
        "proceeding",
        "progress",
        "queue",
        "queuelog",
        "raiseexception",
        "read",
        "readexten",
        "readfile",
        "receivefax",
        "receivefax",
        "receivefax",
        "record",
        "removequeuemember",
        "resetcdr",
        "retrydial",
        "return",
        "ringing",
        "sayalpha",
        "saycountedadj",
        "saycountednoun",
        "saycountpl",
        "saydigits",
        "saynumber",
        "sayphonetic",
        "sayunixtime",
        "senddtmf",
        "sendfax",
        "sendfax",
        "sendfax",
        "sendimage",
        "sendtext",
        "sendurl",
        "set",
        "setamaflags",
        "setcallerpres",
        "setmusiconhold",
        "sipaddheader",
        "sipdtmfmode",
        "sipremoveheader",
        "skel",
        "slastation",
        "slatrunk",
        "sms",
        "softhangup",
        "speechactivategrammar",
        "speechbackground",
        "speechcreate",
        "speechdeactivategrammar",
        "speechdestroy",
        "speechloadgrammar",
        "speechprocessingsound",
        "speechstart",
        "speechunloadgrammar",
        "stackpop",
        "startmusiconhold",
        "stopmixmonitor",
        "stopmonitor",
        "stopmusiconhold",
        "stopplaytones",
        "system",
        "testclient",
        "testserver",
        "transfer",
        "tryexec",
        "trysystem",
        "unpausemonitor",
        "unpausequeuemember",
        "userevent",
        "verbose",
        "vmauthenticate",
        "vmsayname",
        "voicemail",
        "voicemailmain",
        "wait",
        "waitexten",
        "waitfornoise",
        "waitforring",
        "waitforsilence",
        "waitmusiconhold",
        "waituntil",
        "while",
        "zapateller"
      ];
      asterisk = {
        name: "asterisk",
        startState: function() {
          return {
            blockComment: false,
            extenStart: false,
            extenSame: false,
            extenInclude: false,
            extenExten: false,
            extenPriority: false,
            extenApplication: false
          };
        },
        token: function(stream, state) {
          var cur = "";
          if (stream.eatSpace())
            return null;
          if (state.extenStart) {
            stream.eatWhile(/[^\s]/);
            cur = stream.current();
            if (/^=>?$/.test(cur)) {
              state.extenExten = true;
              state.extenStart = false;
              return "strong";
            } else {
              state.extenStart = false;
              stream.skipToEnd();
              return "error";
            }
          } else if (state.extenExten) {
            state.extenExten = false;
            state.extenPriority = true;
            stream.eatWhile(/[^,]/);
            if (state.extenInclude) {
              stream.skipToEnd();
              state.extenPriority = false;
              state.extenInclude = false;
            }
            if (state.extenSame) {
              state.extenPriority = false;
              state.extenSame = false;
              state.extenApplication = true;
            }
            return "tag";
          } else if (state.extenPriority) {
            state.extenPriority = false;
            state.extenApplication = true;
            stream.next();
            if (state.extenSame)
              return null;
            stream.eatWhile(/[^,]/);
            return "number";
          } else if (state.extenApplication) {
            stream.eatWhile(/,/);
            cur = stream.current();
            if (cur === ",")
              return null;
            stream.eatWhile(/\w/);
            cur = stream.current().toLowerCase();
            state.extenApplication = false;
            if (apps.indexOf(cur) !== -1) {
              return "def";
            }
          } else {
            return basicToken(stream, state);
          }
          return null;
        },
        languageData: {
          commentTokens: { line: ";", block: { open: ";--", close: "--;" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/brainfuck.js
  var brainfuck_exports = {};
  __export(brainfuck_exports, {
    brainfuck: () => brainfuck
  });
  var reserve, brainfuck;
  var init_brainfuck = __esm({
    "node_modules/@codemirror/legacy-modes/mode/brainfuck.js"() {
      reserve = "><+-.,[]".split("");
      brainfuck = {
        name: "brainfuck",
        startState: function() {
          return {
            commentLine: false,
            left: 0,
            right: 0,
            commentLoop: false
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          if (stream.sol()) {
            state.commentLine = false;
          }
          var ch2 = stream.next().toString();
          if (reserve.indexOf(ch2) !== -1) {
            if (state.commentLine === true) {
              if (stream.eol()) {
                state.commentLine = false;
              }
              return "comment";
            }
            if (ch2 === "]" || ch2 === "[") {
              if (ch2 === "[") {
                state.left++;
              } else {
                state.right++;
              }
              return "bracket";
            } else if (ch2 === "+" || ch2 === "-") {
              return "keyword";
            } else if (ch2 === "<" || ch2 === ">") {
              return "atom";
            } else if (ch2 === "." || ch2 === ",") {
              return "def";
            }
          } else {
            state.commentLine = true;
            if (stream.eol()) {
              state.commentLine = false;
            }
            return "comment";
          }
          if (stream.eol()) {
            state.commentLine = false;
          }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/cobol.js
  var cobol_exports = {};
  __export(cobol_exports, {
    cobol: () => cobol
  });
  function makeKeywords(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function isNumber2(ch2, stream) {
    if (ch2 === "0" && stream.eat(/x/i)) {
      stream.eatWhile(tests.hex);
      return true;
    }
    if ((ch2 == "+" || ch2 == "-") && tests.digit.test(stream.peek())) {
      stream.eat(tests.sign);
      ch2 = stream.next();
    }
    if (tests.digit.test(ch2)) {
      stream.eat(ch2);
      stream.eatWhile(tests.digit);
      if ("." == stream.peek()) {
        stream.eat(".");
        stream.eatWhile(tests.digit);
      }
      if (stream.eat(tests.exponent)) {
        stream.eat(tests.sign);
        stream.eatWhile(tests.digit);
      }
      return true;
    }
    return false;
  }
  var BUILTIN, COMMENT, STRING, ATOM, NUMBER, KEYWORD, MODTAG, COBOLLINENUM, PERIOD, atoms2, keywords4, builtins, tests, cobol;
  var init_cobol = __esm({
    "node_modules/@codemirror/legacy-modes/mode/cobol.js"() {
      BUILTIN = "builtin";
      COMMENT = "comment";
      STRING = "string";
      ATOM = "atom";
      NUMBER = "number";
      KEYWORD = "keyword";
      MODTAG = "header";
      COBOLLINENUM = "def";
      PERIOD = "link";
      atoms2 = makeKeywords("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ");
      keywords4 = makeKeywords(
        "ACCEPT ACCESS ACQUIRE ADD ADDRESS ADVANCING AFTER ALIAS ALL ALPHABET ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED ALSO ALTER ALTERNATE AND ANY ARE AREA AREAS ARITHMETIC ASCENDING ASSIGN AT ATTRIBUTE AUTHOR AUTO AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP BEFORE BELL BINARY BIT BITS BLANK BLINK BLOCK BOOLEAN BOTTOM BY CALL CANCEL CD CF CH CHARACTER CHARACTERS CLASS CLOCK-UNITS CLOSE COBOL CODE CODE-SET COL COLLATING COLUMN COMMA COMMIT COMMITMENT COMMON COMMUNICATION COMP COMP-0 COMP-1 COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS CONVERTING COPY CORR CORRESPONDING COUNT CRT CRT-UNDER CURRENCY CURRENT CURSOR DATA DATE DATE-COMPILED DATE-WRITTEN DAY DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION DOWN DROP DUPLICATE DUPLICATES DYNAMIC EBCDIC EGI EJECT ELSE EMI EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT END-UNSTRING END-WRITE END-XML ENTER ENTRY ENVIRONMENT EOP EQUAL EQUALS ERASE ERROR ESI EVALUATE EVERY EXCEEDS EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL FILE-STREAM FILES FILLER FINAL FIND FINISH FIRST FOOTING FOR FOREGROUND-COLOR FOREGROUND-COLOUR FORMAT FREE FROM FULL FUNCTION GENERATE GET GIVING GLOBAL GO GOBACK GREATER GROUP HEADING HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL ID IDENTIFICATION IF IN INDEX INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED INDIC INDICATE INDICATOR INDICATORS INITIAL INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT INSTALLATION INTO INVALID INVOKE IS JUST JUSTIFIED KANJI KEEP KEY LABEL LAST LD LEADING LEFT LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE LOCALE LOCALLY LOCK MEMBER MEMORY MERGE MESSAGE METACLASS MODE MODIFIED MODIFY MODULES MOVE MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE NEXT NO NO-ECHO NONE NOT NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS OF OFF OMITTED ON ONLY OPEN OPTIONAL OR ORDER ORGANIZATION OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL PADDING PAGE PAGE-COUNTER PARSE PERFORM PF PH PIC PICTURE PLUS POINTER POSITION POSITIVE PREFIX PRESENT PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID PROMPT PROTECTED PURGE QUEUE QUOTE QUOTES RANDOM RD READ READY REALM RECEIVE RECONNECT RECORD RECORD-NAME RECORDS RECURSIVE REDEFINES REEL REFERENCE REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE REMAINDER REMOVAL RENAMES REPEATED REPLACE REPLACING REPORT REPORTING REPORTS REPOSITORY REQUIRED RERUN RESERVE RESET RETAINING RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO REVERSED REWIND REWRITE RF RH RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED RUN SAME SCREEN SD SEARCH SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT SELECT SEND SENTENCE SEPARATE SEQUENCE SEQUENTIAL SET SHARED SIGN SIZE SKIP1 SKIP2 SKIP3 SORT SORT-MERGE SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 START STARTING STATUS STOP STORE STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT TABLE TALLYING TAPE TENANT TERMINAL TERMINATE TEST TEXT THAN THEN THROUGH THRU TIME TIMES TITLE TO TOP TRAILING TRAILING-SIGN TRANSACTION TYPE TYPEDEF UNDERLINE UNEQUAL UNIT UNSTRING UNTIL UP UPDATE UPON USAGE USAGE-MODE USE USING VALID VALIDATE VALUE VALUES VARYING VLR WAIT WHEN WHEN-COMPILED WITH WITHIN WORDS WORKING-STORAGE WRITE XML XML-CODE XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL "
      );
      builtins = makeKeywords("- * ** / + < <= = > >= ");
      tests = {
        digit: /\d/,
        digit_or_colon: /[\d:]/,
        hex: /[0-9a-f]/i,
        sign: /[+-]/,
        exponent: /e/i,
        keyword_char: /[^\s\(\[\;\)\]]/,
        symbol: /[\w*+\-]/
      };
      cobol = {
        name: "cobol",
        startState: function() {
          return {
            indentStack: null,
            indentation: 0,
            mode: false
          };
        },
        token: function(stream, state) {
          if (state.indentStack == null && stream.sol()) {
            state.indentation = 6;
          }
          if (stream.eatSpace()) {
            return null;
          }
          var returnType = null;
          switch (state.mode) {
            case "string":
              var next2 = false;
              while ((next2 = stream.next()) != null) {
                if ((next2 == '"' || next2 == "'") && !stream.match(/['"]/, false)) {
                  state.mode = false;
                  break;
                }
              }
              returnType = STRING;
              break;
            default:
              var ch2 = stream.next();
              var col = stream.column();
              if (col >= 0 && col <= 5) {
                returnType = COBOLLINENUM;
              } else if (col >= 72 && col <= 79) {
                stream.skipToEnd();
                returnType = MODTAG;
              } else if (ch2 == "*" && col == 6) {
                stream.skipToEnd();
                returnType = COMMENT;
              } else if (ch2 == '"' || ch2 == "'") {
                state.mode = "string";
                returnType = STRING;
              } else if (ch2 == "'" && !tests.digit_or_colon.test(stream.peek())) {
                returnType = ATOM;
              } else if (ch2 == ".") {
                returnType = PERIOD;
              } else if (isNumber2(ch2, stream)) {
                returnType = NUMBER;
              } else {
                if (stream.current().match(tests.symbol)) {
                  while (col < 71) {
                    if (stream.eat(tests.symbol) === void 0) {
                      break;
                    } else {
                      col++;
                    }
                  }
                }
                if (keywords4 && keywords4.propertyIsEnumerable(stream.current().toUpperCase())) {
                  returnType = KEYWORD;
                } else if (builtins && builtins.propertyIsEnumerable(stream.current().toUpperCase())) {
                  returnType = BUILTIN;
                } else if (atoms2 && atoms2.propertyIsEnumerable(stream.current().toUpperCase())) {
                  returnType = ATOM;
                } else
                  returnType = null;
              }
          }
          return returnType;
        },
        indent: function(state) {
          if (state.indentStack == null)
            return state.indentation;
          return state.indentStack.indent;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/clike.js
  var clike_exports = {};
  __export(clike_exports, {
    c: () => c,
    ceylon: () => ceylon,
    clike: () => clike,
    cpp: () => cpp2,
    csharp: () => csharp,
    dart: () => dart,
    java: () => java2,
    kotlin: () => kotlin,
    nesC: () => nesC,
    objectiveC: () => objectiveC,
    objectiveCpp: () => objectiveCpp,
    scala: () => scala,
    shader: () => shader,
    squirrel: () => squirrel
  });
  function Context2(indented, column, type7, info, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.info = info;
    this.align = align;
    this.prev = prev;
  }
  function pushContext(state, col, type7, info) {
    var indent5 = state.indented;
    if (state.context && state.context.type == "statement" && type7 != "statement")
      indent5 = state.context.indented;
    return state.context = new Context2(indent5, col, type7, info, null, state.context);
  }
  function popContext(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  function typeBefore(stream, state, pos) {
    if (state.prevToken == "variable" || state.prevToken == "type")
      return true;
    if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos)))
      return true;
    if (state.typeAtEndOfLine && stream.column() == stream.indentation())
      return true;
  }
  function isTopScope(context) {
    for (; ; ) {
      if (!context || context.type == "top")
        return true;
      if (context.type == "}" && context.prev.info != "namespace")
        return false;
      context = context.prev;
    }
  }
  function clike(parserConfig4) {
    var statementIndentUnit2 = parserConfig4.statementIndentUnit, dontAlignCalls = parserConfig4.dontAlignCalls, keywords47 = parserConfig4.keywords || {}, types8 = parserConfig4.types || {}, builtin5 = parserConfig4.builtin || {}, blockKeywords6 = parserConfig4.blockKeywords || {}, defKeywords = parserConfig4.defKeywords || {}, atoms17 = parserConfig4.atoms || {}, hooks4 = parserConfig4.hooks || {}, multiLineStrings5 = parserConfig4.multiLineStrings, indentStatements3 = parserConfig4.indentStatements !== false, indentSwitch = parserConfig4.indentSwitch !== false, namespaceSeparator = parserConfig4.namespaceSeparator, isPunctuationChar = parserConfig4.isPunctuationChar || /[\[\]{}\(\),;\:\.]/, numberStart = parserConfig4.numberStart || /[\d\.]/, number3 = parserConfig4.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i, isOperatorChar16 = parserConfig4.isOperatorChar || /[+\-*&%=<>!?|\/]/, isIdentifierChar = parserConfig4.isIdentifierChar || /[\w\$_\xa1-\uffff]/, isReservedIdentifier = parserConfig4.isReservedIdentifier || false;
    var curPunc14, isDefKeyword;
    function tokenBase48(stream, state) {
      var ch2 = stream.next();
      if (hooks4[ch2]) {
        var result = hooks4[ch2](stream, state);
        if (result !== false)
          return result;
      }
      if (ch2 == '"' || ch2 == "'") {
        state.tokenize = tokenString30(ch2);
        return state.tokenize(stream, state);
      }
      if (numberStart.test(ch2)) {
        stream.backUp(1);
        if (stream.match(number3))
          return "number";
        stream.next();
      }
      if (isPunctuationChar.test(ch2)) {
        curPunc14 = ch2;
        return null;
      }
      if (ch2 == "/") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment21;
          return tokenComment21(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
      }
      if (isOperatorChar16.test(ch2)) {
        while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar16)) {
        }
        return "operator";
      }
      stream.eatWhile(isIdentifierChar);
      if (namespaceSeparator)
        while (stream.match(namespaceSeparator))
          stream.eatWhile(isIdentifierChar);
      var cur = stream.current();
      if (contains2(keywords47, cur)) {
        if (contains2(blockKeywords6, cur))
          curPunc14 = "newstatement";
        if (contains2(defKeywords, cur))
          isDefKeyword = true;
        return "keyword";
      }
      if (contains2(types8, cur))
        return "type";
      if (contains2(builtin5, cur) || isReservedIdentifier && isReservedIdentifier(cur)) {
        if (contains2(blockKeywords6, cur))
          curPunc14 = "newstatement";
        return "builtin";
      }
      if (contains2(atoms17, cur))
        return "atom";
      return "variable";
    }
    function tokenString30(quote2) {
      return function(stream, state) {
        var escaped = false, next2, end2 = false;
        while ((next2 = stream.next()) != null) {
          if (next2 == quote2 && !escaped) {
            end2 = true;
            break;
          }
          escaped = !escaped && next2 == "\\";
        }
        if (end2 || !(escaped || multiLineStrings5))
          state.tokenize = null;
        return "string";
      };
    }
    function tokenComment21(stream, state) {
      var maybeEnd = false, ch2;
      while (ch2 = stream.next()) {
        if (ch2 == "/" && maybeEnd) {
          state.tokenize = null;
          break;
        }
        maybeEnd = ch2 == "*";
      }
      return "comment";
    }
    function maybeEOL(stream, state) {
      if (parserConfig4.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
        state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
    }
    return {
      name: parserConfig4.name,
      startState: function(indentUnit2) {
        return {
          tokenize: null,
          context: new Context2(-indentUnit2, 0, "top", null, false),
          indented: 0,
          startOfLine: true,
          prevToken: null
        };
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null)
            ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (stream.eatSpace()) {
          maybeEOL(stream, state);
          return null;
        }
        curPunc14 = isDefKeyword = null;
        var style2 = (state.tokenize || tokenBase48)(stream, state);
        if (style2 == "comment" || style2 == "meta")
          return style2;
        if (ctx.align == null)
          ctx.align = true;
        if (curPunc14 == ";" || curPunc14 == ":" || curPunc14 == "," && stream.match(/^\s*(?:\/\/.*)?$/, false))
          while (state.context.type == "statement")
            popContext(state);
        else if (curPunc14 == "{")
          pushContext(state, stream.column(), "}");
        else if (curPunc14 == "[")
          pushContext(state, stream.column(), "]");
        else if (curPunc14 == "(")
          pushContext(state, stream.column(), ")");
        else if (curPunc14 == "}") {
          while (ctx.type == "statement")
            ctx = popContext(state);
          if (ctx.type == "}")
            ctx = popContext(state);
          while (ctx.type == "statement")
            ctx = popContext(state);
        } else if (curPunc14 == ctx.type)
          popContext(state);
        else if (indentStatements3 && ((ctx.type == "}" || ctx.type == "top") && curPunc14 != ";" || ctx.type == "statement" && curPunc14 == "newstatement")) {
          pushContext(state, stream.column(), "statement", stream.current());
        }
        if (style2 == "variable" && (state.prevToken == "def" || parserConfig4.typeFirstDefinitions && typeBefore(stream, state, stream.start) && isTopScope(state.context) && stream.match(/^\s*\(/, false)))
          style2 = "def";
        if (hooks4.token) {
          var result = hooks4.token(stream, state, style2);
          if (result !== void 0)
            style2 = result;
        }
        if (style2 == "def" && parserConfig4.styleDefs === false)
          style2 = "variable";
        state.startOfLine = false;
        state.prevToken = isDefKeyword ? "def" : style2 || curPunc14;
        maybeEOL(stream, state);
        return style2;
      },
      indent: function(state, textAfter, context) {
        if (state.tokenize != tokenBase48 && state.tokenize != null || state.typeAtEndOfLine)
          return null;
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        var closing3 = firstChar == ctx.type;
        if (ctx.type == "statement" && firstChar == "}")
          ctx = ctx.prev;
        if (parserConfig4.dontIndentStatements)
          while (ctx.type == "statement" && parserConfig4.dontIndentStatements.test(ctx.info))
            ctx = ctx.prev;
        if (hooks4.indent) {
          var hook = hooks4.indent(state, ctx, textAfter, context.unit);
          if (typeof hook == "number")
            return hook;
        }
        var switchBlock = ctx.prev && ctx.prev.info == "switch";
        if (parserConfig4.allmanIndentation && /[{(]/.test(firstChar)) {
          while (ctx.type != "top" && ctx.type != "}")
            ctx = ctx.prev;
          return ctx.indented;
        }
        if (ctx.type == "statement")
          return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit2 || context.unit);
        if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
          return ctx.column + (closing3 ? 0 : 1);
        if (ctx.type == ")" && !closing3)
          return ctx.indented + (statementIndentUnit2 || context.unit);
        return ctx.indented + (closing3 ? 0 : context.unit) + (!closing3 && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? context.unit : 0);
      },
      languageData: {
        indentOnInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
        autocomplete: Object.keys(keywords47).concat(Object.keys(types8)).concat(Object.keys(builtin5)).concat(Object.keys(atoms17)),
        ...parserConfig4.languageData
      }
    };
  }
  function words2(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function contains2(words22, word2) {
    if (typeof words22 === "function") {
      return words22(word2);
    } else {
      return words22.propertyIsEnumerable(word2);
    }
  }
  function cTypes(identifier6) {
    return contains2(basicCTypes, identifier6) || /.+_t$/.test(identifier6);
  }
  function objCTypes(identifier6) {
    return cTypes(identifier6) || contains2(basicObjCTypes, identifier6);
  }
  function cppHook(stream, state) {
    if (!state.startOfLine)
      return false;
    for (var ch2, next2 = null; ch2 = stream.peek(); ) {
      if (ch2 == "\\" && stream.match(/^.$/)) {
        next2 = cppHook;
        break;
      } else if (ch2 == "/" && stream.match(/^\/[\/\*]/, false)) {
        break;
      }
      stream.next();
    }
    state.tokenize = next2;
    return "meta";
  }
  function pointerHook(_stream, state) {
    if (state.prevToken == "type")
      return "type";
    return false;
  }
  function cIsReservedIdentifier(token) {
    if (!token || token.length < 2)
      return false;
    if (token[0] != "_")
      return false;
    return token[1] == "_" || token[1] !== token[1].toLowerCase();
  }
  function cpp14Literal(stream) {
    stream.eatWhile(/[\w\.']/);
    return "number";
  }
  function cpp11StringHook(stream, state) {
    stream.backUp(1);
    if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
      var match3 = stream.match(/^"([^\s\\()]{0,16})\(/);
      if (!match3) {
        return false;
      }
      state.cpp11RawStringDelim = match3[1];
      state.tokenize = tokenRawString;
      return tokenRawString(stream, state);
    }
    if (stream.match(/^(?:u8|u|U|L)/)) {
      if (stream.match(
        /^["']/,
        /* eat */
        false
      )) {
        return "string";
      }
      return false;
    }
    stream.next();
    return false;
  }
  function cppLooksLikeConstructor(word2) {
    var lastTwo = /(\w+)::~?(\w+)$/.exec(word2);
    return lastTwo && lastTwo[1] == lastTwo[2];
  }
  function tokenAtString(stream, state) {
    var next2;
    while ((next2 = stream.next()) != null) {
      if (next2 == '"' && !stream.eat('"')) {
        state.tokenize = null;
        break;
      }
    }
    return "string";
  }
  function tokenRawString(stream, state) {
    var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, "\\$&");
    var match3 = stream.match(new RegExp(".*?\\)" + delim + '"'));
    if (match3)
      state.tokenize = null;
    else
      stream.skipToEnd();
    return "string";
  }
  function tokenTripleString(stream, state) {
    var escaped = false;
    while (!stream.eol()) {
      if (!escaped && stream.match('"""')) {
        state.tokenize = null;
        break;
      }
      escaped = stream.next() == "\\" && !escaped;
    }
    return "string";
  }
  function tokenNestedComment(depth) {
    return function(stream, state) {
      var ch2;
      while (ch2 = stream.next()) {
        if (ch2 == "*" && stream.eat("/")) {
          if (depth == 1) {
            state.tokenize = null;
            break;
          } else {
            state.tokenize = tokenNestedComment(depth - 1);
            return state.tokenize(stream, state);
          }
        } else if (ch2 == "/" && stream.eat("*")) {
          state.tokenize = tokenNestedComment(depth + 1);
          return state.tokenize(stream, state);
        }
      }
      return "comment";
    };
  }
  function tokenKotlinString(tripleString) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while (!stream.eol()) {
        if (!tripleString && !escaped && stream.match('"')) {
          end2 = true;
          break;
        }
        if (tripleString && stream.match('"""')) {
          end2 = true;
          break;
        }
        next2 = stream.next();
        if (!escaped && next2 == "$" && stream.match("{"))
          stream.skipTo("}");
        escaped = !escaped && next2 == "\\" && !tripleString;
      }
      if (end2 || !tripleString)
        state.tokenize = null;
      return "string";
    };
  }
  function tokenCeylonString(type7) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while (!stream.eol()) {
        if (!escaped && stream.match('"') && (type7 == "single" || stream.match('""'))) {
          end2 = true;
          break;
        }
        if (!escaped && stream.match("``")) {
          stringTokenizer = tokenCeylonString(type7);
          end2 = true;
          break;
        }
        next2 = stream.next();
        escaped = type7 == "single" && !escaped && next2 == "\\";
      }
      if (end2)
        state.tokenize = null;
      return "string";
    };
  }
  function pushInterpolationStack(state) {
    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
  }
  function popInterpolationStack(state) {
    return (state.interpolationStack || (state.interpolationStack = [])).pop();
  }
  function sizeInterpolationStack(state) {
    return state.interpolationStack ? state.interpolationStack.length : 0;
  }
  function tokenDartString(quote2, stream, state, raw) {
    var tripleQuoted = false;
    if (stream.eat(quote2)) {
      if (stream.eat(quote2))
        tripleQuoted = true;
      else
        return "string";
    }
    function tokenStringHelper(stream2, state2) {
      var escaped = false;
      while (!stream2.eol()) {
        if (!raw && !escaped && stream2.peek() == "$") {
          pushInterpolationStack(state2);
          state2.tokenize = tokenInterpolation;
          return "string";
        }
        var next2 = stream2.next();
        if (next2 == quote2 && !escaped && (!tripleQuoted || stream2.match(quote2 + quote2))) {
          state2.tokenize = null;
          break;
        }
        escaped = !raw && !escaped && next2 == "\\";
      }
      return "string";
    }
    state.tokenize = tokenStringHelper;
    return tokenStringHelper(stream, state);
  }
  function tokenInterpolation(stream, state) {
    stream.eat("$");
    if (stream.eat("{")) {
      state.tokenize = null;
    } else {
      state.tokenize = tokenInterpolationIdentifier;
    }
    return null;
  }
  function tokenInterpolationIdentifier(stream, state) {
    stream.eatWhile(/[\w_]/);
    state.tokenize = popInterpolationStack(state);
    return "variable";
  }
  var cKeywords, cppKeywords, objCKeywords, objCBuiltins, basicCTypes, basicObjCTypes, cBlockKeywords, cDefKeywords, c, cpp2, java2, csharp, scala, kotlin, shader, nesC, objectiveC, objectiveCpp, squirrel, stringTokenizer, ceylon, dart;
  var init_clike = __esm({
    "node_modules/@codemirror/legacy-modes/mode/clike.js"() {
      cKeywords = "auto if break case register continue return default do sizeof static else struct switch extern typedef union for goto while enum const volatile inline restrict asm fortran";
      cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch class compl concept constexpr const_cast decltype delete dynamic_cast explicit export final friend import module mutable namespace new noexcept not not_eq operator or or_eq override private protected public reinterpret_cast requires static_assert static_cast template this thread_local throw try typeid typename using virtual xor xor_eq";
      objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd @interface @implementation @end @protocol @encode @property @synthesize @dynamic @class @public @package @private @protected @required @optional @try @catch @finally @import @selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";
      objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION  NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";
      basicCTypes = words2("int long char short double float unsigned signed void bool");
      basicObjCTypes = words2("SEL instancetype id Class Protocol BOOL");
      cBlockKeywords = "case do else for if switch while struct enum union";
      cDefKeywords = "struct enum union";
      c = clike({
        name: "c",
        keywords: words2(cKeywords),
        types: cTypes,
        blockKeywords: words2(cBlockKeywords),
        defKeywords: words2(cDefKeywords),
        typeFirstDefinitions: true,
        atoms: words2("NULL true false"),
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook
        }
      });
      cpp2 = clike({
        name: "cpp",
        keywords: words2(cKeywords + " " + cppKeywords),
        types: cTypes,
        blockKeywords: words2(cBlockKeywords + " class try catch"),
        defKeywords: words2(cDefKeywords + " class namespace"),
        typeFirstDefinitions: true,
        atoms: words2("true false NULL nullptr"),
        dontIndentStatements: /^template$/,
        isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook,
          "u": cpp11StringHook,
          "U": cpp11StringHook,
          "L": cpp11StringHook,
          "R": cpp11StringHook,
          "0": cpp14Literal,
          "1": cpp14Literal,
          "2": cpp14Literal,
          "3": cpp14Literal,
          "4": cpp14Literal,
          "5": cpp14Literal,
          "6": cpp14Literal,
          "7": cpp14Literal,
          "8": cpp14Literal,
          "9": cpp14Literal,
          token: function(stream, state, style2) {
            if (style2 == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
              return "def";
          }
        },
        namespaceSeparator: "::"
      });
      java2 = clike({
        name: "java",
        keywords: words2("abstract assert break case catch class const continue default do else enum extends final finally for goto if implements import instanceof interface native new package private protected public return static strictfp super switch synchronized this throw throws transient try volatile while @interface"),
        types: words2("var byte short int long float double boolean char void Boolean Byte Character Double Float Integer Long Number Object Short String StringBuffer StringBuilder Void"),
        blockKeywords: words2("catch class do else finally for if switch try while"),
        defKeywords: words2("class interface enum @interface"),
        typeFirstDefinitions: true,
        atoms: words2("true false null"),
        number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
        hooks: {
          "@": function(stream) {
            if (stream.match("interface", false))
              return false;
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          '"': function(stream, state) {
            if (!stream.match(/""$/))
              return false;
            state.tokenize = tokenTripleString;
            return state.tokenize(stream, state);
          }
        }
      });
      csharp = clike({
        name: "csharp",
        keywords: words2("abstract as async await base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in interface internal is lock namespace new operator out override params private protected public readonly ref return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),
        types: words2("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),
        blockKeywords: words2("catch class do else finally for foreach if struct switch try while"),
        defKeywords: words2("class interface namespace struct var"),
        typeFirstDefinitions: true,
        atoms: words2("true false null"),
        hooks: {
          "@": function(stream, state) {
            if (stream.eat('"')) {
              state.tokenize = tokenAtString;
              return tokenAtString(stream, state);
            }
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          }
        }
      });
      scala = clike({
        name: "scala",
        keywords: words2(
          /* scala */
          "abstract case catch class def do else extends final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try type val var while with yield _ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble"
        ),
        types: words2(
          "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
        ),
        multiLineStrings: true,
        blockKeywords: words2("catch class enum do else finally for forSome if match switch try while"),
        defKeywords: words2("class enum def object package trait type val var"),
        atoms: words2("true false null"),
        indentStatements: false,
        indentSwitch: false,
        isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          '"': function(stream, state) {
            if (!stream.match('""'))
              return false;
            state.tokenize = tokenTripleString;
            return state.tokenize(stream, state);
          },
          "'": function(stream) {
            if (stream.match(/^(\\[^'\s]+|[^\\'])'/))
              return "character";
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            return "atom";
          },
          "=": function(stream, state) {
            var cx2 = state.context;
            if (cx2.type == "}" && cx2.align && stream.eat(">")) {
              state.context = new Context2(cx2.indented, cx2.column, cx2.type, cx2.info, null, cx2.prev);
              return "operator";
            } else {
              return false;
            }
          },
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenNestedComment(1);
            return state.tokenize(stream, state);
          }
        },
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
        }
      });
      kotlin = clike({
        name: "kotlin",
        keywords: words2(
          /*keywords*/
          "package as typealias class interface this super val operator var fun for is in This throw return annotation break continue object if else while do try when !in !is as? file import where by get set abstract enum open inner override private public internal protected catch finally out final vararg reified dynamic companion constructor init sealed field property receiver param sparam lateinit data inline noinline tailrec external annotation crossinline const operator infix suspend actual expect setparam"
        ),
        types: words2(
          /* package java.lang */
          "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
        ),
        intendSwitch: false,
        indentStatements: false,
        multiLineStrings: true,
        number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
        blockKeywords: words2("catch class do else finally for if where try while enum"),
        defKeywords: words2("class val var object interface fun"),
        atoms: words2("true false null this"),
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          "*": function(_stream, state) {
            return state.prevToken == "." ? "variable" : "operator";
          },
          '"': function(stream, state) {
            state.tokenize = tokenKotlinString(stream.match('""'));
            return state.tokenize(stream, state);
          },
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenNestedComment(1);
            return state.tokenize(stream, state);
          },
          indent: function(state, ctx, textAfter, indentUnit2) {
            var firstChar = textAfter && textAfter.charAt(0);
            if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
              return state.indented;
            if (state.prevToken == "operator" && textAfter != "}" && state.context.type != "}" || state.prevToken == "variable" && firstChar == "." || (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
              return indentUnit2 * 2 + ctx.indented;
            if (ctx.align && ctx.type == "}")
              return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit2);
          }
        },
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
        }
      });
      shader = clike({
        name: "shader",
        keywords: words2("sampler1D sampler2D sampler3D samplerCube sampler1DShadow sampler2DShadow const attribute uniform varying break continue discard return for while do if else struct in out inout"),
        types: words2("float int bool void vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 mat2 mat3 mat4"),
        blockKeywords: words2("for while do if else struct"),
        builtin: words2("radians degrees sin cos tan asin acos atan pow exp log exp2 sqrt inversesqrt abs sign floor ceil fract mod min max clamp mix step smoothstep length distance dot cross normalize ftransform faceforward reflect refract matrixCompMult lessThan lessThanEqual greaterThan greaterThanEqual equal notEqual any all not texture1D texture1DProj texture1DLod texture1DProjLod texture2D texture2DProj texture2DLod texture2DProjLod texture3D texture3DProj texture3DLod texture3DProjLod textureCube textureCubeLod shadow1D shadow2D shadow1DProj shadow2DProj shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod dFdx dFdy fwidth noise1 noise2 noise3 noise4"),
        atoms: words2("true false gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_FogCoord gl_PointCoord gl_Position gl_PointSize gl_ClipVertex gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor gl_TexCoord gl_FogFragCoord gl_FragCoord gl_FrontFacing gl_FragData gl_FragDepth gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose gl_ProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixInverseTranspose gl_TextureMatrixInverseTranspose gl_NormalScale gl_DepthRange gl_ClipPlane gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel gl_FrontLightModelProduct gl_BackLightModelProduct gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ gl_FogParameters gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits gl_MaxDrawBuffers"),
        indentSwitch: false,
        hooks: { "#": cppHook }
      });
      nesC = clike({
        name: "nesc",
        keywords: words2(cKeywords + " as atomic async call command component components configuration event generic implementation includes interface module new norace nx_struct nx_union post provides signal task uses abstract extends"),
        types: cTypes,
        blockKeywords: words2(cBlockKeywords),
        atoms: words2("null true false"),
        hooks: { "#": cppHook }
      });
      objectiveC = clike({
        name: "objectivec",
        keywords: words2(cKeywords + " " + objCKeywords),
        types: objCTypes,
        builtin: words2(objCBuiltins),
        blockKeywords: words2(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
        defKeywords: words2(cDefKeywords + " @interface @implementation @protocol @class"),
        dontIndentStatements: /^@.*$/,
        typeFirstDefinitions: true,
        atoms: words2("YES NO NULL Nil nil true false nullptr"),
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook
        }
      });
      objectiveCpp = clike({
        name: "objectivecpp",
        keywords: words2(cKeywords + " " + objCKeywords + " " + cppKeywords),
        types: objCTypes,
        builtin: words2(objCBuiltins),
        blockKeywords: words2(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
        defKeywords: words2(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
        dontIndentStatements: /^@.*$|^template$/,
        typeFirstDefinitions: true,
        atoms: words2("YES NO NULL Nil nil true false nullptr"),
        isReservedIdentifier: cIsReservedIdentifier,
        hooks: {
          "#": cppHook,
          "*": pointerHook,
          "u": cpp11StringHook,
          "U": cpp11StringHook,
          "L": cpp11StringHook,
          "R": cpp11StringHook,
          "0": cpp14Literal,
          "1": cpp14Literal,
          "2": cpp14Literal,
          "3": cpp14Literal,
          "4": cpp14Literal,
          "5": cpp14Literal,
          "6": cpp14Literal,
          "7": cpp14Literal,
          "8": cpp14Literal,
          "9": cpp14Literal,
          token: function(stream, state, style2) {
            if (style2 == "variable" && stream.peek() == "(" && (state.prevToken == ";" || state.prevToken == null || state.prevToken == "}") && cppLooksLikeConstructor(stream.current()))
              return "def";
          }
        },
        namespaceSeparator: "::"
      });
      squirrel = clike({
        name: "squirrel",
        keywords: words2("base break clone continue const default delete enum extends function in class foreach local resume return this throw typeof yield constructor instanceof static"),
        types: cTypes,
        blockKeywords: words2("case catch class else for foreach if switch try while"),
        defKeywords: words2("function local class"),
        typeFirstDefinitions: true,
        atoms: words2("true false null"),
        hooks: { "#": cppHook }
      });
      stringTokenizer = null;
      ceylon = clike({
        name: "ceylon",
        keywords: words2("abstracts alias assembly assert assign break case catch class continue dynamic else exists extends finally for function given if import in interface is let module new nonempty object of out outer package return satisfies super switch then this throw try value void while"),
        types: function(word2) {
          var first = word2.charAt(0);
          return first === first.toUpperCase() && first !== first.toLowerCase();
        },
        blockKeywords: words2("case catch class dynamic else finally for function if interface module new object switch try while"),
        defKeywords: words2("class dynamic function interface module object package value"),
        builtin: words2("abstract actual aliased annotation by default deprecated doc final formal late license native optional sealed see serializable shared suppressWarnings tagged throws variable"),
        isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
        isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
        numberStart: /[\d#$]/,
        number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
        multiLineStrings: true,
        typeFirstDefinitions: true,
        atoms: words2("true false null larger smaller equal empty finished"),
        indentSwitch: false,
        styleDefs: false,
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          },
          '"': function(stream, state) {
            state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
            return state.tokenize(stream, state);
          },
          "`": function(stream, state) {
            if (!stringTokenizer || !stream.match("`"))
              return false;
            state.tokenize = stringTokenizer;
            stringTokenizer = null;
            return state.tokenize(stream, state);
          },
          "'": function(stream) {
            stream.eatWhile(/[\w\$_\xa1-\uffff]/);
            return "atom";
          },
          token: function(_stream, state, style2) {
            if ((style2 == "variable" || style2 == "type") && state.prevToken == ".") {
              return "variableName.special";
            }
          }
        },
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', '"""'] }
        }
      });
      dart = clike({
        name: "dart",
        keywords: words2("this super static final const abstract class extends external factory implements mixin get native set typedef with enum throw rethrow assert break case continue default in return new deferred async await covariant try catch finally do else for if switch while import library export part of show hide is as extension on yield late required"),
        blockKeywords: words2("try catch finally do else for if switch while"),
        builtin: words2("void bool num int double dynamic var String Null Never"),
        atoms: words2("true false null"),
        hooks: {
          "@": function(stream) {
            stream.eatWhile(/[\w\$_\.]/);
            return "meta";
          },
          // custom string handling to deal with triple-quoted strings and string interpolation
          "'": function(stream, state) {
            return tokenDartString("'", stream, state, false);
          },
          '"': function(stream, state) {
            return tokenDartString('"', stream, state, false);
          },
          "r": function(stream, state) {
            var peek = stream.peek();
            if (peek == "'" || peek == '"') {
              return tokenDartString(stream.next(), stream, state, true);
            }
            return false;
          },
          "}": function(_stream, state) {
            if (sizeInterpolationStack(state) > 0) {
              state.tokenize = popInterpolationStack(state);
              return null;
            }
            return false;
          },
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenNestedComment(1);
            return state.tokenize(stream, state);
          },
          token: function(stream, _, style2) {
            if (style2 == "variable") {
              var isUpper = RegExp("^[_$]*[A-Z][a-zA-Z0-9_$]*$", "g");
              if (isUpper.test(stream.current())) {
                return "type";
              }
            }
          }
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/clojure.js
  var clojure_exports = {};
  __export(clojure_exports, {
    clojure: () => clojure
  });
  function base2(stream, state) {
    if (stream.eatSpace() || stream.eat(","))
      return ["space", null];
    if (stream.match(numberLiteral))
      return [null, "number"];
    if (stream.match(characterLiteral))
      return [null, "string.special"];
    if (stream.eat(/^"/))
      return (state.tokenize = inString2)(stream, state);
    if (stream.eat(/^[(\[{]/))
      return ["open", "bracket"];
    if (stream.eat(/^[)\]}]/))
      return ["close", "bracket"];
    if (stream.eat(/^;/)) {
      stream.skipToEnd();
      return ["space", "comment"];
    }
    if (stream.eat(/^[#'@^`~]/))
      return [null, "meta"];
    var matches = stream.match(qualifiedSymbol);
    var symbol4 = matches && matches[0];
    if (!symbol4) {
      stream.next();
      stream.eatWhile(function(c2) {
        return !is(c2, delimiter);
      });
      return [null, "error"];
    }
    if (symbol4 === "comment" && state.lastToken === "(")
      return (state.tokenize = inComment)(stream, state);
    if (is(symbol4, atom) || symbol4.charAt(0) === ":")
      return ["symbol", "atom"];
    if (is(symbol4, specialForm) || is(symbol4, coreSymbol))
      return ["symbol", "keyword"];
    if (state.lastToken === "(")
      return ["symbol", "builtin"];
    return ["symbol", "variable"];
  }
  function inString2(stream, state) {
    var escaped = false, next2;
    while (next2 = stream.next()) {
      if (next2 === '"' && !escaped) {
        state.tokenize = base2;
        break;
      }
      escaped = !escaped && next2 === "\\";
    }
    return [null, "string"];
  }
  function inComment(stream, state) {
    var parenthesisCount = 1;
    var next2;
    while (next2 = stream.next()) {
      if (next2 === ")")
        parenthesisCount--;
      if (next2 === "(")
        parenthesisCount++;
      if (parenthesisCount === 0) {
        stream.backUp(1);
        state.tokenize = base2;
        break;
      }
    }
    return ["space", "comment"];
  }
  function createLookupMap(words22) {
    var obj = {};
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function is(value, test) {
    if (test instanceof RegExp)
      return test.test(value);
    if (test instanceof Object)
      return test.propertyIsEnumerable(value);
  }
  var atoms3, specialForms, coreSymbols, haveBodyParameter, atom, specialForm, coreSymbol, hasBodyParameter, delimiter, numberLiteral, characterLiteral, qualifiedSymbol, clojure;
  var init_clojure = __esm({
    "node_modules/@codemirror/legacy-modes/mode/clojure.js"() {
      atoms3 = ["false", "nil", "true"];
      specialForms = [
        ".",
        "catch",
        "def",
        "do",
        "if",
        "monitor-enter",
        "monitor-exit",
        "new",
        "quote",
        "recur",
        "set!",
        "throw",
        "try",
        "var"
      ];
      coreSymbols = [
        "*",
        "*'",
        "*1",
        "*2",
        "*3",
        "*agent*",
        "*allow-unresolved-vars*",
        "*assert*",
        "*clojure-version*",
        "*command-line-args*",
        "*compile-files*",
        "*compile-path*",
        "*compiler-options*",
        "*data-readers*",
        "*default-data-reader-fn*",
        "*e",
        "*err*",
        "*file*",
        "*flush-on-newline*",
        "*fn-loader*",
        "*in*",
        "*math-context*",
        "*ns*",
        "*out*",
        "*print-dup*",
        "*print-length*",
        "*print-level*",
        "*print-meta*",
        "*print-namespace-maps*",
        "*print-readably*",
        "*read-eval*",
        "*reader-resolver*",
        "*source-path*",
        "*suppress-read*",
        "*unchecked-math*",
        "*use-context-classloader*",
        "*verbose-defrecords*",
        "*warn-on-reflection*",
        "+",
        "+'",
        "-",
        "-'",
        "->",
        "->>",
        "->ArrayChunk",
        "->Eduction",
        "->Vec",
        "->VecNode",
        "->VecSeq",
        "-cache-protocol-fn",
        "-reset-methods",
        "..",
        "/",
        "<",
        "<=",
        "=",
        "==",
        ">",
        ">=",
        "EMPTY-NODE",
        "Inst",
        "StackTraceElement->vec",
        "Throwable->map",
        "accessor",
        "aclone",
        "add-classpath",
        "add-watch",
        "agent",
        "agent-error",
        "agent-errors",
        "aget",
        "alength",
        "alias",
        "all-ns",
        "alter",
        "alter-meta!",
        "alter-var-root",
        "amap",
        "ancestors",
        "and",
        "any?",
        "apply",
        "areduce",
        "array-map",
        "as->",
        "aset",
        "aset-boolean",
        "aset-byte",
        "aset-char",
        "aset-double",
        "aset-float",
        "aset-int",
        "aset-long",
        "aset-short",
        "assert",
        "assoc",
        "assoc!",
        "assoc-in",
        "associative?",
        "atom",
        "await",
        "await-for",
        "await1",
        "bases",
        "bean",
        "bigdec",
        "bigint",
        "biginteger",
        "binding",
        "bit-and",
        "bit-and-not",
        "bit-clear",
        "bit-flip",
        "bit-not",
        "bit-or",
        "bit-set",
        "bit-shift-left",
        "bit-shift-right",
        "bit-test",
        "bit-xor",
        "boolean",
        "boolean-array",
        "boolean?",
        "booleans",
        "bound-fn",
        "bound-fn*",
        "bound?",
        "bounded-count",
        "butlast",
        "byte",
        "byte-array",
        "bytes",
        "bytes?",
        "case",
        "cast",
        "cat",
        "char",
        "char-array",
        "char-escape-string",
        "char-name-string",
        "char?",
        "chars",
        "chunk",
        "chunk-append",
        "chunk-buffer",
        "chunk-cons",
        "chunk-first",
        "chunk-next",
        "chunk-rest",
        "chunked-seq?",
        "class",
        "class?",
        "clear-agent-errors",
        "clojure-version",
        "coll?",
        "comment",
        "commute",
        "comp",
        "comparator",
        "compare",
        "compare-and-set!",
        "compile",
        "complement",
        "completing",
        "concat",
        "cond",
        "cond->",
        "cond->>",
        "condp",
        "conj",
        "conj!",
        "cons",
        "constantly",
        "construct-proxy",
        "contains?",
        "count",
        "counted?",
        "create-ns",
        "create-struct",
        "cycle",
        "dec",
        "dec'",
        "decimal?",
        "declare",
        "dedupe",
        "default-data-readers",
        "definline",
        "definterface",
        "defmacro",
        "defmethod",
        "defmulti",
        "defn",
        "defn-",
        "defonce",
        "defprotocol",
        "defrecord",
        "defstruct",
        "deftype",
        "delay",
        "delay?",
        "deliver",
        "denominator",
        "deref",
        "derive",
        "descendants",
        "destructure",
        "disj",
        "disj!",
        "dissoc",
        "dissoc!",
        "distinct",
        "distinct?",
        "doall",
        "dorun",
        "doseq",
        "dosync",
        "dotimes",
        "doto",
        "double",
        "double-array",
        "double?",
        "doubles",
        "drop",
        "drop-last",
        "drop-while",
        "eduction",
        "empty",
        "empty?",
        "ensure",
        "ensure-reduced",
        "enumeration-seq",
        "error-handler",
        "error-mode",
        "eval",
        "even?",
        "every-pred",
        "every?",
        "ex-data",
        "ex-info",
        "extend",
        "extend-protocol",
        "extend-type",
        "extenders",
        "extends?",
        "false?",
        "ffirst",
        "file-seq",
        "filter",
        "filterv",
        "find",
        "find-keyword",
        "find-ns",
        "find-protocol-impl",
        "find-protocol-method",
        "find-var",
        "first",
        "flatten",
        "float",
        "float-array",
        "float?",
        "floats",
        "flush",
        "fn",
        "fn?",
        "fnext",
        "fnil",
        "for",
        "force",
        "format",
        "frequencies",
        "future",
        "future-call",
        "future-cancel",
        "future-cancelled?",
        "future-done?",
        "future?",
        "gen-class",
        "gen-interface",
        "gensym",
        "get",
        "get-in",
        "get-method",
        "get-proxy-class",
        "get-thread-bindings",
        "get-validator",
        "group-by",
        "halt-when",
        "hash",
        "hash-combine",
        "hash-map",
        "hash-ordered-coll",
        "hash-set",
        "hash-unordered-coll",
        "ident?",
        "identical?",
        "identity",
        "if-let",
        "if-not",
        "if-some",
        "ifn?",
        "import",
        "in-ns",
        "inc",
        "inc'",
        "indexed?",
        "init-proxy",
        "inst-ms",
        "inst-ms*",
        "inst?",
        "instance?",
        "int",
        "int-array",
        "int?",
        "integer?",
        "interleave",
        "intern",
        "interpose",
        "into",
        "into-array",
        "ints",
        "io!",
        "isa?",
        "iterate",
        "iterator-seq",
        "juxt",
        "keep",
        "keep-indexed",
        "key",
        "keys",
        "keyword",
        "keyword?",
        "last",
        "lazy-cat",
        "lazy-seq",
        "let",
        "letfn",
        "line-seq",
        "list",
        "list*",
        "list?",
        "load",
        "load-file",
        "load-reader",
        "load-string",
        "loaded-libs",
        "locking",
        "long",
        "long-array",
        "longs",
        "loop",
        "macroexpand",
        "macroexpand-1",
        "make-array",
        "make-hierarchy",
        "map",
        "map-entry?",
        "map-indexed",
        "map?",
        "mapcat",
        "mapv",
        "max",
        "max-key",
        "memfn",
        "memoize",
        "merge",
        "merge-with",
        "meta",
        "method-sig",
        "methods",
        "min",
        "min-key",
        "mix-collection-hash",
        "mod",
        "munge",
        "name",
        "namespace",
        "namespace-munge",
        "nat-int?",
        "neg-int?",
        "neg?",
        "newline",
        "next",
        "nfirst",
        "nil?",
        "nnext",
        "not",
        "not-any?",
        "not-empty",
        "not-every?",
        "not=",
        "ns",
        "ns-aliases",
        "ns-imports",
        "ns-interns",
        "ns-map",
        "ns-name",
        "ns-publics",
        "ns-refers",
        "ns-resolve",
        "ns-unalias",
        "ns-unmap",
        "nth",
        "nthnext",
        "nthrest",
        "num",
        "number?",
        "numerator",
        "object-array",
        "odd?",
        "or",
        "parents",
        "partial",
        "partition",
        "partition-all",
        "partition-by",
        "pcalls",
        "peek",
        "persistent!",
        "pmap",
        "pop",
        "pop!",
        "pop-thread-bindings",
        "pos-int?",
        "pos?",
        "pr",
        "pr-str",
        "prefer-method",
        "prefers",
        "primitives-classnames",
        "print",
        "print-ctor",
        "print-dup",
        "print-method",
        "print-simple",
        "print-str",
        "printf",
        "println",
        "println-str",
        "prn",
        "prn-str",
        "promise",
        "proxy",
        "proxy-call-with-super",
        "proxy-mappings",
        "proxy-name",
        "proxy-super",
        "push-thread-bindings",
        "pvalues",
        "qualified-ident?",
        "qualified-keyword?",
        "qualified-symbol?",
        "quot",
        "rand",
        "rand-int",
        "rand-nth",
        "random-sample",
        "range",
        "ratio?",
        "rational?",
        "rationalize",
        "re-find",
        "re-groups",
        "re-matcher",
        "re-matches",
        "re-pattern",
        "re-seq",
        "read",
        "read-line",
        "read-string",
        "reader-conditional",
        "reader-conditional?",
        "realized?",
        "record?",
        "reduce",
        "reduce-kv",
        "reduced",
        "reduced?",
        "reductions",
        "ref",
        "ref-history-count",
        "ref-max-history",
        "ref-min-history",
        "ref-set",
        "refer",
        "refer-clojure",
        "reify",
        "release-pending-sends",
        "rem",
        "remove",
        "remove-all-methods",
        "remove-method",
        "remove-ns",
        "remove-watch",
        "repeat",
        "repeatedly",
        "replace",
        "replicate",
        "require",
        "reset!",
        "reset-meta!",
        "reset-vals!",
        "resolve",
        "rest",
        "restart-agent",
        "resultset-seq",
        "reverse",
        "reversible?",
        "rseq",
        "rsubseq",
        "run!",
        "satisfies?",
        "second",
        "select-keys",
        "send",
        "send-off",
        "send-via",
        "seq",
        "seq?",
        "seqable?",
        "seque",
        "sequence",
        "sequential?",
        "set",
        "set-agent-send-executor!",
        "set-agent-send-off-executor!",
        "set-error-handler!",
        "set-error-mode!",
        "set-validator!",
        "set?",
        "short",
        "short-array",
        "shorts",
        "shuffle",
        "shutdown-agents",
        "simple-ident?",
        "simple-keyword?",
        "simple-symbol?",
        "slurp",
        "some",
        "some->",
        "some->>",
        "some-fn",
        "some?",
        "sort",
        "sort-by",
        "sorted-map",
        "sorted-map-by",
        "sorted-set",
        "sorted-set-by",
        "sorted?",
        "special-symbol?",
        "spit",
        "split-at",
        "split-with",
        "str",
        "string?",
        "struct",
        "struct-map",
        "subs",
        "subseq",
        "subvec",
        "supers",
        "swap!",
        "swap-vals!",
        "symbol",
        "symbol?",
        "sync",
        "tagged-literal",
        "tagged-literal?",
        "take",
        "take-last",
        "take-nth",
        "take-while",
        "test",
        "the-ns",
        "thread-bound?",
        "time",
        "to-array",
        "to-array-2d",
        "trampoline",
        "transduce",
        "transient",
        "tree-seq",
        "true?",
        "type",
        "unchecked-add",
        "unchecked-add-int",
        "unchecked-byte",
        "unchecked-char",
        "unchecked-dec",
        "unchecked-dec-int",
        "unchecked-divide-int",
        "unchecked-double",
        "unchecked-float",
        "unchecked-inc",
        "unchecked-inc-int",
        "unchecked-int",
        "unchecked-long",
        "unchecked-multiply",
        "unchecked-multiply-int",
        "unchecked-negate",
        "unchecked-negate-int",
        "unchecked-remainder-int",
        "unchecked-short",
        "unchecked-subtract",
        "unchecked-subtract-int",
        "underive",
        "unquote",
        "unquote-splicing",
        "unreduced",
        "unsigned-bit-shift-right",
        "update",
        "update-in",
        "update-proxy",
        "uri?",
        "use",
        "uuid?",
        "val",
        "vals",
        "var-get",
        "var-set",
        "var?",
        "vary-meta",
        "vec",
        "vector",
        "vector-of",
        "vector?",
        "volatile!",
        "volatile?",
        "vreset!",
        "vswap!",
        "when",
        "when-first",
        "when-let",
        "when-not",
        "when-some",
        "while",
        "with-bindings",
        "with-bindings*",
        "with-in-str",
        "with-loading-context",
        "with-local-vars",
        "with-meta",
        "with-open",
        "with-out-str",
        "with-precision",
        "with-redefs",
        "with-redefs-fn",
        "xml-seq",
        "zero?",
        "zipmap"
      ];
      haveBodyParameter = [
        "->",
        "->>",
        "as->",
        "binding",
        "bound-fn",
        "case",
        "catch",
        "comment",
        "cond",
        "cond->",
        "cond->>",
        "condp",
        "def",
        "definterface",
        "defmethod",
        "defn",
        "defmacro",
        "defprotocol",
        "defrecord",
        "defstruct",
        "deftype",
        "do",
        "doseq",
        "dotimes",
        "doto",
        "extend",
        "extend-protocol",
        "extend-type",
        "fn",
        "for",
        "future",
        "if",
        "if-let",
        "if-not",
        "if-some",
        "let",
        "letfn",
        "locking",
        "loop",
        "ns",
        "proxy",
        "reify",
        "struct-map",
        "some->",
        "some->>",
        "try",
        "when",
        "when-first",
        "when-let",
        "when-not",
        "when-some",
        "while",
        "with-bindings",
        "with-bindings*",
        "with-in-str",
        "with-loading-context",
        "with-local-vars",
        "with-meta",
        "with-open",
        "with-out-str",
        "with-precision",
        "with-redefs",
        "with-redefs-fn"
      ];
      atom = createLookupMap(atoms3);
      specialForm = createLookupMap(specialForms);
      coreSymbol = createLookupMap(coreSymbols);
      hasBodyParameter = createLookupMap(haveBodyParameter);
      delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
      numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
      characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;
      qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;
      clojure = {
        name: "clojure",
        startState: function() {
          return {
            ctx: { prev: null, start: 0, indentTo: 0 },
            lastToken: null,
            tokenize: base2
          };
        },
        token: function(stream, state) {
          if (stream.sol() && typeof state.ctx.indentTo !== "number")
            state.ctx.indentTo = state.ctx.start + 1;
          var typeStylePair = state.tokenize(stream, state);
          var type7 = typeStylePair[0];
          var style2 = typeStylePair[1];
          var current = stream.current();
          if (type7 !== "space") {
            if (state.lastToken === "(" && state.ctx.indentTo === null) {
              if (type7 === "symbol" && is(current, hasBodyParameter))
                state.ctx.indentTo = state.ctx.start + stream.indentUnit;
              else
                state.ctx.indentTo = "next";
            } else if (state.ctx.indentTo === "next") {
              state.ctx.indentTo = stream.column();
            }
            state.lastToken = current;
          }
          if (type7 === "open")
            state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
          else if (type7 === "close")
            state.ctx = state.ctx.prev || state.ctx;
          return style2;
        },
        indent: function(state) {
          var i = state.ctx.indentTo;
          return typeof i === "number" ? i : state.ctx.start + 1;
        },
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", '"'] },
          commentTokens: { line: ";;" },
          autocomplete: [].concat(atoms3, specialForms, coreSymbols)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/css.js
  var css_exports = {};
  __export(css_exports, {
    css: () => css2,
    gss: () => gss,
    keywords: () => keywords5,
    less: () => less,
    mkCSS: () => mkCSS,
    sCSS: () => sCSS
  });
  function mkCSS(parserConfig4) {
    parserConfig4 = { ...defaults3, ...parserConfig4 };
    var inline = parserConfig4.inline;
    var tokenHooks = parserConfig4.tokenHooks, documentTypes3 = parserConfig4.documentTypes || {}, mediaTypes3 = parserConfig4.mediaTypes || {}, mediaFeatures3 = parserConfig4.mediaFeatures || {}, mediaValueKeywords2 = parserConfig4.mediaValueKeywords || {}, propertyKeywords4 = parserConfig4.propertyKeywords || {}, nonStandardPropertyKeywords3 = parserConfig4.nonStandardPropertyKeywords || {}, fontProperties4 = parserConfig4.fontProperties || {}, counterDescriptors2 = parserConfig4.counterDescriptors || {}, colorKeywords4 = parserConfig4.colorKeywords || {}, valueKeywords4 = parserConfig4.valueKeywords || {}, allowNested = parserConfig4.allowNested, lineComment = parserConfig4.lineComment, supportsAtComponent = parserConfig4.supportsAtComponent === true, highlightNonStandardPropertyKeywords = parserConfig4.highlightNonStandardPropertyKeywords !== false;
    var type7, override2;
    function ret4(style2, tp) {
      type7 = tp;
      return style2;
    }
    function tokenBase48(stream, state) {
      var ch2 = stream.next();
      if (tokenHooks[ch2]) {
        var result = tokenHooks[ch2](stream, state);
        if (result !== false)
          return result;
      }
      if (ch2 == "@") {
        stream.eatWhile(/[\w\\\-]/);
        return ret4("def", stream.current());
      } else if (ch2 == "=" || (ch2 == "~" || ch2 == "|") && stream.eat("=")) {
        return ret4(null, "compare");
      } else if (ch2 == '"' || ch2 == "'") {
        state.tokenize = tokenString30(ch2);
        return state.tokenize(stream, state);
      } else if (ch2 == "#") {
        stream.eatWhile(/[\w\\\-]/);
        return ret4("atom", "hash");
      } else if (ch2 == "!") {
        stream.match(/^\s*\w*/);
        return ret4("keyword", "important");
      } else if (/\d/.test(ch2) || ch2 == "." && stream.eat(/\d/)) {
        stream.eatWhile(/[\w.%]/);
        return ret4("number", "unit");
      } else if (ch2 === "-") {
        if (/[\d.]/.test(stream.peek())) {
          stream.eatWhile(/[\w.%]/);
          return ret4("number", "unit");
        } else if (stream.match(/^-[\w\\\-]*/)) {
          stream.eatWhile(/[\w\\\-]/);
          if (stream.match(/^\s*:/, false))
            return ret4("def", "variable-definition");
          return ret4("variableName", "variable");
        } else if (stream.match(/^\w+-/)) {
          return ret4("meta", "meta");
        }
      } else if (/[,+>*\/]/.test(ch2)) {
        return ret4(null, "select-op");
      } else if (ch2 == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
        return ret4("qualifier", "qualifier");
      } else if (/[:;{}\[\]\(\)]/.test(ch2)) {
        return ret4(null, ch2);
      } else if (stream.match(/^[\w-.]+(?=\()/)) {
        if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {
          state.tokenize = tokenParenthesized2;
        }
        return ret4("variableName.function", "variable");
      } else if (/[\w\\\-]/.test(ch2)) {
        stream.eatWhile(/[\w\\\-]/);
        return ret4("property", "word");
      } else {
        return ret4(null, null);
      }
    }
    function tokenString30(quote2) {
      return function(stream, state) {
        var escaped = false, ch2;
        while ((ch2 = stream.next()) != null) {
          if (ch2 == quote2 && !escaped) {
            if (quote2 == ")")
              stream.backUp(1);
            break;
          }
          escaped = !escaped && ch2 == "\\";
        }
        if (ch2 == quote2 || !escaped && quote2 != ")")
          state.tokenize = null;
        return ret4("string", "string");
      };
    }
    function tokenParenthesized2(stream, state) {
      stream.next();
      if (!stream.match(/^\s*[\"\')]/, false))
        state.tokenize = tokenString30(")");
      else
        state.tokenize = null;
      return ret4(null, "(");
    }
    function Context14(type8, indent5, prev) {
      this.type = type8;
      this.indent = indent5;
      this.prev = prev;
    }
    function pushContext17(state, stream, type8, indent5) {
      state.context = new Context14(type8, stream.indentation() + (indent5 === false ? 0 : stream.indentUnit), state.context);
      return type8;
    }
    function popContext17(state) {
      if (state.context.prev)
        state.context = state.context.prev;
      return state.context.type;
    }
    function pass4(type8, stream, state) {
      return states2[state.context.type](type8, stream, state);
    }
    function popAndPass2(type8, stream, state, n2) {
      for (var i = n2 || 1; i > 0; i--)
        state.context = state.context.prev;
      return pass4(type8, stream, state);
    }
    function wordAsValue2(stream) {
      var word2 = stream.current().toLowerCase();
      if (valueKeywords4.hasOwnProperty(word2))
        override2 = "atom";
      else if (colorKeywords4.hasOwnProperty(word2))
        override2 = "keyword";
      else
        override2 = "variable";
    }
    var states2 = {};
    states2.top = function(type8, stream, state) {
      if (type8 == "{") {
        return pushContext17(state, stream, "block");
      } else if (type8 == "}" && state.context.prev) {
        return popContext17(state);
      } else if (supportsAtComponent && /@component/i.test(type8)) {
        return pushContext17(state, stream, "atComponentBlock");
      } else if (/^@(-moz-)?document$/i.test(type8)) {
        return pushContext17(state, stream, "documentTypes");
      } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type8)) {
        return pushContext17(state, stream, "atBlock");
      } else if (/^@(font-face|counter-style)/i.test(type8)) {
        state.stateArg = type8;
        return "restricted_atBlock_before";
      } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type8)) {
        return "keyframes";
      } else if (type8 && type8.charAt(0) == "@") {
        return pushContext17(state, stream, "at");
      } else if (type8 == "hash") {
        override2 = "builtin";
      } else if (type8 == "word") {
        override2 = "tag";
      } else if (type8 == "variable-definition") {
        return "maybeprop";
      } else if (type8 == "interpolation") {
        return pushContext17(state, stream, "interpolation");
      } else if (type8 == ":") {
        return "pseudo";
      } else if (allowNested && type8 == "(") {
        return pushContext17(state, stream, "parens");
      }
      return state.context.type;
    };
    states2.block = function(type8, stream, state) {
      if (type8 == "word") {
        var word2 = stream.current().toLowerCase();
        if (propertyKeywords4.hasOwnProperty(word2)) {
          override2 = "property";
          return "maybeprop";
        } else if (nonStandardPropertyKeywords3.hasOwnProperty(word2)) {
          override2 = highlightNonStandardPropertyKeywords ? "string.special" : "property";
          return "maybeprop";
        } else if (allowNested) {
          override2 = stream.match(/^\s*:(?:\s|$)/, false) ? "property" : "tag";
          return "block";
        } else {
          override2 = "error";
          return "maybeprop";
        }
      } else if (type8 == "meta") {
        return "block";
      } else if (!allowNested && (type8 == "hash" || type8 == "qualifier")) {
        override2 = "error";
        return "block";
      } else {
        return states2.top(type8, stream, state);
      }
    };
    states2.maybeprop = function(type8, stream, state) {
      if (type8 == ":")
        return pushContext17(state, stream, "prop");
      return pass4(type8, stream, state);
    };
    states2.prop = function(type8, stream, state) {
      if (type8 == ";")
        return popContext17(state);
      if (type8 == "{" && allowNested)
        return pushContext17(state, stream, "propBlock");
      if (type8 == "}" || type8 == "{")
        return popAndPass2(type8, stream, state);
      if (type8 == "(")
        return pushContext17(state, stream, "parens");
      if (type8 == "hash" && !/^#([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(stream.current())) {
        override2 = "error";
      } else if (type8 == "word") {
        wordAsValue2(stream);
      } else if (type8 == "interpolation") {
        return pushContext17(state, stream, "interpolation");
      }
      return "prop";
    };
    states2.propBlock = function(type8, _stream, state) {
      if (type8 == "}")
        return popContext17(state);
      if (type8 == "word") {
        override2 = "property";
        return "maybeprop";
      }
      return state.context.type;
    };
    states2.parens = function(type8, stream, state) {
      if (type8 == "{" || type8 == "}")
        return popAndPass2(type8, stream, state);
      if (type8 == ")")
        return popContext17(state);
      if (type8 == "(")
        return pushContext17(state, stream, "parens");
      if (type8 == "interpolation")
        return pushContext17(state, stream, "interpolation");
      if (type8 == "word")
        wordAsValue2(stream);
      return "parens";
    };
    states2.pseudo = function(type8, stream, state) {
      if (type8 == "meta")
        return "pseudo";
      if (type8 == "word") {
        override2 = "variableName.constant";
        return state.context.type;
      }
      return pass4(type8, stream, state);
    };
    states2.documentTypes = function(type8, stream, state) {
      if (type8 == "word" && documentTypes3.hasOwnProperty(stream.current())) {
        override2 = "tag";
        return state.context.type;
      } else {
        return states2.atBlock(type8, stream, state);
      }
    };
    states2.atBlock = function(type8, stream, state) {
      if (type8 == "(")
        return pushContext17(state, stream, "atBlock_parens");
      if (type8 == "}" || type8 == ";")
        return popAndPass2(type8, stream, state);
      if (type8 == "{")
        return popContext17(state) && pushContext17(state, stream, allowNested ? "block" : "top");
      if (type8 == "interpolation")
        return pushContext17(state, stream, "interpolation");
      if (type8 == "word") {
        var word2 = stream.current().toLowerCase();
        if (word2 == "only" || word2 == "not" || word2 == "and" || word2 == "or")
          override2 = "keyword";
        else if (mediaTypes3.hasOwnProperty(word2))
          override2 = "attribute";
        else if (mediaFeatures3.hasOwnProperty(word2))
          override2 = "property";
        else if (mediaValueKeywords2.hasOwnProperty(word2))
          override2 = "keyword";
        else if (propertyKeywords4.hasOwnProperty(word2))
          override2 = "property";
        else if (nonStandardPropertyKeywords3.hasOwnProperty(word2))
          override2 = highlightNonStandardPropertyKeywords ? "string.special" : "property";
        else if (valueKeywords4.hasOwnProperty(word2))
          override2 = "atom";
        else if (colorKeywords4.hasOwnProperty(word2))
          override2 = "keyword";
        else
          override2 = "error";
      }
      return state.context.type;
    };
    states2.atComponentBlock = function(type8, stream, state) {
      if (type8 == "}")
        return popAndPass2(type8, stream, state);
      if (type8 == "{")
        return popContext17(state) && pushContext17(state, stream, allowNested ? "block" : "top", false);
      if (type8 == "word")
        override2 = "error";
      return state.context.type;
    };
    states2.atBlock_parens = function(type8, stream, state) {
      if (type8 == ")")
        return popContext17(state);
      if (type8 == "{" || type8 == "}")
        return popAndPass2(type8, stream, state, 2);
      return states2.atBlock(type8, stream, state);
    };
    states2.restricted_atBlock_before = function(type8, stream, state) {
      if (type8 == "{")
        return pushContext17(state, stream, "restricted_atBlock");
      if (type8 == "word" && state.stateArg == "@counter-style") {
        override2 = "variable";
        return "restricted_atBlock_before";
      }
      return pass4(type8, stream, state);
    };
    states2.restricted_atBlock = function(type8, stream, state) {
      if (type8 == "}") {
        state.stateArg = null;
        return popContext17(state);
      }
      if (type8 == "word") {
        if (state.stateArg == "@font-face" && !fontProperties4.hasOwnProperty(stream.current().toLowerCase()) || state.stateArg == "@counter-style" && !counterDescriptors2.hasOwnProperty(stream.current().toLowerCase()))
          override2 = "error";
        else
          override2 = "property";
        return "maybeprop";
      }
      return "restricted_atBlock";
    };
    states2.keyframes = function(type8, stream, state) {
      if (type8 == "word") {
        override2 = "variable";
        return "keyframes";
      }
      if (type8 == "{")
        return pushContext17(state, stream, "top");
      return pass4(type8, stream, state);
    };
    states2.at = function(type8, stream, state) {
      if (type8 == ";")
        return popContext17(state);
      if (type8 == "{" || type8 == "}")
        return popAndPass2(type8, stream, state);
      if (type8 == "word")
        override2 = "tag";
      else if (type8 == "hash")
        override2 = "builtin";
      return "at";
    };
    states2.interpolation = function(type8, stream, state) {
      if (type8 == "}")
        return popContext17(state);
      if (type8 == "{" || type8 == ";")
        return popAndPass2(type8, stream, state);
      if (type8 == "word")
        override2 = "variable";
      else if (type8 != "variable" && type8 != "(" && type8 != ")")
        override2 = "error";
      return "interpolation";
    };
    return {
      name: parserConfig4.name,
      startState: function() {
        return {
          tokenize: null,
          state: inline ? "block" : "top",
          stateArg: null,
          context: new Context14(inline ? "block" : "top", 0, null)
        };
      },
      token: function(stream, state) {
        if (!state.tokenize && stream.eatSpace())
          return null;
        var style2 = (state.tokenize || tokenBase48)(stream, state);
        if (style2 && typeof style2 == "object") {
          type7 = style2[1];
          style2 = style2[0];
        }
        override2 = style2;
        if (type7 != "comment")
          state.state = states2[state.state](type7, stream, state);
        return override2;
      },
      indent: function(state, textAfter, iCx) {
        var cx2 = state.context, ch2 = textAfter && textAfter.charAt(0);
        var indent5 = cx2.indent;
        if (cx2.type == "prop" && (ch2 == "}" || ch2 == ")"))
          cx2 = cx2.prev;
        if (cx2.prev) {
          if (ch2 == "}" && (cx2.type == "block" || cx2.type == "top" || cx2.type == "interpolation" || cx2.type == "restricted_atBlock")) {
            cx2 = cx2.prev;
            indent5 = cx2.indent;
          } else if (ch2 == ")" && (cx2.type == "parens" || cx2.type == "atBlock_parens") || ch2 == "{" && (cx2.type == "at" || cx2.type == "atBlock")) {
            indent5 = Math.max(0, cx2.indent - iCx.unit);
          }
        }
        return indent5;
      },
      languageData: {
        indentOnInput: /^\s*\}$/,
        commentTokens: { line: lineComment, block: { open: "/*", close: "*/" } },
        autocomplete: allWords
      }
    };
  }
  function keySet(array2) {
    var keys = {};
    for (var i = 0; i < array2.length; ++i) {
      keys[array2[i].toLowerCase()] = true;
    }
    return keys;
  }
  function tokenCComment(stream, state) {
    var maybeEnd = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (maybeEnd && ch2 == "/") {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return ["comment", "comment"];
  }
  var documentTypes_, documentTypes, mediaTypes_, mediaTypes, mediaFeatures_, mediaFeatures, mediaValueKeywords_, mediaValueKeywords, propertyKeywords_, propertyKeywords, nonStandardPropertyKeywords_, nonStandardPropertyKeywords, fontProperties_, fontProperties, counterDescriptors_, counterDescriptors, colorKeywords_, colorKeywords, valueKeywords_, valueKeywords, allWords, keywords5, defaults3, css2, sCSS, less, gss;
  var init_css = __esm({
    "node_modules/@codemirror/legacy-modes/mode/css.js"() {
      documentTypes_ = [
        "domain",
        "regexp",
        "url",
        "url-prefix"
      ];
      documentTypes = keySet(documentTypes_);
      mediaTypes_ = [
        "all",
        "aural",
        "braille",
        "handheld",
        "print",
        "projection",
        "screen",
        "tty",
        "tv",
        "embossed"
      ];
      mediaTypes = keySet(mediaTypes_);
      mediaFeatures_ = [
        "width",
        "min-width",
        "max-width",
        "height",
        "min-height",
        "max-height",
        "device-width",
        "min-device-width",
        "max-device-width",
        "device-height",
        "min-device-height",
        "max-device-height",
        "aspect-ratio",
        "min-aspect-ratio",
        "max-aspect-ratio",
        "device-aspect-ratio",
        "min-device-aspect-ratio",
        "max-device-aspect-ratio",
        "color",
        "min-color",
        "max-color",
        "color-index",
        "min-color-index",
        "max-color-index",
        "monochrome",
        "min-monochrome",
        "max-monochrome",
        "resolution",
        "min-resolution",
        "max-resolution",
        "scan",
        "grid",
        "orientation",
        "device-pixel-ratio",
        "min-device-pixel-ratio",
        "max-device-pixel-ratio",
        "pointer",
        "any-pointer",
        "hover",
        "any-hover",
        "prefers-color-scheme",
        "dynamic-range",
        "video-dynamic-range"
      ];
      mediaFeatures = keySet(mediaFeatures_);
      mediaValueKeywords_ = [
        "landscape",
        "portrait",
        "none",
        "coarse",
        "fine",
        "on-demand",
        "hover",
        "interlace",
        "progressive",
        "dark",
        "light",
        "standard",
        "high"
      ];
      mediaValueKeywords = keySet(mediaValueKeywords_);
      propertyKeywords_ = [
        "align-content",
        "align-items",
        "align-self",
        "alignment-adjust",
        "alignment-baseline",
        "all",
        "anchor-point",
        "animation",
        "animation-delay",
        "animation-direction",
        "animation-duration",
        "animation-fill-mode",
        "animation-iteration-count",
        "animation-name",
        "animation-play-state",
        "animation-timing-function",
        "appearance",
        "azimuth",
        "backdrop-filter",
        "backface-visibility",
        "background",
        "background-attachment",
        "background-blend-mode",
        "background-clip",
        "background-color",
        "background-image",
        "background-origin",
        "background-position",
        "background-position-x",
        "background-position-y",
        "background-repeat",
        "background-size",
        "baseline-shift",
        "binding",
        "bleed",
        "block-size",
        "bookmark-label",
        "bookmark-level",
        "bookmark-state",
        "bookmark-target",
        "border",
        "border-bottom",
        "border-bottom-color",
        "border-bottom-left-radius",
        "border-bottom-right-radius",
        "border-bottom-style",
        "border-bottom-width",
        "border-collapse",
        "border-color",
        "border-image",
        "border-image-outset",
        "border-image-repeat",
        "border-image-slice",
        "border-image-source",
        "border-image-width",
        "border-left",
        "border-left-color",
        "border-left-style",
        "border-left-width",
        "border-radius",
        "border-right",
        "border-right-color",
        "border-right-style",
        "border-right-width",
        "border-spacing",
        "border-style",
        "border-top",
        "border-top-color",
        "border-top-left-radius",
        "border-top-right-radius",
        "border-top-style",
        "border-top-width",
        "border-width",
        "bottom",
        "box-decoration-break",
        "box-shadow",
        "box-sizing",
        "break-after",
        "break-before",
        "break-inside",
        "caption-side",
        "caret-color",
        "clear",
        "clip",
        "color",
        "color-profile",
        "column-count",
        "column-fill",
        "column-gap",
        "column-rule",
        "column-rule-color",
        "column-rule-style",
        "column-rule-width",
        "column-span",
        "column-width",
        "columns",
        "contain",
        "content",
        "counter-increment",
        "counter-reset",
        "crop",
        "cue",
        "cue-after",
        "cue-before",
        "cursor",
        "direction",
        "display",
        "dominant-baseline",
        "drop-initial-after-adjust",
        "drop-initial-after-align",
        "drop-initial-before-adjust",
        "drop-initial-before-align",
        "drop-initial-size",
        "drop-initial-value",
        "elevation",
        "empty-cells",
        "fit",
        "fit-content",
        "fit-position",
        "flex",
        "flex-basis",
        "flex-direction",
        "flex-flow",
        "flex-grow",
        "flex-shrink",
        "flex-wrap",
        "float",
        "float-offset",
        "flow-from",
        "flow-into",
        "font",
        "font-family",
        "font-feature-settings",
        "font-kerning",
        "font-language-override",
        "font-optical-sizing",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-synthesis",
        "font-variant",
        "font-variant-alternates",
        "font-variant-caps",
        "font-variant-east-asian",
        "font-variant-ligatures",
        "font-variant-numeric",
        "font-variant-position",
        "font-variation-settings",
        "font-weight",
        "gap",
        "grid",
        "grid-area",
        "grid-auto-columns",
        "grid-auto-flow",
        "grid-auto-rows",
        "grid-column",
        "grid-column-end",
        "grid-column-gap",
        "grid-column-start",
        "grid-gap",
        "grid-row",
        "grid-row-end",
        "grid-row-gap",
        "grid-row-start",
        "grid-template",
        "grid-template-areas",
        "grid-template-columns",
        "grid-template-rows",
        "hanging-punctuation",
        "height",
        "hyphens",
        "icon",
        "image-orientation",
        "image-rendering",
        "image-resolution",
        "inline-box-align",
        "inset",
        "inset-block",
        "inset-block-end",
        "inset-block-start",
        "inset-inline",
        "inset-inline-end",
        "inset-inline-start",
        "isolation",
        "justify-content",
        "justify-items",
        "justify-self",
        "left",
        "letter-spacing",
        "line-break",
        "line-height",
        "line-height-step",
        "line-stacking",
        "line-stacking-ruby",
        "line-stacking-shift",
        "line-stacking-strategy",
        "list-style",
        "list-style-image",
        "list-style-position",
        "list-style-type",
        "margin",
        "margin-bottom",
        "margin-left",
        "margin-right",
        "margin-top",
        "marks",
        "marquee-direction",
        "marquee-loop",
        "marquee-play-count",
        "marquee-speed",
        "marquee-style",
        "mask-clip",
        "mask-composite",
        "mask-image",
        "mask-mode",
        "mask-origin",
        "mask-position",
        "mask-repeat",
        "mask-size",
        "mask-type",
        "max-block-size",
        "max-height",
        "max-inline-size",
        "max-width",
        "min-block-size",
        "min-height",
        "min-inline-size",
        "min-width",
        "mix-blend-mode",
        "move-to",
        "nav-down",
        "nav-index",
        "nav-left",
        "nav-right",
        "nav-up",
        "object-fit",
        "object-position",
        "offset",
        "offset-anchor",
        "offset-distance",
        "offset-path",
        "offset-position",
        "offset-rotate",
        "opacity",
        "order",
        "orphans",
        "outline",
        "outline-color",
        "outline-offset",
        "outline-style",
        "outline-width",
        "overflow",
        "overflow-style",
        "overflow-wrap",
        "overflow-x",
        "overflow-y",
        "padding",
        "padding-bottom",
        "padding-left",
        "padding-right",
        "padding-top",
        "page",
        "page-break-after",
        "page-break-before",
        "page-break-inside",
        "page-policy",
        "pause",
        "pause-after",
        "pause-before",
        "perspective",
        "perspective-origin",
        "pitch",
        "pitch-range",
        "place-content",
        "place-items",
        "place-self",
        "play-during",
        "position",
        "presentation-level",
        "punctuation-trim",
        "quotes",
        "region-break-after",
        "region-break-before",
        "region-break-inside",
        "region-fragment",
        "rendering-intent",
        "resize",
        "rest",
        "rest-after",
        "rest-before",
        "richness",
        "right",
        "rotate",
        "rotation",
        "rotation-point",
        "row-gap",
        "ruby-align",
        "ruby-overhang",
        "ruby-position",
        "ruby-span",
        "scale",
        "scroll-behavior",
        "scroll-margin",
        "scroll-margin-block",
        "scroll-margin-block-end",
        "scroll-margin-block-start",
        "scroll-margin-bottom",
        "scroll-margin-inline",
        "scroll-margin-inline-end",
        "scroll-margin-inline-start",
        "scroll-margin-left",
        "scroll-margin-right",
        "scroll-margin-top",
        "scroll-padding",
        "scroll-padding-block",
        "scroll-padding-block-end",
        "scroll-padding-block-start",
        "scroll-padding-bottom",
        "scroll-padding-inline",
        "scroll-padding-inline-end",
        "scroll-padding-inline-start",
        "scroll-padding-left",
        "scroll-padding-right",
        "scroll-padding-top",
        "scroll-snap-align",
        "scroll-snap-type",
        "shape-image-threshold",
        "shape-inside",
        "shape-margin",
        "shape-outside",
        "size",
        "speak",
        "speak-as",
        "speak-header",
        "speak-numeral",
        "speak-punctuation",
        "speech-rate",
        "stress",
        "string-set",
        "tab-size",
        "table-layout",
        "target",
        "target-name",
        "target-new",
        "target-position",
        "text-align",
        "text-align-last",
        "text-combine-upright",
        "text-decoration",
        "text-decoration-color",
        "text-decoration-line",
        "text-decoration-skip",
        "text-decoration-skip-ink",
        "text-decoration-style",
        "text-emphasis",
        "text-emphasis-color",
        "text-emphasis-position",
        "text-emphasis-style",
        "text-height",
        "text-indent",
        "text-justify",
        "text-orientation",
        "text-outline",
        "text-overflow",
        "text-rendering",
        "text-shadow",
        "text-size-adjust",
        "text-space-collapse",
        "text-transform",
        "text-underline-position",
        "text-wrap",
        "top",
        "touch-action",
        "transform",
        "transform-origin",
        "transform-style",
        "transition",
        "transition-delay",
        "transition-duration",
        "transition-property",
        "transition-timing-function",
        "translate",
        "unicode-bidi",
        "user-select",
        "vertical-align",
        "visibility",
        "voice-balance",
        "voice-duration",
        "voice-family",
        "voice-pitch",
        "voice-range",
        "voice-rate",
        "voice-stress",
        "voice-volume",
        "volume",
        "white-space",
        "widows",
        "width",
        "will-change",
        "word-break",
        "word-spacing",
        "word-wrap",
        "writing-mode",
        "z-index",
        // SVG-specific
        "clip-path",
        "clip-rule",
        "mask",
        "enable-background",
        "filter",
        "flood-color",
        "flood-opacity",
        "lighting-color",
        "stop-color",
        "stop-opacity",
        "pointer-events",
        "color-interpolation",
        "color-interpolation-filters",
        "color-rendering",
        "fill",
        "fill-opacity",
        "fill-rule",
        "image-rendering",
        "marker",
        "marker-end",
        "marker-mid",
        "marker-start",
        "paint-order",
        "shape-rendering",
        "stroke",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-rendering",
        "baseline-shift",
        "dominant-baseline",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "text-anchor",
        "writing-mode"
      ];
      propertyKeywords = keySet(propertyKeywords_);
      nonStandardPropertyKeywords_ = [
        "accent-color",
        "aspect-ratio",
        "border-block",
        "border-block-color",
        "border-block-end",
        "border-block-end-color",
        "border-block-end-style",
        "border-block-end-width",
        "border-block-start",
        "border-block-start-color",
        "border-block-start-style",
        "border-block-start-width",
        "border-block-style",
        "border-block-width",
        "border-inline",
        "border-inline-color",
        "border-inline-end",
        "border-inline-end-color",
        "border-inline-end-style",
        "border-inline-end-width",
        "border-inline-start",
        "border-inline-start-color",
        "border-inline-start-style",
        "border-inline-start-width",
        "border-inline-style",
        "border-inline-width",
        "content-visibility",
        "margin-block",
        "margin-block-end",
        "margin-block-start",
        "margin-inline",
        "margin-inline-end",
        "margin-inline-start",
        "overflow-anchor",
        "overscroll-behavior",
        "padding-block",
        "padding-block-end",
        "padding-block-start",
        "padding-inline",
        "padding-inline-end",
        "padding-inline-start",
        "scroll-snap-stop",
        "scrollbar-3d-light-color",
        "scrollbar-arrow-color",
        "scrollbar-base-color",
        "scrollbar-dark-shadow-color",
        "scrollbar-face-color",
        "scrollbar-highlight-color",
        "scrollbar-shadow-color",
        "scrollbar-track-color",
        "searchfield-cancel-button",
        "searchfield-decoration",
        "searchfield-results-button",
        "searchfield-results-decoration",
        "shape-inside",
        "zoom"
      ];
      nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_);
      fontProperties_ = [
        "font-display",
        "font-family",
        "src",
        "unicode-range",
        "font-variant",
        "font-feature-settings",
        "font-stretch",
        "font-weight",
        "font-style"
      ];
      fontProperties = keySet(fontProperties_);
      counterDescriptors_ = [
        "additive-symbols",
        "fallback",
        "negative",
        "pad",
        "prefix",
        "range",
        "speak-as",
        "suffix",
        "symbols",
        "system"
      ];
      counterDescriptors = keySet(counterDescriptors_);
      colorKeywords_ = [
        "aliceblue",
        "antiquewhite",
        "aqua",
        "aquamarine",
        "azure",
        "beige",
        "bisque",
        "black",
        "blanchedalmond",
        "blue",
        "blueviolet",
        "brown",
        "burlywood",
        "cadetblue",
        "chartreuse",
        "chocolate",
        "coral",
        "cornflowerblue",
        "cornsilk",
        "crimson",
        "cyan",
        "darkblue",
        "darkcyan",
        "darkgoldenrod",
        "darkgray",
        "darkgreen",
        "darkgrey",
        "darkkhaki",
        "darkmagenta",
        "darkolivegreen",
        "darkorange",
        "darkorchid",
        "darkred",
        "darksalmon",
        "darkseagreen",
        "darkslateblue",
        "darkslategray",
        "darkslategrey",
        "darkturquoise",
        "darkviolet",
        "deeppink",
        "deepskyblue",
        "dimgray",
        "dimgrey",
        "dodgerblue",
        "firebrick",
        "floralwhite",
        "forestgreen",
        "fuchsia",
        "gainsboro",
        "ghostwhite",
        "gold",
        "goldenrod",
        "gray",
        "grey",
        "green",
        "greenyellow",
        "honeydew",
        "hotpink",
        "indianred",
        "indigo",
        "ivory",
        "khaki",
        "lavender",
        "lavenderblush",
        "lawngreen",
        "lemonchiffon",
        "lightblue",
        "lightcoral",
        "lightcyan",
        "lightgoldenrodyellow",
        "lightgray",
        "lightgreen",
        "lightgrey",
        "lightpink",
        "lightsalmon",
        "lightseagreen",
        "lightskyblue",
        "lightslategray",
        "lightslategrey",
        "lightsteelblue",
        "lightyellow",
        "lime",
        "limegreen",
        "linen",
        "magenta",
        "maroon",
        "mediumaquamarine",
        "mediumblue",
        "mediumorchid",
        "mediumpurple",
        "mediumseagreen",
        "mediumslateblue",
        "mediumspringgreen",
        "mediumturquoise",
        "mediumvioletred",
        "midnightblue",
        "mintcream",
        "mistyrose",
        "moccasin",
        "navajowhite",
        "navy",
        "oldlace",
        "olive",
        "olivedrab",
        "orange",
        "orangered",
        "orchid",
        "palegoldenrod",
        "palegreen",
        "paleturquoise",
        "palevioletred",
        "papayawhip",
        "peachpuff",
        "peru",
        "pink",
        "plum",
        "powderblue",
        "purple",
        "rebeccapurple",
        "red",
        "rosybrown",
        "royalblue",
        "saddlebrown",
        "salmon",
        "sandybrown",
        "seagreen",
        "seashell",
        "sienna",
        "silver",
        "skyblue",
        "slateblue",
        "slategray",
        "slategrey",
        "snow",
        "springgreen",
        "steelblue",
        "tan",
        "teal",
        "thistle",
        "tomato",
        "turquoise",
        "violet",
        "wheat",
        "white",
        "whitesmoke",
        "yellow",
        "yellowgreen"
      ];
      colorKeywords = keySet(colorKeywords_);
      valueKeywords_ = [
        "above",
        "absolute",
        "activeborder",
        "additive",
        "activecaption",
        "afar",
        "after-white-space",
        "ahead",
        "alias",
        "all",
        "all-scroll",
        "alphabetic",
        "alternate",
        "always",
        "amharic",
        "amharic-abegede",
        "antialiased",
        "appworkspace",
        "arabic-indic",
        "armenian",
        "asterisks",
        "attr",
        "auto",
        "auto-flow",
        "avoid",
        "avoid-column",
        "avoid-page",
        "avoid-region",
        "axis-pan",
        "background",
        "backwards",
        "baseline",
        "below",
        "bidi-override",
        "binary",
        "bengali",
        "blink",
        "block",
        "block-axis",
        "blur",
        "bold",
        "bolder",
        "border",
        "border-box",
        "both",
        "bottom",
        "break",
        "break-all",
        "break-word",
        "brightness",
        "bullets",
        "button",
        "buttonface",
        "buttonhighlight",
        "buttonshadow",
        "buttontext",
        "calc",
        "cambodian",
        "capitalize",
        "caps-lock-indicator",
        "caption",
        "captiontext",
        "caret",
        "cell",
        "center",
        "checkbox",
        "circle",
        "cjk-decimal",
        "cjk-earthly-branch",
        "cjk-heavenly-stem",
        "cjk-ideographic",
        "clear",
        "clip",
        "close-quote",
        "col-resize",
        "collapse",
        "color",
        "color-burn",
        "color-dodge",
        "column",
        "column-reverse",
        "compact",
        "condensed",
        "conic-gradient",
        "contain",
        "content",
        "contents",
        "content-box",
        "context-menu",
        "continuous",
        "contrast",
        "copy",
        "counter",
        "counters",
        "cover",
        "crop",
        "cross",
        "crosshair",
        "cubic-bezier",
        "currentcolor",
        "cursive",
        "cyclic",
        "darken",
        "dashed",
        "decimal",
        "decimal-leading-zero",
        "default",
        "default-button",
        "dense",
        "destination-atop",
        "destination-in",
        "destination-out",
        "destination-over",
        "devanagari",
        "difference",
        "disc",
        "discard",
        "disclosure-closed",
        "disclosure-open",
        "document",
        "dot-dash",
        "dot-dot-dash",
        "dotted",
        "double",
        "down",
        "drop-shadow",
        "e-resize",
        "ease",
        "ease-in",
        "ease-in-out",
        "ease-out",
        "element",
        "ellipse",
        "ellipsis",
        "embed",
        "end",
        "ethiopic",
        "ethiopic-abegede",
        "ethiopic-abegede-am-et",
        "ethiopic-abegede-gez",
        "ethiopic-abegede-ti-er",
        "ethiopic-abegede-ti-et",
        "ethiopic-halehame-aa-er",
        "ethiopic-halehame-aa-et",
        "ethiopic-halehame-am-et",
        "ethiopic-halehame-gez",
        "ethiopic-halehame-om-et",
        "ethiopic-halehame-sid-et",
        "ethiopic-halehame-so-et",
        "ethiopic-halehame-ti-er",
        "ethiopic-halehame-ti-et",
        "ethiopic-halehame-tig",
        "ethiopic-numeric",
        "ew-resize",
        "exclusion",
        "expanded",
        "extends",
        "extra-condensed",
        "extra-expanded",
        "fantasy",
        "fast",
        "fill",
        "fill-box",
        "fixed",
        "flat",
        "flex",
        "flex-end",
        "flex-start",
        "footnotes",
        "forwards",
        "from",
        "geometricPrecision",
        "georgian",
        "grayscale",
        "graytext",
        "grid",
        "groove",
        "gujarati",
        "gurmukhi",
        "hand",
        "hangul",
        "hangul-consonant",
        "hard-light",
        "hebrew",
        "help",
        "hidden",
        "hide",
        "higher",
        "highlight",
        "highlighttext",
        "hiragana",
        "hiragana-iroha",
        "horizontal",
        "hsl",
        "hsla",
        "hue",
        "hue-rotate",
        "icon",
        "ignore",
        "inactiveborder",
        "inactivecaption",
        "inactivecaptiontext",
        "infinite",
        "infobackground",
        "infotext",
        "inherit",
        "initial",
        "inline",
        "inline-axis",
        "inline-block",
        "inline-flex",
        "inline-grid",
        "inline-table",
        "inset",
        "inside",
        "intrinsic",
        "invert",
        "italic",
        "japanese-formal",
        "japanese-informal",
        "justify",
        "kannada",
        "katakana",
        "katakana-iroha",
        "keep-all",
        "khmer",
        "korean-hangul-formal",
        "korean-hanja-formal",
        "korean-hanja-informal",
        "landscape",
        "lao",
        "large",
        "larger",
        "left",
        "level",
        "lighter",
        "lighten",
        "line-through",
        "linear",
        "linear-gradient",
        "lines",
        "list-item",
        "listbox",
        "listitem",
        "local",
        "logical",
        "loud",
        "lower",
        "lower-alpha",
        "lower-armenian",
        "lower-greek",
        "lower-hexadecimal",
        "lower-latin",
        "lower-norwegian",
        "lower-roman",
        "lowercase",
        "ltr",
        "luminosity",
        "malayalam",
        "manipulation",
        "match",
        "matrix",
        "matrix3d",
        "media-play-button",
        "media-slider",
        "media-sliderthumb",
        "media-volume-slider",
        "media-volume-sliderthumb",
        "medium",
        "menu",
        "menulist",
        "menulist-button",
        "menutext",
        "message-box",
        "middle",
        "min-intrinsic",
        "mix",
        "mongolian",
        "monospace",
        "move",
        "multiple",
        "multiple_mask_images",
        "multiply",
        "myanmar",
        "n-resize",
        "narrower",
        "ne-resize",
        "nesw-resize",
        "no-close-quote",
        "no-drop",
        "no-open-quote",
        "no-repeat",
        "none",
        "normal",
        "not-allowed",
        "nowrap",
        "ns-resize",
        "numbers",
        "numeric",
        "nw-resize",
        "nwse-resize",
        "oblique",
        "octal",
        "opacity",
        "open-quote",
        "optimizeLegibility",
        "optimizeSpeed",
        "oriya",
        "oromo",
        "outset",
        "outside",
        "outside-shape",
        "overlay",
        "overline",
        "padding",
        "padding-box",
        "painted",
        "page",
        "paused",
        "persian",
        "perspective",
        "pinch-zoom",
        "plus-darker",
        "plus-lighter",
        "pointer",
        "polygon",
        "portrait",
        "pre",
        "pre-line",
        "pre-wrap",
        "preserve-3d",
        "progress",
        "push-button",
        "radial-gradient",
        "radio",
        "read-only",
        "read-write",
        "read-write-plaintext-only",
        "rectangle",
        "region",
        "relative",
        "repeat",
        "repeating-linear-gradient",
        "repeating-radial-gradient",
        "repeating-conic-gradient",
        "repeat-x",
        "repeat-y",
        "reset",
        "reverse",
        "rgb",
        "rgba",
        "ridge",
        "right",
        "rotate",
        "rotate3d",
        "rotateX",
        "rotateY",
        "rotateZ",
        "round",
        "row",
        "row-resize",
        "row-reverse",
        "rtl",
        "run-in",
        "running",
        "s-resize",
        "sans-serif",
        "saturate",
        "saturation",
        "scale",
        "scale3d",
        "scaleX",
        "scaleY",
        "scaleZ",
        "screen",
        "scroll",
        "scrollbar",
        "scroll-position",
        "se-resize",
        "searchfield",
        "searchfield-cancel-button",
        "searchfield-decoration",
        "searchfield-results-button",
        "searchfield-results-decoration",
        "self-start",
        "self-end",
        "semi-condensed",
        "semi-expanded",
        "separate",
        "sepia",
        "serif",
        "show",
        "sidama",
        "simp-chinese-formal",
        "simp-chinese-informal",
        "single",
        "skew",
        "skewX",
        "skewY",
        "skip-white-space",
        "slide",
        "slider-horizontal",
        "slider-vertical",
        "sliderthumb-horizontal",
        "sliderthumb-vertical",
        "slow",
        "small",
        "small-caps",
        "small-caption",
        "smaller",
        "soft-light",
        "solid",
        "somali",
        "source-atop",
        "source-in",
        "source-out",
        "source-over",
        "space",
        "space-around",
        "space-between",
        "space-evenly",
        "spell-out",
        "square",
        "square-button",
        "start",
        "static",
        "status-bar",
        "stretch",
        "stroke",
        "stroke-box",
        "sub",
        "subpixel-antialiased",
        "svg_masks",
        "super",
        "sw-resize",
        "symbolic",
        "symbols",
        "system-ui",
        "table",
        "table-caption",
        "table-cell",
        "table-column",
        "table-column-group",
        "table-footer-group",
        "table-header-group",
        "table-row",
        "table-row-group",
        "tamil",
        "telugu",
        "text",
        "text-bottom",
        "text-top",
        "textarea",
        "textfield",
        "thai",
        "thick",
        "thin",
        "threeddarkshadow",
        "threedface",
        "threedhighlight",
        "threedlightshadow",
        "threedshadow",
        "tibetan",
        "tigre",
        "tigrinya-er",
        "tigrinya-er-abegede",
        "tigrinya-et",
        "tigrinya-et-abegede",
        "to",
        "top",
        "trad-chinese-formal",
        "trad-chinese-informal",
        "transform",
        "translate",
        "translate3d",
        "translateX",
        "translateY",
        "translateZ",
        "transparent",
        "ultra-condensed",
        "ultra-expanded",
        "underline",
        "unidirectional-pan",
        "unset",
        "up",
        "upper-alpha",
        "upper-armenian",
        "upper-greek",
        "upper-hexadecimal",
        "upper-latin",
        "upper-norwegian",
        "upper-roman",
        "uppercase",
        "urdu",
        "url",
        "var",
        "vertical",
        "vertical-text",
        "view-box",
        "visible",
        "visibleFill",
        "visiblePainted",
        "visibleStroke",
        "visual",
        "w-resize",
        "wait",
        "wave",
        "wider",
        "window",
        "windowframe",
        "windowtext",
        "words",
        "wrap",
        "wrap-reverse",
        "x-large",
        "x-small",
        "xor",
        "xx-large",
        "xx-small"
      ];
      valueKeywords = keySet(valueKeywords_);
      allWords = documentTypes_.concat(mediaTypes_).concat(mediaFeatures_).concat(mediaValueKeywords_).concat(propertyKeywords_).concat(nonStandardPropertyKeywords_).concat(colorKeywords_).concat(valueKeywords_);
      keywords5 = {
        properties: propertyKeywords_,
        colors: colorKeywords_,
        fonts: fontProperties_,
        values: valueKeywords_,
        all: allWords
      };
      defaults3 = {
        documentTypes,
        mediaTypes,
        mediaFeatures,
        mediaValueKeywords,
        propertyKeywords,
        nonStandardPropertyKeywords,
        fontProperties,
        counterDescriptors,
        colorKeywords,
        valueKeywords,
        tokenHooks: {
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          }
        }
      };
      css2 = mkCSS({ name: "css" });
      sCSS = mkCSS({
        name: "scss",
        mediaTypes,
        mediaFeatures,
        mediaValueKeywords,
        propertyKeywords,
        nonStandardPropertyKeywords,
        colorKeywords,
        valueKeywords,
        fontProperties,
        allowNested: true,
        lineComment: "//",
        tokenHooks: {
          "/": function(stream, state) {
            if (stream.eat("/")) {
              stream.skipToEnd();
              return ["comment", "comment"];
            } else if (stream.eat("*")) {
              state.tokenize = tokenCComment;
              return tokenCComment(stream, state);
            } else {
              return ["operator", "operator"];
            }
          },
          ":": function(stream) {
            if (stream.match(/^\s*\{/, false))
              return [null, null];
            return false;
          },
          "$": function(stream) {
            stream.match(/^[\w-]+/);
            if (stream.match(/^\s*:/, false))
              return ["def", "variable-definition"];
            return ["variableName.special", "variable"];
          },
          "#": function(stream) {
            if (!stream.eat("{"))
              return false;
            return [null, "interpolation"];
          }
        }
      });
      less = mkCSS({
        name: "less",
        mediaTypes,
        mediaFeatures,
        mediaValueKeywords,
        propertyKeywords,
        nonStandardPropertyKeywords,
        colorKeywords,
        valueKeywords,
        fontProperties,
        allowNested: true,
        lineComment: "//",
        tokenHooks: {
          "/": function(stream, state) {
            if (stream.eat("/")) {
              stream.skipToEnd();
              return ["comment", "comment"];
            } else if (stream.eat("*")) {
              state.tokenize = tokenCComment;
              return tokenCComment(stream, state);
            } else {
              return ["operator", "operator"];
            }
          },
          "@": function(stream) {
            if (stream.eat("{"))
              return [null, "interpolation"];
            if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, false))
              return false;
            stream.eatWhile(/[\w\\\-]/);
            if (stream.match(/^\s*:/, false))
              return ["def", "variable-definition"];
            return ["variableName", "variable"];
          },
          "&": function() {
            return ["atom", "atom"];
          }
        }
      });
      gss = mkCSS({
        name: "gss",
        documentTypes,
        mediaTypes,
        mediaFeatures,
        propertyKeywords,
        nonStandardPropertyKeywords,
        fontProperties,
        counterDescriptors,
        colorKeywords,
        valueKeywords,
        supportsAtComponent: true,
        tokenHooks: {
          "/": function(stream, state) {
            if (!stream.eat("*"))
              return false;
            state.tokenize = tokenCComment;
            return tokenCComment(stream, state);
          }
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/cmake.js
  var cmake_exports = {};
  __export(cmake_exports, {
    cmake: () => cmake
  });
  function tokenString(stream, state) {
    var current, prev, found_var = false;
    while (!stream.eol() && (current = stream.next()) != state.pending) {
      if (current === "$" && prev != "\\" && state.pending == '"') {
        found_var = true;
        break;
      }
      prev = current;
    }
    if (found_var) {
      stream.backUp(1);
    }
    if (current == state.pending) {
      state.continueString = false;
    } else {
      state.continueString = true;
    }
    return "string";
  }
  function tokenize(stream, state) {
    var ch2 = stream.next();
    if (ch2 === "$") {
      if (stream.match(variable_regex)) {
        return "variableName.special";
      }
      return "variable";
    }
    if (state.continueString) {
      stream.backUp(1);
      return tokenString(stream, state);
    }
    if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
      stream.backUp(1);
      return "def";
    }
    if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 == "'" || ch2 == '"') {
      state.pending = ch2;
      return tokenString(stream, state);
    }
    if (ch2 == "(" || ch2 == ")") {
      return "bracket";
    }
    if (ch2.match(/[0-9]/)) {
      return "number";
    }
    stream.eatWhile(/[\w-]/);
    return null;
  }
  var variable_regex, cmake;
  var init_cmake = __esm({
    "node_modules/@codemirror/legacy-modes/mode/cmake.js"() {
      variable_regex = /({)?[a-zA-Z0-9_]+(})?/;
      cmake = {
        name: "cmake",
        startState: function() {
          var state = {};
          state.inDefinition = false;
          state.inInclude = false;
          state.continueString = false;
          state.pending = false;
          return state;
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return tokenize(stream, state);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/coffeescript.js
  var coffeescript_exports = {};
  __export(coffeescript_exports, {
    coffeeScript: () => coffeeScript
  });
  function wordRegexp(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b");
  }
  function tokenBase(stream, state) {
    if (stream.sol()) {
      if (state.scope.align === null)
        state.scope.align = false;
      var scopeOffset = state.scope.offset;
      if (stream.eatSpace()) {
        var lineOffset = stream.indentation();
        if (lineOffset > scopeOffset && state.scope.type == "coffee") {
          return "indent";
        } else if (lineOffset < scopeOffset) {
          return "dedent";
        }
        return null;
      } else {
        if (scopeOffset > 0) {
          dedent2(stream, state);
        }
      }
    }
    if (stream.eatSpace()) {
      return null;
    }
    var ch2 = stream.peek();
    if (stream.match("####")) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match("###")) {
      state.tokenize = longComment;
      return state.tokenize(stream, state);
    }
    if (ch2 === "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^-?[0-9\.]/, false)) {
      var floatLiteral = false;
      if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
        floatLiteral = true;
      }
      if (stream.match(/^-?\d+\.\d*/)) {
        floatLiteral = true;
      }
      if (stream.match(/^-?\.\d+/)) {
        floatLiteral = true;
      }
      if (floatLiteral) {
        if (stream.peek() == ".") {
          stream.backUp(1);
        }
        return "number";
      }
      var intLiteral = false;
      if (stream.match(/^-?0x[0-9a-f]+/i)) {
        intLiteral = true;
      }
      if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
        intLiteral = true;
      }
      if (stream.match(/^-?0(?![\dx])/i)) {
        intLiteral = true;
      }
      if (intLiteral) {
        return "number";
      }
    }
    if (stream.match(stringPrefixes)) {
      state.tokenize = tokenFactory(stream.current(), false, "string");
      return state.tokenize(stream, state);
    }
    if (stream.match(regexPrefixes)) {
      if (stream.current() != "/" || stream.match(/^.*\//, false)) {
        state.tokenize = tokenFactory(stream.current(), true, "string.special");
        return state.tokenize(stream, state);
      } else {
        stream.backUp(1);
      }
    }
    if (stream.match(operators) || stream.match(wordOperators)) {
      return "operator";
    }
    if (stream.match(delimiters)) {
      return "punctuation";
    }
    if (stream.match(constants)) {
      return "atom";
    }
    if (stream.match(atProp) || state.prop && stream.match(identifiers2)) {
      return "property";
    }
    if (stream.match(keywords6)) {
      return "keyword";
    }
    if (stream.match(identifiers2)) {
      return "variable";
    }
    stream.next();
    return ERRORCLASS;
  }
  function tokenFactory(delimiter2, singleline, outclass) {
    return function(stream, state) {
      while (!stream.eol()) {
        stream.eatWhile(/[^'"\/\\]/);
        if (stream.eat("\\")) {
          stream.next();
          if (singleline && stream.eol()) {
            return outclass;
          }
        } else if (stream.match(delimiter2)) {
          state.tokenize = tokenBase;
          return outclass;
        } else {
          stream.eat(/['"\/]/);
        }
      }
      if (singleline) {
        state.tokenize = tokenBase;
      }
      return outclass;
    };
  }
  function longComment(stream, state) {
    while (!stream.eol()) {
      stream.eatWhile(/[^#]/);
      if (stream.match("###")) {
        state.tokenize = tokenBase;
        break;
      }
      stream.eatWhile("#");
    }
    return "comment";
  }
  function indent2(stream, state, type7 = "coffee") {
    var offset2 = 0, align = false, alignOffset = null;
    for (var scope = state.scope; scope; scope = scope.prev) {
      if (scope.type === "coffee" || scope.type == "}") {
        offset2 = scope.offset + stream.indentUnit;
        break;
      }
    }
    if (type7 !== "coffee") {
      align = null;
      alignOffset = stream.column() + stream.current().length;
    } else if (state.scope.align) {
      state.scope.align = false;
    }
    state.scope = {
      offset: offset2,
      type: type7,
      prev: state.scope,
      align,
      alignOffset
    };
  }
  function dedent2(stream, state) {
    if (!state.scope.prev)
      return;
    if (state.scope.type === "coffee") {
      var _indent = stream.indentation();
      var matched = false;
      for (var scope = state.scope; scope; scope = scope.prev) {
        if (_indent === scope.offset) {
          matched = true;
          break;
        }
      }
      if (!matched) {
        return true;
      }
      while (state.scope.prev && state.scope.offset !== _indent) {
        state.scope = state.scope.prev;
      }
      return false;
    } else {
      state.scope = state.scope.prev;
      return false;
    }
  }
  function tokenLexer(stream, state) {
    var style2 = state.tokenize(stream, state);
    var current = stream.current();
    if (current === "return") {
      state.dedent = true;
    }
    if ((current === "->" || current === "=>") && stream.eol() || style2 === "indent") {
      indent2(stream, state);
    }
    var delimiter_index = "[({".indexOf(current);
    if (delimiter_index !== -1) {
      indent2(stream, state, "])}".slice(delimiter_index, delimiter_index + 1));
    }
    if (indentKeywords.exec(current)) {
      indent2(stream, state);
    }
    if (current == "then") {
      dedent2(stream, state);
    }
    if (style2 === "dedent") {
      if (dedent2(stream, state)) {
        return ERRORCLASS;
      }
    }
    delimiter_index = "])}".indexOf(current);
    if (delimiter_index !== -1) {
      while (state.scope.type == "coffee" && state.scope.prev)
        state.scope = state.scope.prev;
      if (state.scope.type == current)
        state.scope = state.scope.prev;
    }
    if (state.dedent && stream.eol()) {
      if (state.scope.type == "coffee" && state.scope.prev)
        state.scope = state.scope.prev;
      state.dedent = false;
    }
    return style2 == "indent" || style2 == "dedent" ? null : style2;
  }
  var ERRORCLASS, operators, delimiters, identifiers2, atProp, wordOperators, indentKeywords, commonKeywords, keywords6, stringPrefixes, regexPrefixes, commonConstants, constants, coffeeScript;
  var init_coffeescript = __esm({
    "node_modules/@codemirror/legacy-modes/mode/coffeescript.js"() {
      ERRORCLASS = "error";
      operators = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
      delimiters = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
      identifiers2 = /^[_A-Za-z$][_A-Za-z$0-9]*/;
      atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;
      wordOperators = wordRegexp([
        "and",
        "or",
        "not",
        "is",
        "isnt",
        "in",
        "instanceof",
        "typeof"
      ]);
      indentKeywords = [
        "for",
        "while",
        "loop",
        "if",
        "unless",
        "else",
        "switch",
        "try",
        "catch",
        "finally",
        "class"
      ];
      commonKeywords = [
        "break",
        "by",
        "continue",
        "debugger",
        "delete",
        "do",
        "in",
        "of",
        "new",
        "return",
        "then",
        "this",
        "@",
        "throw",
        "when",
        "until",
        "extends"
      ];
      keywords6 = wordRegexp(indentKeywords.concat(commonKeywords));
      indentKeywords = wordRegexp(indentKeywords);
      stringPrefixes = /^('{3}|\"{3}|['\"])/;
      regexPrefixes = /^(\/{3}|\/)/;
      commonConstants = ["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"];
      constants = wordRegexp(commonConstants);
      coffeeScript = {
        name: "coffeescript",
        startState: function() {
          return {
            tokenize: tokenBase,
            scope: { offset: 0, type: "coffee", prev: null, align: false },
            prop: false,
            dedent: 0
          };
        },
        token: function(stream, state) {
          var fillAlign = state.scope.align === null && state.scope;
          if (fillAlign && stream.sol())
            fillAlign.align = false;
          var style2 = tokenLexer(stream, state);
          if (style2 && style2 != "comment") {
            if (fillAlign)
              fillAlign.align = true;
            state.prop = style2 == "punctuation" && stream.current() == ".";
          }
          return style2;
        },
        indent: function(state, text) {
          if (state.tokenize != tokenBase)
            return 0;
          var scope = state.scope;
          var closer = text && "])}".indexOf(text.charAt(0)) > -1;
          if (closer)
            while (scope.type == "coffee" && scope.prev)
              scope = scope.prev;
          var closes = closer && scope.type === text.charAt(0);
          if (scope.align)
            return scope.alignOffset - (closes ? 1 : 0);
          else
            return (closes ? scope.prev : scope).offset;
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/commonlisp.js
  var commonlisp_exports = {};
  __export(commonlisp_exports, {
    commonLisp: () => commonLisp
  });
  function readSym(stream) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "\\")
        stream.next();
      else if (!symbol.test(ch2)) {
        stream.backUp(1);
        break;
      }
    }
    return stream.current();
  }
  function base3(stream, state) {
    if (stream.eatSpace()) {
      type = "ws";
      return null;
    }
    if (stream.match(numLiteral))
      return "number";
    var ch2 = stream.next();
    if (ch2 == "\\")
      ch2 = stream.next();
    if (ch2 == '"')
      return (state.tokenize = inString3)(stream, state);
    else if (ch2 == "(") {
      type = "open";
      return "bracket";
    } else if (ch2 == ")" || ch2 == "]") {
      type = "close";
      return "bracket";
    } else if (ch2 == ";") {
      stream.skipToEnd();
      type = "ws";
      return "comment";
    } else if (/['`,@]/.test(ch2))
      return null;
    else if (ch2 == "|") {
      if (stream.skipTo("|")) {
        stream.next();
        return "variableName";
      } else {
        stream.skipToEnd();
        return "error";
      }
    } else if (ch2 == "#") {
      var ch2 = stream.next();
      if (ch2 == "(") {
        type = "open";
        return "bracket";
      } else if (/[+\-=\.']/.test(ch2))
        return null;
      else if (/\d/.test(ch2) && stream.match(/^\d*#/))
        return null;
      else if (ch2 == "|")
        return (state.tokenize = inComment2)(stream, state);
      else if (ch2 == ":") {
        readSym(stream);
        return "meta";
      } else if (ch2 == "\\") {
        stream.next();
        readSym(stream);
        return "string.special";
      } else
        return "error";
    } else {
      var name2 = readSym(stream);
      if (name2 == ".")
        return null;
      type = "symbol";
      if (name2 == "nil" || name2 == "t" || name2.charAt(0) == ":")
        return "atom";
      if (state.lastType == "open" && (specialForm2.test(name2) || assumeBody.test(name2)))
        return "keyword";
      if (name2.charAt(0) == "&")
        return "variableName.special";
      return "variableName";
    }
  }
  function inString3(stream, state) {
    var escaped = false, next2;
    while (next2 = stream.next()) {
      if (next2 == '"' && !escaped) {
        state.tokenize = base3;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    return "string";
  }
  function inComment2(stream, state) {
    var next2, last;
    while (next2 = stream.next()) {
      if (next2 == "#" && last == "|") {
        state.tokenize = base3;
        break;
      }
      last = next2;
    }
    type = "ws";
    return "comment";
  }
  var specialForm2, assumeBody, numLiteral, symbol, type, commonLisp;
  var init_commonlisp = __esm({
    "node_modules/@codemirror/legacy-modes/mode/commonlisp.js"() {
      specialForm2 = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
      assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
      numLiteral = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
      symbol = /[^\s'`,@()\[\]";]/;
      commonLisp = {
        name: "commonlisp",
        startState: function() {
          return { ctx: { prev: null, start: 0, indentTo: 0 }, lastType: null, tokenize: base3 };
        },
        token: function(stream, state) {
          if (stream.sol() && typeof state.ctx.indentTo != "number")
            state.ctx.indentTo = state.ctx.start + 1;
          type = null;
          var style2 = state.tokenize(stream, state);
          if (type != "ws") {
            if (state.ctx.indentTo == null) {
              if (type == "symbol" && assumeBody.test(stream.current()))
                state.ctx.indentTo = state.ctx.start + stream.indentUnit;
              else
                state.ctx.indentTo = "next";
            } else if (state.ctx.indentTo == "next") {
              state.ctx.indentTo = stream.column();
            }
            state.lastType = type;
          }
          if (type == "open")
            state.ctx = { prev: state.ctx, start: stream.column(), indentTo: null };
          else if (type == "close")
            state.ctx = state.ctx.prev || state.ctx;
          return style2;
        },
        indent: function(state) {
          var i = state.ctx.indentTo;
          return typeof i == "number" ? i : state.ctx.start + 1;
        },
        languageData: {
          commentTokens: { line: ";;", block: { open: "#|", close: "|#" } },
          closeBrackets: { brackets: ["(", "[", "{", '"'] }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/cypher.js
  var cypher_exports = {};
  __export(cypher_exports, {
    cypher: () => cypher
  });
  var wordRegexp2, tokenBase2, pushContext2, popContext2, curPunc, funcs, preds, keywords7, systemKeywords, operatorChars, cypher;
  var init_cypher = __esm({
    "node_modules/@codemirror/legacy-modes/mode/cypher.js"() {
      wordRegexp2 = function(words22) {
        return new RegExp("^(?:" + words22.join("|") + ")$", "i");
      };
      tokenBase2 = function(stream) {
        curPunc = null;
        var ch2 = stream.next();
        if (ch2 === '"') {
          stream.match(/^.*?"/);
          return "string";
        }
        if (ch2 === "'") {
          stream.match(/^.*?'/);
          return "string";
        }
        if (/[{}\(\),\.;\[\]]/.test(ch2)) {
          curPunc = ch2;
          return "punctuation";
        } else if (ch2 === "/" && stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        } else if (operatorChars.test(ch2)) {
          stream.eatWhile(operatorChars);
          return null;
        } else {
          stream.eatWhile(/[_\w\d]/);
          if (stream.eat(":")) {
            stream.eatWhile(/[\w\d_\-]/);
            return "atom";
          }
          var word2 = stream.current();
          if (funcs.test(word2))
            return "builtin";
          if (preds.test(word2))
            return "def";
          if (keywords7.test(word2) || systemKeywords.test(word2))
            return "keyword";
          return "variable";
        }
      };
      pushContext2 = function(state, type7, col) {
        return state.context = {
          prev: state.context,
          indent: state.indent,
          col,
          type: type7
        };
      };
      popContext2 = function(state) {
        state.indent = state.context.indent;
        return state.context = state.context.prev;
      };
      funcs = wordRegexp2(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);
      preds = wordRegexp2(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);
      keywords7 = wordRegexp2(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]);
      systemKeywords = wordRegexp2(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]);
      operatorChars = /[*+\-<>=&|~%^]/;
      cypher = {
        name: "cypher",
        startState: function() {
          return {
            tokenize: tokenBase2,
            context: null,
            indent: 0,
            col: 0
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            if (state.context && state.context.align == null) {
              state.context.align = false;
            }
            state.indent = stream.indentation();
          }
          if (stream.eatSpace()) {
            return null;
          }
          var style2 = state.tokenize(stream, state);
          if (style2 !== "comment" && state.context && state.context.align == null && state.context.type !== "pattern") {
            state.context.align = true;
          }
          if (curPunc === "(") {
            pushContext2(state, ")", stream.column());
          } else if (curPunc === "[") {
            pushContext2(state, "]", stream.column());
          } else if (curPunc === "{") {
            pushContext2(state, "}", stream.column());
          } else if (/[\]\}\)]/.test(curPunc)) {
            while (state.context && state.context.type === "pattern") {
              popContext2(state);
            }
            if (state.context && curPunc === state.context.type) {
              popContext2(state);
            }
          } else if (curPunc === "." && state.context && state.context.type === "pattern") {
            popContext2(state);
          } else if (/atom|string|variable/.test(style2) && state.context) {
            if (/[\}\]]/.test(state.context.type)) {
              pushContext2(state, "pattern", stream.column());
            } else if (state.context.type === "pattern" && !state.context.align) {
              state.context.align = true;
              state.context.col = stream.column();
            }
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var firstChar = textAfter && textAfter.charAt(0);
          var context = state.context;
          if (/[\]\}]/.test(firstChar)) {
            while (context && context.type === "pattern") {
              context = context.prev;
            }
          }
          var closing3 = context && firstChar === context.type;
          if (!context)
            return 0;
          if (context.type === "keywords")
            return null;
          if (context.align)
            return context.col + (closing3 ? 0 : 1);
          return context.indent + (closing3 ? 0 : cx2.unit);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/python.js
  var python_exports = {};
  __export(python_exports, {
    cython: () => cython,
    mkPython: () => mkPython,
    python: () => python2
  });
  function wordRegexp3(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b");
  }
  function top2(state) {
    return state.scopes[state.scopes.length - 1];
  }
  function mkPython(parserConf) {
    var ERRORCLASS3 = "error";
    var delimiters3 = parserConf.delimiters || parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.\\]/;
    var operators9 = [
      parserConf.singleOperators,
      parserConf.doubleOperators,
      parserConf.doubleDelimiters,
      parserConf.tripleDelimiters,
      parserConf.operators || /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/
    ];
    for (var i = 0; i < operators9.length; i++)
      if (!operators9[i])
        operators9.splice(i--, 1);
    var hangingIndent = parserConf.hangingIndent;
    var myKeywords = commonKeywords2, myBuiltins = commonBuiltins;
    if (parserConf.extra_keywords != void 0)
      myKeywords = myKeywords.concat(parserConf.extra_keywords);
    if (parserConf.extra_builtins != void 0)
      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);
    var py3 = !(parserConf.version && Number(parserConf.version) < 3);
    if (py3) {
      var identifiers11 = parserConf.identifiers || /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
      myKeywords = myKeywords.concat(["nonlocal", "False", "True", "None", "async", "await"]);
      myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
      var stringPrefixes4 = new RegExp(`^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|"{3}|['"]))`, "i");
    } else {
      var identifiers11 = parserConf.identifiers || /^[_A-Za-z][_A-Za-z0-9]*/;
      myKeywords = myKeywords.concat(["exec", "print"]);
      myBuiltins = myBuiltins.concat([
        "apply",
        "basestring",
        "buffer",
        "cmp",
        "coerce",
        "execfile",
        "file",
        "intern",
        "long",
        "raw_input",
        "reduce",
        "reload",
        "unichr",
        "unicode",
        "xrange",
        "False",
        "True",
        "None"
      ]);
      var stringPrefixes4 = new RegExp(`^(([rubf]|(ur)|(br))?('{3}|"{3}|['"]))`, "i");
    }
    var keywords47 = wordRegexp3(myKeywords);
    var builtins11 = wordRegexp3(myBuiltins);
    function tokenBase48(stream, state) {
      var sol = stream.sol() && state.lastToken != "\\";
      if (sol)
        state.indent = stream.indentation();
      if (sol && top2(state).type == "py") {
        var scopeOffset = top2(state).offset;
        if (stream.eatSpace()) {
          var lineOffset = stream.indentation();
          if (lineOffset > scopeOffset)
            pushPyScope(stream, state);
          else if (lineOffset < scopeOffset && dedent5(stream, state) && stream.peek() != "#")
            state.errorToken = true;
          return null;
        } else {
          var style2 = tokenBaseInner(stream, state);
          if (scopeOffset > 0 && dedent5(stream, state))
            style2 += " " + ERRORCLASS3;
          return style2;
        }
      }
      return tokenBaseInner(stream, state);
    }
    function tokenBaseInner(stream, state, inFormat) {
      if (stream.eatSpace())
        return null;
      if (!inFormat && stream.match(/^#.*/))
        return "comment";
      if (stream.match(/^[0-9\.]/, false)) {
        var floatLiteral = false;
        if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) {
          floatLiteral = true;
        }
        if (stream.match(/^[\d_]+\.\d*/)) {
          floatLiteral = true;
        }
        if (stream.match(/^\.\d+/)) {
          floatLiteral = true;
        }
        if (floatLiteral) {
          stream.eat(/J/i);
          return "number";
        }
        var intLiteral = false;
        if (stream.match(/^0x[0-9a-f_]+/i))
          intLiteral = true;
        if (stream.match(/^0b[01_]+/i))
          intLiteral = true;
        if (stream.match(/^0o[0-7_]+/i))
          intLiteral = true;
        if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
          stream.eat(/J/i);
          intLiteral = true;
        }
        if (stream.match(/^0(?![\dx])/i))
          intLiteral = true;
        if (intLiteral) {
          stream.eat(/L/i);
          return "number";
        }
      }
      if (stream.match(stringPrefixes4)) {
        var isFmtString = stream.current().toLowerCase().indexOf("f") !== -1;
        if (!isFmtString) {
          state.tokenize = tokenStringFactory3(stream.current(), state.tokenize);
          return state.tokenize(stream, state);
        } else {
          state.tokenize = formatStringFactory(stream.current(), state.tokenize);
          return state.tokenize(stream, state);
        }
      }
      for (var i2 = 0; i2 < operators9.length; i2++)
        if (stream.match(operators9[i2]))
          return "operator";
      if (stream.match(delimiters3))
        return "punctuation";
      if (state.lastToken == "." && stream.match(identifiers11))
        return "property";
      if (stream.match(keywords47) || stream.match(wordOperators2))
        return "keyword";
      if (stream.match(builtins11))
        return "builtin";
      if (stream.match(/^(self|cls)\b/))
        return "self";
      if (stream.match(identifiers11)) {
        if (state.lastToken == "def" || state.lastToken == "class")
          return "def";
        return "variable";
      }
      stream.next();
      return inFormat ? null : ERRORCLASS3;
    }
    function formatStringFactory(delimiter2, tokenOuter) {
      while ("rubf".indexOf(delimiter2.charAt(0).toLowerCase()) >= 0)
        delimiter2 = delimiter2.substr(1);
      var singleline = delimiter2.length == 1;
      var OUTCLASS = "string";
      function tokenNestedExpr(depth) {
        return function(stream, state) {
          var inner = tokenBaseInner(stream, state, true);
          if (inner == "punctuation") {
            if (stream.current() == "{") {
              state.tokenize = tokenNestedExpr(depth + 1);
            } else if (stream.current() == "}") {
              if (depth > 1)
                state.tokenize = tokenNestedExpr(depth - 1);
              else
                state.tokenize = tokenString30;
            }
          }
          return inner;
        };
      }
      function tokenString30(stream, state) {
        while (!stream.eol()) {
          stream.eatWhile(/[^'"\{\}\\]/);
          if (stream.eat("\\")) {
            stream.next();
            if (singleline && stream.eol())
              return OUTCLASS;
          } else if (stream.match(delimiter2)) {
            state.tokenize = tokenOuter;
            return OUTCLASS;
          } else if (stream.match("{{")) {
            return OUTCLASS;
          } else if (stream.match("{", false)) {
            state.tokenize = tokenNestedExpr(0);
            if (stream.current())
              return OUTCLASS;
            else
              return state.tokenize(stream, state);
          } else if (stream.match("}}")) {
            return OUTCLASS;
          } else if (stream.match("}")) {
            return ERRORCLASS3;
          } else {
            stream.eat(/['"]/);
          }
        }
        if (singleline) {
          if (parserConf.singleLineStringErrors)
            return ERRORCLASS3;
          else
            state.tokenize = tokenOuter;
        }
        return OUTCLASS;
      }
      tokenString30.isString = true;
      return tokenString30;
    }
    function tokenStringFactory3(delimiter2, tokenOuter) {
      while ("rubf".indexOf(delimiter2.charAt(0).toLowerCase()) >= 0)
        delimiter2 = delimiter2.substr(1);
      var singleline = delimiter2.length == 1;
      var OUTCLASS = "string";
      function tokenString30(stream, state) {
        while (!stream.eol()) {
          stream.eatWhile(/[^'"\\]/);
          if (stream.eat("\\")) {
            stream.next();
            if (singleline && stream.eol())
              return OUTCLASS;
          } else if (stream.match(delimiter2)) {
            state.tokenize = tokenOuter;
            return OUTCLASS;
          } else {
            stream.eat(/['"]/);
          }
        }
        if (singleline) {
          if (parserConf.singleLineStringErrors)
            return ERRORCLASS3;
          else
            state.tokenize = tokenOuter;
        }
        return OUTCLASS;
      }
      tokenString30.isString = true;
      return tokenString30;
    }
    function pushPyScope(stream, state) {
      while (top2(state).type != "py")
        state.scopes.pop();
      state.scopes.push({
        offset: top2(state).offset + stream.indentUnit,
        type: "py",
        align: null
      });
    }
    function pushBracketScope(stream, state, type7) {
      var align = stream.match(/^[\s\[\{\(]*(?:#|$)/, false) ? null : stream.column() + 1;
      state.scopes.push({
        offset: state.indent + (hangingIndent || stream.indentUnit),
        type: type7,
        align
      });
    }
    function dedent5(stream, state) {
      var indented = stream.indentation();
      while (state.scopes.length > 1 && top2(state).offset > indented) {
        if (top2(state).type != "py")
          return true;
        state.scopes.pop();
      }
      return top2(state).offset != indented;
    }
    function tokenLexer4(stream, state) {
      if (stream.sol()) {
        state.beginningOfLine = true;
        state.dedent = false;
      }
      var style2 = state.tokenize(stream, state);
      var current = stream.current();
      if (state.beginningOfLine && current == "@")
        return stream.match(identifiers11, false) ? "meta" : py3 ? "operator" : ERRORCLASS3;
      if (/\S/.test(current))
        state.beginningOfLine = false;
      if ((style2 == "variable" || style2 == "builtin") && state.lastToken == "meta")
        style2 = "meta";
      if (current == "pass" || current == "return")
        state.dedent = true;
      if (current == "lambda")
        state.lambda = true;
      if (current == ":" && !state.lambda && top2(state).type == "py" && stream.match(/^\s*(?:#|$)/, false))
        pushPyScope(stream, state);
      if (current.length == 1 && !/string|comment/.test(style2)) {
        var delimiter_index = "[({".indexOf(current);
        if (delimiter_index != -1)
          pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index + 1));
        delimiter_index = "])}".indexOf(current);
        if (delimiter_index != -1) {
          if (top2(state).type == current)
            state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);
          else
            return ERRORCLASS3;
        }
      }
      if (state.dedent && stream.eol() && top2(state).type == "py" && state.scopes.length > 1)
        state.scopes.pop();
      return style2;
    }
    return {
      name: "python",
      startState: function() {
        return {
          tokenize: tokenBase48,
          scopes: [{ offset: 0, type: "py", align: null }],
          indent: 0,
          lastToken: null,
          lambda: false,
          dedent: 0
        };
      },
      token: function(stream, state) {
        var addErr = state.errorToken;
        if (addErr)
          state.errorToken = false;
        var style2 = tokenLexer4(stream, state);
        if (style2 && style2 != "comment")
          state.lastToken = style2 == "keyword" || style2 == "punctuation" ? stream.current() : style2;
        if (style2 == "punctuation")
          style2 = null;
        if (stream.eol() && state.lambda)
          state.lambda = false;
        return addErr ? ERRORCLASS3 : style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase48)
          return state.tokenize.isString ? null : 0;
        var scope = top2(state);
        var closing3 = scope.type == textAfter.charAt(0) || scope.type == "py" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);
        if (scope.align != null)
          return scope.align - (closing3 ? 1 : 0);
        else
          return scope.offset - (closing3 ? hangingIndent || cx2.unit : 0);
      },
      languageData: {
        autocomplete: commonKeywords2.concat(commonBuiltins).concat(["exec", "print"]),
        indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/,
        commentTokens: { line: "#" },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "'''", '"""'] }
      }
    };
  }
  var wordOperators2, commonKeywords2, commonBuiltins, words3, python2, cython;
  var init_python = __esm({
    "node_modules/@codemirror/legacy-modes/mode/python.js"() {
      wordOperators2 = wordRegexp3(["and", "or", "not", "is"]);
      commonKeywords2 = [
        "as",
        "assert",
        "break",
        "class",
        "continue",
        "def",
        "del",
        "elif",
        "else",
        "except",
        "finally",
        "for",
        "from",
        "global",
        "if",
        "import",
        "lambda",
        "pass",
        "raise",
        "return",
        "try",
        "while",
        "with",
        "yield",
        "in"
      ];
      commonBuiltins = [
        "abs",
        "all",
        "any",
        "bin",
        "bool",
        "bytearray",
        "callable",
        "chr",
        "classmethod",
        "compile",
        "complex",
        "delattr",
        "dict",
        "dir",
        "divmod",
        "enumerate",
        "eval",
        "filter",
        "float",
        "format",
        "frozenset",
        "getattr",
        "globals",
        "hasattr",
        "hash",
        "help",
        "hex",
        "id",
        "input",
        "int",
        "isinstance",
        "issubclass",
        "iter",
        "len",
        "list",
        "locals",
        "map",
        "max",
        "memoryview",
        "min",
        "next",
        "object",
        "oct",
        "open",
        "ord",
        "pow",
        "property",
        "range",
        "repr",
        "reversed",
        "round",
        "set",
        "setattr",
        "slice",
        "sorted",
        "staticmethod",
        "str",
        "sum",
        "super",
        "tuple",
        "type",
        "vars",
        "zip",
        "__import__",
        "NotImplemented",
        "Ellipsis",
        "__debug__"
      ];
      words3 = function(str) {
        return str.split(" ");
      };
      python2 = mkPython({});
      cython = mkPython({
        extra_keywords: words3("by cdef cimport cpdef ctypedef enum except extern gil include nogil property public readonly struct union DEF IF ELIF ELSE")
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/crystal.js
  var crystal_exports = {};
  __export(crystal_exports, {
    crystal: () => crystal
  });
  function wordRegExp(words22, end2) {
    return new RegExp((end2 ? "" : "^") + "(?:" + words22.join("|") + ")" + (end2 ? "$" : "\\b"));
  }
  function chain(tokenize6, stream, state) {
    state.tokenize.push(tokenize6);
    return tokenize6(stream, state);
  }
  function tokenBase3(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    if (state.lastToken != "\\" && stream.match("{%", false)) {
      return chain(tokenMacro("%", "%"), stream, state);
    }
    if (state.lastToken != "\\" && stream.match("{{", false)) {
      return chain(tokenMacro("{", "}"), stream, state);
    }
    if (stream.peek() == "#") {
      stream.skipToEnd();
      return "comment";
    }
    var matched;
    if (stream.match(idents)) {
      stream.eat(/[?!]/);
      matched = stream.current();
      if (stream.eat(":")) {
        return "atom";
      } else if (state.lastToken == ".") {
        return "property";
      } else if (keywords8.test(matched)) {
        if (indentKeywords2.test(matched)) {
          if (!(matched == "fun" && state.blocks.indexOf("lib") >= 0) && !(matched == "def" && state.lastToken == "abstract")) {
            state.blocks.push(matched);
            state.currentIndent += 1;
          }
        } else if ((state.lastStyle == "operator" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {
          state.blocks.push(matched);
          state.currentIndent += 1;
        } else if (matched == "end") {
          state.blocks.pop();
          state.currentIndent -= 1;
        }
        if (nextTokenizer.hasOwnProperty(matched)) {
          state.tokenize.push(nextTokenizer[matched]);
        }
        return "keyword";
      } else if (atomWords.test(matched)) {
        return "atom";
      }
      return "variable";
    }
    if (stream.eat("@")) {
      if (stream.peek() == "[") {
        return chain(tokenNest("[", "]", "meta"), stream, state);
      }
      stream.eat("@");
      stream.match(idents) || stream.match(types2);
      return "propertyName";
    }
    if (stream.match(types2)) {
      return "tag";
    }
    if (stream.eat(":")) {
      if (stream.eat('"')) {
        return chain(tokenQuote('"', "atom", false), stream, state);
      } else if (stream.match(idents) || stream.match(types2) || stream.match(operators2) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {
        return "atom";
      }
      stream.eat(":");
      return "operator";
    }
    if (stream.eat('"')) {
      return chain(tokenQuote('"', "string", true), stream, state);
    }
    if (stream.peek() == "%") {
      var style2 = "string";
      var embed = true;
      var delim;
      if (stream.match("%r")) {
        style2 = "string.special";
        delim = stream.next();
      } else if (stream.match("%w")) {
        embed = false;
        delim = stream.next();
      } else if (stream.match("%q")) {
        embed = false;
        delim = stream.next();
      } else {
        if (delim = stream.match(/^%([^\w\s=])/)) {
          delim = delim[1];
        } else if (stream.match(/^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/)) {
          return "meta";
        } else if (stream.eat("%")) {
          return "operator";
        }
      }
      if (matching.hasOwnProperty(delim)) {
        delim = matching[delim];
      }
      return chain(tokenQuote(delim, style2, embed), stream, state);
    }
    if (matched = stream.match(/^<<-('?)([A-Z]\w*)\1/)) {
      return chain(tokenHereDoc(matched[2], !matched[1]), stream, state);
    }
    if (stream.eat("'")) {
      stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/);
      stream.eat("'");
      return "atom";
    }
    if (stream.eat("0")) {
      if (stream.eat("x")) {
        stream.match(/^[0-9a-fA-F_]+/);
      } else if (stream.eat("o")) {
        stream.match(/^[0-7_]+/);
      } else if (stream.eat("b")) {
        stream.match(/^[01_]+/);
      }
      return "number";
    }
    if (stream.eat(/^\d/)) {
      stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/);
      return "number";
    }
    if (stream.match(operators2)) {
      stream.eat("=");
      return "operator";
    }
    if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {
      return "operator";
    }
    if (matched = stream.match(/[({[]/, false)) {
      matched = matched[0];
      return chain(tokenNest(matched, matching[matched], null), stream, state);
    }
    if (stream.eat("\\")) {
      stream.next();
      return "meta";
    }
    stream.next();
    return null;
  }
  function tokenNest(begin, end2, style2, started) {
    return function(stream, state) {
      if (!started && stream.match(begin)) {
        state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end2, style2, true);
        state.currentIndent += 1;
        return style2;
      }
      var nextStyle = tokenBase3(stream, state);
      if (stream.current() === end2) {
        state.tokenize.pop();
        state.currentIndent -= 1;
        nextStyle = style2;
      }
      return nextStyle;
    };
  }
  function tokenMacro(begin, end2, started) {
    return function(stream, state) {
      if (!started && stream.match("{" + begin)) {
        state.currentIndent += 1;
        state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end2, true);
        return "meta";
      }
      if (stream.match(end2 + "}")) {
        state.currentIndent -= 1;
        state.tokenize.pop();
        return "meta";
      }
      return tokenBase3(stream, state);
    };
  }
  function tokenMacroDef(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    var matched;
    if (matched = stream.match(idents)) {
      if (matched == "def") {
        return "keyword";
      }
      stream.eat(/[?!]/);
    }
    state.tokenize.pop();
    return "def";
  }
  function tokenFollowIdent(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    if (stream.match(idents)) {
      stream.eat(/[!?]/);
    } else {
      stream.match(operators2) || stream.match(conditionalOperators) || stream.match(indexingOperators);
    }
    state.tokenize.pop();
    return "def";
  }
  function tokenFollowType(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    stream.match(types2);
    state.tokenize.pop();
    return "def";
  }
  function tokenQuote(end2, style2, embed) {
    return function(stream, state) {
      var escaped = false;
      while (stream.peek()) {
        if (!escaped) {
          if (stream.match("{%", false)) {
            state.tokenize.push(tokenMacro("%", "%"));
            return style2;
          }
          if (stream.match("{{", false)) {
            state.tokenize.push(tokenMacro("{", "}"));
            return style2;
          }
          if (embed && stream.match("#{", false)) {
            state.tokenize.push(tokenNest("#{", "}", "meta"));
            return style2;
          }
          var ch2 = stream.next();
          if (ch2 == end2) {
            state.tokenize.pop();
            return style2;
          }
          escaped = embed && ch2 == "\\";
        } else {
          stream.next();
          escaped = false;
        }
      }
      return style2;
    };
  }
  function tokenHereDoc(phrase, embed) {
    return function(stream, state) {
      if (stream.sol()) {
        stream.eatSpace();
        if (stream.match(phrase)) {
          state.tokenize.pop();
          return "string";
        }
      }
      var escaped = false;
      while (stream.peek()) {
        if (!escaped) {
          if (stream.match("{%", false)) {
            state.tokenize.push(tokenMacro("%", "%"));
            return "string";
          }
          if (stream.match("{{", false)) {
            state.tokenize.push(tokenMacro("{", "}"));
            return "string";
          }
          if (embed && stream.match("#{", false)) {
            state.tokenize.push(tokenNest("#{", "}", "meta"));
            return "string";
          }
          escaped = embed && stream.next() == "\\";
        } else {
          stream.next();
          escaped = false;
        }
      }
      return "string";
    };
  }
  var operators2, conditionalOperators, indexingOperators, anotherOperators, idents, types2, keywords8, atomWords, indentKeywordsArray, indentKeywords2, indentExpressionKeywordsArray, indentExpressionKeywords, dedentKeywordsArray, dedentKeywords, dedentPunctualsArray, dedentPunctuals, nextTokenizer, matching, crystal;
  var init_crystal = __esm({
    "node_modules/@codemirror/legacy-modes/mode/crystal.js"() {
      operators2 = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
      conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
      indexingOperators = /^(?:\[\][?=]?)/;
      anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
      idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
      types2 = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
      keywords8 = wordRegExp([
        "abstract",
        "alias",
        "as",
        "asm",
        "begin",
        "break",
        "case",
        "class",
        "def",
        "do",
        "else",
        "elsif",
        "end",
        "ensure",
        "enum",
        "extend",
        "for",
        "fun",
        "if",
        "include",
        "instance_sizeof",
        "lib",
        "macro",
        "module",
        "next",
        "of",
        "out",
        "pointerof",
        "private",
        "protected",
        "rescue",
        "return",
        "require",
        "select",
        "sizeof",
        "struct",
        "super",
        "then",
        "type",
        "typeof",
        "uninitialized",
        "union",
        "unless",
        "until",
        "when",
        "while",
        "with",
        "yield",
        "__DIR__",
        "__END_LINE__",
        "__FILE__",
        "__LINE__"
      ]);
      atomWords = wordRegExp(["true", "false", "nil", "self"]);
      indentKeywordsArray = [
        "def",
        "fun",
        "macro",
        "class",
        "module",
        "struct",
        "lib",
        "enum",
        "union",
        "do",
        "for"
      ];
      indentKeywords2 = wordRegExp(indentKeywordsArray);
      indentExpressionKeywordsArray = ["if", "unless", "case", "while", "until", "begin", "then"];
      indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);
      dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
      dedentKeywords = wordRegExp(dedentKeywordsArray);
      dedentPunctualsArray = ["\\)", "\\}", "\\]"];
      dedentPunctuals = new RegExp("^(?:" + dedentPunctualsArray.join("|") + ")$");
      nextTokenizer = {
        "def": tokenFollowIdent,
        "fun": tokenFollowIdent,
        "macro": tokenMacroDef,
        "class": tokenFollowType,
        "module": tokenFollowType,
        "struct": tokenFollowType,
        "lib": tokenFollowType,
        "enum": tokenFollowType,
        "union": tokenFollowType
      };
      matching = { "[": "]", "{": "}", "(": ")", "<": ">" };
      crystal = {
        name: "crystal",
        startState: function() {
          return {
            tokenize: [tokenBase3],
            currentIndent: 0,
            lastToken: null,
            lastStyle: null,
            blocks: []
          };
        },
        token: function(stream, state) {
          var style2 = state.tokenize[state.tokenize.length - 1](stream, state);
          var token = stream.current();
          if (style2 && style2 != "comment") {
            state.lastToken = token;
            state.lastStyle = style2;
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          textAfter = textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, "");
          if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {
            return cx2.unit * (state.currentIndent - 1);
          }
          return cx2.unit * state.currentIndent;
        },
        languageData: {
          indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/d.js
  var d_exports = {};
  __export(d_exports, {
    d: () => d
  });
  function words4(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenBase4(stream, state) {
    var ch2 = stream.next();
    if (hooks[ch2]) {
      var result = hooks[ch2](stream, state);
      if (result !== false)
        return result;
    }
    if (ch2 == '"' || ch2 == "'" || ch2 == "`") {
      state.tokenize = tokenString2(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      curPunc2 = ch2;
      return null;
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (ch2 == "/") {
      if (stream.eat("+")) {
        state.tokenize = tokenNestedComment2;
        return tokenNestedComment2(stream, state);
      }
      if (stream.eat("*")) {
        state.tokenize = tokenComment;
        return tokenComment(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar.test(ch2)) {
      stream.eatWhile(isOperatorChar);
      return "operator";
    }
    stream.eatWhile(/[\w\$_\xa1-\uffff]/);
    var cur = stream.current();
    if (keywords9.propertyIsEnumerable(cur)) {
      if (blockKeywords.propertyIsEnumerable(cur))
        curPunc2 = "newstatement";
      return "keyword";
    }
    if (builtin.propertyIsEnumerable(cur)) {
      if (blockKeywords.propertyIsEnumerable(cur))
        curPunc2 = "newstatement";
      return "builtin";
    }
    if (atoms4.propertyIsEnumerable(cur))
      return "atom";
    return "variable";
  }
  function tokenString2(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !(escaped || multiLineStrings))
        state.tokenize = null;
      return "string";
    };
  }
  function tokenComment(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenNestedComment2(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "+";
    }
    return "comment";
  }
  function Context3(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext3(state, col, type7) {
    var indent5 = state.indented;
    if (state.context && state.context.type == "statement")
      indent5 = state.context.indented;
    return state.context = new Context3(indent5, col, type7, null, state.context);
  }
  function popContext3(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var blockKeywordsStr, parserConfig, statementIndentUnit, keywords9, builtin, blockKeywords, atoms4, hooks, multiLineStrings, isOperatorChar, curPunc2, d;
  var init_d = __esm({
    "node_modules/@codemirror/legacy-modes/mode/d.js"() {
      blockKeywordsStr = "body catch class do else enum for foreach foreach_reverse if in interface mixin out scope struct switch try union unittest version while with";
      parserConfig = {
        keywords: words4("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue debug default delegate delete deprecated export extern final finally function goto immutable import inout invariant is lazy macro module new nothrow override package pragma private protected public pure ref return shared short static super synchronized template this throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " + blockKeywordsStr),
        blockKeywords: words4(blockKeywordsStr),
        builtin: words4("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
        atoms: words4("exit failure success true false null"),
        hooks: {
          "@": function(stream, _state) {
            stream.eatWhile(/[\w\$_]/);
            return "meta";
          }
        }
      };
      statementIndentUnit = parserConfig.statementIndentUnit;
      keywords9 = parserConfig.keywords;
      builtin = parserConfig.builtin;
      blockKeywords = parserConfig.blockKeywords;
      atoms4 = parserConfig.atoms;
      hooks = parserConfig.hooks;
      multiLineStrings = parserConfig.multiLineStrings;
      isOperatorChar = /[+\-*&%=<>!?|\/]/;
      d = {
        name: "d",
        startState: function(indentUnit2) {
          return {
            tokenize: null,
            context: new Context3(-indentUnit2, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace())
            return null;
          curPunc2 = null;
          var style2 = (state.tokenize || tokenBase4)(stream, state);
          if (style2 == "comment" || style2 == "meta")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if ((curPunc2 == ";" || curPunc2 == ":" || curPunc2 == ",") && ctx.type == "statement")
            popContext3(state);
          else if (curPunc2 == "{")
            pushContext3(state, stream.column(), "}");
          else if (curPunc2 == "[")
            pushContext3(state, stream.column(), "]");
          else if (curPunc2 == "(")
            pushContext3(state, stream.column(), ")");
          else if (curPunc2 == "}") {
            while (ctx.type == "statement")
              ctx = popContext3(state);
            if (ctx.type == "}")
              ctx = popContext3(state);
            while (ctx.type == "statement")
              ctx = popContext3(state);
          } else if (curPunc2 == ctx.type)
            popContext3(state);
          else if ((ctx.type == "}" || ctx.type == "top") && curPunc2 != ";" || ctx.type == "statement" && curPunc2 == "newstatement")
            pushContext3(state, stream.column(), "statement");
          state.startOfLine = false;
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != tokenBase4 && state.tokenize != null)
            return null;
          var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
          if (ctx.type == "statement" && firstChar == "}")
            ctx = ctx.prev;
          var closing3 = firstChar == ctx.type;
          if (ctx.type == "statement")
            return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx2.unit);
          else if (ctx.align)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/diff.js
  var diff_exports = {};
  __export(diff_exports, {
    diff: () => diff
  });
  var TOKEN_NAMES, diff;
  var init_diff = __esm({
    "node_modules/@codemirror/legacy-modes/mode/diff.js"() {
      TOKEN_NAMES = {
        "+": "inserted",
        "-": "deleted",
        "@": "meta"
      };
      diff = {
        name: "diff",
        token: function(stream) {
          var tw_pos = stream.string.search(/[\t ]+?$/);
          if (!stream.sol() || tw_pos === 0) {
            stream.skipToEnd();
            return ("error " + (TOKEN_NAMES[stream.string.charAt(0)] || "")).replace(/ $/, "");
          }
          var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();
          if (tw_pos === -1) {
            stream.skipToEnd();
          } else {
            stream.pos = tw_pos;
          }
          return token_name;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/simple-mode.js
  function simpleMode(states2) {
    ensureState(states2, "start");
    var states_ = {}, meta2 = states2.languageData || {}, hasIndentation = false;
    for (var state in states2)
      if (state != meta2 && states2.hasOwnProperty(state)) {
        var list2 = states_[state] = [], orig = states2[state];
        for (var i = 0; i < orig.length; i++) {
          var data2 = orig[i];
          list2.push(new Rule2(data2, states2));
          if (data2.indent || data2.dedent)
            hasIndentation = true;
        }
      }
    return {
      name: meta2.name,
      startState: function() {
        return { state: "start", pending: null, indent: hasIndentation ? [] : null };
      },
      copyState: function(state2) {
        var s2 = { state: state2.state, pending: state2.pending, indent: state2.indent && state2.indent.slice(0) };
        if (state2.stack)
          s2.stack = state2.stack.slice(0);
        return s2;
      },
      token: tokenFunction(states_),
      indent: indentFunction(states_, meta2),
      languageData: meta2
    };
  }
  function ensureState(states2, name2) {
    if (!states2.hasOwnProperty(name2))
      throw new Error("Undefined state " + name2 + " in simple mode");
  }
  function toRegex(val, caret) {
    if (!val)
      return /(?:)/;
    var flags = "";
    if (val instanceof RegExp) {
      if (val.ignoreCase)
        flags = "i";
      val = val.source;
    } else {
      val = String(val);
    }
    return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
  }
  function asToken(val) {
    if (!val)
      return null;
    if (val.apply)
      return val;
    if (typeof val == "string")
      return val.replace(/\./g, " ");
    var result = [];
    for (var i = 0; i < val.length; i++)
      result.push(val[i] && val[i].replace(/\./g, " "));
    return result;
  }
  function Rule2(data2, states2) {
    if (data2.next || data2.push)
      ensureState(states2, data2.next || data2.push);
    this.regex = toRegex(data2.regex);
    this.token = asToken(data2.token);
    this.data = data2;
  }
  function tokenFunction(states2) {
    return function(stream, state) {
      if (state.pending) {
        var pend = state.pending.shift();
        if (state.pending.length == 0)
          state.pending = null;
        stream.pos += pend.text.length;
        return pend.token;
      }
      var curState2 = states2[state.state];
      for (var i = 0; i < curState2.length; i++) {
        var rule = curState2[i];
        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
        if (matches) {
          if (rule.data.next) {
            state.state = rule.data.next;
          } else if (rule.data.push) {
            (state.stack || (state.stack = [])).push(state.state);
            state.state = rule.data.push;
          } else if (rule.data.pop && state.stack && state.stack.length) {
            state.state = state.stack.pop();
          }
          if (rule.data.indent)
            state.indent.push(stream.indentation() + stream.indentUnit);
          if (rule.data.dedent)
            state.indent.pop();
          var token = rule.token;
          if (token && token.apply)
            token = token(matches);
          if (matches.length > 2 && rule.token && typeof rule.token != "string") {
            state.pending = [];
            for (var j = 2; j < matches.length; j++)
              if (matches[j])
                state.pending.push({ text: matches[j], token: rule.token[j - 1] });
            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
            return token[0];
          } else if (token && token.join) {
            return token[0];
          } else {
            return token;
          }
        }
      }
      stream.next();
      return null;
    };
  }
  function indentFunction(states2, meta2) {
    return function(state, textAfter) {
      if (state.indent == null || meta2.dontIndentStates && meta2.doneIndentState.indexOf(state.state) > -1)
        return null;
      var pos = state.indent.length - 1, rules = states2[state.state];
      scan:
        for (; ; ) {
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i];
            if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
              var m = rule.regex.exec(textAfter);
              if (m && m[0]) {
                pos--;
                if (rule.next || rule.push)
                  rules = states2[rule.next || rule.push];
                textAfter = textAfter.slice(m[0].length);
                continue scan;
              }
            }
          }
          break;
        }
      return pos < 0 ? 0 : state.indent[pos];
    };
  }
  var init_simple_mode = __esm({
    "node_modules/@codemirror/legacy-modes/mode/simple-mode.js"() {
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/dockerfile.js
  var dockerfile_exports = {};
  __export(dockerfile_exports, {
    dockerFile: () => dockerFile
  });
  var from2, fromRegex, shells, shellsAsArrayRegex, expose, exposeRegex, others, instructions, instructionRegex, instructionOnlyLine, instructionWithArguments, dockerFile;
  var init_dockerfile = __esm({
    "node_modules/@codemirror/legacy-modes/mode/dockerfile.js"() {
      init_simple_mode();
      from2 = "from";
      fromRegex = new RegExp("^(\\s*)\\b(" + from2 + ")\\b", "i");
      shells = ["run", "cmd", "entrypoint", "shell"];
      shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join("|") + ")(\\s+\\[)", "i");
      expose = "expose";
      exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");
      others = [
        "arg",
        "from",
        "maintainer",
        "label",
        "env",
        "add",
        "copy",
        "volume",
        "user",
        "workdir",
        "onbuild",
        "stopsignal",
        "healthcheck",
        "shell"
      ];
      instructions = [from2, expose].concat(shells).concat(others);
      instructionRegex = "(" + instructions.join("|") + ")";
      instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i");
      instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");
      dockerFile = simpleMode({
        start: [
          // Block comment: This is a line starting with a comment
          {
            regex: /^\s*#.*$/,
            sol: true,
            token: "comment"
          },
          {
            regex: fromRegex,
            token: [null, "keyword"],
            sol: true,
            next: "from"
          },
          // Highlight an instruction without any arguments (for convenience)
          {
            regex: instructionOnlyLine,
            token: [null, "keyword", null, "error"],
            sol: true
          },
          {
            regex: shellsAsArrayRegex,
            token: [null, "keyword", null],
            sol: true,
            next: "array"
          },
          {
            regex: exposeRegex,
            token: [null, "keyword", null],
            sol: true,
            next: "expose"
          },
          // Highlight an instruction followed by arguments
          {
            regex: instructionWithArguments,
            token: [null, "keyword", null],
            sol: true,
            next: "arguments"
          },
          {
            regex: /./,
            token: null
          }
        ],
        from: [
          {
            regex: /\s*$/,
            token: null,
            next: "start"
          },
          {
            // Line comment without instruction arguments is an error
            regex: /(\s*)(#.*)$/,
            token: [null, "error"],
            next: "start"
          },
          {
            regex: /(\s*\S+\s+)(as)/i,
            token: [null, "keyword"],
            next: "start"
          },
          // Fail safe return to start
          {
            token: null,
            next: "start"
          }
        ],
        single: [
          {
            regex: /(?:[^\\']|\\.)/,
            token: "string"
          },
          {
            regex: /'/,
            token: "string",
            pop: true
          }
        ],
        double: [
          {
            regex: /(?:[^\\"]|\\.)/,
            token: "string"
          },
          {
            regex: /"/,
            token: "string",
            pop: true
          }
        ],
        array: [
          {
            regex: /\]/,
            token: null,
            next: "start"
          },
          {
            regex: /"(?:[^\\"]|\\.)*"?/,
            token: "string"
          }
        ],
        expose: [
          {
            regex: /\d+$/,
            token: "number",
            next: "start"
          },
          {
            regex: /[^\d]+$/,
            token: null,
            next: "start"
          },
          {
            regex: /\d+/,
            token: "number"
          },
          {
            regex: /[^\d]+/,
            token: null
          },
          // Fail safe return to start
          {
            token: null,
            next: "start"
          }
        ],
        arguments: [
          {
            regex: /^\s*#.*$/,
            sol: true,
            token: "comment"
          },
          {
            regex: /"(?:[^\\"]|\\.)*"?$/,
            token: "string",
            next: "start"
          },
          {
            regex: /"/,
            token: "string",
            push: "double"
          },
          {
            regex: /'(?:[^\\']|\\.)*'?$/,
            token: "string",
            next: "start"
          },
          {
            regex: /'/,
            token: "string",
            push: "single"
          },
          {
            regex: /[^#"']+[\\`]$/,
            token: null
          },
          {
            regex: /[^#"']+$/,
            token: null,
            next: "start"
          },
          {
            regex: /[^#"']+/,
            token: null
          },
          // Fail safe return to start
          {
            token: null,
            next: "start"
          }
        ],
        languageData: {
          commentTokens: { line: "#" }
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/dtd.js
  var dtd_exports = {};
  __export(dtd_exports, {
    dtd: () => dtd
  });
  function ret(style2, tp) {
    type2 = tp;
    return style2;
  }
  function tokenBase5(stream, state) {
    var ch2 = stream.next();
    if (ch2 == "<" && stream.eat("!")) {
      if (stream.eatWhile(/[\-]/)) {
        state.tokenize = tokenSGMLComment;
        return tokenSGMLComment(stream, state);
      } else if (stream.eatWhile(/[\w]/))
        return ret("keyword", "doindent");
    } else if (ch2 == "<" && stream.eat("?")) {
      state.tokenize = inBlock("meta", "?>");
      return ret("meta", ch2);
    } else if (ch2 == "#" && stream.eatWhile(/[\w]/))
      return ret("atom", "tag");
    else if (ch2 == "|")
      return ret("keyword", "separator");
    else if (ch2.match(/[\(\)\[\]\-\.,\+\?>]/))
      return ret(null, ch2);
    else if (ch2.match(/[\[\]]/))
      return ret("rule", ch2);
    else if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString3(ch2);
      return state.tokenize(stream, state);
    } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
      var sc = stream.current();
      if (sc.substr(sc.length - 1, sc.length).match(/\?|\+/) !== null)
        stream.backUp(1);
      return ret("tag", "tag");
    } else if (ch2 == "%" || ch2 == "*")
      return ret("number", "number");
    else {
      stream.eatWhile(/[\w\\\-_%.{,]/);
      return ret(null, null);
    }
  }
  function tokenSGMLComment(stream, state) {
    var dashes = 0, ch2;
    while ((ch2 = stream.next()) != null) {
      if (dashes >= 2 && ch2 == ">") {
        state.tokenize = tokenBase5;
        break;
      }
      dashes = ch2 == "-" ? dashes + 1 : 0;
    }
    return ret("comment", "comment");
  }
  function tokenString3(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped) {
          state.tokenize = tokenBase5;
          break;
        }
        escaped = !escaped && ch2 == "\\";
      }
      return ret("string", "tag");
    };
  }
  function inBlock(style2, terminator) {
    return function(stream, state) {
      while (!stream.eol()) {
        if (stream.match(terminator)) {
          state.tokenize = tokenBase5;
          break;
        }
        stream.next();
      }
      return style2;
    };
  }
  var type2, dtd;
  var init_dtd = __esm({
    "node_modules/@codemirror/legacy-modes/mode/dtd.js"() {
      dtd = {
        name: "dtd",
        startState: function() {
          return {
            tokenize: tokenBase5,
            baseIndent: 0,
            stack: []
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          var context = state.stack[state.stack.length - 1];
          if (stream.current() == "[" || type2 === "doindent" || type2 == "[")
            state.stack.push("rule");
          else if (type2 === "endtag")
            state.stack[state.stack.length - 1] = "endtag";
          else if (stream.current() == "]" || type2 == "]" || type2 == ">" && context == "rule")
            state.stack.pop();
          else if (type2 == "[")
            state.stack.push("[");
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var n2 = state.stack.length;
          if (textAfter.charAt(0) === "]")
            n2--;
          else if (textAfter.substr(textAfter.length - 1, textAfter.length) === ">") {
            if (textAfter.substr(0, 1) === "<") {
            } else if (type2 == "doindent" && textAfter.length > 1) {
            } else if (type2 == "doindent")
              n2--;
            else if (type2 == ">" && textAfter.length > 1) {
            } else if (type2 == "tag" && textAfter !== ">") {
            } else if (type2 == "tag" && state.stack[state.stack.length - 1] == "rule")
              n2--;
            else if (type2 == "tag")
              n2++;
            else if (textAfter === ">" && state.stack[state.stack.length - 1] == "rule" && type2 === ">")
              n2--;
            else if (textAfter === ">" && state.stack[state.stack.length - 1] == "rule") {
            } else if (textAfter.substr(0, 1) !== "<" && textAfter.substr(0, 1) === ">")
              n2 = n2 - 1;
            else if (textAfter === ">") {
            } else
              n2 = n2 - 1;
            if (type2 == null || type2 == "]")
              n2--;
          }
          return state.baseIndent + n2 * cx2.unit;
        },
        languageData: {
          indentOnInput: /^\s*[\]>]$/
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/dylan.js
  var dylan_exports = {};
  __export(dylan_exports, {
    dylan: () => dylan
  });
  function forEach(arr, f) {
    for (var i = 0; i < arr.length; i++)
      f(arr[i], i);
  }
  function some(arr, f) {
    for (var i = 0; i < arr.length; i++)
      if (f(arr[i], i))
        return true;
    return false;
  }
  function chain2(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenBase6(stream, state) {
    var ch2 = stream.peek();
    if (ch2 == "'" || ch2 == '"') {
      stream.next();
      return chain2(stream, state, tokenString4(ch2, "string"));
    } else if (ch2 == "/") {
      stream.next();
      if (stream.eat("*")) {
        return chain2(stream, state, tokenComment2);
      } else if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
      stream.backUp(1);
    } else if (/[+\-\d\.]/.test(ch2)) {
      if (stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) || stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) || stream.match(/^[+-]?\d+/)) {
        return "number";
      }
    } else if (ch2 == "#") {
      stream.next();
      ch2 = stream.peek();
      if (ch2 == '"') {
        stream.next();
        return chain2(stream, state, tokenString4('"', "string"));
      } else if (ch2 == "b") {
        stream.next();
        stream.eatWhile(/[01]/);
        return "number";
      } else if (ch2 == "x") {
        stream.next();
        stream.eatWhile(/[\da-f]/i);
        return "number";
      } else if (ch2 == "o") {
        stream.next();
        stream.eatWhile(/[0-7]/);
        return "number";
      } else if (ch2 == "#") {
        stream.next();
        return "punctuation";
      } else if (ch2 == "[" || ch2 == "(") {
        stream.next();
        return "bracket";
      } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {
        return "atom";
      } else {
        stream.eatWhile(/[-a-zA-Z]/);
        return "error";
      }
    } else if (ch2 == "~") {
      stream.next();
      ch2 = stream.peek();
      if (ch2 == "=") {
        stream.next();
        ch2 = stream.peek();
        if (ch2 == "=") {
          stream.next();
          return "operator";
        }
        return "operator";
      }
      return "operator";
    } else if (ch2 == ":") {
      stream.next();
      ch2 = stream.peek();
      if (ch2 == "=") {
        stream.next();
        return "operator";
      } else if (ch2 == ":") {
        stream.next();
        return "punctuation";
      }
    } else if ("[](){}".indexOf(ch2) != -1) {
      stream.next();
      return "bracket";
    } else if (".,".indexOf(ch2) != -1) {
      stream.next();
      return "punctuation";
    } else if (stream.match("end")) {
      return "keyword";
    }
    for (var name2 in patterns) {
      if (patterns.hasOwnProperty(name2)) {
        var pattern = patterns[name2];
        if (pattern instanceof Array && some(pattern, function(p) {
          return stream.match(p);
        }) || stream.match(pattern))
          return patternStyles[name2];
      }
    }
    if (/[+\-*\/^=<>&|]/.test(ch2)) {
      stream.next();
      return "operator";
    }
    if (stream.match("define")) {
      return "def";
    } else {
      stream.eatWhile(/[\w\-]/);
      if (wordLookup.hasOwnProperty(stream.current())) {
        return styleLookup[stream.current()];
      } else if (stream.current().match(symbol2)) {
        return "variable";
      } else {
        stream.next();
        return "variableName.standard";
      }
    }
  }
  function tokenComment2(stream, state) {
    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        if (nestedCount > 0) {
          nestedCount--;
        } else {
          state.tokenize = tokenBase6;
          break;
        }
      } else if (ch2 == "*" && maybeNested) {
        nestedCount++;
      }
      maybeEnd = ch2 == "*";
      maybeNested = ch2 == "/";
    }
    return "comment";
  }
  function tokenString4(quote2, style2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !escaped) {
        state.tokenize = tokenBase6;
      }
      return style2;
    };
  }
  var words5, symbolPattern, symbol2, patterns, patternStyles, patternName, styles, wordLookup, styleLookup, dylan;
  var init_dylan = __esm({
    "node_modules/@codemirror/legacy-modes/mode/dylan.js"() {
      words5 = {
        // Words that introduce unnamed definitions like "define interface"
        unnamedDefinition: ["interface"],
        // Words that introduce simple named definitions like "define library"
        namedDefinition: [
          "module",
          "library",
          "macro",
          "C-struct",
          "C-union",
          "C-function",
          "C-callable-wrapper"
        ],
        // Words that introduce type definitions like "define class".
        // These are also parameterized like "define method" and are
        // appended to otherParameterizedDefinitionWords
        typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],
        // Words that introduce trickier definitions like "define method".
        // These require special definitions to be added to startExpressions
        otherParameterizedDefinition: [
          "method",
          "function",
          "C-variable",
          "C-address"
        ],
        // Words that introduce module constant definitions.
        // These must also be simple definitions and are
        // appended to otherSimpleDefinitionWords
        constantSimpleDefinition: ["constant"],
        // Words that introduce module variable definitions.
        // These must also be simple definitions and are
        // appended to otherSimpleDefinitionWords
        variableSimpleDefinition: ["variable"],
        // Other words that introduce simple definitions
        // (without implicit bodies).
        otherSimpleDefinition: [
          "generic",
          "domain",
          "C-pointer-type",
          "table"
        ],
        // Words that begin statements with implicit bodies.
        statement: [
          "if",
          "block",
          "begin",
          "method",
          "case",
          "for",
          "select",
          "when",
          "unless",
          "until",
          "while",
          "iterate",
          "profiling",
          "dynamic-bind"
        ],
        // Patterns that act as separators in compound statements.
        // This may include any general pattern that must be indented
        // specially.
        separator: [
          "finally",
          "exception",
          "cleanup",
          "else",
          "elseif",
          "afterwards"
        ],
        // Keywords that do not require special indentation handling,
        // but which should be highlighted
        other: [
          "above",
          "below",
          "by",
          "from",
          "handler",
          "in",
          "instance",
          "let",
          "local",
          "otherwise",
          "slot",
          "subclass",
          "then",
          "to",
          "keyed-by",
          "virtual"
        ],
        // Condition signaling function calls
        signalingCalls: [
          "signal",
          "error",
          "cerror",
          "break",
          "check-type",
          "abort"
        ]
      };
      words5["otherDefinition"] = words5["unnamedDefinition"].concat(words5["namedDefinition"]).concat(words5["otherParameterizedDefinition"]);
      words5["definition"] = words5["typeParameterizedDefinition"].concat(words5["otherDefinition"]);
      words5["parameterizedDefinition"] = words5["typeParameterizedDefinition"].concat(words5["otherParameterizedDefinition"]);
      words5["simpleDefinition"] = words5["constantSimpleDefinition"].concat(words5["variableSimpleDefinition"]).concat(words5["otherSimpleDefinition"]);
      words5["keyword"] = words5["statement"].concat(words5["separator"]).concat(words5["other"]);
      symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
      symbol2 = new RegExp("^" + symbolPattern);
      patterns = {
        // Symbols with special syntax
        symbolKeyword: symbolPattern + ":",
        symbolClass: "<" + symbolPattern + ">",
        symbolGlobal: "\\*" + symbolPattern + "\\*",
        symbolConstant: "\\$" + symbolPattern
      };
      patternStyles = {
        symbolKeyword: "atom",
        symbolClass: "tag",
        symbolGlobal: "variableName.standard",
        symbolConstant: "variableName.constant"
      };
      for (patternName in patterns)
        if (patterns.hasOwnProperty(patternName))
          patterns[patternName] = new RegExp("^" + patterns[patternName]);
      patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];
      styles = {};
      styles["keyword"] = "keyword";
      styles["definition"] = "def";
      styles["simpleDefinition"] = "def";
      styles["signalingCalls"] = "builtin";
      wordLookup = {};
      styleLookup = {};
      forEach([
        "keyword",
        "definition",
        "simpleDefinition",
        "signalingCalls"
      ], function(type7) {
        forEach(words5[type7], function(word2) {
          wordLookup[word2] = type7;
          styleLookup[word2] = styles[type7];
        });
      });
      dylan = {
        name: "dylan",
        startState: function() {
          return {
            tokenize: tokenBase6,
            currentIndent: 0
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          return style2;
        },
        languageData: {
          commentTokens: { block: { open: "/*", close: "*/" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/ebnf.js
  var ebnf_exports = {};
  __export(ebnf_exports, {
    ebnf: () => ebnf
  });
  var commentType, stateType, ebnf;
  var init_ebnf = __esm({
    "node_modules/@codemirror/legacy-modes/mode/ebnf.js"() {
      commentType = { slash: 0, parenthesis: 1 };
      stateType = { comment: 0, _string: 1, characterClass: 2 };
      ebnf = {
        name: "ebnf",
        startState: function() {
          return {
            stringType: null,
            commentType: null,
            braced: 0,
            lhs: true,
            localState: null,
            stack: [],
            inDefinition: false
          };
        },
        token: function(stream, state) {
          if (!stream)
            return;
          if (state.stack.length === 0) {
            if (stream.peek() == '"' || stream.peek() == "'") {
              state.stringType = stream.peek();
              stream.next();
              state.stack.unshift(stateType._string);
            } else if (stream.match("/*")) {
              state.stack.unshift(stateType.comment);
              state.commentType = commentType.slash;
            } else if (stream.match("(*")) {
              state.stack.unshift(stateType.comment);
              state.commentType = commentType.parenthesis;
            }
          }
          switch (state.stack[0]) {
            case stateType._string:
              while (state.stack[0] === stateType._string && !stream.eol()) {
                if (stream.peek() === state.stringType) {
                  stream.next();
                  state.stack.shift();
                } else if (stream.peek() === "\\") {
                  stream.next();
                  stream.next();
                } else {
                  stream.match(/^.[^\\\"\']*/);
                }
              }
              return state.lhs ? "property" : "string";
            case stateType.comment:
              while (state.stack[0] === stateType.comment && !stream.eol()) {
                if (state.commentType === commentType.slash && stream.match("*/")) {
                  state.stack.shift();
                  state.commentType = null;
                } else if (state.commentType === commentType.parenthesis && stream.match("*)")) {
                  state.stack.shift();
                  state.commentType = null;
                } else {
                  stream.match(/^.[^\*]*/);
                }
              }
              return "comment";
            case stateType.characterClass:
              while (state.stack[0] === stateType.characterClass && !stream.eol()) {
                if (!(stream.match(/^[^\]\\]+/) || stream.match("."))) {
                  state.stack.shift();
                }
              }
              return "operator";
          }
          var peek = stream.peek();
          switch (peek) {
            case "[":
              stream.next();
              state.stack.unshift(stateType.characterClass);
              return "bracket";
            case ":":
            case "|":
            case ";":
              stream.next();
              return "operator";
            case "%":
              if (stream.match("%%")) {
                return "header";
              } else if (stream.match(/[%][A-Za-z]+/)) {
                return "keyword";
              } else if (stream.match(/[%][}]/)) {
                return "bracket";
              }
              break;
            case "/":
              if (stream.match(/[\/][A-Za-z]+/)) {
                return "keyword";
              }
            case "\\":
              if (stream.match(/[\][a-z]+/)) {
                return "string.special";
              }
            case ".":
              if (stream.match(".")) {
                return "atom";
              }
            case "*":
            case "-":
            case "+":
            case "^":
              if (stream.match(peek)) {
                return "atom";
              }
            case "$":
              if (stream.match("$$")) {
                return "builtin";
              } else if (stream.match(/[$][0-9]+/)) {
                return "variableName.special";
              }
            case "<":
              if (stream.match(/<<[a-zA-Z_]+>>/)) {
                return "builtin";
              }
          }
          if (stream.match("//")) {
            stream.skipToEnd();
            return "comment";
          } else if (stream.match("return")) {
            return "operator";
          } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
            if (stream.match(/(?=[\(.])/)) {
              return "variable";
            } else if (stream.match(/(?=[\s\n]*[:=])/)) {
              return "def";
            }
            return "variableName.special";
          } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
            stream.next();
            return "bracket";
          } else if (!stream.eatSpace()) {
            stream.next();
          }
          return null;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/ecl.js
  var ecl_exports = {};
  __export(ecl_exports, {
    ecl: () => ecl
  });
  function words6(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function metaHook(stream, state) {
    if (!state.startOfLine)
      return false;
    stream.skipToEnd();
    return "meta";
  }
  function tokenBase7(stream, state) {
    var ch2 = stream.next();
    if (hooks2[ch2]) {
      var result = hooks2[ch2](stream, state);
      if (result !== false)
        return result;
    }
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString5(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      curPunc3 = ch2;
      return null;
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment3;
        return tokenComment3(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar2.test(ch2)) {
      stream.eatWhile(isOperatorChar2);
      return "operator";
    }
    stream.eatWhile(/[\w\$_]/);
    var cur = stream.current().toLowerCase();
    if (keyword2.propertyIsEnumerable(cur)) {
      if (blockKeywords2.propertyIsEnumerable(cur))
        curPunc3 = "newstatement";
      return "keyword";
    } else if (variable2.propertyIsEnumerable(cur)) {
      if (blockKeywords2.propertyIsEnumerable(cur))
        curPunc3 = "newstatement";
      return "variable";
    } else if (variable_2.propertyIsEnumerable(cur)) {
      if (blockKeywords2.propertyIsEnumerable(cur))
        curPunc3 = "newstatement";
      return "modifier";
    } else if (variable_3.propertyIsEnumerable(cur)) {
      if (blockKeywords2.propertyIsEnumerable(cur))
        curPunc3 = "newstatement";
      return "type";
    } else if (builtin2.propertyIsEnumerable(cur)) {
      if (blockKeywords2.propertyIsEnumerable(cur))
        curPunc3 = "newstatement";
      return "builtin";
    } else {
      var i = cur.length - 1;
      while (i >= 0 && (!isNaN(cur[i]) || cur[i] == "_"))
        --i;
      if (i > 0) {
        var cur2 = cur.substr(0, i + 1);
        if (variable_3.propertyIsEnumerable(cur2)) {
          if (blockKeywords2.propertyIsEnumerable(cur2))
            curPunc3 = "newstatement";
          return "type";
        }
      }
    }
    if (atoms5.propertyIsEnumerable(cur))
      return "atom";
    return null;
  }
  function tokenString5(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !escaped)
        state.tokenize = tokenBase7;
      return "string";
    };
  }
  function tokenComment3(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase7;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function Context4(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext4(state, col, type7) {
    return state.context = new Context4(state.indented, col, type7, null, state.context);
  }
  function popContext4(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var keyword2, variable2, variable_2, variable_3, builtin2, blockKeywords2, atoms5, hooks2, isOperatorChar2, curPunc3, ecl;
  var init_ecl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/ecl.js"() {
      keyword2 = words6("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode");
      variable2 = words6("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait");
      variable_2 = words6("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath");
      variable_3 = words6("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode");
      builtin2 = words6("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when");
      blockKeywords2 = words6("catch class do else finally for if switch try while");
      atoms5 = words6("true false null");
      hooks2 = { "#": metaHook };
      isOperatorChar2 = /[+\-*&%=<>!?|\/]/;
      ecl = {
        name: "ecl",
        startState: function(indentUnit2) {
          return {
            tokenize: null,
            context: new Context4(-indentUnit2, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace())
            return null;
          curPunc3 = null;
          var style2 = (state.tokenize || tokenBase7)(stream, state);
          if (style2 == "comment" || style2 == "meta")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if ((curPunc3 == ";" || curPunc3 == ":") && ctx.type == "statement")
            popContext4(state);
          else if (curPunc3 == "{")
            pushContext4(state, stream.column(), "}");
          else if (curPunc3 == "[")
            pushContext4(state, stream.column(), "]");
          else if (curPunc3 == "(")
            pushContext4(state, stream.column(), ")");
          else if (curPunc3 == "}") {
            while (ctx.type == "statement")
              ctx = popContext4(state);
            if (ctx.type == "}")
              ctx = popContext4(state);
            while (ctx.type == "statement")
              ctx = popContext4(state);
          } else if (curPunc3 == ctx.type)
            popContext4(state);
          else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc3 == "newstatement")
            pushContext4(state, stream.column(), "statement");
          state.startOfLine = false;
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != tokenBase7 && state.tokenize != null)
            return 0;
          var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
          if (ctx.type == "statement" && firstChar == "}")
            ctx = ctx.prev;
          var closing3 = firstChar == ctx.type;
          if (ctx.type == "statement")
            return ctx.indented + (firstChar == "{" ? 0 : cx2.unit);
          else if (ctx.align)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/eiffel.js
  var eiffel_exports = {};
  __export(eiffel_exports, {
    eiffel: () => eiffel
  });
  function wordObj(words22) {
    var o = {};
    for (var i = 0, e = words22.length; i < e; ++i)
      o[words22[i]] = true;
    return o;
  }
  function chain3(newtok, stream, state) {
    state.tokenize.push(newtok);
    return newtok(stream, state);
  }
  function tokenBase8(stream, state) {
    if (stream.eatSpace())
      return null;
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      return chain3(readQuoted(ch2, "string"), stream, state);
    } else if (ch2 == "-" && stream.eat("-")) {
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == ":" && stream.eat("=")) {
      return "operator";
    } else if (/[0-9]/.test(ch2)) {
      stream.eatWhile(/[xXbBCc0-9\.]/);
      stream.eat(/[\?\!]/);
      return "variable";
    } else if (/[a-zA-Z_0-9]/.test(ch2)) {
      stream.eatWhile(/[a-zA-Z_0-9]/);
      stream.eat(/[\?\!]/);
      return "variable";
    } else if (/[=+\-\/*^%<>~]/.test(ch2)) {
      stream.eatWhile(/[=+\-\/*^%<>~]/);
      return "operator";
    } else {
      return null;
    }
  }
  function readQuoted(quote2, style2, unescaped) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && (unescaped || !escaped)) {
          state.tokenize.pop();
          break;
        }
        escaped = !escaped && ch2 == "%";
      }
      return style2;
    };
  }
  var keywords10, operators3, eiffel;
  var init_eiffel = __esm({
    "node_modules/@codemirror/legacy-modes/mode/eiffel.js"() {
      keywords10 = wordObj([
        "note",
        "across",
        "when",
        "variant",
        "until",
        "unique",
        "undefine",
        "then",
        "strip",
        "select",
        "retry",
        "rescue",
        "require",
        "rename",
        "reference",
        "redefine",
        "prefix",
        "once",
        "old",
        "obsolete",
        "loop",
        "local",
        "like",
        "is",
        "inspect",
        "infix",
        "include",
        "if",
        "frozen",
        "from",
        "external",
        "export",
        "ensure",
        "end",
        "elseif",
        "else",
        "do",
        "creation",
        "create",
        "check",
        "alias",
        "agent",
        "separate",
        "invariant",
        "inherit",
        "indexing",
        "feature",
        "expanded",
        "deferred",
        "class",
        "Void",
        "True",
        "Result",
        "Precursor",
        "False",
        "Current",
        "create",
        "attached",
        "detachable",
        "as",
        "and",
        "implies",
        "not",
        "or"
      ]);
      operators3 = wordObj([":=", "and then", "and", "or", "<<", ">>"]);
      eiffel = {
        name: "eiffel",
        startState: function() {
          return { tokenize: [tokenBase8] };
        },
        token: function(stream, state) {
          var style2 = state.tokenize[state.tokenize.length - 1](stream, state);
          if (style2 == "variable") {
            var word2 = stream.current();
            style2 = keywords10.propertyIsEnumerable(stream.current()) ? "keyword" : operators3.propertyIsEnumerable(stream.current()) ? "operator" : /^[A-Z][A-Z_0-9]*$/g.test(word2) ? "tag" : /^0[bB][0-1]+$/g.test(word2) ? "number" : /^0[cC][0-7]+$/g.test(word2) ? "number" : /^0[xX][a-fA-F0-9]+$/g.test(word2) ? "number" : /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word2) ? "number" : /^[0-9]+$/g.test(word2) ? "number" : "variable";
          }
          return style2;
        },
        languageData: {
          commentTokens: { line: "--" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/elm.js
  var elm_exports = {};
  __export(elm_exports, {
    elm: () => elm
  });
  function switchState(source, setState, f) {
    setState(f);
    return f(source, setState);
  }
  function normal() {
    return function(source, setState) {
      if (source.eatWhile(spacesRE)) {
        return null;
      }
      var char = source.next();
      if (specialRE.test(char)) {
        return char === "{" && source.eat("-") ? switchState(source, setState, chompMultiComment(1)) : char === "[" && source.match("glsl|") ? switchState(source, setState, chompGlsl) : "builtin";
      }
      if (char === "'") {
        return switchState(source, setState, chompChar);
      }
      if (char === '"') {
        return source.eat('"') ? source.eat('"') ? switchState(source, setState, chompMultiString) : "string" : switchState(source, setState, chompSingleString);
      }
      if (upperRE.test(char)) {
        source.eatWhile(innerRE);
        return "type";
      }
      if (lowerRE.test(char)) {
        var isDef = source.pos === 1;
        source.eatWhile(innerRE);
        return isDef ? "def" : "variable";
      }
      if (digitRE.test(char)) {
        if (char === "0") {
          if (source.eat(/[xX]/)) {
            source.eatWhile(hexRE);
            return "number";
          }
        } else {
          source.eatWhile(digitRE);
        }
        if (source.eat(".")) {
          source.eatWhile(digitRE);
        }
        if (source.eat(/[eE]/)) {
          source.eat(/[-+]/);
          source.eatWhile(digitRE);
        }
        return "number";
      }
      if (symbolRE.test(char)) {
        if (char === "-" && source.eat("-")) {
          source.skipToEnd();
          return "comment";
        }
        source.eatWhile(symbolRE);
        return "keyword";
      }
      if (char === "_") {
        return "keyword";
      }
      return "error";
    };
  }
  function chompMultiComment(nest) {
    if (nest == 0) {
      return normal();
    }
    return function(source, setState) {
      while (!source.eol()) {
        var char = source.next();
        if (char == "{" && source.eat("-")) {
          ++nest;
        } else if (char == "-" && source.eat("}")) {
          --nest;
          if (nest === 0) {
            setState(normal());
            return "comment";
          }
        }
      }
      setState(chompMultiComment(nest));
      return "comment";
    };
  }
  function chompMultiString(source, setState) {
    while (!source.eol()) {
      var char = source.next();
      if (char === '"' && source.eat('"') && source.eat('"')) {
        setState(normal());
        return "string";
      }
    }
    return "string";
  }
  function chompSingleString(source, setState) {
    while (source.skipTo('\\"')) {
      source.next();
      source.next();
    }
    if (source.skipTo('"')) {
      source.next();
      setState(normal());
      return "string";
    }
    source.skipToEnd();
    setState(normal());
    return "error";
  }
  function chompChar(source, setState) {
    while (source.skipTo("\\'")) {
      source.next();
      source.next();
    }
    if (source.skipTo("'")) {
      source.next();
      setState(normal());
      return "string";
    }
    source.skipToEnd();
    setState(normal());
    return "error";
  }
  function chompGlsl(source, setState) {
    while (!source.eol()) {
      var char = source.next();
      if (char === "|" && source.eat("]")) {
        setState(normal());
        return "string";
      }
    }
    return "string";
  }
  var lowerRE, upperRE, innerRE, digitRE, hexRE, symbolRE, specialRE, spacesRE, wellKnownWords, elm;
  var init_elm = __esm({
    "node_modules/@codemirror/legacy-modes/mode/elm.js"() {
      lowerRE = /[a-z]/;
      upperRE = /[A-Z]/;
      innerRE = /[a-zA-Z0-9_]/;
      digitRE = /[0-9]/;
      hexRE = /[0-9A-Fa-f]/;
      symbolRE = /[-&*+.\\/<>=?^|:]/;
      specialRE = /[(),[\]{}]/;
      spacesRE = /[ \v\f]/;
      wellKnownWords = {
        case: 1,
        of: 1,
        as: 1,
        if: 1,
        then: 1,
        else: 1,
        let: 1,
        in: 1,
        type: 1,
        alias: 1,
        module: 1,
        where: 1,
        import: 1,
        exposing: 1,
        port: 1
      };
      elm = {
        name: "elm",
        startState: function() {
          return { f: normal() };
        },
        copyState: function(s2) {
          return { f: s2.f };
        },
        token: function(stream, state) {
          var type7 = state.f(stream, function(s2) {
            state.f = s2;
          });
          var word2 = stream.current();
          return wellKnownWords.hasOwnProperty(word2) ? "keyword" : type7;
        },
        languageData: {
          commentTokens: { line: "--" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/erlang.js
  var erlang_exports = {};
  __export(erlang_exports, {
    erlang: () => erlang
  });
  function tokenizer(stream, state) {
    if (state.in_string) {
      state.in_string = !doubleQuote(stream);
      return rval(state, stream, "string");
    }
    if (state.in_atom) {
      state.in_atom = !singleQuote(stream);
      return rval(state, stream, "atom");
    }
    if (stream.eatSpace()) {
      return rval(state, stream, "whitespace");
    }
    if (!peekToken(state) && stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)) {
      if (is_member(stream.current(), typeWords)) {
        return rval(state, stream, "type");
      } else {
        return rval(state, stream, "attribute");
      }
    }
    var ch2 = stream.next();
    if (ch2 == "%") {
      stream.skipToEnd();
      return rval(state, stream, "comment");
    }
    if (ch2 == ":") {
      return rval(state, stream, "colon");
    }
    if (ch2 == "?") {
      stream.eatSpace();
      stream.eatWhile(anumRE);
      return rval(state, stream, "macro");
    }
    if (ch2 == "#") {
      stream.eatSpace();
      stream.eatWhile(anumRE);
      return rval(state, stream, "record");
    }
    if (ch2 == "$") {
      if (stream.next() == "\\" && !stream.match(escapesRE)) {
        return rval(state, stream, "error");
      }
      return rval(state, stream, "number");
    }
    if (ch2 == ".") {
      return rval(state, stream, "dot");
    }
    if (ch2 == "'") {
      if (!(state.in_atom = !singleQuote(stream))) {
        if (stream.match(/\s*\/\s*[0-9]/, false)) {
          stream.match(/\s*\/\s*[0-9]/, true);
          return rval(state, stream, "fun");
        }
        if (stream.match(/\s*\(/, false) || stream.match(/\s*:/, false)) {
          return rval(state, stream, "function");
        }
      }
      return rval(state, stream, "atom");
    }
    if (ch2 == '"') {
      state.in_string = !doubleQuote(stream);
      return rval(state, stream, "string");
    }
    if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch2)) {
      stream.eatWhile(anumRE);
      return rval(state, stream, "variable");
    }
    if (/[a-z_ß-öø-ÿ]/.test(ch2)) {
      stream.eatWhile(anumRE);
      if (stream.match(/\s*\/\s*[0-9]/, false)) {
        stream.match(/\s*\/\s*[0-9]/, true);
        return rval(state, stream, "fun");
      }
      var w = stream.current();
      if (is_member(w, keywordWords)) {
        return rval(state, stream, "keyword");
      } else if (is_member(w, operatorAtomWords)) {
        return rval(state, stream, "operator");
      } else if (stream.match(/\s*\(/, false)) {
        if (is_member(w, bifWords) && (peekToken(state).token != ":" || peekToken(state, 2).token == "erlang")) {
          return rval(state, stream, "builtin");
        } else if (is_member(w, guardWords)) {
          return rval(state, stream, "guard");
        } else {
          return rval(state, stream, "function");
        }
      } else if (lookahead(stream) == ":") {
        if (w == "erlang") {
          return rval(state, stream, "builtin");
        } else {
          return rval(state, stream, "function");
        }
      } else if (is_member(w, ["true", "false"])) {
        return rval(state, stream, "boolean");
      } else {
        return rval(state, stream, "atom");
      }
    }
    var digitRE3 = /[0-9]/;
    var radixRE = /[0-9a-zA-Z]/;
    if (digitRE3.test(ch2)) {
      stream.eatWhile(digitRE3);
      if (stream.eat("#")) {
        if (!stream.eatWhile(radixRE)) {
          stream.backUp(1);
        }
      } else if (stream.eat(".")) {
        if (!stream.eatWhile(digitRE3)) {
          stream.backUp(1);
        } else {
          if (stream.eat(/[eE]/)) {
            if (stream.eat(/[-+]/)) {
              if (!stream.eatWhile(digitRE3)) {
                stream.backUp(2);
              }
            } else {
              if (!stream.eatWhile(digitRE3)) {
                stream.backUp(1);
              }
            }
          }
        }
      }
      return rval(state, stream, "number");
    }
    if (nongreedy(stream, openParenRE, openParenWords)) {
      return rval(state, stream, "open_paren");
    }
    if (nongreedy(stream, closeParenRE, closeParenWords)) {
      return rval(state, stream, "close_paren");
    }
    if (greedy(stream, separatorRE, separatorWords)) {
      return rval(state, stream, "separator");
    }
    if (greedy(stream, operatorSymbolRE, operatorSymbolWords)) {
      return rval(state, stream, "operator");
    }
    return rval(state, stream, null);
  }
  function nongreedy(stream, re, words22) {
    if (stream.current().length == 1 && re.test(stream.current())) {
      stream.backUp(1);
      while (re.test(stream.peek())) {
        stream.next();
        if (is_member(stream.current(), words22)) {
          return true;
        }
      }
      stream.backUp(stream.current().length - 1);
    }
    return false;
  }
  function greedy(stream, re, words22) {
    if (stream.current().length == 1 && re.test(stream.current())) {
      while (re.test(stream.peek())) {
        stream.next();
      }
      while (0 < stream.current().length) {
        if (is_member(stream.current(), words22)) {
          return true;
        } else {
          stream.backUp(1);
        }
      }
      stream.next();
    }
    return false;
  }
  function doubleQuote(stream) {
    return quote(stream, '"', "\\");
  }
  function singleQuote(stream) {
    return quote(stream, "'", "\\");
  }
  function quote(stream, quoteChar, escapeChar) {
    while (!stream.eol()) {
      var ch2 = stream.next();
      if (ch2 == quoteChar) {
        return true;
      } else if (ch2 == escapeChar) {
        stream.next();
      }
    }
    return false;
  }
  function lookahead(stream) {
    var m = stream.match(/^\s*([^\s%])/, false);
    return m ? m[1] : "";
  }
  function is_member(element2, list2) {
    return -1 < list2.indexOf(element2);
  }
  function rval(state, stream, type7) {
    pushToken(state, realToken(type7, stream));
    switch (type7) {
      case "atom":
        return "atom";
      case "attribute":
        return "attribute";
      case "boolean":
        return "atom";
      case "builtin":
        return "builtin";
      case "close_paren":
        return null;
      case "colon":
        return null;
      case "comment":
        return "comment";
      case "dot":
        return null;
      case "error":
        return "error";
      case "fun":
        return "meta";
      case "function":
        return "tag";
      case "guard":
        return "property";
      case "keyword":
        return "keyword";
      case "macro":
        return "macroName";
      case "number":
        return "number";
      case "open_paren":
        return null;
      case "operator":
        return "operator";
      case "record":
        return "bracket";
      case "separator":
        return null;
      case "string":
        return "string";
      case "type":
        return "def";
      case "variable":
        return "variable";
      default:
        return null;
    }
  }
  function aToken(tok, col, ind, typ) {
    return {
      token: tok,
      column: col,
      indent: ind,
      type: typ
    };
  }
  function realToken(type7, stream) {
    return aToken(
      stream.current(),
      stream.column(),
      stream.indentation(),
      type7
    );
  }
  function fakeToken(type7) {
    return aToken(type7, 0, 0, type7);
  }
  function peekToken(state, depth) {
    var len = state.tokenStack.length;
    var dep = depth ? depth : 1;
    if (len < dep) {
      return false;
    } else {
      return state.tokenStack[len - dep];
    }
  }
  function pushToken(state, token) {
    if (!(token.type == "comment" || token.type == "whitespace")) {
      state.tokenStack = maybe_drop_pre(state.tokenStack, token);
      state.tokenStack = maybe_drop_post(state.tokenStack);
    }
  }
  function maybe_drop_pre(s2, token) {
    var last = s2.length - 1;
    if (0 < last && s2[last].type === "record" && token.type === "dot") {
      s2.pop();
    } else if (0 < last && s2[last].type === "group") {
      s2.pop();
      s2.push(token);
    } else {
      s2.push(token);
    }
    return s2;
  }
  function maybe_drop_post(s2) {
    if (!s2.length)
      return s2;
    var last = s2.length - 1;
    if (s2[last].type === "dot") {
      return [];
    }
    if (last > 1 && s2[last].type === "fun" && s2[last - 1].token === "fun") {
      return s2.slice(0, last - 1);
    }
    switch (s2[last].token) {
      case "}":
        return d2(s2, { g: ["{"] });
      case "]":
        return d2(s2, { i: ["["] });
      case ")":
        return d2(s2, { i: ["("] });
      case ">>":
        return d2(s2, { i: ["<<"] });
      case "end":
        return d2(s2, { i: ["begin", "case", "fun", "if", "receive", "try"] });
      case ",":
        return d2(s2, { e: [
          "begin",
          "try",
          "when",
          "->",
          ",",
          "(",
          "[",
          "{",
          "<<"
        ] });
      case "->":
        return d2(s2, {
          r: ["when"],
          m: ["try", "if", "case", "receive"]
        });
      case ";":
        return d2(s2, { E: ["case", "fun", "if", "receive", "try", "when"] });
      case "catch":
        return d2(s2, { e: ["try"] });
      case "of":
        return d2(s2, { e: ["case"] });
      case "after":
        return d2(s2, { e: ["receive", "try"] });
      default:
        return s2;
    }
  }
  function d2(stack, tt) {
    for (var type7 in tt) {
      var len = stack.length - 1;
      var tokens2 = tt[type7];
      for (var i = len - 1; -1 < i; i--) {
        if (is_member(stack[i].token, tokens2)) {
          var ss = stack.slice(0, i);
          switch (type7) {
            case "m":
              return ss.concat(stack[i]).concat(stack[len]);
            case "r":
              return ss.concat(stack[len]);
            case "i":
              return ss;
            case "g":
              return ss.concat(fakeToken("group"));
            case "E":
              return ss.concat(stack[i]);
            case "e":
              return ss.concat(stack[i]);
          }
        }
      }
    }
    return type7 == "E" ? [] : stack;
  }
  function indenter(state, textAfter, cx2) {
    var t2;
    var wordAfter = wordafter(textAfter);
    var currT = peekToken(state, 1);
    var prevT = peekToken(state, 2);
    if (state.in_string || state.in_atom) {
      return null;
    } else if (!prevT) {
      return 0;
    } else if (currT.token == "when") {
      return currT.column + cx2.unit;
    } else if (wordAfter === "when" && prevT.type === "function") {
      return prevT.indent + cx2.unit;
    } else if (wordAfter === "(" && currT.token === "fun") {
      return currT.column + 3;
    } else if (wordAfter === "catch" && (t2 = getToken(state, ["try"]))) {
      return t2.column;
    } else if (is_member(wordAfter, ["end", "after", "of"])) {
      t2 = getToken(state, ["begin", "case", "fun", "if", "receive", "try"]);
      return t2 ? t2.column : null;
    } else if (is_member(wordAfter, closeParenWords)) {
      t2 = getToken(state, openParenWords);
      return t2 ? t2.column : null;
    } else if (is_member(currT.token, [",", "|", "||"]) || is_member(wordAfter, [",", "|", "||"])) {
      t2 = postcommaToken(state);
      return t2 ? t2.column + t2.token.length : cx2.unit;
    } else if (currT.token == "->") {
      if (is_member(prevT.token, ["receive", "case", "if", "try"])) {
        return prevT.column + cx2.unit + cx2.unit;
      } else {
        return prevT.column + cx2.unit;
      }
    } else if (is_member(currT.token, openParenWords)) {
      return currT.column + currT.token.length;
    } else {
      t2 = defaultToken(state);
      return truthy(t2) ? t2.column + cx2.unit : 0;
    }
  }
  function wordafter(str) {
    var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);
    return truthy(m) && m.index === 0 ? m[0] : "";
  }
  function postcommaToken(state) {
    var objs = state.tokenStack.slice(0, -1);
    var i = getTokenIndex(objs, "type", ["open_paren"]);
    return truthy(objs[i]) ? objs[i] : false;
  }
  function defaultToken(state) {
    var objs = state.tokenStack;
    var stop = getTokenIndex(objs, "type", ["open_paren", "separator", "keyword"]);
    var oper = getTokenIndex(objs, "type", ["operator"]);
    if (truthy(stop) && truthy(oper) && stop < oper) {
      return objs[stop + 1];
    } else if (truthy(stop)) {
      return objs[stop];
    } else {
      return false;
    }
  }
  function getToken(state, tokens2) {
    var objs = state.tokenStack;
    var i = getTokenIndex(objs, "token", tokens2);
    return truthy(objs[i]) ? objs[i] : false;
  }
  function getTokenIndex(objs, propname, propvals) {
    for (var i = objs.length - 1; -1 < i; i--) {
      if (is_member(objs[i][propname], propvals)) {
        return i;
      }
    }
    return false;
  }
  function truthy(x) {
    return x !== false && x != null;
  }
  var typeWords, keywordWords, separatorRE, separatorWords, operatorAtomWords, operatorSymbolRE, operatorSymbolWords, openParenRE, openParenWords, closeParenRE, closeParenWords, guardWords, bifWords, anumRE, escapesRE, erlang;
  var init_erlang = __esm({
    "node_modules/@codemirror/legacy-modes/mode/erlang.js"() {
      typeWords = [
        "-type",
        "-spec",
        "-export_type",
        "-opaque"
      ];
      keywordWords = [
        "after",
        "begin",
        "catch",
        "case",
        "cond",
        "end",
        "fun",
        "if",
        "let",
        "of",
        "query",
        "receive",
        "try",
        "when"
      ];
      separatorRE = /[\->,;]/;
      separatorWords = [
        "->",
        ";",
        ","
      ];
      operatorAtomWords = [
        "and",
        "andalso",
        "band",
        "bnot",
        "bor",
        "bsl",
        "bsr",
        "bxor",
        "div",
        "not",
        "or",
        "orelse",
        "rem",
        "xor"
      ];
      operatorSymbolRE = /[\+\-\*\/<>=\|:!]/;
      operatorSymbolWords = [
        "=",
        "+",
        "-",
        "*",
        "/",
        ">",
        ">=",
        "<",
        "=<",
        "=:=",
        "==",
        "=/=",
        "/=",
        "||",
        "<-",
        "!"
      ];
      openParenRE = /[<\(\[\{]/;
      openParenWords = [
        "<<",
        "(",
        "[",
        "{"
      ];
      closeParenRE = /[>\)\]\}]/;
      closeParenWords = [
        "}",
        "]",
        ")",
        ">>"
      ];
      guardWords = [
        "is_atom",
        "is_binary",
        "is_bitstring",
        "is_boolean",
        "is_float",
        "is_function",
        "is_integer",
        "is_list",
        "is_number",
        "is_pid",
        "is_port",
        "is_record",
        "is_reference",
        "is_tuple",
        "atom",
        "binary",
        "bitstring",
        "boolean",
        "function",
        "integer",
        "list",
        "number",
        "pid",
        "port",
        "record",
        "reference",
        "tuple"
      ];
      bifWords = [
        "abs",
        "adler32",
        "adler32_combine",
        "alive",
        "apply",
        "atom_to_binary",
        "atom_to_list",
        "binary_to_atom",
        "binary_to_existing_atom",
        "binary_to_list",
        "binary_to_term",
        "bit_size",
        "bitstring_to_list",
        "byte_size",
        "check_process_code",
        "contact_binary",
        "crc32",
        "crc32_combine",
        "date",
        "decode_packet",
        "delete_module",
        "disconnect_node",
        "element",
        "erase",
        "exit",
        "float",
        "float_to_list",
        "garbage_collect",
        "get",
        "get_keys",
        "group_leader",
        "halt",
        "hd",
        "integer_to_list",
        "internal_bif",
        "iolist_size",
        "iolist_to_binary",
        "is_alive",
        "is_atom",
        "is_binary",
        "is_bitstring",
        "is_boolean",
        "is_float",
        "is_function",
        "is_integer",
        "is_list",
        "is_number",
        "is_pid",
        "is_port",
        "is_process_alive",
        "is_record",
        "is_reference",
        "is_tuple",
        "length",
        "link",
        "list_to_atom",
        "list_to_binary",
        "list_to_bitstring",
        "list_to_existing_atom",
        "list_to_float",
        "list_to_integer",
        "list_to_pid",
        "list_to_tuple",
        "load_module",
        "make_ref",
        "module_loaded",
        "monitor_node",
        "node",
        "node_link",
        "node_unlink",
        "nodes",
        "notalive",
        "now",
        "open_port",
        "pid_to_list",
        "port_close",
        "port_command",
        "port_connect",
        "port_control",
        "pre_loaded",
        "process_flag",
        "process_info",
        "processes",
        "purge_module",
        "put",
        "register",
        "registered",
        "round",
        "self",
        "setelement",
        "size",
        "spawn",
        "spawn_link",
        "spawn_monitor",
        "spawn_opt",
        "split_binary",
        "statistics",
        "term_to_binary",
        "time",
        "throw",
        "tl",
        "trunc",
        "tuple_size",
        "tuple_to_list",
        "unlink",
        "unregister",
        "whereis"
      ];
      anumRE = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
      escapesRE = /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;
      erlang = {
        name: "erlang",
        startState() {
          return {
            tokenStack: [],
            in_string: false,
            in_atom: false
          };
        },
        token: tokenizer,
        indent: indenter,
        languageData: {
          commentTokens: { line: "%" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/sql.js
  var sql_exports = {};
  __export(sql_exports, {
    cassandra: () => cassandra,
    esper: () => esper,
    gpSQL: () => gpSQL,
    gql: () => gql,
    hive: () => hive,
    mariaDB: () => mariaDB,
    msSQL: () => msSQL,
    mySQL: () => mySQL,
    pgSQL: () => pgSQL,
    plSQL: () => plSQL,
    sparkSQL: () => sparkSQL,
    sql: () => sql2,
    sqlite: () => sqlite,
    standardSQL: () => standardSQL
  });
  function sql2(parserConfig4) {
    var client = parserConfig4.client || {}, atoms17 = parserConfig4.atoms || { "false": true, "true": true, "null": true }, builtin5 = parserConfig4.builtin || set(defaultBuiltin), keywords47 = parserConfig4.keywords || set(sqlKeywords), operatorChars4 = parserConfig4.operatorChars || /^[*+\-%<>!=&|~^\/]/, support = parserConfig4.support || {}, hooks4 = parserConfig4.hooks || {}, dateSQL = parserConfig4.dateSQL || { "date": true, "time": true, "timestamp": true }, backslashStringEscapes = parserConfig4.backslashStringEscapes !== false, brackets2 = parserConfig4.brackets || /^[\{}\(\)\[\]]/, punctuation3 = parserConfig4.punctuation || /^[;.,:]/;
    function tokenBase48(stream, state) {
      var ch2 = stream.next();
      if (hooks4[ch2]) {
        var result = hooks4[ch2](stream, state);
        if (result !== false)
          return result;
      }
      if (support.hexNumber && (ch2 == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || (ch2 == "x" || ch2 == "X") && stream.match(/^'[0-9a-fA-F]*'/))) {
        return "number";
      } else if (support.binaryNumber && ((ch2 == "b" || ch2 == "B") && stream.match(/^'[01]+'/) || ch2 == "0" && stream.match(/^b[01]*/))) {
        return "number";
      } else if (ch2.charCodeAt(0) > 47 && ch2.charCodeAt(0) < 58) {
        stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
        support.decimallessFloat && stream.match(/^\.(?!\.)/);
        return "number";
      } else if (ch2 == "?" && (stream.eatSpace() || stream.eol() || stream.eat(";"))) {
        return "macroName";
      } else if (ch2 == "'" || ch2 == '"' && support.doubleQuote) {
        state.tokenize = tokenLiteral3(ch2);
        return state.tokenize(stream, state);
      } else if ((support.nCharCast && (ch2 == "n" || ch2 == "N") || support.charsetCast && ch2 == "_" && stream.match(/[a-z][a-z0-9]*/i)) && (stream.peek() == "'" || stream.peek() == '"')) {
        return "keyword";
      } else if (support.escapeConstant && (ch2 == "e" || ch2 == "E") && (stream.peek() == "'" || stream.peek() == '"' && support.doubleQuote)) {
        state.tokenize = function(stream2, state2) {
          return (state2.tokenize = tokenLiteral3(stream2.next(), true))(stream2, state2);
        };
        return "keyword";
      } else if (support.commentSlashSlash && ch2 == "/" && stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      } else if (support.commentHash && ch2 == "#" || ch2 == "-" && stream.eat("-") && (!support.commentSpaceRequired || stream.eat(" "))) {
        stream.skipToEnd();
        return "comment";
      } else if (ch2 == "/" && stream.eat("*")) {
        state.tokenize = tokenComment21(1);
        return state.tokenize(stream, state);
      } else if (ch2 == ".") {
        if (support.zerolessFloat && stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i))
          return "number";
        if (stream.match(/^\.+/))
          return null;
        if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
          return "type";
      } else if (operatorChars4.test(ch2)) {
        stream.eatWhile(operatorChars4);
        return "operator";
      } else if (brackets2.test(ch2)) {
        return "bracket";
      } else if (punctuation3.test(ch2)) {
        stream.eatWhile(punctuation3);
        return "punctuation";
      } else if (ch2 == "{" && (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))) {
        return "number";
      } else {
        stream.eatWhile(/^[_\w\d]/);
        var word2 = stream.current().toLowerCase();
        if (dateSQL.hasOwnProperty(word2) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+"[^"]*"/)))
          return "number";
        if (atoms17.hasOwnProperty(word2))
          return "atom";
        if (builtin5.hasOwnProperty(word2))
          return "type";
        if (keywords47.hasOwnProperty(word2))
          return "keyword";
        if (client.hasOwnProperty(word2))
          return "builtin";
        return null;
      }
    }
    function tokenLiteral3(quote2, backslashEscapes) {
      return function(stream, state) {
        var escaped = false, ch2;
        while ((ch2 = stream.next()) != null) {
          if (ch2 == quote2 && !escaped) {
            state.tokenize = tokenBase48;
            break;
          }
          escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch2 == "\\";
        }
        return "string";
      };
    }
    function tokenComment21(depth) {
      return function(stream, state) {
        var m = stream.match(/^.*?(\/\*|\*\/)/);
        if (!m)
          stream.skipToEnd();
        else if (m[1] == "/*")
          state.tokenize = tokenComment21(depth + 1);
        else if (depth > 1)
          state.tokenize = tokenComment21(depth - 1);
        else
          state.tokenize = tokenBase48;
        return "comment";
      };
    }
    function pushContext17(stream, state, type7) {
      state.context = {
        prev: state.context,
        indent: stream.indentation(),
        col: stream.column(),
        type: type7
      };
    }
    function popContext17(state) {
      state.indent = state.context.indent;
      state.context = state.context.prev;
    }
    return {
      name: "sql",
      startState: function() {
        return { tokenize: tokenBase48, context: null };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (state.context && state.context.align == null)
            state.context.align = false;
        }
        if (state.tokenize == tokenBase48 && stream.eatSpace())
          return null;
        var style2 = state.tokenize(stream, state);
        if (style2 == "comment")
          return style2;
        if (state.context && state.context.align == null)
          state.context.align = true;
        var tok = stream.current();
        if (tok == "(")
          pushContext17(stream, state, ")");
        else if (tok == "[")
          pushContext17(stream, state, "]");
        else if (state.context && state.context.type == tok)
          popContext17(state);
        return style2;
      },
      indent: function(state, textAfter, iCx) {
        var cx2 = state.context;
        if (!cx2)
          return null;
        var closing3 = textAfter.charAt(0) == cx2.type;
        if (cx2.align)
          return cx2.col + (closing3 ? 0 : 1);
        else
          return cx2.indent + (closing3 ? 0 : iCx.unit);
      },
      languageData: {
        commentTokens: {
          line: support.commentSlashSlash ? "//" : support.commentHash ? "#" : "--",
          block: { open: "/*", close: "*/" }
        },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
      }
    };
  }
  function hookIdentifier(stream) {
    var ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == "`" && !stream.eat("`"))
        return "string.special";
    }
    stream.backUp(stream.current().length - 1);
    return stream.eatWhile(/\w/) ? "string.special" : null;
  }
  function hookIdentifierDoublequote(stream) {
    var ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == '"' && !stream.eat('"'))
        return "string.special";
    }
    stream.backUp(stream.current().length - 1);
    return stream.eatWhile(/\w/) ? "string.special" : null;
  }
  function hookVar(stream) {
    if (stream.eat("@")) {
      stream.match("session.");
      stream.match("local.");
      stream.match("global.");
    }
    if (stream.eat("'")) {
      stream.match(/^.*'/);
      return "string.special";
    } else if (stream.eat('"')) {
      stream.match(/^.*"/);
      return "string.special";
    } else if (stream.eat("`")) {
      stream.match(/^.*`/);
      return "string.special";
    } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
      return "string.special";
    }
    return null;
  }
  function hookClient(stream) {
    if (stream.eat("N")) {
      return "atom";
    }
    return stream.match(/^[a-zA-Z.#!?]/) ? "string.special" : null;
  }
  function set(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  var sqlKeywords, defaultBuiltin, standardSQL, msSQL, mySQL, mariaDB, sqlite, cassandra, plSQL, hive, pgSQL, gql, gpSQL, sparkSQL, esper;
  var init_sql = __esm({
    "node_modules/@codemirror/legacy-modes/mode/sql.js"() {
      sqlKeywords = "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";
      defaultBuiltin = "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";
      standardSQL = sql2({
        keywords: set(sqlKeywords + "begin"),
        builtin: set(defaultBuiltin),
        atoms: set("false true null unknown"),
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
      });
      msSQL = sql2({
        client: set("$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"),
        keywords: set(sqlKeywords + "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"),
        builtin: set("bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "),
        atoms: set("is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"),
        operatorChars: /^[*+\-%<>!=^\&|\/]/,
        brackets: /^[\{}\(\)]/,
        punctuation: /^[;.,:/]/,
        backslashStringEscapes: false,
        dateSQL: set("date datetimeoffset datetime2 smalldatetime datetime time"),
        hooks: {
          "@": hookVar
        }
      });
      mySQL = sql2({
        client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
        keywords: set(sqlKeywords + "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
        builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=&|^]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
        hooks: {
          "@": hookVar,
          "`": hookIdentifier,
          "\\": hookClient
        }
      });
      mariaDB = sql2({
        client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
        keywords: set(sqlKeywords + "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group group_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
        builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=&|^]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
        hooks: {
          "@": hookVar,
          "`": hookIdentifier,
          "\\": hookClient
        }
      });
      sqlite = sql2({
        // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
        client: set("auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"),
        // ref: http://sqlite.org/lang_keywords.html
        keywords: set(sqlKeywords + "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"),
        // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
        builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"),
        // ref: http://sqlite.org/syntax/literal-value.html
        atoms: set("null current_date current_time current_timestamp"),
        // ref: http://sqlite.org/lang_expr.html#binaryops
        operatorChars: /^[*+\-%<>!=&|/~]/,
        // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
        dateSQL: set("date time timestamp datetime"),
        support: set("decimallessFloat zerolessFloat"),
        identifierQuote: '"',
        //ref: http://sqlite.org/lang_keywords.html
        hooks: {
          // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
          "@": hookVar,
          ":": hookVar,
          "?": hookVar,
          "$": hookVar,
          // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
          '"': hookIdentifierDoublequote,
          // there is also support for backticks, ref: http://sqlite.org/lang_keywords.html
          "`": hookIdentifier
        }
      });
      cassandra = sql2({
        client: {},
        keywords: set("add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"),
        builtin: set("ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"),
        atoms: set("false true infinity NaN"),
        operatorChars: /^[<>=]/,
        dateSQL: {},
        support: set("commentSlashSlash decimallessFloat"),
        hooks: {}
      });
      plSQL = sql2({
        client: set("appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"),
        keywords: set("abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"),
        builtin: set("abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"),
        operatorChars: /^[*\/+\-%<>!=~]/,
        dateSQL: set("date time timestamp"),
        support: set("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")
      });
      hive = sql2({
        keywords: set("select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"),
        builtin: set("bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=]/,
        dateSQL: set("date timestamp"),
        support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
      });
      pgSQL = sql2({
        client: set("source"),
        // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
        // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
        keywords: set(sqlKeywords + "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"),
        // https://www.postgresql.org/docs/11/datatype.html
        builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
        backslashStringEscapes: false,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant")
      });
      gql = sql2({
        keywords: set("ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"),
        atoms: set("false true"),
        builtin: set("blob datetime first key __key__ string integer double boolean null"),
        operatorChars: /^[*+\-%<>!=]/
      });
      gpSQL = sql2({
        client: set("source"),
        //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
        keywords: set("abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"),
        builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
        atoms: set("false true null unknown"),
        operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast")
      });
      sparkSQL = sql2({
        keywords: set("add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"),
        builtin: set("tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"),
        atoms: set("false true null"),
        operatorChars: /^[*\/+\-%<>!=~&|^]/,
        dateSQL: set("date time timestamp"),
        support: set("ODBCdotTable doubleQuote zerolessFloat")
      });
      esper = sql2({
        client: set("source"),
        // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
        keywords: set("alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"),
        builtin: {},
        atoms: set("false true null"),
        operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
        dateSQL: set("time"),
        support: set("decimallessFloat zerolessFloat binaryNumber hexNumber")
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/factor.js
  var factor_exports = {};
  __export(factor_exports, {
    factor: () => factor
  });
  var factor;
  var init_factor = __esm({
    "node_modules/@codemirror/legacy-modes/mode/factor.js"() {
      init_simple_mode();
      factor = simpleMode({
        start: [
          // comments
          { regex: /#?!.*/, token: "comment" },
          // strings """, multiline --> state
          { regex: /"""/, token: "string", next: "string3" },
          { regex: /(STRING:)(\s)/, token: ["keyword", null], next: "string2" },
          { regex: /\S*?"/, token: "string", next: "string" },
          // numbers: dec, hex, unicode, bin, fractional, complex
          { regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/, token: "number" },
          //{regex: /[+-]?/} //fractional
          // definition: defining word, defined word, etc
          { regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/, token: ["keyword", null, "def", null, "bracket"], next: "stack" },
          // method definition: defining word, type, defined word, etc
          { regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/, token: ["keyword", null, "def", null, "tag"] },
          // vocabulary using --> state
          { regex: /USING\:/, token: "keyword", next: "vocabulary" },
          // vocabulary definition/use
          { regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "tag"] },
          // definition: a defining word, defined word
          { regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "def"] },
          // "keywords", incl. ; t f . [ ] { } defining words
          { regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/, token: "keyword" },
          // <constructors> and the like
          { regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin" },
          { regex: /[\)><]+\S+(?=\s|$)/, token: "builtin" },
          // operators
          { regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword" },
          // any id (?)
          { regex: /\S+/, token: "variable" },
          { regex: /\s+|./, token: null }
        ],
        vocabulary: [
          { regex: /;/, token: "keyword", next: "start" },
          { regex: /\S+/, token: "tag" },
          { regex: /\s+|./, token: null }
        ],
        string: [
          { regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start" },
          { regex: /.*/, token: "string" }
        ],
        string2: [
          { regex: /^;/, token: "keyword", next: "start" },
          { regex: /.*/, token: "string" }
        ],
        string3: [
          { regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start" },
          { regex: /.*/, token: "string" }
        ],
        stack: [
          { regex: /\)/, token: "bracket", next: "start" },
          { regex: /--/, token: "bracket" },
          { regex: /\S+/, token: "meta" },
          { regex: /\s+|./, token: null }
        ],
        languageData: {
          name: "factor",
          dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
          commentTokens: { line: "!" }
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/fcl.js
  var fcl_exports = {};
  __export(fcl_exports, {
    fcl: () => fcl
  });
  function tokenBase9(stream, state) {
    var ch2 = stream.next();
    if (/[\d\.]/.test(ch2)) {
      if (ch2 == ".") {
        stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
      } else if (ch2 == "0") {
        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
      } else {
        stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
      }
      return "number";
    }
    if (ch2 == "/" || ch2 == "(") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment4;
        return tokenComment4(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar3.test(ch2)) {
      stream.eatWhile(isOperatorChar3);
      return "operator";
    }
    stream.eatWhile(/[\w\$_\xa1-\uffff]/);
    var cur = stream.current().toLowerCase();
    if (keywords11.propertyIsEnumerable(cur) || start_blocks.propertyIsEnumerable(cur) || end_blocks.propertyIsEnumerable(cur)) {
      return "keyword";
    }
    if (atoms6.propertyIsEnumerable(cur))
      return "atom";
    return "variable";
  }
  function tokenComment4(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if ((ch2 == "/" || ch2 == ")") && maybeEnd) {
        state.tokenize = tokenBase9;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function Context5(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext5(state, col, type7) {
    return state.context = new Context5(state.indented, col, type7, null, state.context);
  }
  function popContext5(state) {
    if (!state.context.prev)
      return;
    var t2 = state.context.type;
    if (t2 == "end_block")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var keywords11, start_blocks, end_blocks, atoms6, isOperatorChar3, fcl;
  var init_fcl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/fcl.js"() {
      keywords11 = {
        "term": true,
        "method": true,
        "accu": true,
        "rule": true,
        "then": true,
        "is": true,
        "and": true,
        "or": true,
        "if": true,
        "default": true
      };
      start_blocks = {
        "var_input": true,
        "var_output": true,
        "fuzzify": true,
        "defuzzify": true,
        "function_block": true,
        "ruleblock": true
      };
      end_blocks = {
        "end_ruleblock": true,
        "end_defuzzify": true,
        "end_function_block": true,
        "end_fuzzify": true,
        "end_var": true
      };
      atoms6 = {
        "true": true,
        "false": true,
        "nan": true,
        "real": true,
        "min": true,
        "max": true,
        "cog": true,
        "cogs": true
      };
      isOperatorChar3 = /[+\-*&^%:=<>!|\/]/;
      fcl = {
        name: "fcl",
        startState: function(indentUnit2) {
          return {
            tokenize: null,
            context: new Context5(-indentUnit2, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace())
            return null;
          var style2 = (state.tokenize || tokenBase9)(stream, state);
          if (style2 == "comment")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          var cur = stream.current().toLowerCase();
          if (start_blocks.propertyIsEnumerable(cur))
            pushContext5(state, stream.column(), "end_block");
          else if (end_blocks.propertyIsEnumerable(cur))
            popContext5(state);
          state.startOfLine = false;
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != tokenBase9 && state.tokenize != null)
            return 0;
          var ctx = state.context;
          var closing3 = end_blocks.propertyIsEnumerable(textAfter);
          if (ctx.align)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          commentTokens: { line: "//", block: { open: "(*", close: "*)" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/forth.js
  var forth_exports = {};
  __export(forth_exports, {
    forth: () => forth
  });
  function toWordList(words22) {
    var ret4 = [];
    words22.split(" ").forEach(function(e) {
      ret4.push({ name: e });
    });
    return ret4;
  }
  function searchWordList(wordList2, word2) {
    var i;
    for (i = wordList2.length - 1; i >= 0; i--) {
      if (wordList2[i].name === word2.toUpperCase()) {
        return wordList2[i];
      }
    }
    return void 0;
  }
  var coreWordList, immediateWordList, forth;
  var init_forth = __esm({
    "node_modules/@codemirror/legacy-modes/mode/forth.js"() {
      coreWordList = toWordList(
        "INVERT AND OR XOR 2* 2/ LSHIFT RSHIFT 0= = 0< < > U< MIN MAX 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP >R R> R@ + - 1+ 1- ABS NEGATE S>D * M* UM* FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2! ALIGN ALIGNED +! ALLOT CHAR [CHAR] [ ] BL FIND EXECUTE IMMEDIATE COUNT LITERAL STATE ; DOES> >BODY EVALUATE SOURCE >IN <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL FILL MOVE . CR EMIT SPACE SPACES TYPE U. .R U.R ACCEPT TRUE FALSE <> U> 0<> 0> NIP TUCK ROLL PICK 2>R 2R@ 2R> WITHIN UNUSED MARKER I J TO COMPILE, [COMPILE] SAVE-INPUT RESTORE-INPUT PAD ERASE 2LITERAL DNEGATE D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS M+ M*/ D. D.R 2ROT DU< CATCH THROW FREE RESIZE ALLOCATE CS-PICK CS-ROLL GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL"
      );
      immediateWordList = toWordList("IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE");
      forth = {
        name: "forth",
        startState: function() {
          return {
            state: "",
            base: 10,
            coreWordList,
            immediateWordList,
            wordList: []
          };
        },
        token: function(stream, stt) {
          var mat;
          if (stream.eatSpace()) {
            return null;
          }
          if (stt.state === "") {
            if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
              stt.state = " compilation";
              return "builtin";
            }
            mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
            if (mat) {
              stt.wordList.push({ name: mat[2].toUpperCase() });
              stt.state = " compilation";
              return "def";
            }
            mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
            if (mat) {
              stt.wordList.push({ name: mat[2].toUpperCase() });
              return "def";
            }
            mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
            if (mat) {
              return "builtin";
            }
          } else {
            if (stream.match(/^(\;|\[)(\s)/)) {
              stt.state = "";
              stream.backUp(1);
              return "builtin";
            }
            if (stream.match(/^(\;|\[)($)/)) {
              stt.state = "";
              return "builtin";
            }
            if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
              return "builtin";
            }
          }
          mat = stream.match(/^(\S+)(\s+|$)/);
          if (mat) {
            if (searchWordList(stt.wordList, mat[1]) !== void 0) {
              return "variable";
            }
            if (mat[1] === "\\") {
              stream.skipToEnd();
              return "comment";
            }
            if (searchWordList(stt.coreWordList, mat[1]) !== void 0) {
              return "builtin";
            }
            if (searchWordList(stt.immediateWordList, mat[1]) !== void 0) {
              return "keyword";
            }
            if (mat[1] === "(") {
              stream.eatWhile(function(s2) {
                return s2 !== ")";
              });
              stream.eat(")");
              return "comment";
            }
            if (mat[1] === ".(") {
              stream.eatWhile(function(s2) {
                return s2 !== ")";
              });
              stream.eat(")");
              return "string";
            }
            if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
              stream.eatWhile(function(s2) {
                return s2 !== '"';
              });
              stream.eat('"');
              return "string";
            }
            if (mat[1] - 68719476735) {
              return "number";
            }
            return "atom";
          }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/fortran.js
  var fortran_exports = {};
  __export(fortran_exports, {
    fortran: () => fortran
  });
  function words7(array2) {
    var keys = {};
    for (var i = 0; i < array2.length; ++i) {
      keys[array2[i]] = true;
    }
    return keys;
  }
  function tokenBase10(stream, state) {
    if (stream.match(litOperator)) {
      return "operator";
    }
    var ch2 = stream.next();
    if (ch2 == "!") {
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString6(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\[\]\(\),]/.test(ch2)) {
      return null;
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (isOperatorChar4.test(ch2)) {
      stream.eatWhile(isOperatorChar4);
      return "operator";
    }
    stream.eatWhile(/[\w\$_]/);
    var word2 = stream.current().toLowerCase();
    if (keywords12.hasOwnProperty(word2)) {
      return "keyword";
    }
    if (builtins2.hasOwnProperty(word2) || dataTypes.hasOwnProperty(word2)) {
      return "builtin";
    }
    return "variable";
  }
  function tokenString6(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !escaped)
        state.tokenize = null;
      return "string";
    };
  }
  var keywords12, builtins2, dataTypes, isOperatorChar4, litOperator, fortran;
  var init_fortran = __esm({
    "node_modules/@codemirror/legacy-modes/mode/fortran.js"() {
      keywords12 = words7([
        "abstract",
        "accept",
        "allocatable",
        "allocate",
        "array",
        "assign",
        "asynchronous",
        "backspace",
        "bind",
        "block",
        "byte",
        "call",
        "case",
        "class",
        "close",
        "common",
        "contains",
        "continue",
        "cycle",
        "data",
        "deallocate",
        "decode",
        "deferred",
        "dimension",
        "do",
        "elemental",
        "else",
        "encode",
        "end",
        "endif",
        "entry",
        "enumerator",
        "equivalence",
        "exit",
        "external",
        "extrinsic",
        "final",
        "forall",
        "format",
        "function",
        "generic",
        "go",
        "goto",
        "if",
        "implicit",
        "import",
        "include",
        "inquire",
        "intent",
        "interface",
        "intrinsic",
        "module",
        "namelist",
        "non_intrinsic",
        "non_overridable",
        "none",
        "nopass",
        "nullify",
        "open",
        "optional",
        "options",
        "parameter",
        "pass",
        "pause",
        "pointer",
        "print",
        "private",
        "program",
        "protected",
        "public",
        "pure",
        "read",
        "recursive",
        "result",
        "return",
        "rewind",
        "save",
        "select",
        "sequence",
        "stop",
        "subroutine",
        "target",
        "then",
        "to",
        "type",
        "use",
        "value",
        "volatile",
        "where",
        "while",
        "write"
      ]);
      builtins2 = words7([
        "abort",
        "abs",
        "access",
        "achar",
        "acos",
        "adjustl",
        "adjustr",
        "aimag",
        "aint",
        "alarm",
        "all",
        "allocated",
        "alog",
        "amax",
        "amin",
        "amod",
        "and",
        "anint",
        "any",
        "asin",
        "associated",
        "atan",
        "besj",
        "besjn",
        "besy",
        "besyn",
        "bit_size",
        "btest",
        "cabs",
        "ccos",
        "ceiling",
        "cexp",
        "char",
        "chdir",
        "chmod",
        "clog",
        "cmplx",
        "command_argument_count",
        "complex",
        "conjg",
        "cos",
        "cosh",
        "count",
        "cpu_time",
        "cshift",
        "csin",
        "csqrt",
        "ctime",
        "c_funloc",
        "c_loc",
        "c_associated",
        "c_null_ptr",
        "c_null_funptr",
        "c_f_pointer",
        "c_null_char",
        "c_alert",
        "c_backspace",
        "c_form_feed",
        "c_new_line",
        "c_carriage_return",
        "c_horizontal_tab",
        "c_vertical_tab",
        "dabs",
        "dacos",
        "dasin",
        "datan",
        "date_and_time",
        "dbesj",
        "dbesj",
        "dbesjn",
        "dbesy",
        "dbesy",
        "dbesyn",
        "dble",
        "dcos",
        "dcosh",
        "ddim",
        "derf",
        "derfc",
        "dexp",
        "digits",
        "dim",
        "dint",
        "dlog",
        "dlog",
        "dmax",
        "dmin",
        "dmod",
        "dnint",
        "dot_product",
        "dprod",
        "dsign",
        "dsinh",
        "dsin",
        "dsqrt",
        "dtanh",
        "dtan",
        "dtime",
        "eoshift",
        "epsilon",
        "erf",
        "erfc",
        "etime",
        "exit",
        "exp",
        "exponent",
        "extends_type_of",
        "fdate",
        "fget",
        "fgetc",
        "float",
        "floor",
        "flush",
        "fnum",
        "fputc",
        "fput",
        "fraction",
        "fseek",
        "fstat",
        "ftell",
        "gerror",
        "getarg",
        "get_command",
        "get_command_argument",
        "get_environment_variable",
        "getcwd",
        "getenv",
        "getgid",
        "getlog",
        "getpid",
        "getuid",
        "gmtime",
        "hostnm",
        "huge",
        "iabs",
        "iachar",
        "iand",
        "iargc",
        "ibclr",
        "ibits",
        "ibset",
        "ichar",
        "idate",
        "idim",
        "idint",
        "idnint",
        "ieor",
        "ierrno",
        "ifix",
        "imag",
        "imagpart",
        "index",
        "int",
        "ior",
        "irand",
        "isatty",
        "ishft",
        "ishftc",
        "isign",
        "iso_c_binding",
        "is_iostat_end",
        "is_iostat_eor",
        "itime",
        "kill",
        "kind",
        "lbound",
        "len",
        "len_trim",
        "lge",
        "lgt",
        "link",
        "lle",
        "llt",
        "lnblnk",
        "loc",
        "log",
        "logical",
        "long",
        "lshift",
        "lstat",
        "ltime",
        "matmul",
        "max",
        "maxexponent",
        "maxloc",
        "maxval",
        "mclock",
        "merge",
        "move_alloc",
        "min",
        "minexponent",
        "minloc",
        "minval",
        "mod",
        "modulo",
        "mvbits",
        "nearest",
        "new_line",
        "nint",
        "not",
        "or",
        "pack",
        "perror",
        "precision",
        "present",
        "product",
        "radix",
        "rand",
        "random_number",
        "random_seed",
        "range",
        "real",
        "realpart",
        "rename",
        "repeat",
        "reshape",
        "rrspacing",
        "rshift",
        "same_type_as",
        "scale",
        "scan",
        "second",
        "selected_int_kind",
        "selected_real_kind",
        "set_exponent",
        "shape",
        "short",
        "sign",
        "signal",
        "sinh",
        "sin",
        "sleep",
        "sngl",
        "spacing",
        "spread",
        "sqrt",
        "srand",
        "stat",
        "sum",
        "symlnk",
        "system",
        "system_clock",
        "tan",
        "tanh",
        "time",
        "tiny",
        "transfer",
        "transpose",
        "trim",
        "ttynam",
        "ubound",
        "umask",
        "unlink",
        "unpack",
        "verify",
        "xor",
        "zabs",
        "zcos",
        "zexp",
        "zlog",
        "zsin",
        "zsqrt"
      ]);
      dataTypes = words7([
        "c_bool",
        "c_char",
        "c_double",
        "c_double_complex",
        "c_float",
        "c_float_complex",
        "c_funptr",
        "c_int",
        "c_int16_t",
        "c_int32_t",
        "c_int64_t",
        "c_int8_t",
        "c_int_fast16_t",
        "c_int_fast32_t",
        "c_int_fast64_t",
        "c_int_fast8_t",
        "c_int_least16_t",
        "c_int_least32_t",
        "c_int_least64_t",
        "c_int_least8_t",
        "c_intmax_t",
        "c_intptr_t",
        "c_long",
        "c_long_double",
        "c_long_double_complex",
        "c_long_long",
        "c_ptr",
        "c_short",
        "c_signed_char",
        "c_size_t",
        "character",
        "complex",
        "double",
        "integer",
        "logical",
        "real"
      ]);
      isOperatorChar4 = /[+\-*&=<>\/\:]/;
      litOperator = /^\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\./i;
      fortran = {
        name: "fortran",
        startState: function() {
          return { tokenize: null };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = (state.tokenize || tokenBase10)(stream, state);
          if (style2 == "comment" || style2 == "meta")
            return style2;
          return style2;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/mllike.js
  var mllike_exports = {};
  __export(mllike_exports, {
    fSharp: () => fSharp,
    oCaml: () => oCaml,
    sml: () => sml
  });
  function mlLike(parserConfig4) {
    var words22 = {
      "as": "keyword",
      "do": "keyword",
      "else": "keyword",
      "end": "keyword",
      "exception": "keyword",
      "fun": "keyword",
      "functor": "keyword",
      "if": "keyword",
      "in": "keyword",
      "include": "keyword",
      "let": "keyword",
      "of": "keyword",
      "open": "keyword",
      "rec": "keyword",
      "struct": "keyword",
      "then": "keyword",
      "type": "keyword",
      "val": "keyword",
      "while": "keyword",
      "with": "keyword"
    };
    var extraWords = parserConfig4.extraWords || {};
    for (var prop in extraWords) {
      if (extraWords.hasOwnProperty(prop)) {
        words22[prop] = parserConfig4.extraWords[prop];
      }
    }
    var hintWords2 = [];
    for (var k in words22) {
      hintWords2.push(k);
    }
    function tokenBase48(stream, state) {
      var ch2 = stream.next();
      if (ch2 === '"') {
        state.tokenize = tokenString30;
        return state.tokenize(stream, state);
      }
      if (ch2 === "{") {
        if (stream.eat("|")) {
          state.longString = true;
          state.tokenize = tokenLongString;
          return state.tokenize(stream, state);
        }
      }
      if (ch2 === "(") {
        if (stream.match(/^\*(?!\))/)) {
          state.commentLevel++;
          state.tokenize = tokenComment21;
          return state.tokenize(stream, state);
        }
      }
      if (ch2 === "~" || ch2 === "?") {
        stream.eatWhile(/\w/);
        return "variableName.special";
      }
      if (ch2 === "`") {
        stream.eatWhile(/\w/);
        return "quote";
      }
      if (ch2 === "/" && parserConfig4.slashComments && stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
      if (/\d/.test(ch2)) {
        if (ch2 === "0" && stream.eat(/[bB]/)) {
          stream.eatWhile(/[01]/);
        }
        if (ch2 === "0" && stream.eat(/[xX]/)) {
          stream.eatWhile(/[0-9a-fA-F]/);
        }
        if (ch2 === "0" && stream.eat(/[oO]/)) {
          stream.eatWhile(/[0-7]/);
        } else {
          stream.eatWhile(/[\d_]/);
          if (stream.eat(".")) {
            stream.eatWhile(/[\d]/);
          }
          if (stream.eat(/[eE]/)) {
            stream.eatWhile(/[\d\-+]/);
          }
        }
        return "number";
      }
      if (/[+\-*&%=<>!?|@\.~:]/.test(ch2)) {
        return "operator";
      }
      if (/[\w\xa1-\uffff]/.test(ch2)) {
        stream.eatWhile(/[\w\xa1-\uffff]/);
        var cur = stream.current();
        return words22.hasOwnProperty(cur) ? words22[cur] : "variable";
      }
      return null;
    }
    function tokenString30(stream, state) {
      var next2, end2 = false, escaped = false;
      while ((next2 = stream.next()) != null) {
        if (next2 === '"' && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 === "\\";
      }
      if (end2 && !escaped) {
        state.tokenize = tokenBase48;
      }
      return "string";
    }
    ;
    function tokenComment21(stream, state) {
      var prev, next2;
      while (state.commentLevel > 0 && (next2 = stream.next()) != null) {
        if (prev === "(" && next2 === "*")
          state.commentLevel++;
        if (prev === "*" && next2 === ")")
          state.commentLevel--;
        prev = next2;
      }
      if (state.commentLevel <= 0) {
        state.tokenize = tokenBase48;
      }
      return "comment";
    }
    function tokenLongString(stream, state) {
      var prev, next2;
      while (state.longString && (next2 = stream.next()) != null) {
        if (prev === "|" && next2 === "}")
          state.longString = false;
        prev = next2;
      }
      if (!state.longString) {
        state.tokenize = tokenBase48;
      }
      return "string";
    }
    return {
      startState: function() {
        return { tokenize: tokenBase48, commentLevel: 0, longString: false };
      },
      token: function(stream, state) {
        if (stream.eatSpace())
          return null;
        return state.tokenize(stream, state);
      },
      languageData: {
        autocomplete: hintWords2,
        commentTokens: {
          line: parserConfig4.slashComments ? "//" : void 0,
          block: { open: "(*", close: "*)" }
        }
      }
    };
  }
  var oCaml, fSharp, sml;
  var init_mllike = __esm({
    "node_modules/@codemirror/legacy-modes/mode/mllike.js"() {
      oCaml = mlLike({
        name: "ocaml",
        extraWords: {
          "and": "keyword",
          "assert": "keyword",
          "begin": "keyword",
          "class": "keyword",
          "constraint": "keyword",
          "done": "keyword",
          "downto": "keyword",
          "external": "keyword",
          "function": "keyword",
          "initializer": "keyword",
          "lazy": "keyword",
          "match": "keyword",
          "method": "keyword",
          "module": "keyword",
          "mutable": "keyword",
          "new": "keyword",
          "nonrec": "keyword",
          "object": "keyword",
          "private": "keyword",
          "sig": "keyword",
          "to": "keyword",
          "try": "keyword",
          "value": "keyword",
          "virtual": "keyword",
          "when": "keyword",
          // builtins
          "raise": "builtin",
          "failwith": "builtin",
          "true": "builtin",
          "false": "builtin",
          // Pervasives builtins
          "asr": "builtin",
          "land": "builtin",
          "lor": "builtin",
          "lsl": "builtin",
          "lsr": "builtin",
          "lxor": "builtin",
          "mod": "builtin",
          "or": "builtin",
          // More Pervasives
          "raise_notrace": "builtin",
          "trace": "builtin",
          "exit": "builtin",
          "print_string": "builtin",
          "print_endline": "builtin",
          "int": "type",
          "float": "type",
          "bool": "type",
          "char": "type",
          "string": "type",
          "unit": "type",
          // Modules
          "List": "builtin"
        }
      });
      fSharp = mlLike({
        name: "fsharp",
        extraWords: {
          "abstract": "keyword",
          "assert": "keyword",
          "base": "keyword",
          "begin": "keyword",
          "class": "keyword",
          "default": "keyword",
          "delegate": "keyword",
          "do!": "keyword",
          "done": "keyword",
          "downcast": "keyword",
          "downto": "keyword",
          "elif": "keyword",
          "extern": "keyword",
          "finally": "keyword",
          "for": "keyword",
          "function": "keyword",
          "global": "keyword",
          "inherit": "keyword",
          "inline": "keyword",
          "interface": "keyword",
          "internal": "keyword",
          "lazy": "keyword",
          "let!": "keyword",
          "match": "keyword",
          "member": "keyword",
          "module": "keyword",
          "mutable": "keyword",
          "namespace": "keyword",
          "new": "keyword",
          "null": "keyword",
          "override": "keyword",
          "private": "keyword",
          "public": "keyword",
          "return!": "keyword",
          "return": "keyword",
          "select": "keyword",
          "static": "keyword",
          "to": "keyword",
          "try": "keyword",
          "upcast": "keyword",
          "use!": "keyword",
          "use": "keyword",
          "void": "keyword",
          "when": "keyword",
          "yield!": "keyword",
          "yield": "keyword",
          // Reserved words
          "atomic": "keyword",
          "break": "keyword",
          "checked": "keyword",
          "component": "keyword",
          "const": "keyword",
          "constraint": "keyword",
          "constructor": "keyword",
          "continue": "keyword",
          "eager": "keyword",
          "event": "keyword",
          "external": "keyword",
          "fixed": "keyword",
          "method": "keyword",
          "mixin": "keyword",
          "object": "keyword",
          "parallel": "keyword",
          "process": "keyword",
          "protected": "keyword",
          "pure": "keyword",
          "sealed": "keyword",
          "tailcall": "keyword",
          "trait": "keyword",
          "virtual": "keyword",
          "volatile": "keyword",
          // builtins
          "List": "builtin",
          "Seq": "builtin",
          "Map": "builtin",
          "Set": "builtin",
          "Option": "builtin",
          "int": "builtin",
          "string": "builtin",
          "not": "builtin",
          "true": "builtin",
          "false": "builtin",
          "raise": "builtin",
          "failwith": "builtin"
        },
        slashComments: true
      });
      sml = mlLike({
        name: "sml",
        extraWords: {
          "abstype": "keyword",
          "and": "keyword",
          "andalso": "keyword",
          "case": "keyword",
          "datatype": "keyword",
          "fn": "keyword",
          "handle": "keyword",
          "infix": "keyword",
          "infixr": "keyword",
          "local": "keyword",
          "nonfix": "keyword",
          "op": "keyword",
          "orelse": "keyword",
          "raise": "keyword",
          "withtype": "keyword",
          "eqtype": "keyword",
          "sharing": "keyword",
          "sig": "keyword",
          "signature": "keyword",
          "structure": "keyword",
          "where": "keyword",
          "true": "keyword",
          "false": "keyword",
          // types
          "int": "builtin",
          "real": "builtin",
          "string": "builtin",
          "char": "builtin",
          "bool": "builtin"
        },
        slashComments: true
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/gas.js
  var gas_exports = {};
  __export(gas_exports, {
    gas: () => gas,
    gasArm: () => gasArm
  });
  function mkGas(arch2) {
    var custom = [];
    var lineCommentStartSymbol = "";
    var directives = {
      ".abort": "builtin",
      ".align": "builtin",
      ".altmacro": "builtin",
      ".ascii": "builtin",
      ".asciz": "builtin",
      ".balign": "builtin",
      ".balignw": "builtin",
      ".balignl": "builtin",
      ".bundle_align_mode": "builtin",
      ".bundle_lock": "builtin",
      ".bundle_unlock": "builtin",
      ".byte": "builtin",
      ".cfi_startproc": "builtin",
      ".comm": "builtin",
      ".data": "builtin",
      ".def": "builtin",
      ".desc": "builtin",
      ".dim": "builtin",
      ".double": "builtin",
      ".eject": "builtin",
      ".else": "builtin",
      ".elseif": "builtin",
      ".end": "builtin",
      ".endef": "builtin",
      ".endfunc": "builtin",
      ".endif": "builtin",
      ".equ": "builtin",
      ".equiv": "builtin",
      ".eqv": "builtin",
      ".err": "builtin",
      ".error": "builtin",
      ".exitm": "builtin",
      ".extern": "builtin",
      ".fail": "builtin",
      ".file": "builtin",
      ".fill": "builtin",
      ".float": "builtin",
      ".func": "builtin",
      ".global": "builtin",
      ".gnu_attribute": "builtin",
      ".hidden": "builtin",
      ".hword": "builtin",
      ".ident": "builtin",
      ".if": "builtin",
      ".incbin": "builtin",
      ".include": "builtin",
      ".int": "builtin",
      ".internal": "builtin",
      ".irp": "builtin",
      ".irpc": "builtin",
      ".lcomm": "builtin",
      ".lflags": "builtin",
      ".line": "builtin",
      ".linkonce": "builtin",
      ".list": "builtin",
      ".ln": "builtin",
      ".loc": "builtin",
      ".loc_mark_labels": "builtin",
      ".local": "builtin",
      ".long": "builtin",
      ".macro": "builtin",
      ".mri": "builtin",
      ".noaltmacro": "builtin",
      ".nolist": "builtin",
      ".octa": "builtin",
      ".offset": "builtin",
      ".org": "builtin",
      ".p2align": "builtin",
      ".popsection": "builtin",
      ".previous": "builtin",
      ".print": "builtin",
      ".protected": "builtin",
      ".psize": "builtin",
      ".purgem": "builtin",
      ".pushsection": "builtin",
      ".quad": "builtin",
      ".reloc": "builtin",
      ".rept": "builtin",
      ".sbttl": "builtin",
      ".scl": "builtin",
      ".section": "builtin",
      ".set": "builtin",
      ".short": "builtin",
      ".single": "builtin",
      ".size": "builtin",
      ".skip": "builtin",
      ".sleb128": "builtin",
      ".space": "builtin",
      ".stab": "builtin",
      ".string": "builtin",
      ".struct": "builtin",
      ".subsection": "builtin",
      ".symver": "builtin",
      ".tag": "builtin",
      ".text": "builtin",
      ".title": "builtin",
      ".type": "builtin",
      ".uleb128": "builtin",
      ".val": "builtin",
      ".version": "builtin",
      ".vtable_entry": "builtin",
      ".vtable_inherit": "builtin",
      ".warning": "builtin",
      ".weak": "builtin",
      ".weakref": "builtin",
      ".word": "builtin"
    };
    var registers = {};
    function x86() {
      lineCommentStartSymbol = "#";
      registers.al = "variable";
      registers.ah = "variable";
      registers.ax = "variable";
      registers.eax = "variableName.special";
      registers.rax = "variableName.special";
      registers.bl = "variable";
      registers.bh = "variable";
      registers.bx = "variable";
      registers.ebx = "variableName.special";
      registers.rbx = "variableName.special";
      registers.cl = "variable";
      registers.ch = "variable";
      registers.cx = "variable";
      registers.ecx = "variableName.special";
      registers.rcx = "variableName.special";
      registers.dl = "variable";
      registers.dh = "variable";
      registers.dx = "variable";
      registers.edx = "variableName.special";
      registers.rdx = "variableName.special";
      registers.si = "variable";
      registers.esi = "variableName.special";
      registers.rsi = "variableName.special";
      registers.di = "variable";
      registers.edi = "variableName.special";
      registers.rdi = "variableName.special";
      registers.sp = "variable";
      registers.esp = "variableName.special";
      registers.rsp = "variableName.special";
      registers.bp = "variable";
      registers.ebp = "variableName.special";
      registers.rbp = "variableName.special";
      registers.ip = "variable";
      registers.eip = "variableName.special";
      registers.rip = "variableName.special";
      registers.cs = "keyword";
      registers.ds = "keyword";
      registers.ss = "keyword";
      registers.es = "keyword";
      registers.fs = "keyword";
      registers.gs = "keyword";
    }
    function armv6() {
      lineCommentStartSymbol = "@";
      directives.syntax = "builtin";
      registers.r0 = "variable";
      registers.r1 = "variable";
      registers.r2 = "variable";
      registers.r3 = "variable";
      registers.r4 = "variable";
      registers.r5 = "variable";
      registers.r6 = "variable";
      registers.r7 = "variable";
      registers.r8 = "variable";
      registers.r9 = "variable";
      registers.r10 = "variable";
      registers.r11 = "variable";
      registers.r12 = "variable";
      registers.sp = "variableName.special";
      registers.lr = "variableName.special";
      registers.pc = "variableName.special";
      registers.r13 = registers.sp;
      registers.r14 = registers.lr;
      registers.r15 = registers.pc;
      custom.push(function(ch2, stream) {
        if (ch2 === "#") {
          stream.eatWhile(/\w/);
          return "number";
        }
      });
    }
    if (arch2 === "x86") {
      x86();
    } else if (arch2 === "arm" || arch2 === "armv6") {
      armv6();
    }
    function nextUntilUnescaped(stream, end2) {
      var escaped = false, next2;
      while ((next2 = stream.next()) != null) {
        if (next2 === end2 && !escaped) {
          return false;
        }
        escaped = !escaped && next2 === "\\";
      }
      return escaped;
    }
    function clikeComment(stream, state) {
      var maybeEnd = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 === "/" && maybeEnd) {
          state.tokenize = null;
          break;
        }
        maybeEnd = ch2 === "*";
      }
      return "comment";
    }
    return {
      name: "gas",
      startState: function() {
        return {
          tokenize: null
        };
      },
      token: function(stream, state) {
        if (state.tokenize) {
          return state.tokenize(stream, state);
        }
        if (stream.eatSpace()) {
          return null;
        }
        var style2, cur, ch2 = stream.next();
        if (ch2 === "/") {
          if (stream.eat("*")) {
            state.tokenize = clikeComment;
            return clikeComment(stream, state);
          }
        }
        if (ch2 === lineCommentStartSymbol) {
          stream.skipToEnd();
          return "comment";
        }
        if (ch2 === '"') {
          nextUntilUnescaped(stream, '"');
          return "string";
        }
        if (ch2 === ".") {
          stream.eatWhile(/\w/);
          cur = stream.current().toLowerCase();
          style2 = directives[cur];
          return style2 || null;
        }
        if (ch2 === "=") {
          stream.eatWhile(/\w/);
          return "tag";
        }
        if (ch2 === "{") {
          return "bracket";
        }
        if (ch2 === "}") {
          return "bracket";
        }
        if (/\d/.test(ch2)) {
          if (ch2 === "0" && stream.eat("x")) {
            stream.eatWhile(/[0-9a-fA-F]/);
            return "number";
          }
          stream.eatWhile(/\d/);
          return "number";
        }
        if (/\w/.test(ch2)) {
          stream.eatWhile(/\w/);
          if (stream.eat(":")) {
            return "tag";
          }
          cur = stream.current().toLowerCase();
          style2 = registers[cur];
          return style2 || null;
        }
        for (var i = 0; i < custom.length; i++) {
          style2 = custom[i](ch2, stream, state);
          if (style2) {
            return style2;
          }
        }
      },
      languageData: {
        commentTokens: {
          line: lineCommentStartSymbol,
          block: { open: "/*", close: "*/" }
        }
      }
    };
  }
  var gas, gasArm;
  var init_gas = __esm({
    "node_modules/@codemirror/legacy-modes/mode/gas.js"() {
      gas = mkGas("x86");
      gasArm = mkGas("arm");
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/gherkin.js
  var gherkin_exports = {};
  __export(gherkin_exports, {
    gherkin: () => gherkin
  });
  var gherkin;
  var init_gherkin = __esm({
    "node_modules/@codemirror/legacy-modes/mode/gherkin.js"() {
      gherkin = {
        name: "gherkin",
        startState: function() {
          return {
            lineNumber: 0,
            tableHeaderLine: false,
            allowFeature: true,
            allowBackground: false,
            allowScenario: false,
            allowSteps: false,
            allowPlaceholders: false,
            allowMultilineArgument: false,
            inMultilineString: false,
            inMultilineTable: false,
            inKeywordLine: false
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            state.lineNumber++;
            state.inKeywordLine = false;
            if (state.inMultilineTable) {
              state.tableHeaderLine = false;
              if (!stream.match(/\s*\|/, false)) {
                state.allowMultilineArgument = false;
                state.inMultilineTable = false;
              }
            }
          }
          stream.eatSpace();
          if (state.allowMultilineArgument) {
            if (state.inMultilineString) {
              if (stream.match('"""')) {
                state.inMultilineString = false;
                state.allowMultilineArgument = false;
              } else {
                stream.match(/.*/);
              }
              return "string";
            }
            if (state.inMultilineTable) {
              if (stream.match(/\|\s*/)) {
                return "bracket";
              } else {
                stream.match(/[^\|]*/);
                return state.tableHeaderLine ? "header" : "string";
              }
            }
            if (stream.match('"""')) {
              state.inMultilineString = true;
              return "string";
            } else if (stream.match("|")) {
              state.inMultilineTable = true;
              state.tableHeaderLine = true;
              return "bracket";
            }
          }
          if (stream.match(/#.*/)) {
            return "comment";
          } else if (!state.inKeywordLine && stream.match(/@\S+/)) {
            return "tag";
          } else if (!state.inKeywordLine && state.allowFeature && stream.match(/(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/)) {
            state.allowScenario = true;
            state.allowBackground = true;
            state.allowPlaceholders = false;
            state.allowSteps = false;
            state.allowMultilineArgument = false;
            state.inKeywordLine = true;
            return "keyword";
          } else if (!state.inKeywordLine && state.allowBackground && stream.match(/(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/)) {
            state.allowPlaceholders = false;
            state.allowSteps = true;
            state.allowBackground = false;
            state.allowMultilineArgument = false;
            state.inKeywordLine = true;
            return "keyword";
          } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/)) {
            state.allowPlaceholders = true;
            state.allowSteps = true;
            state.allowMultilineArgument = false;
            state.inKeywordLine = true;
            return "keyword";
          } else if (state.allowScenario && stream.match(/(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/)) {
            state.allowPlaceholders = false;
            state.allowSteps = true;
            state.allowBackground = false;
            state.allowMultilineArgument = true;
            return "keyword";
          } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/)) {
            state.allowPlaceholders = false;
            state.allowSteps = true;
            state.allowBackground = false;
            state.allowMultilineArgument = false;
            state.inKeywordLine = true;
            return "keyword";
          } else if (!state.inKeywordLine && state.allowSteps && stream.match(/(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/)) {
            state.inStep = true;
            state.allowPlaceholders = true;
            state.allowMultilineArgument = true;
            state.inKeywordLine = true;
            return "keyword";
          } else if (stream.match(/"[^"]*"?/)) {
            return "string";
          } else if (state.allowPlaceholders && stream.match(/<[^>]*>?/)) {
            return "variable";
          } else {
            stream.next();
            stream.eatWhile(/[^@"<#]/);
            return null;
          }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/go.js
  var go_exports = {};
  __export(go_exports, {
    go: () => go
  });
  function tokenBase11(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'" || ch2 == "`") {
      state.tokenize = tokenString7(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\d\.]/.test(ch2)) {
      if (ch2 == ".") {
        stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
      } else if (ch2 == "0") {
        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
      } else {
        stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
      }
      return "number";
    }
    if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      curPunc4 = ch2;
      return null;
    }
    if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment5;
        return tokenComment5(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar5.test(ch2)) {
      stream.eatWhile(isOperatorChar5);
      return "operator";
    }
    stream.eatWhile(/[\w\$_\xa1-\uffff]/);
    var cur = stream.current();
    if (keywords13.propertyIsEnumerable(cur)) {
      if (cur == "case" || cur == "default")
        curPunc4 = "case";
      return "keyword";
    }
    if (atoms7.propertyIsEnumerable(cur))
      return "atom";
    return "variable";
  }
  function tokenString7(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && quote2 != "`" && next2 == "\\";
      }
      if (end2 || !(escaped || quote2 == "`"))
        state.tokenize = tokenBase11;
      return "string";
    };
  }
  function tokenComment5(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase11;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function Context6(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext6(state, col, type7) {
    return state.context = new Context6(state.indented, col, type7, null, state.context);
  }
  function popContext6(state) {
    if (!state.context.prev)
      return;
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var keywords13, atoms7, isOperatorChar5, curPunc4, go;
  var init_go = __esm({
    "node_modules/@codemirror/legacy-modes/mode/go.js"() {
      keywords13 = {
        "break": true,
        "case": true,
        "chan": true,
        "const": true,
        "continue": true,
        "default": true,
        "defer": true,
        "else": true,
        "fallthrough": true,
        "for": true,
        "func": true,
        "go": true,
        "goto": true,
        "if": true,
        "import": true,
        "interface": true,
        "map": true,
        "package": true,
        "range": true,
        "return": true,
        "select": true,
        "struct": true,
        "switch": true,
        "type": true,
        "var": true,
        "bool": true,
        "byte": true,
        "complex64": true,
        "complex128": true,
        "float32": true,
        "float64": true,
        "int8": true,
        "int16": true,
        "int32": true,
        "int64": true,
        "string": true,
        "uint8": true,
        "uint16": true,
        "uint32": true,
        "uint64": true,
        "int": true,
        "uint": true,
        "uintptr": true,
        "error": true,
        "rune": true,
        "any": true,
        "comparable": true
      };
      atoms7 = {
        "true": true,
        "false": true,
        "iota": true,
        "nil": true,
        "append": true,
        "cap": true,
        "close": true,
        "complex": true,
        "copy": true,
        "delete": true,
        "imag": true,
        "len": true,
        "make": true,
        "new": true,
        "panic": true,
        "print": true,
        "println": true,
        "real": true,
        "recover": true
      };
      isOperatorChar5 = /[+\-*&^%:=<>!|\/]/;
      go = {
        name: "go",
        startState: function(indentUnit2) {
          return {
            tokenize: null,
            context: new Context6(-indentUnit2, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
            if (ctx.type == "case")
              ctx.type = "}";
          }
          if (stream.eatSpace())
            return null;
          curPunc4 = null;
          var style2 = (state.tokenize || tokenBase11)(stream, state);
          if (style2 == "comment")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if (curPunc4 == "{")
            pushContext6(state, stream.column(), "}");
          else if (curPunc4 == "[")
            pushContext6(state, stream.column(), "]");
          else if (curPunc4 == "(")
            pushContext6(state, stream.column(), ")");
          else if (curPunc4 == "case")
            ctx.type = "case";
          else if (curPunc4 == "}" && ctx.type == "}")
            popContext6(state);
          else if (curPunc4 == ctx.type)
            popContext6(state);
          state.startOfLine = false;
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != tokenBase11 && state.tokenize != null)
            return null;
          var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
          if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter))
            return ctx.indented;
          var closing3 = firstChar == ctx.type;
          if (ctx.align)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          indentOnInput: /^\s([{}]|case |default\s*:)$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/groovy.js
  var groovy_exports = {};
  __export(groovy_exports, {
    groovy: () => groovy
  });
  function words8(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenBase12(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      return startString(ch2, stream, state);
    }
    if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      curPunc5 = ch2;
      return null;
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      if (stream.eat(/eE/)) {
        stream.eat(/\+\-/);
        stream.eatWhile(/\d/);
      }
      return "number";
    }
    if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize.push(tokenComment6);
        return tokenComment6(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
      if (expectExpression(state.lastToken, false)) {
        return startString(ch2, stream, state);
      }
    }
    if (ch2 == "-" && stream.eat(">")) {
      curPunc5 = "->";
      return null;
    }
    if (/[+\-*&%=<>!?|\/~]/.test(ch2)) {
      stream.eatWhile(/[+\-*&%=<>|~]/);
      return "operator";
    }
    stream.eatWhile(/[\w\$_]/);
    if (ch2 == "@") {
      stream.eatWhile(/[\w\$_\.]/);
      return "meta";
    }
    if (state.lastToken == ".")
      return "property";
    if (stream.eat(":")) {
      curPunc5 = "proplabel";
      return "property";
    }
    var cur = stream.current();
    if (atoms8.propertyIsEnumerable(cur)) {
      return "atom";
    }
    if (keywords14.propertyIsEnumerable(cur)) {
      if (blockKeywords3.propertyIsEnumerable(cur))
        curPunc5 = "newstatement";
      else if (standaloneKeywords.propertyIsEnumerable(cur))
        curPunc5 = "standalone";
      return "keyword";
    }
    return "variable";
  }
  function startString(quote2, stream, state) {
    var tripleQuoted = false;
    if (quote2 != "/" && stream.eat(quote2)) {
      if (stream.eat(quote2))
        tripleQuoted = true;
      else
        return "string";
    }
    function t2(stream2, state2) {
      var escaped = false, next2, end2 = !tripleQuoted;
      while ((next2 = stream2.next()) != null) {
        if (next2 == quote2 && !escaped) {
          if (!tripleQuoted) {
            break;
          }
          if (stream2.match(quote2 + quote2)) {
            end2 = true;
            break;
          }
        }
        if (quote2 == '"' && next2 == "$" && !escaped) {
          if (stream2.eat("{")) {
            state2.tokenize.push(tokenBaseUntilBrace());
            return "string";
          } else if (stream2.match(/^\w/, false)) {
            state2.tokenize.push(tokenVariableDeref);
            return "string";
          }
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2)
        state2.tokenize.pop();
      return "string";
    }
    state.tokenize.push(t2);
    return t2(stream, state);
  }
  function tokenBaseUntilBrace() {
    var depth = 1;
    function t2(stream, state) {
      if (stream.peek() == "}") {
        depth--;
        if (depth == 0) {
          state.tokenize.pop();
          return state.tokenize[state.tokenize.length - 1](stream, state);
        }
      } else if (stream.peek() == "{") {
        depth++;
      }
      return tokenBase12(stream, state);
    }
    t2.isBase = true;
    return t2;
  }
  function tokenVariableDeref(stream, state) {
    var next2 = stream.match(/^(\.|[\w\$_]+)/);
    if (!next2) {
      state.tokenize.pop();
      return state.tokenize[state.tokenize.length - 1](stream, state);
    }
    return next2[0] == "." ? null : "variable";
  }
  function tokenComment6(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize.pop();
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function expectExpression(last, newline3) {
    return !last || last == "operator" || last == "->" || /[\.\[\{\(,;:]/.test(last) || last == "newstatement" || last == "keyword" || last == "proplabel" || last == "standalone" && !newline3;
  }
  function Context7(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext7(state, col, type7) {
    return state.context = new Context7(state.indented, col, type7, null, state.context);
  }
  function popContext7(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var keywords14, blockKeywords3, standaloneKeywords, atoms8, curPunc5, groovy;
  var init_groovy = __esm({
    "node_modules/@codemirror/legacy-modes/mode/groovy.js"() {
      keywords14 = words8(
        "abstract as assert boolean break byte case catch char class const continue def default do double else enum extends final finally float for goto if implements import in instanceof int interface long native new package private protected public return short static strictfp super switch synchronized threadsafe throw throws trait transient try void volatile while"
      );
      blockKeywords3 = words8("catch class def do else enum finally for if interface switch trait try while");
      standaloneKeywords = words8("return break continue");
      atoms8 = words8("null true false this");
      tokenBase12.isBase = true;
      groovy = {
        name: "groovy",
        startState: function(indentUnit2) {
          return {
            tokenize: [tokenBase12],
            context: new Context7(-indentUnit2, 0, "top", false),
            indented: 0,
            startOfLine: true,
            lastToken: null
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
            if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) {
              popContext7(state);
              ctx = state.context;
            }
          }
          if (stream.eatSpace())
            return null;
          curPunc5 = null;
          var style2 = state.tokenize[state.tokenize.length - 1](stream, state);
          if (style2 == "comment")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if ((curPunc5 == ";" || curPunc5 == ":") && ctx.type == "statement")
            popContext7(state);
          else if (curPunc5 == "->" && ctx.type == "statement" && ctx.prev.type == "}") {
            popContext7(state);
            state.context.align = false;
          } else if (curPunc5 == "{")
            pushContext7(state, stream.column(), "}");
          else if (curPunc5 == "[")
            pushContext7(state, stream.column(), "]");
          else if (curPunc5 == "(")
            pushContext7(state, stream.column(), ")");
          else if (curPunc5 == "}") {
            while (ctx.type == "statement")
              ctx = popContext7(state);
            if (ctx.type == "}")
              ctx = popContext7(state);
            while (ctx.type == "statement")
              ctx = popContext7(state);
          } else if (curPunc5 == ctx.type)
            popContext7(state);
          else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc5 == "newstatement")
            pushContext7(state, stream.column(), "statement");
          state.startOfLine = false;
          state.lastToken = curPunc5 || style2;
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (!state.tokenize[state.tokenize.length - 1].isBase)
            return null;
          var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;
          if (ctx.type == "statement" && !expectExpression(state.lastToken, true))
            ctx = ctx.prev;
          var closing3 = firstChar == ctx.type;
          if (ctx.type == "statement")
            return ctx.indented + (firstChar == "{" ? 0 : cx2.unit);
          else if (ctx.align)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', "'''", '"""'] }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/haskell.js
  var haskell_exports = {};
  __export(haskell_exports, {
    haskell: () => haskell
  });
  function switchState2(source, setState, f) {
    setState(f);
    return f(source, setState);
  }
  function normal2(source, setState) {
    if (source.eatWhile(whiteCharRE)) {
      return null;
    }
    var ch2 = source.next();
    if (specialRE2.test(ch2)) {
      if (ch2 == "{" && source.eat("-")) {
        var t2 = "comment";
        if (source.eat("#")) {
          t2 = "meta";
        }
        return switchState2(source, setState, ncomment(t2, 1));
      }
      return null;
    }
    if (ch2 == "'") {
      if (source.eat("\\")) {
        source.next();
      } else {
        source.next();
      }
      if (source.eat("'")) {
        return "string";
      }
      return "error";
    }
    if (ch2 == '"') {
      return switchState2(source, setState, stringLiteral);
    }
    if (largeRE.test(ch2)) {
      source.eatWhile(idRE);
      if (source.eat(".")) {
        return "qualifier";
      }
      return "type";
    }
    if (smallRE.test(ch2)) {
      source.eatWhile(idRE);
      return "variable";
    }
    if (digitRE2.test(ch2)) {
      if (ch2 == "0") {
        if (source.eat(/[xX]/)) {
          source.eatWhile(hexitRE);
          return "integer";
        }
        if (source.eat(/[oO]/)) {
          source.eatWhile(octitRE);
          return "number";
        }
      }
      source.eatWhile(digitRE2);
      var t2 = "number";
      if (source.match(/^\.\d+/)) {
        t2 = "number";
      }
      if (source.eat(/[eE]/)) {
        t2 = "number";
        source.eat(/[-+]/);
        source.eatWhile(digitRE2);
      }
      return t2;
    }
    if (ch2 == "." && source.eat("."))
      return "keyword";
    if (symbolRE2.test(ch2)) {
      if (ch2 == "-" && source.eat(/-/)) {
        source.eatWhile(/-/);
        if (!source.eat(symbolRE2)) {
          source.skipToEnd();
          return "comment";
        }
      }
      source.eatWhile(symbolRE2);
      return "variable";
    }
    return "error";
  }
  function ncomment(type7, nest) {
    if (nest == 0) {
      return normal2;
    }
    return function(source, setState) {
      var currNest = nest;
      while (!source.eol()) {
        var ch2 = source.next();
        if (ch2 == "{" && source.eat("-")) {
          ++currNest;
        } else if (ch2 == "-" && source.eat("}")) {
          --currNest;
          if (currNest == 0) {
            setState(normal2);
            return type7;
          }
        }
      }
      setState(ncomment(type7, currNest));
      return type7;
    };
  }
  function stringLiteral(source, setState) {
    while (!source.eol()) {
      var ch2 = source.next();
      if (ch2 == '"') {
        setState(normal2);
        return "string";
      }
      if (ch2 == "\\") {
        if (source.eol() || source.eat(whiteCharRE)) {
          setState(stringGap);
          return "string";
        }
        if (source.eat("&")) {
        } else {
          source.next();
        }
      }
    }
    setState(normal2);
    return "error";
  }
  function stringGap(source, setState) {
    if (source.eat("\\")) {
      return switchState2(source, setState, stringLiteral);
    }
    source.next();
    setState(normal2);
    return "error";
  }
  var smallRE, largeRE, digitRE2, hexitRE, octitRE, idRE, symbolRE2, specialRE2, whiteCharRE, wellKnownWords2, haskell;
  var init_haskell = __esm({
    "node_modules/@codemirror/legacy-modes/mode/haskell.js"() {
      smallRE = /[a-z_]/;
      largeRE = /[A-Z]/;
      digitRE2 = /\d/;
      hexitRE = /[0-9A-Fa-f]/;
      octitRE = /[0-7]/;
      idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
      symbolRE2 = /[-!#$%&*+.\/<=>?@\\^|~:]/;
      specialRE2 = /[(),;[\]`{}]/;
      whiteCharRE = /[ \t\v\f]/;
      wellKnownWords2 = function() {
        var wkw = {};
        function setType(t2) {
          return function() {
            for (var i = 0; i < arguments.length; i++)
              wkw[arguments[i]] = t2;
          };
        }
        setType("keyword")(
          "case",
          "class",
          "data",
          "default",
          "deriving",
          "do",
          "else",
          "foreign",
          "if",
          "import",
          "in",
          "infix",
          "infixl",
          "infixr",
          "instance",
          "let",
          "module",
          "newtype",
          "of",
          "then",
          "type",
          "where",
          "_"
        );
        setType("keyword")(
          "..",
          ":",
          "::",
          "=",
          "\\",
          "<-",
          "->",
          "@",
          "~",
          "=>"
        );
        setType("builtin")(
          "!!",
          "$!",
          "$",
          "&&",
          "+",
          "++",
          "-",
          ".",
          "/",
          "/=",
          "<",
          "<*",
          "<=",
          "<$>",
          "<*>",
          "=<<",
          "==",
          ">",
          ">=",
          ">>",
          ">>=",
          "^",
          "^^",
          "||",
          "*",
          "*>",
          "**"
        );
        setType("builtin")(
          "Applicative",
          "Bool",
          "Bounded",
          "Char",
          "Double",
          "EQ",
          "Either",
          "Enum",
          "Eq",
          "False",
          "FilePath",
          "Float",
          "Floating",
          "Fractional",
          "Functor",
          "GT",
          "IO",
          "IOError",
          "Int",
          "Integer",
          "Integral",
          "Just",
          "LT",
          "Left",
          "Maybe",
          "Monad",
          "Nothing",
          "Num",
          "Ord",
          "Ordering",
          "Rational",
          "Read",
          "ReadS",
          "Real",
          "RealFloat",
          "RealFrac",
          "Right",
          "Show",
          "ShowS",
          "String",
          "True"
        );
        setType("builtin")(
          "abs",
          "acos",
          "acosh",
          "all",
          "and",
          "any",
          "appendFile",
          "asTypeOf",
          "asin",
          "asinh",
          "atan",
          "atan2",
          "atanh",
          "break",
          "catch",
          "ceiling",
          "compare",
          "concat",
          "concatMap",
          "const",
          "cos",
          "cosh",
          "curry",
          "cycle",
          "decodeFloat",
          "div",
          "divMod",
          "drop",
          "dropWhile",
          "either",
          "elem",
          "encodeFloat",
          "enumFrom",
          "enumFromThen",
          "enumFromThenTo",
          "enumFromTo",
          "error",
          "even",
          "exp",
          "exponent",
          "fail",
          "filter",
          "flip",
          "floatDigits",
          "floatRadix",
          "floatRange",
          "floor",
          "fmap",
          "foldl",
          "foldl1",
          "foldr",
          "foldr1",
          "fromEnum",
          "fromInteger",
          "fromIntegral",
          "fromRational",
          "fst",
          "gcd",
          "getChar",
          "getContents",
          "getLine",
          "head",
          "id",
          "init",
          "interact",
          "ioError",
          "isDenormalized",
          "isIEEE",
          "isInfinite",
          "isNaN",
          "isNegativeZero",
          "iterate",
          "last",
          "lcm",
          "length",
          "lex",
          "lines",
          "log",
          "logBase",
          "lookup",
          "map",
          "mapM",
          "mapM_",
          "max",
          "maxBound",
          "maximum",
          "maybe",
          "min",
          "minBound",
          "minimum",
          "mod",
          "negate",
          "not",
          "notElem",
          "null",
          "odd",
          "or",
          "otherwise",
          "pi",
          "pred",
          "print",
          "product",
          "properFraction",
          "pure",
          "putChar",
          "putStr",
          "putStrLn",
          "quot",
          "quotRem",
          "read",
          "readFile",
          "readIO",
          "readList",
          "readLn",
          "readParen",
          "reads",
          "readsPrec",
          "realToFrac",
          "recip",
          "rem",
          "repeat",
          "replicate",
          "return",
          "reverse",
          "round",
          "scaleFloat",
          "scanl",
          "scanl1",
          "scanr",
          "scanr1",
          "seq",
          "sequence",
          "sequence_",
          "show",
          "showChar",
          "showList",
          "showParen",
          "showString",
          "shows",
          "showsPrec",
          "significand",
          "signum",
          "sin",
          "sinh",
          "snd",
          "span",
          "splitAt",
          "sqrt",
          "subtract",
          "succ",
          "sum",
          "tail",
          "take",
          "takeWhile",
          "tan",
          "tanh",
          "toEnum",
          "toInteger",
          "toRational",
          "truncate",
          "uncurry",
          "undefined",
          "unlines",
          "until",
          "unwords",
          "unzip",
          "unzip3",
          "userError",
          "words",
          "writeFile",
          "zip",
          "zip3",
          "zipWith",
          "zipWith3"
        );
        return wkw;
      }();
      haskell = {
        name: "haskell",
        startState: function() {
          return { f: normal2 };
        },
        copyState: function(s2) {
          return { f: s2.f };
        },
        token: function(stream, state) {
          var t2 = state.f(stream, function(s2) {
            state.f = s2;
          });
          var w = stream.current();
          return wellKnownWords2.hasOwnProperty(w) ? wellKnownWords2[w] : t2;
        },
        languageData: {
          commentTokens: { line: "--", block: { open: "{-", close: "-}" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/haxe.js
  var haxe_exports = {};
  __export(haxe_exports, {
    haxe: () => haxe,
    hxml: () => hxml
  });
  function kw(type7) {
    return { type: type7, style: "keyword" };
  }
  function chain4(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function toUnescaped(stream, end2) {
    var escaped = false, next2;
    while ((next2 = stream.next()) != null) {
      if (next2 == end2 && !escaped)
        return true;
      escaped = !escaped && next2 == "\\";
    }
  }
  function ret2(tp, style2, cont3) {
    type3 = tp;
    content2 = cont3;
    return style2;
  }
  function haxeTokenBase(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      return chain4(stream, state, haxeTokenString(ch2));
    } else if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      return ret2(ch2);
    } else if (ch2 == "0" && stream.eat(/x/i)) {
      stream.eatWhile(/[\da-f]/i);
      return ret2("number", "number");
    } else if (/\d/.test(ch2) || ch2 == "-" && stream.eat(/\d/)) {
      stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
      return ret2("number", "number");
    } else if (state.reAllowed && (ch2 == "~" && stream.eat(/\//))) {
      toUnescaped(stream, "/");
      stream.eatWhile(/[gimsu]/);
      return ret2("regexp", "string.special");
    } else if (ch2 == "/") {
      if (stream.eat("*")) {
        return chain4(stream, state, haxeTokenComment);
      } else if (stream.eat("/")) {
        stream.skipToEnd();
        return ret2("comment", "comment");
      } else {
        stream.eatWhile(isOperatorChar6);
        return ret2("operator", null, stream.current());
      }
    } else if (ch2 == "#") {
      stream.skipToEnd();
      return ret2("conditional", "meta");
    } else if (ch2 == "@") {
      stream.eat(/:/);
      stream.eatWhile(/[\w_]/);
      return ret2("metadata", "meta");
    } else if (isOperatorChar6.test(ch2)) {
      stream.eatWhile(isOperatorChar6);
      return ret2("operator", null, stream.current());
    } else {
      var word2;
      if (/[A-Z]/.test(ch2)) {
        stream.eatWhile(/[\w_<>]/);
        word2 = stream.current();
        return ret2("type", "type", word2);
      } else {
        stream.eatWhile(/[\w_]/);
        var word2 = stream.current(), known = keywords15.propertyIsEnumerable(word2) && keywords15[word2];
        return known && state.kwAllowed ? ret2(known.type, known.style, word2) : ret2("variable", "variable", word2);
      }
    }
  }
  function haxeTokenString(quote2) {
    return function(stream, state) {
      if (toUnescaped(stream, quote2))
        state.tokenize = haxeTokenBase;
      return ret2("string", "string");
    };
  }
  function haxeTokenComment(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = haxeTokenBase;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return ret2("comment", "comment");
  }
  function HaxeLexical(indented, column, type7, align, prev, info) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.prev = prev;
    this.info = info;
    if (align != null)
      this.align = align;
  }
  function inScope(state, varname) {
    for (var v = state.localVars; v; v = v.next)
      if (v.name == varname)
        return true;
  }
  function parseHaxe(state, style2, type7, content3, stream) {
    var cc = state.cc;
    cx.state = state;
    cx.stream = stream;
    cx.marked = null, cx.cc = cc;
    if (!state.lexical.hasOwnProperty("align"))
      state.lexical.align = true;
    while (true) {
      var combinator = cc.length ? cc.pop() : statement;
      if (combinator(type7, content3)) {
        while (cc.length && cc[cc.length - 1].lex)
          cc.pop()();
        if (cx.marked)
          return cx.marked;
        if (type7 == "variable" && inScope(state, content3))
          return "variableName.local";
        if (type7 == "variable" && imported(state, content3))
          return "variableName.special";
        return style2;
      }
    }
  }
  function imported(state, typename) {
    if (/[a-z]/.test(typename.charAt(0)))
      return false;
    var len = state.importedtypes.length;
    for (var i = 0; i < len; i++)
      if (state.importedtypes[i] == typename)
        return true;
  }
  function registerimport(importname) {
    var state = cx.state;
    for (var t2 = state.importedtypes; t2; t2 = t2.next)
      if (t2.name == importname)
        return;
    state.importedtypes = { name: importname, next: state.importedtypes };
  }
  function pass() {
    for (var i = arguments.length - 1; i >= 0; i--)
      cx.cc.push(arguments[i]);
  }
  function cont() {
    pass.apply(null, arguments);
    return true;
  }
  function inList2(name2, list2) {
    for (var v = list2; v; v = v.next)
      if (v.name == name2)
        return true;
    return false;
  }
  function register(varname) {
    var state = cx.state;
    if (state.context) {
      cx.marked = "def";
      if (inList2(varname, state.localVars))
        return;
      state.localVars = { name: varname, next: state.localVars };
    } else if (state.globalVars) {
      if (inList2(varname, state.globalVars))
        return;
      state.globalVars = { name: varname, next: state.globalVars };
    }
  }
  function pushcontext() {
    if (!cx.state.context)
      cx.state.localVars = defaultVars;
    cx.state.context = { prev: cx.state.context, vars: cx.state.localVars };
  }
  function popcontext() {
    cx.state.localVars = cx.state.context.vars;
    cx.state.context = cx.state.context.prev;
  }
  function pushlex(type7, info) {
    var result = function() {
      var state = cx.state;
      state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type7, null, state.lexical, info);
    };
    result.lex = true;
    return result;
  }
  function poplex() {
    var state = cx.state;
    if (state.lexical.prev) {
      if (state.lexical.type == ")")
        state.indented = state.lexical.indented;
      state.lexical = state.lexical.prev;
    }
  }
  function expect(wanted) {
    function f(type7) {
      if (type7 == wanted)
        return cont();
      else if (wanted == ";")
        return pass();
      else
        return cont(f);
    }
    return f;
  }
  function statement(type7) {
    if (type7 == "@")
      return cont(metadef);
    if (type7 == "var")
      return cont(pushlex("vardef"), vardef1, expect(";"), poplex);
    if (type7 == "keyword a")
      return cont(pushlex("form"), expression2, statement, poplex);
    if (type7 == "keyword b")
      return cont(pushlex("form"), statement, poplex);
    if (type7 == "{")
      return cont(pushlex("}"), pushcontext, block, poplex, popcontext);
    if (type7 == ";")
      return cont();
    if (type7 == "attribute")
      return cont(maybeattribute);
    if (type7 == "function")
      return cont(functiondef);
    if (type7 == "for")
      return cont(
        pushlex("form"),
        expect("("),
        pushlex(")"),
        forspec1,
        expect(")"),
        poplex,
        statement,
        poplex
      );
    if (type7 == "variable")
      return cont(pushlex("stat"), maybelabel);
    if (type7 == "switch")
      return cont(
        pushlex("form"),
        expression2,
        pushlex("}", "switch"),
        expect("{"),
        block,
        poplex,
        poplex
      );
    if (type7 == "case")
      return cont(expression2, expect(":"));
    if (type7 == "default")
      return cont(expect(":"));
    if (type7 == "catch")
      return cont(
        pushlex("form"),
        pushcontext,
        expect("("),
        funarg,
        expect(")"),
        statement,
        poplex,
        popcontext
      );
    if (type7 == "import")
      return cont(importdef, expect(";"));
    if (type7 == "typedef")
      return cont(typedef);
    return pass(pushlex("stat"), expression2, expect(";"), poplex);
  }
  function expression2(type7) {
    if (atomicTypes.hasOwnProperty(type7))
      return cont(maybeoperator);
    if (type7 == "type")
      return cont(maybeoperator);
    if (type7 == "function")
      return cont(functiondef);
    if (type7 == "keyword c")
      return cont(maybeexpression);
    if (type7 == "(")
      return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeoperator);
    if (type7 == "operator")
      return cont(expression2);
    if (type7 == "[")
      return cont(pushlex("]"), commasep(maybeexpression, "]"), poplex, maybeoperator);
    if (type7 == "{")
      return cont(pushlex("}"), commasep(objprop, "}"), poplex, maybeoperator);
    return cont();
  }
  function maybeexpression(type7) {
    if (type7.match(/[;\}\)\],]/))
      return pass();
    return pass(expression2);
  }
  function maybeoperator(type7, value) {
    if (type7 == "operator" && /\+\+|--/.test(value))
      return cont(maybeoperator);
    if (type7 == "operator" || type7 == ":")
      return cont(expression2);
    if (type7 == ";")
      return;
    if (type7 == "(")
      return cont(pushlex(")"), commasep(expression2, ")"), poplex, maybeoperator);
    if (type7 == ".")
      return cont(property, maybeoperator);
    if (type7 == "[")
      return cont(pushlex("]"), expression2, expect("]"), poplex, maybeoperator);
  }
  function maybeattribute(type7) {
    if (type7 == "attribute")
      return cont(maybeattribute);
    if (type7 == "function")
      return cont(functiondef);
    if (type7 == "var")
      return cont(vardef1);
  }
  function metadef(type7) {
    if (type7 == ":")
      return cont(metadef);
    if (type7 == "variable")
      return cont(metadef);
    if (type7 == "(")
      return cont(pushlex(")"), commasep(metaargs, ")"), poplex, statement);
  }
  function metaargs(type7) {
    if (type7 == "variable")
      return cont();
  }
  function importdef(type7, value) {
    if (type7 == "variable" && /[A-Z]/.test(value.charAt(0))) {
      registerimport(value);
      return cont();
    } else if (type7 == "variable" || type7 == "property" || type7 == "." || value == "*")
      return cont(importdef);
  }
  function typedef(type7, value) {
    if (type7 == "variable" && /[A-Z]/.test(value.charAt(0))) {
      registerimport(value);
      return cont();
    } else if (type7 == "type" && /[A-Z]/.test(value.charAt(0))) {
      return cont();
    }
  }
  function maybelabel(type7) {
    if (type7 == ":")
      return cont(poplex, statement);
    return pass(maybeoperator, expect(";"), poplex);
  }
  function property(type7) {
    if (type7 == "variable") {
      cx.marked = "property";
      return cont();
    }
  }
  function objprop(type7) {
    if (type7 == "variable")
      cx.marked = "property";
    if (atomicTypes.hasOwnProperty(type7))
      return cont(expect(":"), expression2);
  }
  function commasep(what, end2) {
    function proceed(type7) {
      if (type7 == ",")
        return cont(what, proceed);
      if (type7 == end2)
        return cont();
      return cont(expect(end2));
    }
    return function(type7) {
      if (type7 == end2)
        return cont();
      else
        return pass(what, proceed);
    };
  }
  function block(type7) {
    if (type7 == "}")
      return cont();
    return pass(statement, block);
  }
  function vardef1(type7, value) {
    if (type7 == "variable") {
      register(value);
      return cont(typeuse, vardef2);
    }
    return cont();
  }
  function vardef2(type7, value) {
    if (value == "=")
      return cont(expression2, vardef2);
    if (type7 == ",")
      return cont(vardef1);
  }
  function forspec1(type7, value) {
    if (type7 == "variable") {
      register(value);
      return cont(forin, expression2);
    } else {
      return pass();
    }
  }
  function forin(_type, value) {
    if (value == "in")
      return cont();
  }
  function functiondef(type7, value) {
    if (type7 == "variable" || type7 == "type") {
      register(value);
      return cont(functiondef);
    }
    if (value == "new")
      return cont(functiondef);
    if (type7 == "(")
      return cont(pushlex(")"), pushcontext, commasep(funarg, ")"), poplex, typeuse, statement, popcontext);
  }
  function typeuse(type7) {
    if (type7 == ":")
      return cont(typestring);
  }
  function typestring(type7) {
    if (type7 == "type")
      return cont();
    if (type7 == "variable")
      return cont();
    if (type7 == "{")
      return cont(pushlex("}"), commasep(typeprop, "}"), poplex);
  }
  function typeprop(type7) {
    if (type7 == "variable")
      return cont(typeuse);
  }
  function funarg(type7, value) {
    if (type7 == "variable") {
      register(value);
      return cont(typeuse);
    }
  }
  var A2, B, C2, operator2, atom2, attribute, type3, keywords15, isOperatorChar6, type3, content2, atomicTypes, cx, defaultVars, haxe, hxml;
  var init_haxe = __esm({
    "node_modules/@codemirror/legacy-modes/mode/haxe.js"() {
      A2 = kw("keyword a");
      B = kw("keyword b");
      C2 = kw("keyword c");
      operator2 = kw("operator");
      atom2 = { type: "atom", style: "atom" };
      attribute = { type: "attribute", style: "attribute" };
      type3 = kw("typedef");
      keywords15 = {
        "if": A2,
        "while": A2,
        "else": B,
        "do": B,
        "try": B,
        "return": C2,
        "break": C2,
        "continue": C2,
        "new": C2,
        "throw": C2,
        "var": kw("var"),
        "inline": attribute,
        "static": attribute,
        "using": kw("import"),
        "public": attribute,
        "private": attribute,
        "cast": kw("cast"),
        "import": kw("import"),
        "macro": kw("macro"),
        "function": kw("function"),
        "catch": kw("catch"),
        "untyped": kw("untyped"),
        "callback": kw("cb"),
        "for": kw("for"),
        "switch": kw("switch"),
        "case": kw("case"),
        "default": kw("default"),
        "in": operator2,
        "never": kw("property_access"),
        "trace": kw("trace"),
        "class": type3,
        "abstract": type3,
        "enum": type3,
        "interface": type3,
        "typedef": type3,
        "extends": type3,
        "implements": type3,
        "dynamic": type3,
        "true": atom2,
        "false": atom2,
        "null": atom2
      };
      isOperatorChar6 = /[+\-*&%=<>!?|]/;
      atomicTypes = { "atom": true, "number": true, "variable": true, "string": true, "regexp": true };
      cx = { state: null, column: null, marked: null, cc: null };
      defaultVars = { name: "this", next: null };
      popcontext.lex = true;
      poplex.lex = true;
      haxe = {
        name: "haxe",
        startState: function(indentUnit2) {
          var defaulttypes = ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"];
          var state = {
            tokenize: haxeTokenBase,
            reAllowed: true,
            kwAllowed: true,
            cc: [],
            lexical: new HaxeLexical(-indentUnit2, 0, "block", false),
            importedtypes: defaulttypes,
            context: null,
            indented: 0
          };
          return state;
        },
        token: function(stream, state) {
          if (stream.sol()) {
            if (!state.lexical.hasOwnProperty("align"))
              state.lexical.align = false;
            state.indented = stream.indentation();
          }
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          if (type3 == "comment")
            return style2;
          state.reAllowed = !!(type3 == "operator" || type3 == "keyword c" || type3.match(/^[\[{}\(,;:]$/));
          state.kwAllowed = type3 != ".";
          return parseHaxe(state, style2, type3, content2, stream);
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != haxeTokenBase)
            return 0;
          var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
          if (lexical.type == "stat" && firstChar == "}")
            lexical = lexical.prev;
          var type7 = lexical.type, closing3 = firstChar == type7;
          if (type7 == "vardef")
            return lexical.indented + 4;
          else if (type7 == "form" && firstChar == "{")
            return lexical.indented;
          else if (type7 == "stat" || type7 == "form")
            return lexical.indented + cx2.unit;
          else if (lexical.info == "switch" && !closing3)
            return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx2.unit : 2 * cx2.unit);
          else if (lexical.align)
            return lexical.column + (closing3 ? 0 : 1);
          else
            return lexical.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
        }
      };
      hxml = {
        name: "hxml",
        startState: function() {
          return {
            define: false,
            inString: false
          };
        },
        token: function(stream, state) {
          var ch2 = stream.peek();
          var sol = stream.sol();
          if (ch2 == "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (sol && ch2 == "-") {
            var style2 = "variable-2";
            stream.eat(/-/);
            if (stream.peek() == "-") {
              stream.eat(/-/);
              style2 = "keyword a";
            }
            if (stream.peek() == "D") {
              stream.eat(/[D]/);
              style2 = "keyword c";
              state.define = true;
            }
            stream.eatWhile(/[A-Z]/i);
            return style2;
          }
          var ch2 = stream.peek();
          if (state.inString == false && ch2 == "'") {
            state.inString = true;
            stream.next();
          }
          if (state.inString == true) {
            if (stream.skipTo("'")) {
            } else {
              stream.skipToEnd();
            }
            if (stream.peek() == "'") {
              stream.next();
              state.inString = false;
            }
            return "string";
          }
          stream.next();
          return null;
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/http.js
  var http_exports = {};
  __export(http_exports, {
    http: () => http
  });
  function failFirstLine(stream, state) {
    stream.skipToEnd();
    state.cur = header;
    return "error";
  }
  function start(stream, state) {
    if (stream.match(/^HTTP\/\d\.\d/)) {
      state.cur = responseStatusCode;
      return "keyword";
    } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
      state.cur = requestPath;
      return "keyword";
    } else {
      return failFirstLine(stream, state);
    }
  }
  function responseStatusCode(stream, state) {
    var code = stream.match(/^\d+/);
    if (!code)
      return failFirstLine(stream, state);
    state.cur = responseStatusText;
    var status = Number(code[0]);
    if (status >= 100 && status < 400) {
      return "atom";
    } else {
      return "error";
    }
  }
  function responseStatusText(stream, state) {
    stream.skipToEnd();
    state.cur = header;
    return null;
  }
  function requestPath(stream, state) {
    stream.eatWhile(/\S/);
    state.cur = requestProtocol;
    return "string.special";
  }
  function requestProtocol(stream, state) {
    if (stream.match(/^HTTP\/\d\.\d$/)) {
      state.cur = header;
      return "keyword";
    } else {
      return failFirstLine(stream, state);
    }
  }
  function header(stream) {
    if (stream.sol() && !stream.eat(/[ \t]/)) {
      if (stream.match(/^.*?:/)) {
        return "atom";
      } else {
        stream.skipToEnd();
        return "error";
      }
    } else {
      stream.skipToEnd();
      return "string";
    }
  }
  function body(stream) {
    stream.skipToEnd();
    return null;
  }
  var http;
  var init_http = __esm({
    "node_modules/@codemirror/legacy-modes/mode/http.js"() {
      http = {
        name: "http",
        token: function(stream, state) {
          var cur = state.cur;
          if (cur != header && cur != body && stream.eatSpace())
            return null;
          return cur(stream, state);
        },
        blankLine: function(state) {
          state.cur = body;
        },
        startState: function() {
          return { cur: start };
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/idl.js
  var idl_exports = {};
  __export(idl_exports, {
    idl: () => idl
  });
  function wordRegexp4(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
  }
  function tokenBase13(stream) {
    if (stream.eatSpace())
      return null;
    if (stream.match(";")) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^[0-9\.+-]/, false)) {
      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
        return "number";
      if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
        return "number";
      if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
        return "number";
    }
    if (stream.match(/^"([^"]|(""))*"/)) {
      return "string";
    }
    if (stream.match(/^'([^']|(''))*'/)) {
      return "string";
    }
    if (stream.match(keywords16)) {
      return "keyword";
    }
    if (stream.match(builtins3)) {
      return "builtin";
    }
    if (stream.match(identifiers3)) {
      return "variable";
    }
    if (stream.match(singleOperators) || stream.match(boolOperators)) {
      return "operator";
    }
    stream.next();
    return null;
  }
  var builtinArray, builtins3, keywordArray, keywords16, identifiers3, singleOperators, boolOperators, idl;
  var init_idl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/idl.js"() {
      builtinArray = [
        "a_correlate",
        "abs",
        "acos",
        "adapt_hist_equal",
        "alog",
        "alog2",
        "alog10",
        "amoeba",
        "annotate",
        "app_user_dir",
        "app_user_dir_query",
        "arg_present",
        "array_equal",
        "array_indices",
        "arrow",
        "ascii_template",
        "asin",
        "assoc",
        "atan",
        "axis",
        "axis",
        "bandpass_filter",
        "bandreject_filter",
        "barplot",
        "bar_plot",
        "beseli",
        "beselj",
        "beselk",
        "besely",
        "beta",
        "biginteger",
        "bilinear",
        "bin_date",
        "binary_template",
        "bindgen",
        "binomial",
        "bit_ffs",
        "bit_population",
        "blas_axpy",
        "blk_con",
        "boolarr",
        "boolean",
        "boxplot",
        "box_cursor",
        "breakpoint",
        "broyden",
        "bubbleplot",
        "butterworth",
        "bytarr",
        "byte",
        "byteorder",
        "bytscl",
        "c_correlate",
        "calendar",
        "caldat",
        "call_external",
        "call_function",
        "call_method",
        "call_procedure",
        "canny",
        "catch",
        "cd",
        "cdf",
        "ceil",
        "chebyshev",
        "check_math",
        "chisqr_cvf",
        "chisqr_pdf",
        "choldc",
        "cholsol",
        "cindgen",
        "cir_3pnt",
        "clipboard",
        "close",
        "clust_wts",
        "cluster",
        "cluster_tree",
        "cmyk_convert",
        "code_coverage",
        "color_convert",
        "color_exchange",
        "color_quan",
        "color_range_map",
        "colorbar",
        "colorize_sample",
        "colormap_applicable",
        "colormap_gradient",
        "colormap_rotation",
        "colortable",
        "comfit",
        "command_line_args",
        "common",
        "compile_opt",
        "complex",
        "complexarr",
        "complexround",
        "compute_mesh_normals",
        "cond",
        "congrid",
        "conj",
        "constrained_min",
        "contour",
        "contour",
        "convert_coord",
        "convol",
        "convol_fft",
        "coord2to3",
        "copy_lun",
        "correlate",
        "cos",
        "cosh",
        "cpu",
        "cramer",
        "createboxplotdata",
        "create_cursor",
        "create_struct",
        "create_view",
        "crossp",
        "crvlength",
        "ct_luminance",
        "cti_test",
        "cursor",
        "curvefit",
        "cv_coord",
        "cvttobm",
        "cw_animate",
        "cw_animate_getp",
        "cw_animate_load",
        "cw_animate_run",
        "cw_arcball",
        "cw_bgroup",
        "cw_clr_index",
        "cw_colorsel",
        "cw_defroi",
        "cw_field",
        "cw_filesel",
        "cw_form",
        "cw_fslider",
        "cw_light_editor",
        "cw_light_editor_get",
        "cw_light_editor_set",
        "cw_orient",
        "cw_palette_editor",
        "cw_palette_editor_get",
        "cw_palette_editor_set",
        "cw_pdmenu",
        "cw_rgbslider",
        "cw_tmpl",
        "cw_zoom",
        "db_exists",
        "dblarr",
        "dcindgen",
        "dcomplex",
        "dcomplexarr",
        "define_key",
        "define_msgblk",
        "define_msgblk_from_file",
        "defroi",
        "defsysv",
        "delvar",
        "dendro_plot",
        "dendrogram",
        "deriv",
        "derivsig",
        "determ",
        "device",
        "dfpmin",
        "diag_matrix",
        "dialog_dbconnect",
        "dialog_message",
        "dialog_pickfile",
        "dialog_printersetup",
        "dialog_printjob",
        "dialog_read_image",
        "dialog_write_image",
        "dictionary",
        "digital_filter",
        "dilate",
        "dindgen",
        "dissolve",
        "dist",
        "distance_measure",
        "dlm_load",
        "dlm_register",
        "doc_library",
        "double",
        "draw_roi",
        "edge_dog",
        "efont",
        "eigenql",
        "eigenvec",
        "ellipse",
        "elmhes",
        "emboss",
        "empty",
        "enable_sysrtn",
        "eof",
        "eos",
        "erase",
        "erf",
        "erfc",
        "erfcx",
        "erode",
        "errorplot",
        "errplot",
        "estimator_filter",
        "execute",
        "exit",
        "exp",
        "expand",
        "expand_path",
        "expint",
        "extract",
        "extract_slice",
        "f_cvf",
        "f_pdf",
        "factorial",
        "fft",
        "file_basename",
        "file_chmod",
        "file_copy",
        "file_delete",
        "file_dirname",
        "file_expand_path",
        "file_gunzip",
        "file_gzip",
        "file_info",
        "file_lines",
        "file_link",
        "file_mkdir",
        "file_move",
        "file_poll_input",
        "file_readlink",
        "file_same",
        "file_search",
        "file_tar",
        "file_test",
        "file_untar",
        "file_unzip",
        "file_which",
        "file_zip",
        "filepath",
        "findgen",
        "finite",
        "fix",
        "flick",
        "float",
        "floor",
        "flow3",
        "fltarr",
        "flush",
        "format_axis_values",
        "forward_function",
        "free_lun",
        "fstat",
        "fulstr",
        "funct",
        "function",
        "fv_test",
        "fx_root",
        "fz_roots",
        "gamma",
        "gamma_ct",
        "gauss_cvf",
        "gauss_pdf",
        "gauss_smooth",
        "gauss2dfit",
        "gaussfit",
        "gaussian_function",
        "gaussint",
        "get_drive_list",
        "get_dxf_objects",
        "get_kbrd",
        "get_login_info",
        "get_lun",
        "get_screen_size",
        "getenv",
        "getwindows",
        "greg2jul",
        "grib",
        "grid_input",
        "grid_tps",
        "grid3",
        "griddata",
        "gs_iter",
        "h_eq_ct",
        "h_eq_int",
        "hanning",
        "hash",
        "hdf",
        "hdf5",
        "heap_free",
        "heap_gc",
        "heap_nosave",
        "heap_refcount",
        "heap_save",
        "help",
        "hilbert",
        "hist_2d",
        "hist_equal",
        "histogram",
        "hls",
        "hough",
        "hqr",
        "hsv",
        "i18n_multibytetoutf8",
        "i18n_multibytetowidechar",
        "i18n_utf8tomultibyte",
        "i18n_widechartomultibyte",
        "ibeta",
        "icontour",
        "iconvertcoord",
        "idelete",
        "identity",
        "idl_base64",
        "idl_container",
        "idl_validname",
        "idlexbr_assistant",
        "idlitsys_createtool",
        "idlunit",
        "iellipse",
        "igamma",
        "igetcurrent",
        "igetdata",
        "igetid",
        "igetproperty",
        "iimage",
        "image",
        "image_cont",
        "image_statistics",
        "image_threshold",
        "imaginary",
        "imap",
        "indgen",
        "int_2d",
        "int_3d",
        "int_tabulated",
        "intarr",
        "interpol",
        "interpolate",
        "interval_volume",
        "invert",
        "ioctl",
        "iopen",
        "ir_filter",
        "iplot",
        "ipolygon",
        "ipolyline",
        "iputdata",
        "iregister",
        "ireset",
        "iresolve",
        "irotate",
        "isa",
        "isave",
        "iscale",
        "isetcurrent",
        "isetproperty",
        "ishft",
        "isocontour",
        "isosurface",
        "isurface",
        "itext",
        "itranslate",
        "ivector",
        "ivolume",
        "izoom",
        "journal",
        "json_parse",
        "json_serialize",
        "jul2greg",
        "julday",
        "keyword_set",
        "krig2d",
        "kurtosis",
        "kw_test",
        "l64indgen",
        "la_choldc",
        "la_cholmprove",
        "la_cholsol",
        "la_determ",
        "la_eigenproblem",
        "la_eigenql",
        "la_eigenvec",
        "la_elmhes",
        "la_gm_linear_model",
        "la_hqr",
        "la_invert",
        "la_least_square_equality",
        "la_least_squares",
        "la_linear_equation",
        "la_ludc",
        "la_lumprove",
        "la_lusol",
        "la_svd",
        "la_tridc",
        "la_trimprove",
        "la_triql",
        "la_trired",
        "la_trisol",
        "label_date",
        "label_region",
        "ladfit",
        "laguerre",
        "lambda",
        "lambdap",
        "lambertw",
        "laplacian",
        "least_squares_filter",
        "leefilt",
        "legend",
        "legendre",
        "linbcg",
        "lindgen",
        "linfit",
        "linkimage",
        "list",
        "ll_arc_distance",
        "lmfit",
        "lmgr",
        "lngamma",
        "lnp_test",
        "loadct",
        "locale_get",
        "logical_and",
        "logical_or",
        "logical_true",
        "lon64arr",
        "lonarr",
        "long",
        "long64",
        "lsode",
        "lu_complex",
        "ludc",
        "lumprove",
        "lusol",
        "m_correlate",
        "machar",
        "make_array",
        "make_dll",
        "make_rt",
        "map",
        "mapcontinents",
        "mapgrid",
        "map_2points",
        "map_continents",
        "map_grid",
        "map_image",
        "map_patch",
        "map_proj_forward",
        "map_proj_image",
        "map_proj_info",
        "map_proj_init",
        "map_proj_inverse",
        "map_set",
        "matrix_multiply",
        "matrix_power",
        "max",
        "md_test",
        "mean",
        "meanabsdev",
        "mean_filter",
        "median",
        "memory",
        "mesh_clip",
        "mesh_decimate",
        "mesh_issolid",
        "mesh_merge",
        "mesh_numtriangles",
        "mesh_obj",
        "mesh_smooth",
        "mesh_surfacearea",
        "mesh_validate",
        "mesh_volume",
        "message",
        "min",
        "min_curve_surf",
        "mk_html_help",
        "modifyct",
        "moment",
        "morph_close",
        "morph_distance",
        "morph_gradient",
        "morph_hitormiss",
        "morph_open",
        "morph_thin",
        "morph_tophat",
        "multi",
        "n_elements",
        "n_params",
        "n_tags",
        "ncdf",
        "newton",
        "noise_hurl",
        "noise_pick",
        "noise_scatter",
        "noise_slur",
        "norm",
        "obj_class",
        "obj_destroy",
        "obj_hasmethod",
        "obj_isa",
        "obj_new",
        "obj_valid",
        "objarr",
        "on_error",
        "on_ioerror",
        "online_help",
        "openr",
        "openu",
        "openw",
        "oplot",
        "oploterr",
        "orderedhash",
        "p_correlate",
        "parse_url",
        "particle_trace",
        "path_cache",
        "path_sep",
        "pcomp",
        "plot",
        "plot3d",
        "plot",
        "plot_3dbox",
        "plot_field",
        "ploterr",
        "plots",
        "polar_contour",
        "polar_surface",
        "polyfill",
        "polyshade",
        "pnt_line",
        "point_lun",
        "polarplot",
        "poly",
        "poly_2d",
        "poly_area",
        "poly_fit",
        "polyfillv",
        "polygon",
        "polyline",
        "polywarp",
        "popd",
        "powell",
        "pref_commit",
        "pref_get",
        "pref_set",
        "prewitt",
        "primes",
        "print",
        "printf",
        "printd",
        "pro",
        "product",
        "profile",
        "profiler",
        "profiles",
        "project_vol",
        "ps_show_fonts",
        "psafm",
        "pseudo",
        "ptr_free",
        "ptr_new",
        "ptr_valid",
        "ptrarr",
        "pushd",
        "qgrid3",
        "qhull",
        "qromb",
        "qromo",
        "qsimp",
        "query_*",
        "query_ascii",
        "query_bmp",
        "query_csv",
        "query_dicom",
        "query_gif",
        "query_image",
        "query_jpeg",
        "query_jpeg2000",
        "query_mrsid",
        "query_pict",
        "query_png",
        "query_ppm",
        "query_srf",
        "query_tiff",
        "query_video",
        "query_wav",
        "r_correlate",
        "r_test",
        "radon",
        "randomn",
        "randomu",
        "ranks",
        "rdpix",
        "read",
        "readf",
        "read_ascii",
        "read_binary",
        "read_bmp",
        "read_csv",
        "read_dicom",
        "read_gif",
        "read_image",
        "read_interfile",
        "read_jpeg",
        "read_jpeg2000",
        "read_mrsid",
        "read_pict",
        "read_png",
        "read_ppm",
        "read_spr",
        "read_srf",
        "read_sylk",
        "read_tiff",
        "read_video",
        "read_wav",
        "read_wave",
        "read_x11_bitmap",
        "read_xwd",
        "reads",
        "readu",
        "real_part",
        "rebin",
        "recall_commands",
        "recon3",
        "reduce_colors",
        "reform",
        "region_grow",
        "register_cursor",
        "regress",
        "replicate",
        "replicate_inplace",
        "resolve_all",
        "resolve_routine",
        "restore",
        "retall",
        "return",
        "reverse",
        "rk4",
        "roberts",
        "rot",
        "rotate",
        "round",
        "routine_filepath",
        "routine_info",
        "rs_test",
        "s_test",
        "save",
        "savgol",
        "scale3",
        "scale3d",
        "scatterplot",
        "scatterplot3d",
        "scope_level",
        "scope_traceback",
        "scope_varfetch",
        "scope_varname",
        "search2d",
        "search3d",
        "sem_create",
        "sem_delete",
        "sem_lock",
        "sem_release",
        "set_plot",
        "set_shading",
        "setenv",
        "sfit",
        "shade_surf",
        "shade_surf_irr",
        "shade_volume",
        "shift",
        "shift_diff",
        "shmdebug",
        "shmmap",
        "shmunmap",
        "shmvar",
        "show3",
        "showfont",
        "signum",
        "simplex",
        "sin",
        "sindgen",
        "sinh",
        "size",
        "skewness",
        "skip_lun",
        "slicer3",
        "slide_image",
        "smooth",
        "sobel",
        "socket",
        "sort",
        "spawn",
        "sph_4pnt",
        "sph_scat",
        "spher_harm",
        "spl_init",
        "spl_interp",
        "spline",
        "spline_p",
        "sprsab",
        "sprsax",
        "sprsin",
        "sprstp",
        "sqrt",
        "standardize",
        "stddev",
        "stop",
        "strarr",
        "strcmp",
        "strcompress",
        "streamline",
        "streamline",
        "stregex",
        "stretch",
        "string",
        "strjoin",
        "strlen",
        "strlowcase",
        "strmatch",
        "strmessage",
        "strmid",
        "strpos",
        "strput",
        "strsplit",
        "strtrim",
        "struct_assign",
        "struct_hide",
        "strupcase",
        "surface",
        "surface",
        "surfr",
        "svdc",
        "svdfit",
        "svsol",
        "swap_endian",
        "swap_endian_inplace",
        "symbol",
        "systime",
        "t_cvf",
        "t_pdf",
        "t3d",
        "tag_names",
        "tan",
        "tanh",
        "tek_color",
        "temporary",
        "terminal_size",
        "tetra_clip",
        "tetra_surface",
        "tetra_volume",
        "text",
        "thin",
        "thread",
        "threed",
        "tic",
        "time_test2",
        "timegen",
        "timer",
        "timestamp",
        "timestamptovalues",
        "tm_test",
        "toc",
        "total",
        "trace",
        "transpose",
        "tri_surf",
        "triangulate",
        "trigrid",
        "triql",
        "trired",
        "trisol",
        "truncate_lun",
        "ts_coef",
        "ts_diff",
        "ts_fcast",
        "ts_smooth",
        "tv",
        "tvcrs",
        "tvlct",
        "tvrd",
        "tvscl",
        "typename",
        "uindgen",
        "uint",
        "uintarr",
        "ul64indgen",
        "ulindgen",
        "ulon64arr",
        "ulonarr",
        "ulong",
        "ulong64",
        "uniq",
        "unsharp_mask",
        "usersym",
        "value_locate",
        "variance",
        "vector",
        "vector_field",
        "vel",
        "velovect",
        "vert_t3d",
        "voigt",
        "volume",
        "voronoi",
        "voxel_proj",
        "wait",
        "warp_tri",
        "watershed",
        "wdelete",
        "wf_draw",
        "where",
        "widget_base",
        "widget_button",
        "widget_combobox",
        "widget_control",
        "widget_displaycontextmenu",
        "widget_draw",
        "widget_droplist",
        "widget_event",
        "widget_info",
        "widget_label",
        "widget_list",
        "widget_propertysheet",
        "widget_slider",
        "widget_tab",
        "widget_table",
        "widget_text",
        "widget_tree",
        "widget_tree_move",
        "widget_window",
        "wiener_filter",
        "window",
        "window",
        "write_bmp",
        "write_csv",
        "write_gif",
        "write_image",
        "write_jpeg",
        "write_jpeg2000",
        "write_nrif",
        "write_pict",
        "write_png",
        "write_ppm",
        "write_spr",
        "write_srf",
        "write_sylk",
        "write_tiff",
        "write_video",
        "write_wav",
        "write_wave",
        "writeu",
        "wset",
        "wshow",
        "wtn",
        "wv_applet",
        "wv_cwt",
        "wv_cw_wavelet",
        "wv_denoise",
        "wv_dwt",
        "wv_fn_coiflet",
        "wv_fn_daubechies",
        "wv_fn_gaussian",
        "wv_fn_haar",
        "wv_fn_morlet",
        "wv_fn_paul",
        "wv_fn_symlet",
        "wv_import_data",
        "wv_import_wavelet",
        "wv_plot3d_wps",
        "wv_plot_multires",
        "wv_pwt",
        "wv_tool_denoise",
        "xbm_edit",
        "xdisplayfile",
        "xdxf",
        "xfont",
        "xinteranimate",
        "xloadct",
        "xmanager",
        "xmng_tmpl",
        "xmtool",
        "xobjview",
        "xobjview_rotate",
        "xobjview_write_image",
        "xpalette",
        "xpcolor",
        "xplot3d",
        "xregistered",
        "xroi",
        "xsq_test",
        "xsurface",
        "xvaredit",
        "xvolume",
        "xvolume_rotate",
        "xvolume_write_image",
        "xyouts",
        "zlib_compress",
        "zlib_uncompress",
        "zoom",
        "zoom_24"
      ];
      builtins3 = wordRegexp4(builtinArray);
      keywordArray = [
        "begin",
        "end",
        "endcase",
        "endfor",
        "endwhile",
        "endif",
        "endrep",
        "endforeach",
        "break",
        "case",
        "continue",
        "for",
        "foreach",
        "goto",
        "if",
        "then",
        "else",
        "repeat",
        "until",
        "switch",
        "while",
        "do",
        "pro",
        "function"
      ];
      keywords16 = wordRegexp4(keywordArray);
      identifiers3 = new RegExp("^[_a-z\xA1-\uFFFF][_a-z0-9\xA1-\uFFFF]*", "i");
      singleOperators = /[+\-*&=<>\/@#~$]/;
      boolOperators = new RegExp("(and|or|eq|lt|le|gt|ge|ne|not)", "i");
      idl = {
        name: "idl",
        token: function(stream) {
          return tokenBase13(stream);
        },
        languageData: {
          autocomplete: builtinArray.concat(keywordArray)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/javascript.js
  var javascript_exports = {};
  __export(javascript_exports, {
    javascript: () => javascript2,
    json: () => json2,
    jsonld: () => jsonld,
    typescript: () => typescript
  });
  function mkJavaScript(parserConfig4) {
    var statementIndent = parserConfig4.statementIndent;
    var jsonldMode = parserConfig4.jsonld;
    var jsonMode = parserConfig4.json || jsonldMode;
    var isTS = parserConfig4.typescript;
    var wordRE2 = parserConfig4.wordCharacters || /[\w$\xa1-\uffff]/;
    var keywords47 = function() {
      function kw2(type8) {
        return { type: type8, style: "keyword" };
      }
      var A3 = kw2("keyword a"), B2 = kw2("keyword b"), C3 = kw2("keyword c"), D = kw2("keyword d");
      var operator4 = kw2("operator"), atom4 = { type: "atom", style: "atom" };
      return {
        "if": kw2("if"),
        "while": A3,
        "with": A3,
        "else": B2,
        "do": B2,
        "try": B2,
        "finally": B2,
        "return": D,
        "break": D,
        "continue": D,
        "new": kw2("new"),
        "delete": C3,
        "void": C3,
        "throw": C3,
        "debugger": kw2("debugger"),
        "var": kw2("var"),
        "const": kw2("var"),
        "let": kw2("var"),
        "function": kw2("function"),
        "catch": kw2("catch"),
        "for": kw2("for"),
        "switch": kw2("switch"),
        "case": kw2("case"),
        "default": kw2("default"),
        "in": operator4,
        "typeof": operator4,
        "instanceof": operator4,
        "true": atom4,
        "false": atom4,
        "null": atom4,
        "undefined": atom4,
        "NaN": atom4,
        "Infinity": atom4,
        "this": kw2("this"),
        "class": kw2("class"),
        "super": kw2("atom"),
        "yield": C3,
        "export": kw2("export"),
        "import": kw2("import"),
        "extends": C3,
        "await": C3
      };
    }();
    var isOperatorChar16 = /[+\-*&%=<>!?|~^@]/;
    var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;
    function readRegexp(stream) {
      var escaped = false, next2, inSet = false;
      while ((next2 = stream.next()) != null) {
        if (!escaped) {
          if (next2 == "/" && !inSet)
            return;
          if (next2 == "[")
            inSet = true;
          else if (inSet && next2 == "]")
            inSet = false;
        }
        escaped = !escaped && next2 == "\\";
      }
    }
    var type7, content3;
    function ret4(tp, style2, cont4) {
      type7 = tp;
      content3 = cont4;
      return style2;
    }
    function tokenBase48(stream, state) {
      var ch2 = stream.next();
      if (ch2 == '"' || ch2 == "'") {
        state.tokenize = tokenString30(ch2);
        return state.tokenize(stream, state);
      } else if (ch2 == "." && stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)) {
        return ret4("number", "number");
      } else if (ch2 == "." && stream.match("..")) {
        return ret4("spread", "meta");
      } else if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
        return ret4(ch2);
      } else if (ch2 == "=" && stream.eat(">")) {
        return ret4("=>", "operator");
      } else if (ch2 == "0" && stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {
        return ret4("number", "number");
      } else if (/\d/.test(ch2)) {
        stream.match(/^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/);
        return ret4("number", "number");
      } else if (ch2 == "/") {
        if (stream.eat("*")) {
          state.tokenize = tokenComment21;
          return tokenComment21(stream, state);
        } else if (stream.eat("/")) {
          stream.skipToEnd();
          return ret4("comment", "comment");
        } else if (expressionAllowed(stream, state, 1)) {
          readRegexp(stream);
          stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
          return ret4("regexp", "string.special");
        } else {
          stream.eat("=");
          return ret4("operator", "operator", stream.current());
        }
      } else if (ch2 == "`") {
        state.tokenize = tokenQuasi;
        return tokenQuasi(stream, state);
      } else if (ch2 == "#" && stream.peek() == "!") {
        stream.skipToEnd();
        return ret4("meta", "meta");
      } else if (ch2 == "#" && stream.eatWhile(wordRE2)) {
        return ret4("variable", "property");
      } else if (ch2 == "<" && stream.match("!--") || ch2 == "-" && stream.match("->") && !/\S/.test(stream.string.slice(0, stream.start))) {
        stream.skipToEnd();
        return ret4("comment", "comment");
      } else if (isOperatorChar16.test(ch2)) {
        if (ch2 != ">" || !state.lexical || state.lexical.type != ">") {
          if (stream.eat("=")) {
            if (ch2 == "!" || ch2 == "=")
              stream.eat("=");
          } else if (/[<>*+\-|&?]/.test(ch2)) {
            stream.eat(ch2);
            if (ch2 == ">")
              stream.eat(ch2);
          }
        }
        if (ch2 == "?" && stream.eat("."))
          return ret4(".");
        return ret4("operator", "operator", stream.current());
      } else if (wordRE2.test(ch2)) {
        stream.eatWhile(wordRE2);
        var word2 = stream.current();
        if (state.lastType != ".") {
          if (keywords47.propertyIsEnumerable(word2)) {
            var kw2 = keywords47[word2];
            return ret4(kw2.type, kw2.style, word2);
          }
          if (word2 == "async" && stream.match(/^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/, false))
            return ret4("async", "keyword", word2);
        }
        return ret4("variable", "variable", word2);
      }
    }
    function tokenString30(quote2) {
      return function(stream, state) {
        var escaped = false, next2;
        if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)) {
          state.tokenize = tokenBase48;
          return ret4("jsonld-keyword", "meta");
        }
        while ((next2 = stream.next()) != null) {
          if (next2 == quote2 && !escaped)
            break;
          escaped = !escaped && next2 == "\\";
        }
        if (!escaped)
          state.tokenize = tokenBase48;
        return ret4("string", "string");
      };
    }
    function tokenComment21(stream, state) {
      var maybeEnd = false, ch2;
      while (ch2 = stream.next()) {
        if (ch2 == "/" && maybeEnd) {
          state.tokenize = tokenBase48;
          break;
        }
        maybeEnd = ch2 == "*";
      }
      return ret4("comment", "comment");
    }
    function tokenQuasi(stream, state) {
      var escaped = false, next2;
      while ((next2 = stream.next()) != null) {
        if (!escaped && (next2 == "`" || next2 == "$" && stream.eat("{"))) {
          state.tokenize = tokenBase48;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      return ret4("quasi", "string.special", stream.current());
    }
    var brackets2 = "([{}])";
    function findFatArrow(stream, state) {
      if (state.fatArrowAt)
        state.fatArrowAt = null;
      var arrow = stream.string.indexOf("=>", stream.start);
      if (arrow < 0)
        return;
      if (isTS) {
        var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(stream.string.slice(stream.start, arrow));
        if (m)
          arrow = m.index;
      }
      var depth = 0, sawSomething = false;
      for (var pos = arrow - 1; pos >= 0; --pos) {
        var ch2 = stream.string.charAt(pos);
        var bracket2 = brackets2.indexOf(ch2);
        if (bracket2 >= 0 && bracket2 < 3) {
          if (!depth) {
            ++pos;
            break;
          }
          if (--depth == 0) {
            if (ch2 == "(")
              sawSomething = true;
            break;
          }
        } else if (bracket2 >= 3 && bracket2 < 6) {
          ++depth;
        } else if (wordRE2.test(ch2)) {
          sawSomething = true;
        } else if (/["'\/`]/.test(ch2)) {
          for (; ; --pos) {
            if (pos == 0)
              return;
            var next2 = stream.string.charAt(pos - 1);
            if (next2 == ch2 && stream.string.charAt(pos - 2) != "\\") {
              pos--;
              break;
            }
          }
        } else if (sawSomething && !depth) {
          ++pos;
          break;
        }
      }
      if (sawSomething && !depth)
        state.fatArrowAt = pos;
    }
    var atomicTypes2 = {
      "atom": true,
      "number": true,
      "variable": true,
      "string": true,
      "regexp": true,
      "this": true,
      "import": true,
      "jsonld-keyword": true
    };
    function JSLexical(indented, column, type8, align, prev, info) {
      this.indented = indented;
      this.column = column;
      this.type = type8;
      this.prev = prev;
      this.info = info;
      if (align != null)
        this.align = align;
    }
    function inScope2(state, varname) {
      for (var v = state.localVars; v; v = v.next)
        if (v.name == varname)
          return true;
      for (var cx3 = state.context; cx3; cx3 = cx3.prev) {
        for (var v = cx3.vars; v; v = v.next)
          if (v.name == varname)
            return true;
      }
    }
    function parseJS(state, style2, type8, content4, stream) {
      var cc = state.cc;
      cx2.state = state;
      cx2.stream = stream;
      cx2.marked = null;
      cx2.cc = cc;
      cx2.style = style2;
      if (!state.lexical.hasOwnProperty("align"))
        state.lexical.align = true;
      while (true) {
        var combinator = cc.length ? cc.pop() : jsonMode ? expression3 : statement2;
        if (combinator(type8, content4)) {
          while (cc.length && cc[cc.length - 1].lex)
            cc.pop()();
          if (cx2.marked)
            return cx2.marked;
          if (type8 == "variable" && inScope2(state, content4))
            return "variableName.local";
          return style2;
        }
      }
    }
    var cx2 = { state: null, column: null, marked: null, cc: null };
    function pass4() {
      for (var i = arguments.length - 1; i >= 0; i--)
        cx2.cc.push(arguments[i]);
    }
    function cont3() {
      pass4.apply(null, arguments);
      return true;
    }
    function inList3(name2, list2) {
      for (var v = list2; v; v = v.next)
        if (v.name == name2)
          return true;
      return false;
    }
    function register2(varname) {
      var state = cx2.state;
      cx2.marked = "def";
      if (state.context) {
        if (state.lexical.info == "var" && state.context && state.context.block) {
          var newContext = registerVarScoped(varname, state.context);
          if (newContext != null) {
            state.context = newContext;
            return;
          }
        } else if (!inList3(varname, state.localVars)) {
          state.localVars = new Var(varname, state.localVars);
          return;
        }
      }
      if (parserConfig4.globalVars && !inList3(varname, state.globalVars))
        state.globalVars = new Var(varname, state.globalVars);
    }
    function registerVarScoped(varname, context) {
      if (!context) {
        return null;
      } else if (context.block) {
        var inner = registerVarScoped(varname, context.prev);
        if (!inner)
          return null;
        if (inner == context.prev)
          return context;
        return new Context14(inner, context.vars, true);
      } else if (inList3(varname, context.vars)) {
        return context;
      } else {
        return new Context14(context.prev, new Var(varname, context.vars), false);
      }
    }
    function isModifier(name2) {
      return name2 == "public" || name2 == "private" || name2 == "protected" || name2 == "abstract" || name2 == "readonly";
    }
    function Context14(prev, vars, block3) {
      this.prev = prev;
      this.vars = vars;
      this.block = block3;
    }
    function Var(name2, next2) {
      this.name = name2;
      this.next = next2;
    }
    var defaultVars2 = new Var("this", new Var("arguments", null));
    function pushcontext2() {
      cx2.state.context = new Context14(cx2.state.context, cx2.state.localVars, false);
      cx2.state.localVars = defaultVars2;
    }
    function pushblockcontext() {
      cx2.state.context = new Context14(cx2.state.context, cx2.state.localVars, true);
      cx2.state.localVars = null;
    }
    pushcontext2.lex = pushblockcontext.lex = true;
    function popcontext2() {
      cx2.state.localVars = cx2.state.context.vars;
      cx2.state.context = cx2.state.context.prev;
    }
    popcontext2.lex = true;
    function pushlex2(type8, info) {
      var result = function() {
        var state = cx2.state, indent5 = state.indented;
        if (state.lexical.type == "stat")
          indent5 = state.lexical.indented;
        else
          for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
            indent5 = outer.indented;
        state.lexical = new JSLexical(indent5, cx2.stream.column(), type8, null, state.lexical, info);
      };
      result.lex = true;
      return result;
    }
    function poplex2() {
      var state = cx2.state;
      if (state.lexical.prev) {
        if (state.lexical.type == ")")
          state.indented = state.lexical.indented;
        state.lexical = state.lexical.prev;
      }
    }
    poplex2.lex = true;
    function expect2(wanted) {
      function exp(type8) {
        if (type8 == wanted)
          return cont3();
        else if (wanted == ";" || type8 == "}" || type8 == ")" || type8 == "]")
          return pass4();
        else
          return cont3(exp);
      }
      ;
      return exp;
    }
    function statement2(type8, value) {
      if (type8 == "var")
        return cont3(pushlex2("vardef", value), vardef, expect2(";"), poplex2);
      if (type8 == "keyword a")
        return cont3(pushlex2("form"), parenExpr, statement2, poplex2);
      if (type8 == "keyword b")
        return cont3(pushlex2("form"), statement2, poplex2);
      if (type8 == "keyword d")
        return cx2.stream.match(/^\s*$/, false) ? cont3() : cont3(pushlex2("stat"), maybeexpression2, expect2(";"), poplex2);
      if (type8 == "debugger")
        return cont3(expect2(";"));
      if (type8 == "{")
        return cont3(pushlex2("}"), pushblockcontext, block2, poplex2, popcontext2);
      if (type8 == ";")
        return cont3();
      if (type8 == "if") {
        if (cx2.state.lexical.info == "else" && cx2.state.cc[cx2.state.cc.length - 1] == poplex2)
          cx2.state.cc.pop()();
        return cont3(pushlex2("form"), parenExpr, statement2, poplex2, maybeelse);
      }
      if (type8 == "function")
        return cont3(functiondef2);
      if (type8 == "for")
        return cont3(pushlex2("form"), pushblockcontext, forspec, statement2, popcontext2, poplex2);
      if (type8 == "class" || isTS && value == "interface") {
        cx2.marked = "keyword";
        return cont3(pushlex2("form", type8 == "class" ? type8 : value), className, poplex2);
      }
      if (type8 == "variable") {
        if (isTS && value == "declare") {
          cx2.marked = "keyword";
          return cont3(statement2);
        } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx2.stream.match(/^\s*\w/, false)) {
          cx2.marked = "keyword";
          if (value == "enum")
            return cont3(enumdef);
          else if (value == "type")
            return cont3(typename, expect2("operator"), typeexpr, expect2(";"));
          else
            return cont3(pushlex2("form"), pattern, expect2("{"), pushlex2("}"), block2, poplex2, poplex2);
        } else if (isTS && value == "namespace") {
          cx2.marked = "keyword";
          return cont3(pushlex2("form"), expression3, statement2, poplex2);
        } else if (isTS && value == "abstract") {
          cx2.marked = "keyword";
          return cont3(statement2);
        } else {
          return cont3(pushlex2("stat"), maybelabel2);
        }
      }
      if (type8 == "switch")
        return cont3(
          pushlex2("form"),
          parenExpr,
          expect2("{"),
          pushlex2("}", "switch"),
          pushblockcontext,
          block2,
          poplex2,
          poplex2,
          popcontext2
        );
      if (type8 == "case")
        return cont3(expression3, expect2(":"));
      if (type8 == "default")
        return cont3(expect2(":"));
      if (type8 == "catch")
        return cont3(pushlex2("form"), pushcontext2, maybeCatchBinding, statement2, poplex2, popcontext2);
      if (type8 == "export")
        return cont3(pushlex2("stat"), afterExport, poplex2);
      if (type8 == "import")
        return cont3(pushlex2("stat"), afterImport, poplex2);
      if (type8 == "async")
        return cont3(statement2);
      if (value == "@")
        return cont3(expression3, statement2);
      return pass4(pushlex2("stat"), expression3, expect2(";"), poplex2);
    }
    function maybeCatchBinding(type8) {
      if (type8 == "(")
        return cont3(funarg2, expect2(")"));
    }
    function expression3(type8, value) {
      return expressionInner(type8, value, false);
    }
    function expressionNoComma(type8, value) {
      return expressionInner(type8, value, true);
    }
    function parenExpr(type8) {
      if (type8 != "(")
        return pass4();
      return cont3(pushlex2(")"), maybeexpression2, expect2(")"), poplex2);
    }
    function expressionInner(type8, value, noComma) {
      if (cx2.state.fatArrowAt == cx2.stream.start) {
        var body2 = noComma ? arrowBodyNoComma : arrowBody;
        if (type8 == "(")
          return cont3(pushcontext2, pushlex2(")"), commasep2(funarg2, ")"), poplex2, expect2("=>"), body2, popcontext2);
        else if (type8 == "variable")
          return pass4(pushcontext2, pattern, expect2("=>"), body2, popcontext2);
      }
      var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
      if (atomicTypes2.hasOwnProperty(type8))
        return cont3(maybeop);
      if (type8 == "function")
        return cont3(functiondef2, maybeop);
      if (type8 == "class" || isTS && value == "interface") {
        cx2.marked = "keyword";
        return cont3(pushlex2("form"), classExpression, poplex2);
      }
      if (type8 == "keyword c" || type8 == "async")
        return cont3(noComma ? expressionNoComma : expression3);
      if (type8 == "(")
        return cont3(pushlex2(")"), maybeexpression2, expect2(")"), poplex2, maybeop);
      if (type8 == "operator" || type8 == "spread")
        return cont3(noComma ? expressionNoComma : expression3);
      if (type8 == "[")
        return cont3(pushlex2("]"), arrayLiteral, poplex2, maybeop);
      if (type8 == "{")
        return contCommasep(objprop2, "}", null, maybeop);
      if (type8 == "quasi")
        return pass4(quasi, maybeop);
      if (type8 == "new")
        return cont3(maybeTarget(noComma));
      return cont3();
    }
    function maybeexpression2(type8) {
      if (type8.match(/[;\}\)\],]/))
        return pass4();
      return pass4(expression3);
    }
    function maybeoperatorComma(type8, value) {
      if (type8 == ",")
        return cont3(maybeexpression2);
      return maybeoperatorNoComma(type8, value, false);
    }
    function maybeoperatorNoComma(type8, value, noComma) {
      var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
      var expr = noComma == false ? expression3 : expressionNoComma;
      if (type8 == "=>")
        return cont3(pushcontext2, noComma ? arrowBodyNoComma : arrowBody, popcontext2);
      if (type8 == "operator") {
        if (/\+\+|--/.test(value) || isTS && value == "!")
          return cont3(me);
        if (isTS && value == "<" && cx2.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false))
          return cont3(pushlex2(">"), commasep2(typeexpr, ">"), poplex2, me);
        if (value == "?")
          return cont3(expression3, expect2(":"), expr);
        return cont3(expr);
      }
      if (type8 == "quasi") {
        return pass4(quasi, me);
      }
      if (type8 == ";")
        return;
      if (type8 == "(")
        return contCommasep(expressionNoComma, ")", "call", me);
      if (type8 == ".")
        return cont3(property3, me);
      if (type8 == "[")
        return cont3(pushlex2("]"), maybeexpression2, expect2("]"), poplex2, me);
      if (isTS && value == "as") {
        cx2.marked = "keyword";
        return cont3(typeexpr, me);
      }
      if (type8 == "regexp") {
        cx2.state.lastType = cx2.marked = "operator";
        cx2.stream.backUp(cx2.stream.pos - cx2.stream.start - 1);
        return cont3(expr);
      }
    }
    function quasi(type8, value) {
      if (type8 != "quasi")
        return pass4();
      if (value.slice(value.length - 2) != "${")
        return cont3(quasi);
      return cont3(maybeexpression2, continueQuasi);
    }
    function continueQuasi(type8) {
      if (type8 == "}") {
        cx2.marked = "string.special";
        cx2.state.tokenize = tokenQuasi;
        return cont3(quasi);
      }
    }
    function arrowBody(type8) {
      findFatArrow(cx2.stream, cx2.state);
      return pass4(type8 == "{" ? statement2 : expression3);
    }
    function arrowBodyNoComma(type8) {
      findFatArrow(cx2.stream, cx2.state);
      return pass4(type8 == "{" ? statement2 : expressionNoComma);
    }
    function maybeTarget(noComma) {
      return function(type8) {
        if (type8 == ".")
          return cont3(noComma ? targetNoComma : target);
        else if (type8 == "variable" && isTS)
          return cont3(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma);
        else
          return pass4(noComma ? expressionNoComma : expression3);
      };
    }
    function target(_, value) {
      if (value == "target") {
        cx2.marked = "keyword";
        return cont3(maybeoperatorComma);
      }
    }
    function targetNoComma(_, value) {
      if (value == "target") {
        cx2.marked = "keyword";
        return cont3(maybeoperatorNoComma);
      }
    }
    function maybelabel2(type8) {
      if (type8 == ":")
        return cont3(poplex2, statement2);
      return pass4(maybeoperatorComma, expect2(";"), poplex2);
    }
    function property3(type8) {
      if (type8 == "variable") {
        cx2.marked = "property";
        return cont3();
      }
    }
    function objprop2(type8, value) {
      if (type8 == "async") {
        cx2.marked = "property";
        return cont3(objprop2);
      } else if (type8 == "variable" || cx2.style == "keyword") {
        cx2.marked = "property";
        if (value == "get" || value == "set")
          return cont3(getterSetter);
        var m;
        if (isTS && cx2.state.fatArrowAt == cx2.stream.start && (m = cx2.stream.match(/^\s*:\s*/, false)))
          cx2.state.fatArrowAt = cx2.stream.pos + m[0].length;
        return cont3(afterprop);
      } else if (type8 == "number" || type8 == "string") {
        cx2.marked = jsonldMode ? "property" : cx2.style + " property";
        return cont3(afterprop);
      } else if (type8 == "jsonld-keyword") {
        return cont3(afterprop);
      } else if (isTS && isModifier(value)) {
        cx2.marked = "keyword";
        return cont3(objprop2);
      } else if (type8 == "[") {
        return cont3(expression3, maybetype, expect2("]"), afterprop);
      } else if (type8 == "spread") {
        return cont3(expressionNoComma, afterprop);
      } else if (value == "*") {
        cx2.marked = "keyword";
        return cont3(objprop2);
      } else if (type8 == ":") {
        return pass4(afterprop);
      }
    }
    function getterSetter(type8) {
      if (type8 != "variable")
        return pass4(afterprop);
      cx2.marked = "property";
      return cont3(functiondef2);
    }
    function afterprop(type8) {
      if (type8 == ":")
        return cont3(expressionNoComma);
      if (type8 == "(")
        return pass4(functiondef2);
    }
    function commasep2(what, end2, sep) {
      function proceed(type8, value) {
        if (sep ? sep.indexOf(type8) > -1 : type8 == ",") {
          var lex = cx2.state.lexical;
          if (lex.info == "call")
            lex.pos = (lex.pos || 0) + 1;
          return cont3(function(type9, value2) {
            if (type9 == end2 || value2 == end2)
              return pass4();
            return pass4(what);
          }, proceed);
        }
        if (type8 == end2 || value == end2)
          return cont3();
        if (sep && sep.indexOf(";") > -1)
          return pass4(what);
        return cont3(expect2(end2));
      }
      return function(type8, value) {
        if (type8 == end2 || value == end2)
          return cont3();
        return pass4(what, proceed);
      };
    }
    function contCommasep(what, end2, info) {
      for (var i = 3; i < arguments.length; i++)
        cx2.cc.push(arguments[i]);
      return cont3(pushlex2(end2, info), commasep2(what, end2), poplex2);
    }
    function block2(type8) {
      if (type8 == "}")
        return cont3();
      return pass4(statement2, block2);
    }
    function maybetype(type8, value) {
      if (isTS) {
        if (type8 == ":")
          return cont3(typeexpr);
        if (value == "?")
          return cont3(maybetype);
      }
    }
    function maybetypeOrIn(type8, value) {
      if (isTS && (type8 == ":" || value == "in"))
        return cont3(typeexpr);
    }
    function mayberettype(type8) {
      if (isTS && type8 == ":") {
        if (cx2.stream.match(/^\s*\w+\s+is\b/, false))
          return cont3(expression3, isKW, typeexpr);
        else
          return cont3(typeexpr);
      }
    }
    function isKW(_, value) {
      if (value == "is") {
        cx2.marked = "keyword";
        return cont3();
      }
    }
    function typeexpr(type8, value) {
      if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
        cx2.marked = "keyword";
        return cont3(value == "typeof" ? expressionNoComma : typeexpr);
      }
      if (type8 == "variable" || value == "void") {
        cx2.marked = "type";
        return cont3(afterType);
      }
      if (value == "|" || value == "&")
        return cont3(typeexpr);
      if (type8 == "string" || type8 == "number" || type8 == "atom")
        return cont3(afterType);
      if (type8 == "[")
        return cont3(pushlex2("]"), commasep2(typeexpr, "]", ","), poplex2, afterType);
      if (type8 == "{")
        return cont3(pushlex2("}"), typeprops, poplex2, afterType);
      if (type8 == "(")
        return cont3(commasep2(typearg, ")"), maybeReturnType, afterType);
      if (type8 == "<")
        return cont3(commasep2(typeexpr, ">"), typeexpr);
      if (type8 == "quasi")
        return pass4(quasiType, afterType);
    }
    function maybeReturnType(type8) {
      if (type8 == "=>")
        return cont3(typeexpr);
    }
    function typeprops(type8) {
      if (type8.match(/[\}\)\]]/))
        return cont3();
      if (type8 == "," || type8 == ";")
        return cont3(typeprops);
      return pass4(typeprop2, typeprops);
    }
    function typeprop2(type8, value) {
      if (type8 == "variable" || cx2.style == "keyword") {
        cx2.marked = "property";
        return cont3(typeprop2);
      } else if (value == "?" || type8 == "number" || type8 == "string") {
        return cont3(typeprop2);
      } else if (type8 == ":") {
        return cont3(typeexpr);
      } else if (type8 == "[") {
        return cont3(expect2("variable"), maybetypeOrIn, expect2("]"), typeprop2);
      } else if (type8 == "(") {
        return pass4(functiondecl, typeprop2);
      } else if (!type8.match(/[;\}\)\],]/)) {
        return cont3();
      }
    }
    function quasiType(type8, value) {
      if (type8 != "quasi")
        return pass4();
      if (value.slice(value.length - 2) != "${")
        return cont3(quasiType);
      return cont3(typeexpr, continueQuasiType);
    }
    function continueQuasiType(type8) {
      if (type8 == "}") {
        cx2.marked = "string-2";
        cx2.state.tokenize = tokenQuasi;
        return cont3(quasiType);
      }
    }
    function typearg(type8, value) {
      if (type8 == "variable" && cx2.stream.match(/^\s*[?:]/, false) || value == "?")
        return cont3(typearg);
      if (type8 == ":")
        return cont3(typeexpr);
      if (type8 == "spread")
        return cont3(typearg);
      return pass4(typeexpr);
    }
    function afterType(type8, value) {
      if (value == "<")
        return cont3(pushlex2(">"), commasep2(typeexpr, ">"), poplex2, afterType);
      if (value == "|" || type8 == "." || value == "&")
        return cont3(typeexpr);
      if (type8 == "[")
        return cont3(typeexpr, expect2("]"), afterType);
      if (value == "extends" || value == "implements") {
        cx2.marked = "keyword";
        return cont3(typeexpr);
      }
      if (value == "?")
        return cont3(typeexpr, expect2(":"), typeexpr);
    }
    function maybeTypeArgs(_, value) {
      if (value == "<")
        return cont3(pushlex2(">"), commasep2(typeexpr, ">"), poplex2, afterType);
    }
    function typeparam() {
      return pass4(typeexpr, maybeTypeDefault);
    }
    function maybeTypeDefault(_, value) {
      if (value == "=")
        return cont3(typeexpr);
    }
    function vardef(_, value) {
      if (value == "enum") {
        cx2.marked = "keyword";
        return cont3(enumdef);
      }
      return pass4(pattern, maybetype, maybeAssign, vardefCont);
    }
    function pattern(type8, value) {
      if (isTS && isModifier(value)) {
        cx2.marked = "keyword";
        return cont3(pattern);
      }
      if (type8 == "variable") {
        register2(value);
        return cont3();
      }
      if (type8 == "spread")
        return cont3(pattern);
      if (type8 == "[")
        return contCommasep(eltpattern, "]");
      if (type8 == "{")
        return contCommasep(proppattern, "}");
    }
    function proppattern(type8, value) {
      if (type8 == "variable" && !cx2.stream.match(/^\s*:/, false)) {
        register2(value);
        return cont3(maybeAssign);
      }
      if (type8 == "variable")
        cx2.marked = "property";
      if (type8 == "spread")
        return cont3(pattern);
      if (type8 == "}")
        return pass4();
      if (type8 == "[")
        return cont3(expression3, expect2("]"), expect2(":"), proppattern);
      return cont3(expect2(":"), pattern, maybeAssign);
    }
    function eltpattern() {
      return pass4(pattern, maybeAssign);
    }
    function maybeAssign(_type, value) {
      if (value == "=")
        return cont3(expressionNoComma);
    }
    function vardefCont(type8) {
      if (type8 == ",")
        return cont3(vardef);
    }
    function maybeelse(type8, value) {
      if (type8 == "keyword b" && value == "else")
        return cont3(pushlex2("form", "else"), statement2, poplex2);
    }
    function forspec(type8, value) {
      if (value == "await")
        return cont3(forspec);
      if (type8 == "(")
        return cont3(pushlex2(")"), forspec12, poplex2);
    }
    function forspec12(type8) {
      if (type8 == "var")
        return cont3(vardef, forspec2);
      if (type8 == "variable")
        return cont3(forspec2);
      return pass4(forspec2);
    }
    function forspec2(type8, value) {
      if (type8 == ")")
        return cont3();
      if (type8 == ";")
        return cont3(forspec2);
      if (value == "in" || value == "of") {
        cx2.marked = "keyword";
        return cont3(expression3, forspec2);
      }
      return pass4(expression3, forspec2);
    }
    function functiondef2(type8, value) {
      if (value == "*") {
        cx2.marked = "keyword";
        return cont3(functiondef2);
      }
      if (type8 == "variable") {
        register2(value);
        return cont3(functiondef2);
      }
      if (type8 == "(")
        return cont3(pushcontext2, pushlex2(")"), commasep2(funarg2, ")"), poplex2, mayberettype, statement2, popcontext2);
      if (isTS && value == "<")
        return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2, functiondef2);
    }
    function functiondecl(type8, value) {
      if (value == "*") {
        cx2.marked = "keyword";
        return cont3(functiondecl);
      }
      if (type8 == "variable") {
        register2(value);
        return cont3(functiondecl);
      }
      if (type8 == "(")
        return cont3(pushcontext2, pushlex2(")"), commasep2(funarg2, ")"), poplex2, mayberettype, popcontext2);
      if (isTS && value == "<")
        return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2, functiondecl);
    }
    function typename(type8, value) {
      if (type8 == "keyword" || type8 == "variable") {
        cx2.marked = "type";
        return cont3(typename);
      } else if (value == "<") {
        return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2);
      }
    }
    function funarg2(type8, value) {
      if (value == "@")
        cont3(expression3, funarg2);
      if (type8 == "spread")
        return cont3(funarg2);
      if (isTS && isModifier(value)) {
        cx2.marked = "keyword";
        return cont3(funarg2);
      }
      if (isTS && type8 == "this")
        return cont3(maybetype, maybeAssign);
      return pass4(pattern, maybetype, maybeAssign);
    }
    function classExpression(type8, value) {
      if (type8 == "variable")
        return className(type8, value);
      return classNameAfter(type8, value);
    }
    function className(type8, value) {
      if (type8 == "variable") {
        register2(value);
        return cont3(classNameAfter);
      }
    }
    function classNameAfter(type8, value) {
      if (value == "<")
        return cont3(pushlex2(">"), commasep2(typeparam, ">"), poplex2, classNameAfter);
      if (value == "extends" || value == "implements" || isTS && type8 == ",") {
        if (value == "implements")
          cx2.marked = "keyword";
        return cont3(isTS ? typeexpr : expression3, classNameAfter);
      }
      if (type8 == "{")
        return cont3(pushlex2("}"), classBody, poplex2);
    }
    function classBody(type8, value) {
      if (type8 == "async" || type8 == "variable" && (value == "static" || value == "get" || value == "set" || isTS && isModifier(value)) && cx2.stream.match(/^\s+#?[\w$\xa1-\uffff]/, false)) {
        cx2.marked = "keyword";
        return cont3(classBody);
      }
      if (type8 == "variable" || cx2.style == "keyword") {
        cx2.marked = "property";
        return cont3(classfield, classBody);
      }
      if (type8 == "number" || type8 == "string")
        return cont3(classfield, classBody);
      if (type8 == "[")
        return cont3(expression3, maybetype, expect2("]"), classfield, classBody);
      if (value == "*") {
        cx2.marked = "keyword";
        return cont3(classBody);
      }
      if (isTS && type8 == "(")
        return pass4(functiondecl, classBody);
      if (type8 == ";" || type8 == ",")
        return cont3(classBody);
      if (type8 == "}")
        return cont3();
      if (value == "@")
        return cont3(expression3, classBody);
    }
    function classfield(type8, value) {
      if (value == "!" || value == "?")
        return cont3(classfield);
      if (type8 == ":")
        return cont3(typeexpr, maybeAssign);
      if (value == "=")
        return cont3(expressionNoComma);
      var context = cx2.state.lexical.prev, isInterface = context && context.info == "interface";
      return pass4(isInterface ? functiondecl : functiondef2);
    }
    function afterExport(type8, value) {
      if (value == "*") {
        cx2.marked = "keyword";
        return cont3(maybeFrom, expect2(";"));
      }
      if (value == "default") {
        cx2.marked = "keyword";
        return cont3(expression3, expect2(";"));
      }
      if (type8 == "{")
        return cont3(commasep2(exportField, "}"), maybeFrom, expect2(";"));
      return pass4(statement2);
    }
    function exportField(type8, value) {
      if (value == "as") {
        cx2.marked = "keyword";
        return cont3(expect2("variable"));
      }
      if (type8 == "variable")
        return pass4(expressionNoComma, exportField);
    }
    function afterImport(type8) {
      if (type8 == "string")
        return cont3();
      if (type8 == "(")
        return pass4(expression3);
      if (type8 == ".")
        return pass4(maybeoperatorComma);
      return pass4(importSpec, maybeMoreImports, maybeFrom);
    }
    function importSpec(type8, value) {
      if (type8 == "{")
        return contCommasep(importSpec, "}");
      if (type8 == "variable")
        register2(value);
      if (value == "*")
        cx2.marked = "keyword";
      return cont3(maybeAs);
    }
    function maybeMoreImports(type8) {
      if (type8 == ",")
        return cont3(importSpec, maybeMoreImports);
    }
    function maybeAs(_type, value) {
      if (value == "as") {
        cx2.marked = "keyword";
        return cont3(importSpec);
      }
    }
    function maybeFrom(_type, value) {
      if (value == "from") {
        cx2.marked = "keyword";
        return cont3(expression3);
      }
    }
    function arrayLiteral(type8) {
      if (type8 == "]")
        return cont3();
      return pass4(commasep2(expressionNoComma, "]"));
    }
    function enumdef() {
      return pass4(pushlex2("form"), pattern, expect2("{"), pushlex2("}"), commasep2(enummember, "}"), poplex2, poplex2);
    }
    function enummember() {
      return pass4(pattern, maybeAssign);
    }
    function isContinuedStatement(state, textAfter) {
      return state.lastType == "operator" || state.lastType == "," || isOperatorChar16.test(textAfter.charAt(0)) || /[,.]/.test(textAfter.charAt(0));
    }
    function expressionAllowed(stream, state, backUp) {
      return state.tokenize == tokenBase48 && /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(state.lastType) || state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0)));
    }
    return {
      name: parserConfig4.name,
      startState: function(indentUnit2) {
        var state = {
          tokenize: tokenBase48,
          lastType: "sof",
          cc: [],
          lexical: new JSLexical(-indentUnit2, 0, "block", false),
          localVars: parserConfig4.localVars,
          context: parserConfig4.localVars && new Context14(null, null, false),
          indented: 0
        };
        if (parserConfig4.globalVars && typeof parserConfig4.globalVars == "object")
          state.globalVars = parserConfig4.globalVars;
        return state;
      },
      token: function(stream, state) {
        if (stream.sol()) {
          if (!state.lexical.hasOwnProperty("align"))
            state.lexical.align = false;
          state.indented = stream.indentation();
          findFatArrow(stream, state);
        }
        if (state.tokenize != tokenComment21 && stream.eatSpace())
          return null;
        var style2 = state.tokenize(stream, state);
        if (type7 == "comment")
          return style2;
        state.lastType = type7 == "operator" && (content3 == "++" || content3 == "--") ? "incdec" : type7;
        return parseJS(state, style2, type7, content3, stream);
      },
      indent: function(state, textAfter, cx3) {
        if (state.tokenize == tokenComment21 || state.tokenize == tokenQuasi)
          return null;
        if (state.tokenize != tokenBase48)
          return 0;
        var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top3;
        if (!/^\s*else\b/.test(textAfter))
          for (var i = state.cc.length - 1; i >= 0; --i) {
            var c2 = state.cc[i];
            if (c2 == poplex2)
              lexical = lexical.prev;
            else if (c2 != maybeelse && c2 != popcontext2)
              break;
          }
        while ((lexical.type == "stat" || lexical.type == "form") && (firstChar == "}" || (top3 = state.cc[state.cc.length - 1]) && (top3 == maybeoperatorComma || top3 == maybeoperatorNoComma) && !/^[,\.=+\-*:?[\(]/.test(textAfter)))
          lexical = lexical.prev;
        if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
          lexical = lexical.prev;
        var type8 = lexical.type, closing3 = firstChar == type8;
        if (type8 == "vardef")
          return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);
        else if (type8 == "form" && firstChar == "{")
          return lexical.indented;
        else if (type8 == "form")
          return lexical.indented + cx3.unit;
        else if (type8 == "stat")
          return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx3.unit : 0);
        else if (lexical.info == "switch" && !closing3 && parserConfig4.doubleIndentSwitch != false)
          return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx3.unit : 2 * cx3.unit);
        else if (lexical.align)
          return lexical.column + (closing3 ? 0 : 1);
        else
          return lexical.indented + (closing3 ? 0 : cx3.unit);
      },
      languageData: {
        indentOnInput: /^\s*(?:case .*?:|default:|\{|\})$/,
        commentTokens: jsonMode ? void 0 : { line: "//", block: { open: "/*", close: "*/" } },
        closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
        wordChars: "$"
      }
    };
  }
  var javascript2, json2, jsonld, typescript;
  var init_javascript = __esm({
    "node_modules/@codemirror/legacy-modes/mode/javascript.js"() {
      javascript2 = mkJavaScript({ name: "javascript" });
      json2 = mkJavaScript({ name: "json", json: true });
      jsonld = mkJavaScript({ name: "json", jsonld: true });
      typescript = mkJavaScript({ name: "typescript", typescript: true });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/jinja2.js
  var jinja2_exports = {};
  __export(jinja2_exports, {
    jinja2: () => jinja2
  });
  function tokenBase14(stream, state) {
    var ch2 = stream.peek();
    if (state.incomment) {
      if (!stream.skipTo("#}")) {
        stream.skipToEnd();
      } else {
        stream.eatWhile(/\#|}/);
        state.incomment = false;
      }
      return "comment";
    } else if (state.intag) {
      if (state.operator) {
        state.operator = false;
        if (stream.match(atom3)) {
          return "atom";
        }
        if (stream.match(number2)) {
          return "number";
        }
      }
      if (state.sign) {
        state.sign = false;
        if (stream.match(atom3)) {
          return "atom";
        }
        if (stream.match(number2)) {
          return "number";
        }
      }
      if (state.instring) {
        if (ch2 == state.instring) {
          state.instring = false;
        }
        stream.next();
        return "string";
      } else if (ch2 == "'" || ch2 == '"') {
        state.instring = ch2;
        stream.next();
        return "string";
      } else if (state.inbraces > 0 && ch2 == ")") {
        stream.next();
        state.inbraces--;
      } else if (ch2 == "(") {
        stream.next();
        state.inbraces++;
      } else if (state.inbrackets > 0 && ch2 == "]") {
        stream.next();
        state.inbrackets--;
      } else if (ch2 == "[") {
        stream.next();
        state.inbrackets++;
      } else if (!state.lineTag && (stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}"))) {
        state.intag = false;
        return "tag";
      } else if (stream.match(operator3)) {
        state.operator = true;
        return "operator";
      } else if (stream.match(sign)) {
        state.sign = true;
      } else {
        if (stream.column() == 1 && state.lineTag && stream.match(keywords17)) {
          return "keyword";
        }
        if (stream.eat(" ") || stream.sol()) {
          if (stream.match(keywords17)) {
            return "keyword";
          }
          if (stream.match(atom3)) {
            return "atom";
          }
          if (stream.match(number2)) {
            return "number";
          }
          if (stream.sol()) {
            stream.next();
          }
        } else {
          stream.next();
        }
      }
      return "variable";
    } else if (stream.eat("{")) {
      if (stream.eat("#")) {
        state.incomment = true;
        if (!stream.skipTo("#}")) {
          stream.skipToEnd();
        } else {
          stream.eatWhile(/\#|}/);
          state.incomment = false;
        }
        return "comment";
      } else if (ch2 = stream.eat(/\{|%/)) {
        state.intag = ch2;
        state.inbraces = 0;
        state.inbrackets = 0;
        if (ch2 == "{") {
          state.intag = "}";
        }
        stream.eat("-");
        return "tag";
      }
    } else if (stream.eat("#")) {
      if (stream.peek() == "#") {
        stream.skipToEnd();
        return "comment";
      } else if (!stream.eol()) {
        state.intag = true;
        state.lineTag = true;
        state.inbraces = 0;
        state.inbrackets = 0;
        return "tag";
      }
    }
    stream.next();
  }
  var keywords17, operator3, sign, atom3, number2, jinja2;
  var init_jinja2 = __esm({
    "node_modules/@codemirror/legacy-modes/mode/jinja2.js"() {
      keywords17 = [
        "and",
        "as",
        "block",
        "endblock",
        "by",
        "cycle",
        "debug",
        "else",
        "elif",
        "extends",
        "filter",
        "endfilter",
        "firstof",
        "do",
        "for",
        "endfor",
        "if",
        "endif",
        "ifchanged",
        "endifchanged",
        "ifequal",
        "endifequal",
        "ifnotequal",
        "set",
        "raw",
        "endraw",
        "endifnotequal",
        "in",
        "include",
        "load",
        "not",
        "now",
        "or",
        "parsed",
        "regroup",
        "reversed",
        "spaceless",
        "call",
        "endcall",
        "macro",
        "endmacro",
        "endspaceless",
        "ssi",
        "templatetag",
        "openblock",
        "closeblock",
        "openvariable",
        "closevariable",
        "without",
        "context",
        "openbrace",
        "closebrace",
        "opencomment",
        "closecomment",
        "widthratio",
        "url",
        "with",
        "endwith",
        "get_current_language",
        "trans",
        "endtrans",
        "noop",
        "blocktrans",
        "endblocktrans",
        "get_available_languages",
        "get_current_language_bidi",
        "pluralize",
        "autoescape",
        "endautoescape"
      ];
      operator3 = /^[+\-*&%=<>!?|~^]/;
      sign = /^[:\[\(\{]/;
      atom3 = ["true", "false"];
      number2 = /^(\d[+\-\*\/])?\d+(\.\d+)?/;
      keywords17 = new RegExp("((" + keywords17.join(")|(") + "))\\b");
      atom3 = new RegExp("((" + atom3.join(")|(") + "))\\b");
      jinja2 = {
        name: "jinja2",
        startState: function() {
          return { tokenize: tokenBase14, inbrackets: 0, inbraces: 0 };
        },
        token: function(stream, state) {
          var style2 = state.tokenize(stream, state);
          if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {
            state.intag = false;
            state.lineTag = false;
          }
          return style2;
        },
        languageData: {
          commentTokens: { block: { open: "{#", close: "#}", line: "##" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/julia.js
  var julia_exports = {};
  __export(julia_exports, {
    julia: () => julia
  });
  function wordRegexp5(words22, end2, pre) {
    if (typeof pre === "undefined")
      pre = "";
    if (typeof end2 === "undefined") {
      end2 = "\\b";
    }
    return new RegExp("^" + pre + "((" + words22.join(")|(") + "))" + end2);
  }
  function inArray(state) {
    return state.nestedArrays > 0;
  }
  function inGenerator(state) {
    return state.nestedGenerators > 0;
  }
  function currentScope(state, n2) {
    if (typeof n2 === "undefined") {
      n2 = 0;
    }
    if (state.scopes.length <= n2) {
      return null;
    }
    return state.scopes[state.scopes.length - (n2 + 1)];
  }
  function tokenBase15(stream, state) {
    if (stream.match("#=", false)) {
      state.tokenize = tokenComment7;
      return state.tokenize(stream, state);
    }
    var leavingExpr = state.leavingExpr;
    if (stream.sol()) {
      leavingExpr = false;
    }
    state.leavingExpr = false;
    if (leavingExpr) {
      if (stream.match(/^'+/)) {
        return "operator";
      }
    }
    if (stream.match(/\.{4,}/)) {
      return "error";
    } else if (stream.match(/\.{1,3}/)) {
      return "operator";
    }
    if (stream.eatSpace()) {
      return null;
    }
    var ch2 = stream.peek();
    if (ch2 === "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 === "[") {
      state.scopes.push("[");
      state.nestedArrays++;
    }
    if (ch2 === "(") {
      state.scopes.push("(");
      state.nestedGenerators++;
    }
    if (inArray(state) && ch2 === "]") {
      while (state.scopes.length && currentScope(state) !== "[") {
        state.scopes.pop();
      }
      state.scopes.pop();
      state.nestedArrays--;
      state.leavingExpr = true;
    }
    if (inGenerator(state) && ch2 === ")") {
      while (state.scopes.length && currentScope(state) !== "(") {
        state.scopes.pop();
      }
      state.scopes.pop();
      state.nestedGenerators--;
      state.leavingExpr = true;
    }
    if (inArray(state)) {
      if (state.lastToken == "end" && stream.match(":")) {
        return "operator";
      }
      if (stream.match("end")) {
        return "number";
      }
    }
    var match3;
    if (match3 = stream.match(openers, false)) {
      state.scopes.push(match3[0]);
    }
    if (stream.match(closers, false)) {
      state.scopes.pop();
    }
    if (stream.match(/^::(?![:\$])/)) {
      state.tokenize = tokenAnnotation;
      return state.tokenize(stream, state);
    }
    if (!leavingExpr && (stream.match(symbol3) || stream.match(symbolOperators))) {
      return "builtin";
    }
    if (stream.match(operators4)) {
      return "operator";
    }
    if (stream.match(/^\.?\d/, false)) {
      var imMatcher = RegExp(/^im\b/);
      var numberLiteral2 = false;
      if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) {
        numberLiteral2 = true;
      }
      if (stream.match(/^0x[0-9a-f_]+/i)) {
        numberLiteral2 = true;
      }
      if (stream.match(/^0b[01_]+/i)) {
        numberLiteral2 = true;
      }
      if (stream.match(/^0o[0-7_]+/i)) {
        numberLiteral2 = true;
      }
      if (stream.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i)) {
        numberLiteral2 = true;
      }
      if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) {
        numberLiteral2 = true;
      }
      if (numberLiteral2) {
        stream.match(imMatcher);
        state.leavingExpr = true;
        return "number";
      }
    }
    if (stream.match("'")) {
      state.tokenize = tokenChar;
      return state.tokenize(stream, state);
    }
    if (stream.match(stringPrefixes2)) {
      state.tokenize = tokenStringFactory(stream.current());
      return state.tokenize(stream, state);
    }
    if (stream.match(macro) || stream.match(macroOperators)) {
      return "meta";
    }
    if (stream.match(delimiters2)) {
      return null;
    }
    if (stream.match(keywords18)) {
      return "keyword";
    }
    if (stream.match(builtins4)) {
      return "builtin";
    }
    var isDefinition = state.isDefinition || state.lastToken == "function" || state.lastToken == "macro" || state.lastToken == "type" || state.lastToken == "struct" || state.lastToken == "immutable";
    if (stream.match(identifiers4)) {
      if (isDefinition) {
        if (stream.peek() === ".") {
          state.isDefinition = true;
          return "variable";
        }
        state.isDefinition = false;
        return "def";
      }
      state.leavingExpr = true;
      return "variable";
    }
    stream.next();
    return "error";
  }
  function tokenAnnotation(stream, state) {
    stream.match(/.*?(?=[,;{}()=\s]|$)/);
    if (stream.match("{")) {
      state.nestedParameters++;
    } else if (stream.match("}") && state.nestedParameters > 0) {
      state.nestedParameters--;
    }
    if (state.nestedParameters > 0) {
      stream.match(/.*?(?={|})/) || stream.next();
    } else if (state.nestedParameters == 0) {
      state.tokenize = tokenBase15;
    }
    return "builtin";
  }
  function tokenComment7(stream, state) {
    if (stream.match("#=")) {
      state.nestedComments++;
    }
    if (!stream.match(/.*?(?=(#=|=#))/)) {
      stream.skipToEnd();
    }
    if (stream.match("=#")) {
      state.nestedComments--;
      if (state.nestedComments == 0)
        state.tokenize = tokenBase15;
    }
    return "comment";
  }
  function tokenChar(stream, state) {
    var isChar = false, match3;
    if (stream.match(chars)) {
      isChar = true;
    } else if (match3 = stream.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
      var value = parseInt(match3[1], 16);
      if (value <= 55295 || value >= 57344) {
        isChar = true;
        stream.next();
      }
    } else if (match3 = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
      var value = parseInt(match3[1], 16);
      if (value <= 1114111) {
        isChar = true;
        stream.next();
      }
    }
    if (isChar) {
      state.leavingExpr = true;
      state.tokenize = tokenBase15;
      return "string";
    }
    if (!stream.match(/^[^']+(?=')/)) {
      stream.skipToEnd();
    }
    if (stream.match("'")) {
      state.tokenize = tokenBase15;
    }
    return "error";
  }
  function tokenStringFactory(delimiter2) {
    if (delimiter2.substr(-3) === '"""') {
      delimiter2 = '"""';
    } else if (delimiter2.substr(-1) === '"') {
      delimiter2 = '"';
    }
    function tokenString30(stream, state) {
      if (stream.eat("\\")) {
        stream.next();
      } else if (stream.match(delimiter2)) {
        state.tokenize = tokenBase15;
        state.leavingExpr = true;
        return "string";
      } else {
        stream.eat(/[`"]/);
      }
      stream.eatWhile(/[^\\`"]/);
      return "string";
    }
    return tokenString30;
  }
  var octChar, hexChar, sChar, uChar, asciiOperatorsList, operators4, delimiters2, identifiers4, chars, openersList, closersList, keywordsList, builtinsList, openers, closers, keywords18, builtins4, macro, symbol3, stringPrefixes2, macroOperators, symbolOperators, julia;
  var init_julia = __esm({
    "node_modules/@codemirror/legacy-modes/mode/julia.js"() {
      octChar = "\\\\[0-7]{1,3}";
      hexChar = "\\\\x[A-Fa-f0-9]{1,2}";
      sChar = `\\\\[abefnrtv0%?'"\\\\]`;
      uChar = "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";
      asciiOperatorsList = [
        "[<>]:",
        "[<>=]=",
        "<<=?",
        ">>>?=?",
        "=>",
        "--?>",
        "<--[->]?",
        "\\/\\/",
        "\\.{2,3}",
        "[\\.\\\\%*+\\-<>!\\/^|&]=?",
        "\\?",
        "\\$",
        "~",
        ":"
      ];
      operators4 = wordRegexp5([
        "[<>]:",
        "[<>=]=",
        "[!=]==",
        "<<=?",
        ">>>?=?",
        "=>?",
        "--?>",
        "<--[->]?",
        "\\/\\/",
        "[\\\\%*+\\-<>!\\/^|&\\u00F7\\u22BB]=?",
        "\\?",
        "\\$",
        "~",
        ":",
        "\\u00D7",
        "\\u2208",
        "\\u2209",
        "\\u220B",
        "\\u220C",
        "\\u2218",
        "\\u221A",
        "\\u221B",
        "\\u2229",
        "\\u222A",
        "\\u2260",
        "\\u2264",
        "\\u2265",
        "\\u2286",
        "\\u2288",
        "\\u228A",
        "\\u22C5",
        "\\b(in|isa)\\b(?!.?\\()"
      ], "");
      delimiters2 = /^[;,()[\]{}]/;
      identifiers4 = /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;
      chars = wordRegexp5([octChar, hexChar, sChar, uChar], "'");
      openersList = [
        "begin",
        "function",
        "type",
        "struct",
        "immutable",
        "let",
        "macro",
        "for",
        "while",
        "quote",
        "if",
        "else",
        "elseif",
        "try",
        "finally",
        "catch",
        "do"
      ];
      closersList = ["end", "else", "elseif", "catch", "finally"];
      keywordsList = [
        "if",
        "else",
        "elseif",
        "while",
        "for",
        "begin",
        "let",
        "end",
        "do",
        "try",
        "catch",
        "finally",
        "return",
        "break",
        "continue",
        "global",
        "local",
        "const",
        "export",
        "import",
        "importall",
        "using",
        "function",
        "where",
        "macro",
        "module",
        "baremodule",
        "struct",
        "type",
        "mutable",
        "immutable",
        "quote",
        "typealias",
        "abstract",
        "primitive",
        "bitstype"
      ];
      builtinsList = ["true", "false", "nothing", "NaN", "Inf"];
      openers = wordRegexp5(openersList);
      closers = wordRegexp5(closersList);
      keywords18 = wordRegexp5(keywordsList);
      builtins4 = wordRegexp5(builtinsList);
      macro = /^@[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
      symbol3 = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
      stringPrefixes2 = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;
      macroOperators = wordRegexp5(asciiOperatorsList, "", "@");
      symbolOperators = wordRegexp5(asciiOperatorsList, "", ":");
      julia = {
        name: "julia",
        startState: function() {
          return {
            tokenize: tokenBase15,
            scopes: [],
            lastToken: null,
            leavingExpr: false,
            isDefinition: false,
            nestedArrays: 0,
            nestedComments: 0,
            nestedGenerators: 0,
            nestedParameters: 0,
            firstParenPos: -1
          };
        },
        token: function(stream, state) {
          var style2 = state.tokenize(stream, state);
          var current = stream.current();
          if (current && style2) {
            state.lastToken = current;
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var delta = 0;
          if (textAfter === "]" || textAfter === ")" || /^end\b/.test(textAfter) || /^else/.test(textAfter) || /^catch\b/.test(textAfter) || /^elseif\b/.test(textAfter) || /^finally/.test(textAfter)) {
            delta = -1;
          }
          return (state.scopes.length + delta) * cx2.unit;
        },
        languageData: {
          indentOnInput: /^\s*(end|else|catch|finally)\b$/,
          commentTokens: { line: "#", block: { open: "#=", close: "=#" } },
          closeBrackets: { brackets: ["(", "[", "{", '"'] },
          autocomplete: keywordsList.concat(builtinsList)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/livescript.js
  var livescript_exports = {};
  __export(livescript_exports, {
    liveScript: () => liveScript
  });
  var tokenBase16, identifier4, indenter2, keywordend, stringfill, Rules, r2, rr, i, len, idx, liveScript;
  var init_livescript = __esm({
    "node_modules/@codemirror/legacy-modes/mode/livescript.js"() {
      tokenBase16 = function(stream, state) {
        var next_rule = state.next || "start";
        if (next_rule) {
          state.next = state.next;
          var nr = Rules[next_rule];
          if (nr.splice) {
            for (var i$ = 0; i$ < nr.length; ++i$) {
              var r2 = nr[i$];
              if (r2.regex && stream.match(r2.regex)) {
                state.next = r2.next || state.next;
                return r2.token;
              }
            }
            stream.next();
            return "error";
          }
          if (stream.match(r2 = Rules[next_rule])) {
            if (r2.regex && stream.match(r2.regex)) {
              state.next = r2.next;
              return r2.token;
            } else {
              stream.next();
              return "error";
            }
          }
        }
        stream.next();
        return "error";
      };
      identifier4 = "(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*";
      indenter2 = RegExp("(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*" + identifier4 + ")?))\\s*$");
      keywordend = "(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))";
      stringfill = {
        token: "string",
        regex: ".+"
      };
      Rules = {
        start: [
          {
            token: "docComment",
            regex: "/\\*",
            next: "comment"
          },
          {
            token: "comment",
            regex: "#.*"
          },
          {
            token: "keyword",
            regex: "(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)" + keywordend
          },
          {
            token: "atom",
            regex: "(?:true|false|yes|no|on|off|null|void|undefined)" + keywordend
          },
          {
            token: "invalid",
            regex: "(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)" + keywordend
          },
          {
            token: "className.standard",
            regex: "(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)" + keywordend
          },
          {
            token: "variableName.function.standard",
            regex: "(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)" + keywordend
          },
          {
            token: "variableName.standard",
            regex: "(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)" + keywordend
          },
          {
            token: "variableName",
            regex: identifier4 + "\\s*:(?![:=])"
          },
          {
            token: "variableName",
            regex: identifier4
          },
          {
            token: "operatorKeyword",
            regex: "(?:\\.{3}|\\s+\\?)"
          },
          {
            token: "keyword",
            regex: "(?:@+|::|\\.\\.)",
            next: "key"
          },
          {
            token: "operatorKeyword",
            regex: "\\.\\s*",
            next: "key"
          },
          {
            token: "string",
            regex: "\\\\\\S[^\\s,;)}\\]]*"
          },
          {
            token: "docString",
            regex: "'''",
            next: "qdoc"
          },
          {
            token: "docString",
            regex: '"""',
            next: "qqdoc"
          },
          {
            token: "string",
            regex: "'",
            next: "qstring"
          },
          {
            token: "string",
            regex: '"',
            next: "qqstring"
          },
          {
            token: "string",
            regex: "`",
            next: "js"
          },
          {
            token: "string",
            regex: "<\\[",
            next: "words"
          },
          {
            token: "regexp",
            regex: "//",
            next: "heregex"
          },
          {
            token: "regexp",
            regex: "\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}",
            next: "key"
          },
          {
            token: "number",
            regex: "(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)"
          },
          {
            token: "paren",
            regex: "[({[]"
          },
          {
            token: "paren",
            regex: "[)}\\]]",
            next: "key"
          },
          {
            token: "operatorKeyword",
            regex: "\\S+"
          },
          {
            token: "content",
            regex: "\\s+"
          }
        ],
        heregex: [
          {
            token: "regexp",
            regex: ".*?//[gimy$?]{0,4}",
            next: "start"
          },
          {
            token: "regexp",
            regex: "\\s*#{"
          },
          {
            token: "comment",
            regex: "\\s+(?:#.*)?"
          },
          {
            token: "regexp",
            regex: "\\S+"
          }
        ],
        key: [
          {
            token: "operatorKeyword",
            regex: "[.?@!]+"
          },
          {
            token: "variableName",
            regex: identifier4,
            next: "start"
          },
          {
            token: "content",
            regex: "",
            next: "start"
          }
        ],
        comment: [
          {
            token: "docComment",
            regex: ".*?\\*/",
            next: "start"
          },
          {
            token: "docComment",
            regex: ".+"
          }
        ],
        qdoc: [
          {
            token: "string",
            regex: ".*?'''",
            next: "key"
          },
          stringfill
        ],
        qqdoc: [
          {
            token: "string",
            regex: '.*?"""',
            next: "key"
          },
          stringfill
        ],
        qstring: [
          {
            token: "string",
            regex: "[^\\\\']*(?:\\\\.[^\\\\']*)*'",
            next: "key"
          },
          stringfill
        ],
        qqstring: [
          {
            token: "string",
            regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
            next: "key"
          },
          stringfill
        ],
        js: [
          {
            token: "string",
            regex: "[^\\\\`]*(?:\\\\.[^\\\\`]*)*`",
            next: "key"
          },
          stringfill
        ],
        words: [
          {
            token: "string",
            regex: ".*?\\]>",
            next: "key"
          },
          stringfill
        ]
      };
      for (idx in Rules) {
        r2 = Rules[idx];
        if (r2.splice) {
          for (i = 0, len = r2.length; i < len; ++i) {
            rr = r2[i];
            if (typeof rr.regex === "string") {
              Rules[idx][i].regex = new RegExp("^" + rr.regex);
            }
          }
        } else if (typeof rr.regex === "string") {
          Rules[idx].regex = new RegExp("^" + r2.regex);
        }
      }
      liveScript = {
        name: "livescript",
        startState: function() {
          return {
            next: "start",
            lastToken: { style: null, indent: 0, content: "" }
          };
        },
        token: function(stream, state) {
          while (stream.pos == stream.start)
            var style2 = tokenBase16(stream, state);
          state.lastToken = {
            style: style2,
            indent: stream.indentation(),
            content: stream.current()
          };
          return style2.replace(/\./g, " ");
        },
        indent: function(state) {
          var indentation2 = state.lastToken.indent;
          if (state.lastToken.content.match(indenter2)) {
            indentation2 += 2;
          }
          return indentation2;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/lua.js
  var lua_exports = {};
  __export(lua_exports, {
    lua: () => lua
  });
  function prefixRE(words22) {
    return new RegExp("^(?:" + words22.join("|") + ")", "i");
  }
  function wordRE(words22) {
    return new RegExp("^(?:" + words22.join("|") + ")$", "i");
  }
  function readBracket(stream) {
    var level = 0;
    while (stream.eat("="))
      ++level;
    stream.eat("[");
    return level;
  }
  function normal3(stream, state) {
    var ch2 = stream.next();
    if (ch2 == "-" && stream.eat("-")) {
      if (stream.eat("[") && stream.eat("["))
        return (state.cur = bracketed2(readBracket(stream), "comment"))(stream, state);
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 == '"' || ch2 == "'")
      return (state.cur = string2(ch2))(stream, state);
    if (ch2 == "[" && /[\[=]/.test(stream.peek()))
      return (state.cur = bracketed2(readBracket(stream), "string"))(stream, state);
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w.%]/);
      return "number";
    }
    if (/[\w_]/.test(ch2)) {
      stream.eatWhile(/[\w\\\-_.]/);
      return "variable";
    }
    return null;
  }
  function bracketed2(level, style2) {
    return function(stream, state) {
      var curlev = null, ch2;
      while ((ch2 = stream.next()) != null) {
        if (curlev == null) {
          if (ch2 == "]")
            curlev = 0;
        } else if (ch2 == "=")
          ++curlev;
        else if (ch2 == "]" && curlev == level) {
          state.cur = normal3;
          break;
        } else
          curlev = null;
      }
      return style2;
    };
  }
  function string2(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped)
          break;
        escaped = !escaped && ch2 == "\\";
      }
      if (!escaped)
        state.cur = normal3;
      return "string";
    };
  }
  var builtins5, keywords19, indentTokens, dedentTokens, dedentPartial, lua;
  var init_lua = __esm({
    "node_modules/@codemirror/legacy-modes/mode/lua.js"() {
      builtins5 = wordRE([
        "_G",
        "_VERSION",
        "assert",
        "collectgarbage",
        "dofile",
        "error",
        "getfenv",
        "getmetatable",
        "ipairs",
        "load",
        "loadfile",
        "loadstring",
        "module",
        "next",
        "pairs",
        "pcall",
        "print",
        "rawequal",
        "rawget",
        "rawset",
        "require",
        "select",
        "setfenv",
        "setmetatable",
        "tonumber",
        "tostring",
        "type",
        "unpack",
        "xpcall",
        "coroutine.create",
        "coroutine.resume",
        "coroutine.running",
        "coroutine.status",
        "coroutine.wrap",
        "coroutine.yield",
        "debug.debug",
        "debug.getfenv",
        "debug.gethook",
        "debug.getinfo",
        "debug.getlocal",
        "debug.getmetatable",
        "debug.getregistry",
        "debug.getupvalue",
        "debug.setfenv",
        "debug.sethook",
        "debug.setlocal",
        "debug.setmetatable",
        "debug.setupvalue",
        "debug.traceback",
        "close",
        "flush",
        "lines",
        "read",
        "seek",
        "setvbuf",
        "write",
        "io.close",
        "io.flush",
        "io.input",
        "io.lines",
        "io.open",
        "io.output",
        "io.popen",
        "io.read",
        "io.stderr",
        "io.stdin",
        "io.stdout",
        "io.tmpfile",
        "io.type",
        "io.write",
        "math.abs",
        "math.acos",
        "math.asin",
        "math.atan",
        "math.atan2",
        "math.ceil",
        "math.cos",
        "math.cosh",
        "math.deg",
        "math.exp",
        "math.floor",
        "math.fmod",
        "math.frexp",
        "math.huge",
        "math.ldexp",
        "math.log",
        "math.log10",
        "math.max",
        "math.min",
        "math.modf",
        "math.pi",
        "math.pow",
        "math.rad",
        "math.random",
        "math.randomseed",
        "math.sin",
        "math.sinh",
        "math.sqrt",
        "math.tan",
        "math.tanh",
        "os.clock",
        "os.date",
        "os.difftime",
        "os.execute",
        "os.exit",
        "os.getenv",
        "os.remove",
        "os.rename",
        "os.setlocale",
        "os.time",
        "os.tmpname",
        "package.cpath",
        "package.loaded",
        "package.loaders",
        "package.loadlib",
        "package.path",
        "package.preload",
        "package.seeall",
        "string.byte",
        "string.char",
        "string.dump",
        "string.find",
        "string.format",
        "string.gmatch",
        "string.gsub",
        "string.len",
        "string.lower",
        "string.match",
        "string.rep",
        "string.reverse",
        "string.sub",
        "string.upper",
        "table.concat",
        "table.insert",
        "table.maxn",
        "table.remove",
        "table.sort"
      ]);
      keywords19 = wordRE([
        "and",
        "break",
        "elseif",
        "false",
        "nil",
        "not",
        "or",
        "return",
        "true",
        "function",
        "end",
        "if",
        "then",
        "else",
        "do",
        "while",
        "repeat",
        "until",
        "for",
        "in",
        "local"
      ]);
      indentTokens = wordRE(["function", "if", "repeat", "do", "\\(", "{"]);
      dedentTokens = wordRE(["end", "until", "\\)", "}"]);
      dedentPartial = prefixRE(["end", "until", "\\)", "}", "else", "elseif"]);
      lua = {
        name: "lua",
        startState: function() {
          return { basecol: 0, indentDepth: 0, cur: normal3 };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = state.cur(stream, state);
          var word2 = stream.current();
          if (style2 == "variable") {
            if (keywords19.test(word2))
              style2 = "keyword";
            else if (builtins5.test(word2))
              style2 = "builtin";
          }
          if (style2 != "comment" && style2 != "string") {
            if (indentTokens.test(word2))
              ++state.indentDepth;
            else if (dedentTokens.test(word2))
              --state.indentDepth;
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var closing3 = dedentPartial.test(textAfter);
          return state.basecol + cx2.unit * (state.indentDepth - (closing3 ? 1 : 0));
        },
        languageData: {
          indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
          commentTokens: { line: "--", block: { open: "--[[", close: "]]--" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/mirc.js
  var mirc_exports = {};
  __export(mirc_exports, {
    mirc: () => mirc
  });
  function parseWords(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function chain5(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenBase17(stream, state) {
    var beforeParams = state.beforeParams;
    state.beforeParams = false;
    var ch2 = stream.next();
    if (/[\[\]{}\(\),\.]/.test(ch2)) {
      if (ch2 == "(" && beforeParams)
        state.inParams = true;
      else if (ch2 == ")")
        state.inParams = false;
      return null;
    } else if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    } else if (ch2 == "\\") {
      stream.eat("\\");
      stream.eat(/./);
      return "number";
    } else if (ch2 == "/" && stream.eat("*")) {
      return chain5(stream, state, tokenComment8);
    } else if (ch2 == ";" && stream.match(/ *\( *\(/)) {
      return chain5(stream, state, tokenUnparsed);
    } else if (ch2 == ";" && !state.inParams) {
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == '"') {
      stream.eat(/"/);
      return "keyword";
    } else if (ch2 == "$") {
      stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
      if (specials && specials.propertyIsEnumerable(stream.current().toLowerCase())) {
        return "keyword";
      } else {
        state.beforeParams = true;
        return "builtin";
      }
    } else if (ch2 == "%") {
      stream.eatWhile(/[^,\s()]/);
      state.beforeParams = true;
      return "string";
    } else if (isOperatorChar7.test(ch2)) {
      stream.eatWhile(isOperatorChar7);
      return "operator";
    } else {
      stream.eatWhile(/[\w\$_{}]/);
      var word2 = stream.current().toLowerCase();
      if (keywords20 && keywords20.propertyIsEnumerable(word2))
        return "keyword";
      if (functions && functions.propertyIsEnumerable(word2)) {
        state.beforeParams = true;
        return "keyword";
      }
      return null;
    }
  }
  function tokenComment8(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase17;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenUnparsed(stream, state) {
    var maybeEnd = 0, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == ";" && maybeEnd == 2) {
        state.tokenize = tokenBase17;
        break;
      }
      if (ch2 == ")")
        maybeEnd++;
      else if (ch2 != " ")
        maybeEnd = 0;
    }
    return "meta";
  }
  var specials, keywords20, functions, isOperatorChar7, mirc;
  var init_mirc = __esm({
    "node_modules/@codemirror/legacy-modes/mode/mirc.js"() {
      specials = parseWords("$! $$ $& $? $+ $abook $abs $active $activecid $activewid $address $addtok $agent $agentname $agentstat $agentver $alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime $asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind $binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes $chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color $com $comcall $comchan $comerr $compact $compress $comval $cos $count $cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight $dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress $deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll $dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error $eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir $finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve $fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt $group $halted $hash $height $hfind $hget $highlight $hnick $hotline $hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil $inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect $insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile $isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive $lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock $lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer $maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext $menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode $modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile $nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly $opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree $pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo $readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex $reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline $sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin $site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname $sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped $syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp $timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel $ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver $version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor");
      keywords20 = parseWords("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice away background ban bcopy beep bread break breplace bset btrunc bunset bwrite channel clear clearall cline clipboard close cnick color comclose comopen comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver debug dec describe dialog did didtok disable disconnect dlevel dline dll dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable events exit fclose filter findtext finger firewall flash flist flood flush flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear ialmark identd if ignore iline inc invite iuser join kick linesep links list load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice qme qmsg query queryn quit raw reload remini remote remove rename renwin reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini say scid scon server set showmirc signam sline sockaccept sockclose socklist socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs elseif else goto menu nicklist status title icon size option text edit button check radio box scroll list combo link tab item");
      functions = parseWords("if elseif else and not or eq ne in ni for foreach while switch");
      isOperatorChar7 = /[+\-*&%=<>!?^\/\|]/;
      mirc = {
        name: "mirc",
        startState: function() {
          return {
            tokenize: tokenBase17,
            beforeParams: false,
            inParams: false
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return state.tokenize(stream, state);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/mathematica.js
  var mathematica_exports = {};
  __export(mathematica_exports, {
    mathematica: () => mathematica
  });
  function tokenBase18(stream, state) {
    var ch2;
    ch2 = stream.next();
    if (ch2 === '"') {
      state.tokenize = tokenString8;
      return state.tokenize(stream, state);
    }
    if (ch2 === "(") {
      if (stream.eat("*")) {
        state.commentLevel++;
        state.tokenize = tokenComment9;
        return state.tokenize(stream, state);
      }
    }
    stream.backUp(1);
    if (stream.match(reBaseForm, true, false)) {
      return "number";
    }
    if (stream.match(reFloatForm, true, false)) {
      return "number";
    }
    if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
      return "atom";
    }
    if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, true, false)) {
      return "meta";
    }
    if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, true, false)) {
      return "string.special";
    }
    if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, true, false)) {
      return "variableName.special";
    }
    if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
      return "variableName.special";
    }
    if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
      return "variableName.special";
    }
    if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
      return "variableName.special";
    }
    if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
      return "character";
    }
    if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
      return "bracket";
    }
    if (stream.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, true, false)) {
      return "variableName.constant";
    }
    if (stream.match(reIdInContext, true, false)) {
      return "keyword";
    }
    if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, true, false)) {
      return "operator";
    }
    stream.next();
    return "error";
  }
  function tokenString8(stream, state) {
    var next2, end2 = false, escaped = false;
    while ((next2 = stream.next()) != null) {
      if (next2 === '"' && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 === "\\";
    }
    if (end2 && !escaped) {
      state.tokenize = tokenBase18;
    }
    return "string";
  }
  function tokenComment9(stream, state) {
    var prev, next2;
    while (state.commentLevel > 0 && (next2 = stream.next()) != null) {
      if (prev === "(" && next2 === "*")
        state.commentLevel++;
      if (prev === "*" && next2 === ")")
        state.commentLevel--;
      prev = next2;
    }
    if (state.commentLevel <= 0) {
      state.tokenize = tokenBase18;
    }
    return "comment";
  }
  var Identifier5, pBase, pFloat, pFloatBase, pPrecision, reBaseForm, reFloatForm, reIdInContext, mathematica;
  var init_mathematica = __esm({
    "node_modules/@codemirror/legacy-modes/mode/mathematica.js"() {
      Identifier5 = "[a-zA-Z\\$][a-zA-Z0-9\\$]*";
      pBase = "(?:\\d+)";
      pFloat = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
      pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
      pPrecision = "(?:`(?:`?" + pFloat + ")?)";
      reBaseForm = new RegExp("(?:" + pBase + "(?:\\^\\^" + pFloatBase + pPrecision + "?(?:\\*\\^[+-]?\\d+)?))");
      reFloatForm = new RegExp("(?:" + pFloat + pPrecision + "?(?:\\*\\^[+-]?\\d+)?)");
      reIdInContext = new RegExp("(?:`?)(?:" + Identifier5 + ")(?:`(?:" + Identifier5 + "))*(?:`?)");
      mathematica = {
        name: "mathematica",
        startState: function() {
          return { tokenize: tokenBase18, commentLevel: 0 };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return state.tokenize(stream, state);
        },
        languageData: {
          commentTokens: { block: { open: "(*", close: "*)" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/modelica.js
  var modelica_exports = {};
  __export(modelica_exports, {
    modelica: () => modelica
  });
  function words9(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenLineComment(stream, state) {
    stream.skipToEnd();
    state.tokenize = null;
    return "comment";
  }
  function tokenBlockComment(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (maybeEnd && ch2 == "/") {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenString9(stream, state) {
    var escaped = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 == '"' && !escaped) {
        state.tokenize = null;
        state.sol = false;
        break;
      }
      escaped = !escaped && ch2 == "\\";
    }
    return "string";
  }
  function tokenIdent(stream, state) {
    stream.eatWhile(isDigit2);
    while (stream.eat(isDigit2) || stream.eat(isNonDigit)) {
    }
    var cur = stream.current();
    if (state.sol && (cur == "package" || cur == "model" || cur == "when" || cur == "connector"))
      state.level++;
    else if (state.sol && cur == "end" && state.level > 0)
      state.level--;
    state.tokenize = null;
    state.sol = false;
    if (keywords21.propertyIsEnumerable(cur))
      return "keyword";
    else if (builtin3.propertyIsEnumerable(cur))
      return "builtin";
    else if (atoms9.propertyIsEnumerable(cur))
      return "atom";
    else
      return "variable";
  }
  function tokenQIdent(stream, state) {
    while (stream.eat(/[^']/)) {
    }
    state.tokenize = null;
    state.sol = false;
    if (stream.eat("'"))
      return "variable";
    else
      return "error";
  }
  function tokenUnsignedNumber(stream, state) {
    stream.eatWhile(isDigit2);
    if (stream.eat(".")) {
      stream.eatWhile(isDigit2);
    }
    if (stream.eat("e") || stream.eat("E")) {
      if (!stream.eat("-"))
        stream.eat("+");
      stream.eatWhile(isDigit2);
    }
    state.tokenize = null;
    state.sol = false;
    return "number";
  }
  var keywords21, builtin3, atoms9, completions, isSingleOperatorChar, isDoubleOperatorChar, isDigit2, isNonDigit, modelica;
  var init_modelica = __esm({
    "node_modules/@codemirror/legacy-modes/mode/modelica.js"() {
      keywords21 = words9("algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within");
      builtin3 = words9("abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh");
      atoms9 = words9("Real Boolean Integer String");
      completions = [].concat(Object.keys(keywords21), Object.keys(builtin3), Object.keys(atoms9));
      isSingleOperatorChar = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
      isDoubleOperatorChar = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
      isDigit2 = /[0-9]/;
      isNonDigit = /[_a-zA-Z]/;
      modelica = {
        name: "modelica",
        startState: function() {
          return {
            tokenize: null,
            level: 0,
            sol: true
          };
        },
        token: function(stream, state) {
          if (state.tokenize != null) {
            return state.tokenize(stream, state);
          }
          if (stream.sol()) {
            state.sol = true;
          }
          if (stream.eatSpace()) {
            state.tokenize = null;
            return null;
          }
          var ch2 = stream.next();
          if (ch2 == "/" && stream.eat("/")) {
            state.tokenize = tokenLineComment;
          } else if (ch2 == "/" && stream.eat("*")) {
            state.tokenize = tokenBlockComment;
          } else if (isDoubleOperatorChar.test(ch2 + stream.peek())) {
            stream.next();
            state.tokenize = null;
            return "operator";
          } else if (isSingleOperatorChar.test(ch2)) {
            state.tokenize = null;
            return "operator";
          } else if (isNonDigit.test(ch2)) {
            state.tokenize = tokenIdent;
          } else if (ch2 == "'" && stream.peek() && stream.peek() != "'") {
            state.tokenize = tokenQIdent;
          } else if (ch2 == '"') {
            state.tokenize = tokenString9;
          } else if (isDigit2.test(ch2)) {
            state.tokenize = tokenUnsignedNumber;
          } else {
            state.tokenize = null;
            return "error";
          }
          return state.tokenize(stream, state);
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != null)
            return null;
          var level = state.level;
          if (/(algorithm)/.test(textAfter))
            level--;
          if (/(equation)/.test(textAfter))
            level--;
          if (/(initial algorithm)/.test(textAfter))
            level--;
          if (/(initial equation)/.test(textAfter))
            level--;
          if (/(end)/.test(textAfter))
            level--;
          if (level > 0)
            return cx2.unit * level;
          else
            return 0;
        },
        languageData: {
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          autocomplete: completions
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/mumps.js
  var mumps_exports = {};
  __export(mumps_exports, {
    mumps: () => mumps
  });
  function wordRegexp6(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
  }
  function tokenBase19(stream, state) {
    if (stream.sol()) {
      state.label = true;
      state.commandMode = 0;
    }
    var ch2 = stream.peek();
    if (ch2 == " " || ch2 == "	") {
      state.label = false;
      if (state.commandMode == 0)
        state.commandMode = 1;
      else if (state.commandMode < 0 || state.commandMode == 2)
        state.commandMode = 0;
    } else if (ch2 != "." && state.commandMode > 0) {
      if (ch2 == ":")
        state.commandMode = -1;
      else
        state.commandMode = 2;
    }
    if (ch2 === "(" || ch2 === "	")
      state.label = false;
    if (ch2 === ";") {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
      return "number";
    if (ch2 == '"') {
      if (stream.skipTo('"')) {
        stream.next();
        return "string";
      } else {
        stream.skipToEnd();
        return "error";
      }
    }
    if (stream.match(doubleOperators) || stream.match(singleOperators2))
      return "operator";
    if (stream.match(singleDelimiters))
      return null;
    if (brackets.test(ch2)) {
      stream.next();
      return "bracket";
    }
    if (state.commandMode > 0 && stream.match(command))
      return "controlKeyword";
    if (stream.match(intrinsicFuncs))
      return "builtin";
    if (stream.match(identifiers5))
      return "variable";
    if (ch2 === "$" || ch2 === "^") {
      stream.next();
      return "builtin";
    }
    if (ch2 === "@") {
      stream.next();
      return "string.special";
    }
    if (/[\w%]/.test(ch2)) {
      stream.eatWhile(/[\w%]/);
      return "variable";
    }
    stream.next();
    return "error";
  }
  var singleOperators2, doubleOperators, singleDelimiters, brackets, identifiers5, commandKeywords, intrinsicFuncsWords, intrinsicFuncs, command, mumps;
  var init_mumps = __esm({
    "node_modules/@codemirror/legacy-modes/mode/mumps.js"() {
      singleOperators2 = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
      doubleOperators = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
      singleDelimiters = new RegExp("^[\\.,:]");
      brackets = new RegExp("[()]");
      identifiers5 = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
      commandKeywords = ["break", "close", "do", "else", "for", "goto", "halt", "hang", "if", "job", "kill", "lock", "merge", "new", "open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
      intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
      intrinsicFuncs = wordRegexp6(intrinsicFuncsWords);
      command = wordRegexp6(commandKeywords);
      mumps = {
        name: "mumps",
        startState: function() {
          return {
            label: false,
            commandMode: 0
          };
        },
        token: function(stream, state) {
          var style2 = tokenBase19(stream, state);
          if (state.label)
            return "tag";
          return style2;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/mbox.js
  var mbox_exports = {};
  __export(mbox_exports, {
    mbox: () => mbox
  });
  function styleForHeader(header3) {
    if (header3 === "Subject")
      return "header";
    return "string";
  }
  function readToken3(stream, state) {
    if (stream.sol()) {
      state.inSeparator = false;
      if (state.inHeader && stream.match(whitespace2)) {
        return null;
      } else {
        state.inHeader = false;
        state.header = null;
      }
      if (stream.match(separator)) {
        state.inHeaders = true;
        state.inSeparator = true;
        return "atom";
      }
      var match3;
      var emailPermitted = false;
      if ((match3 = stream.match(rfc2822HeaderNoEmail)) || (emailPermitted = true) && (match3 = stream.match(rfc2822Header))) {
        state.inHeaders = true;
        state.inHeader = true;
        state.emailPermitted = emailPermitted;
        state.header = match3[1];
        return "atom";
      }
      if (state.inHeaders && (match3 = stream.match(header2))) {
        state.inHeader = true;
        state.emailPermitted = true;
        state.header = match3[1];
        return "atom";
      }
      state.inHeaders = false;
      stream.skipToEnd();
      return null;
    }
    if (state.inSeparator) {
      if (stream.match(email))
        return "link";
      if (stream.match(untilEmail))
        return "atom";
      stream.skipToEnd();
      return "atom";
    }
    if (state.inHeader) {
      var style2 = styleForHeader(state.header);
      if (state.emailPermitted) {
        if (stream.match(bracketedEmail))
          return style2 + " link";
        if (stream.match(untilBracketedEmail))
          return style2;
      }
      stream.skipToEnd();
      return style2;
    }
    stream.skipToEnd();
    return null;
  }
  var rfc28222, rfc2822NoEmail, whitespace2, separator, rfc2822Header, rfc2822HeaderNoEmail, header2, email, untilEmail, bracketedEmail, untilBracketedEmail, mbox;
  var init_mbox = __esm({
    "node_modules/@codemirror/legacy-modes/mode/mbox.js"() {
      rfc28222 = [
        "From",
        "Sender",
        "Reply-To",
        "To",
        "Cc",
        "Bcc",
        "Message-ID",
        "In-Reply-To",
        "References",
        "Resent-From",
        "Resent-Sender",
        "Resent-To",
        "Resent-Cc",
        "Resent-Bcc",
        "Resent-Message-ID",
        "Return-Path",
        "Received"
      ];
      rfc2822NoEmail = [
        "Date",
        "Subject",
        "Comments",
        "Keywords",
        "Resent-Date"
      ];
      whitespace2 = /^[ \t]/;
      separator = /^From /;
      rfc2822Header = new RegExp("^(" + rfc28222.join("|") + "): ");
      rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
      header2 = /^[^:]+:/;
      email = /^[^ ]+@[^ ]+/;
      untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
      bracketedEmail = /^<.*?>/;
      untilBracketedEmail = /^.*?(?=<.*>)/;
      mbox = {
        name: "mbox",
        startState: function() {
          return {
            // Is in a mbox separator
            inSeparator: false,
            // Is in a mail header
            inHeader: false,
            // If bracketed email is permitted. Only applicable when inHeader
            emailPermitted: false,
            // Name of current header
            header: null,
            // Is in a region of mail headers
            inHeaders: false
          };
        },
        token: readToken3,
        blankLine: function(state) {
          state.inHeaders = state.inSeparator = state.inHeader = false;
        },
        languageData: {
          autocomplete: rfc28222.concat(rfc2822NoEmail)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/nginx.js
  var nginx_exports = {};
  __export(nginx_exports, {
    nginx: () => nginx
  });
  function words10(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function ret3(style2, tp) {
    type4 = tp;
    return style2;
  }
  function tokenBase20(stream, state) {
    stream.eatWhile(/[\w\$_]/);
    var cur = stream.current();
    if (keywords22.propertyIsEnumerable(cur)) {
      return "keyword";
    } else if (keywords_block.propertyIsEnumerable(cur)) {
      return "controlKeyword";
    } else if (keywords_important.propertyIsEnumerable(cur)) {
      return "controlKeyword";
    }
    var ch2 = stream.next();
    if (ch2 == "@") {
      stream.eatWhile(/[\w\\\-]/);
      return ret3("meta", stream.current());
    } else if (ch2 == "/" && stream.eat("*")) {
      state.tokenize = tokenCComment2;
      return tokenCComment2(stream, state);
    } else if (ch2 == "<" && stream.eat("!")) {
      state.tokenize = tokenSGMLComment2;
      return tokenSGMLComment2(stream, state);
    } else if (ch2 == "=")
      ret3(null, "compare");
    else if ((ch2 == "~" || ch2 == "|") && stream.eat("="))
      return ret3(null, "compare");
    else if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString10(ch2);
      return state.tokenize(stream, state);
    } else if (ch2 == "#") {
      stream.skipToEnd();
      return ret3("comment", "comment");
    } else if (ch2 == "!") {
      stream.match(/^\s*\w*/);
      return ret3("keyword", "important");
    } else if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w.%]/);
      return ret3("number", "unit");
    } else if (/[,.+>*\/]/.test(ch2)) {
      return ret3(null, "select-op");
    } else if (/[;{}:\[\]]/.test(ch2)) {
      return ret3(null, ch2);
    } else {
      stream.eatWhile(/[\w\\\-]/);
      return ret3("variable", "variable");
    }
  }
  function tokenCComment2(stream, state) {
    var maybeEnd = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (maybeEnd && ch2 == "/") {
        state.tokenize = tokenBase20;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return ret3("comment", "comment");
  }
  function tokenSGMLComment2(stream, state) {
    var dashes = 0, ch2;
    while ((ch2 = stream.next()) != null) {
      if (dashes >= 2 && ch2 == ">") {
        state.tokenize = tokenBase20;
        break;
      }
      dashes = ch2 == "-" ? dashes + 1 : 0;
    }
    return ret3("comment", "comment");
  }
  function tokenString10(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped)
          break;
        escaped = !escaped && ch2 == "\\";
      }
      if (!escaped)
        state.tokenize = tokenBase20;
      return ret3("string", "string");
    };
  }
  var keywords22, keywords_block, keywords_important, type4, nginx;
  var init_nginx = __esm({
    "node_modules/@codemirror/legacy-modes/mode/nginx.js"() {
      keywords22 = words10(
        /* ngxDirectiveControl */
        "break return rewrite set accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
      );
      keywords_block = words10(
        /* ngxDirectiveBlock */
        "http mail events server types location upstream charset_map limit_except if geo map"
      );
      keywords_important = words10(
        /* ngxDirectiveImportant */
        "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
      );
      nginx = {
        name: "nginx",
        startState: function() {
          return {
            tokenize: tokenBase20,
            baseIndent: 0,
            stack: []
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          type4 = null;
          var style2 = state.tokenize(stream, state);
          var context = state.stack[state.stack.length - 1];
          if (type4 == "hash" && context == "rule")
            style2 = "atom";
          else if (style2 == "variable") {
            if (context == "rule")
              style2 = "number";
            else if (!context || context == "@media{")
              style2 = "tag";
          }
          if (context == "rule" && /^[\{\};]$/.test(type4))
            state.stack.pop();
          if (type4 == "{") {
            if (context == "@media")
              state.stack[state.stack.length - 1] = "@media{";
            else
              state.stack.push("{");
          } else if (type4 == "}")
            state.stack.pop();
          else if (type4 == "@media")
            state.stack.push("@media");
          else if (context == "{" && type4 != "comment")
            state.stack.push("rule");
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var n2 = state.stack.length;
          if (/^\}/.test(textAfter))
            n2 -= state.stack[state.stack.length - 1] == "rule" ? 2 : 1;
          return state.baseIndent + n2 * cx2.unit;
        },
        languageData: {
          indentOnInput: /^\s*\}$/
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/nsis.js
  var nsis_exports = {};
  __export(nsis_exports, {
    nsis: () => nsis
  });
  var nsis;
  var init_nsis = __esm({
    "node_modules/@codemirror/legacy-modes/mode/nsis.js"() {
      init_simple_mode();
      nsis = simpleMode({
        start: [
          // Numbers
          { regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number" },
          // Strings
          { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
          { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
          { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },
          // Compile Time Commands
          { regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i, token: "keyword" },
          // Conditional Compilation
          { regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i, token: "keyword", indent: true },
          { regex: /^\s*(?:\!(else|endif|macroend))\b/i, token: "keyword", dedent: true },
          // Runtime Commands
          { regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Target|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i, token: "keyword" },
          { regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i, token: "keyword", indent: true },
          { regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i, token: "keyword", dedent: true },
          // Command Options
          { regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i, token: "atom" },
          { regex: /\b(?:admin|all|amd64-unicode|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|x-86-(ansi|unicode)|zlib)\b/i, token: "builtin" },
          // LogicLib.nsh
          { regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:2|3|4|5|Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i, token: "variable-2", indent: true },
          // FileFunc.nsh
          { regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i, token: "variable-2", dedent: true },
          // Memento.nsh
          { regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i, token: "variable-2", dedent: true },
          // TextFunc.nsh
          { regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i, token: "variable-2", dedent: true },
          // WinVer.nsh
          { regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i, token: "variable", dedent: true },
          // WordFunc.nsh
          { regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i, token: "keyword", dedent: true },
          // x64.nsh
          { regex: /\$\{(?:RunningX64)\}/i, token: "variable", dedent: true },
          { regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i, token: "keyword", dedent: true },
          // Line Comment
          { regex: /(#|;).*/, token: "comment" },
          // Block Comment
          { regex: /\/\*/, token: "comment", next: "comment" },
          // Operator
          { regex: /[-+\/*=<>!]+/, token: "operator" },
          // Variable
          { regex: /\$\w[\w\.]*/, token: "variable" },
          // Constant
          { regex: /\${[\!\w\.:-]+}/, token: "variableName.constant" },
          // Language String
          { regex: /\$\([\!\w\.:-]+\)/, token: "atom" }
        ],
        comment: [
          { regex: /.*?\*\//, token: "comment", next: "start" },
          { regex: /.*/, token: "comment" }
        ],
        languageData: {
          name: "nsis",
          indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
          commentTokens: { line: "#", block: { open: "/*", close: "*/" } }
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/ntriples.js
  var ntriples_exports = {};
  __export(ntriples_exports, {
    ntriples: () => ntriples
  });
  function transitState(currState, c2) {
    var currLocation = currState.location;
    var ret4;
    if (currLocation == Location.PRE_SUBJECT && c2 == "<")
      ret4 = Location.WRITING_SUB_URI;
    else if (currLocation == Location.PRE_SUBJECT && c2 == "_")
      ret4 = Location.WRITING_BNODE_URI;
    else if (currLocation == Location.PRE_PRED && c2 == "<")
      ret4 = Location.WRITING_PRED_URI;
    else if (currLocation == Location.PRE_OBJ && c2 == "<")
      ret4 = Location.WRITING_OBJ_URI;
    else if (currLocation == Location.PRE_OBJ && c2 == "_")
      ret4 = Location.WRITING_OBJ_BNODE;
    else if (currLocation == Location.PRE_OBJ && c2 == '"')
      ret4 = Location.WRITING_OBJ_LITERAL;
    else if (currLocation == Location.WRITING_SUB_URI && c2 == ">")
      ret4 = Location.PRE_PRED;
    else if (currLocation == Location.WRITING_BNODE_URI && c2 == " ")
      ret4 = Location.PRE_PRED;
    else if (currLocation == Location.WRITING_PRED_URI && c2 == ">")
      ret4 = Location.PRE_OBJ;
    else if (currLocation == Location.WRITING_OBJ_URI && c2 == ">")
      ret4 = Location.POST_OBJ;
    else if (currLocation == Location.WRITING_OBJ_BNODE && c2 == " ")
      ret4 = Location.POST_OBJ;
    else if (currLocation == Location.WRITING_OBJ_LITERAL && c2 == '"')
      ret4 = Location.POST_OBJ;
    else if (currLocation == Location.WRITING_LIT_LANG && c2 == " ")
      ret4 = Location.POST_OBJ;
    else if (currLocation == Location.WRITING_LIT_TYPE && c2 == ">")
      ret4 = Location.POST_OBJ;
    else if (currLocation == Location.WRITING_OBJ_LITERAL && c2 == "@")
      ret4 = Location.WRITING_LIT_LANG;
    else if (currLocation == Location.WRITING_OBJ_LITERAL && c2 == "^")
      ret4 = Location.WRITING_LIT_TYPE;
    else if (c2 == " " && (currLocation == Location.PRE_SUBJECT || currLocation == Location.PRE_PRED || currLocation == Location.PRE_OBJ || currLocation == Location.POST_OBJ))
      ret4 = currLocation;
    else if (currLocation == Location.POST_OBJ && c2 == ".")
      ret4 = Location.PRE_SUBJECT;
    else
      ret4 = Location.ERROR;
    currState.location = ret4;
  }
  var Location, ntriples;
  var init_ntriples = __esm({
    "node_modules/@codemirror/legacy-modes/mode/ntriples.js"() {
      Location = {
        PRE_SUBJECT: 0,
        WRITING_SUB_URI: 1,
        WRITING_BNODE_URI: 2,
        PRE_PRED: 3,
        WRITING_PRED_URI: 4,
        PRE_OBJ: 5,
        WRITING_OBJ_URI: 6,
        WRITING_OBJ_BNODE: 7,
        WRITING_OBJ_LITERAL: 8,
        WRITING_LIT_LANG: 9,
        WRITING_LIT_TYPE: 10,
        POST_OBJ: 11,
        ERROR: 12
      };
      ntriples = {
        name: "ntriples",
        startState: function() {
          return {
            location: Location.PRE_SUBJECT,
            uris: [],
            anchors: [],
            bnodes: [],
            langs: [],
            types: []
          };
        },
        token: function(stream, state) {
          var ch2 = stream.next();
          if (ch2 == "<") {
            transitState(state, ch2);
            var parsedURI = "";
            stream.eatWhile(function(c2) {
              if (c2 != "#" && c2 != ">") {
                parsedURI += c2;
                return true;
              }
              return false;
            });
            state.uris.push(parsedURI);
            if (stream.match("#", false))
              return "variable";
            stream.next();
            transitState(state, ">");
            return "variable";
          }
          if (ch2 == "#") {
            var parsedAnchor = "";
            stream.eatWhile(function(c2) {
              if (c2 != ">" && c2 != " ") {
                parsedAnchor += c2;
                return true;
              }
              return false;
            });
            state.anchors.push(parsedAnchor);
            return "url";
          }
          if (ch2 == ">") {
            transitState(state, ">");
            return "variable";
          }
          if (ch2 == "_") {
            transitState(state, ch2);
            var parsedBNode = "";
            stream.eatWhile(function(c2) {
              if (c2 != " ") {
                parsedBNode += c2;
                return true;
              }
              return false;
            });
            state.bnodes.push(parsedBNode);
            stream.next();
            transitState(state, " ");
            return "builtin";
          }
          if (ch2 == '"') {
            transitState(state, ch2);
            stream.eatWhile(function(c2) {
              return c2 != '"';
            });
            stream.next();
            if (stream.peek() != "@" && stream.peek() != "^") {
              transitState(state, '"');
            }
            return "string";
          }
          if (ch2 == "@") {
            transitState(state, "@");
            var parsedLang = "";
            stream.eatWhile(function(c2) {
              if (c2 != " ") {
                parsedLang += c2;
                return true;
              }
              return false;
            });
            state.langs.push(parsedLang);
            stream.next();
            transitState(state, " ");
            return "string.special";
          }
          if (ch2 == "^") {
            stream.next();
            transitState(state, "^");
            var parsedType = "";
            stream.eatWhile(function(c2) {
              if (c2 != ">") {
                parsedType += c2;
                return true;
              }
              return false;
            });
            state.types.push(parsedType);
            stream.next();
            transitState(state, ">");
            return "variable";
          }
          if (ch2 == " ") {
            transitState(state, ch2);
          }
          if (ch2 == ".") {
            transitState(state, ch2);
          }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/octave.js
  var octave_exports = {};
  __export(octave_exports, {
    octave: () => octave
  });
  function wordRegexp7(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b");
  }
  function tokenTranspose(stream, state) {
    if (!stream.sol() && stream.peek() === "'") {
      stream.next();
      state.tokenize = tokenBase21;
      return "operator";
    }
    state.tokenize = tokenBase21;
    return tokenBase21(stream, state);
  }
  function tokenComment10(stream, state) {
    if (stream.match(/^.*%}/)) {
      state.tokenize = tokenBase21;
      return "comment";
    }
    ;
    stream.skipToEnd();
    return "comment";
  }
  function tokenBase21(stream, state) {
    if (stream.eatSpace())
      return null;
    if (stream.match("%{")) {
      state.tokenize = tokenComment10;
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^[%#]/)) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^[0-9\.+-]/, false)) {
      if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
        stream.tokenize = tokenBase21;
        return "number";
      }
      ;
      if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) {
        return "number";
      }
      ;
      if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) {
        return "number";
      }
      ;
    }
    if (stream.match(wordRegexp7(["nan", "NaN", "inf", "Inf"]))) {
      return "number";
    }
    ;
    var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);
    if (m) {
      return m[1] ? "string" : "error";
    }
    if (stream.match(keywords23)) {
      return "keyword";
    }
    ;
    if (stream.match(builtins6)) {
      return "builtin";
    }
    ;
    if (stream.match(identifiers6)) {
      return "variable";
    }
    ;
    if (stream.match(singleOperators3) || stream.match(doubleOperators2)) {
      return "operator";
    }
    ;
    if (stream.match(singleDelimiters2) || stream.match(doubleDelimiters) || stream.match(tripleDelimiters)) {
      return null;
    }
    ;
    if (stream.match(expressionEnd)) {
      state.tokenize = tokenTranspose;
      return null;
    }
    ;
    stream.next();
    return "error";
  }
  var singleOperators3, singleDelimiters2, doubleOperators2, doubleDelimiters, tripleDelimiters, expressionEnd, identifiers6, builtins6, keywords23, octave;
  var init_octave = __esm({
    "node_modules/@codemirror/legacy-modes/mode/octave.js"() {
      singleOperators3 = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
      singleDelimiters2 = new RegExp("^[\\(\\[\\{\\},:=;\\.]");
      doubleOperators2 = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
      doubleDelimiters = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
      tripleDelimiters = new RegExp("^((>>=)|(<<=))");
      expressionEnd = new RegExp("^[\\]\\)]");
      identifiers6 = new RegExp("^[_A-Za-z\xA1-\uFFFF][_A-Za-z0-9\xA1-\uFFFF]*");
      builtins6 = wordRegexp7([
        "error",
        "eval",
        "function",
        "abs",
        "acos",
        "atan",
        "asin",
        "cos",
        "cosh",
        "exp",
        "log",
        "prod",
        "sum",
        "log10",
        "max",
        "min",
        "sign",
        "sin",
        "sinh",
        "sqrt",
        "tan",
        "reshape",
        "break",
        "zeros",
        "default",
        "margin",
        "round",
        "ones",
        "rand",
        "syn",
        "ceil",
        "floor",
        "size",
        "clear",
        "zeros",
        "eye",
        "mean",
        "std",
        "cov",
        "det",
        "eig",
        "inv",
        "norm",
        "rank",
        "trace",
        "expm",
        "logm",
        "sqrtm",
        "linspace",
        "plot",
        "title",
        "xlabel",
        "ylabel",
        "legend",
        "text",
        "grid",
        "meshgrid",
        "mesh",
        "num2str",
        "fft",
        "ifft",
        "arrayfun",
        "cellfun",
        "input",
        "fliplr",
        "flipud",
        "ismember"
      ]);
      keywords23 = wordRegexp7([
        "return",
        "case",
        "switch",
        "else",
        "elseif",
        "end",
        "endif",
        "endfunction",
        "if",
        "otherwise",
        "do",
        "for",
        "while",
        "try",
        "catch",
        "classdef",
        "properties",
        "events",
        "methods",
        "global",
        "persistent",
        "endfor",
        "endwhile",
        "printf",
        "sprintf",
        "disp",
        "until",
        "continue",
        "pkg"
      ]);
      octave = {
        name: "octave",
        startState: function() {
          return {
            tokenize: tokenBase21
          };
        },
        token: function(stream, state) {
          var style2 = state.tokenize(stream, state);
          if (style2 === "number" || style2 === "variable") {
            state.tokenize = tokenTranspose;
          }
          return style2;
        },
        languageData: {
          commentTokens: { line: "%" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/oz.js
  var oz_exports = {};
  __export(oz_exports, {
    oz: () => oz
  });
  function wordRegexp8(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b");
  }
  function tokenBase22(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    if (stream.match(/[{}]/)) {
      return "bracket";
    }
    if (stream.match("[]")) {
      return "keyword";
    }
    if (stream.match(tripleOperators) || stream.match(doubleOperators3)) {
      return "operator";
    }
    if (stream.match(atoms10)) {
      return "atom";
    }
    var matched = stream.match(openingKeywords);
    if (matched) {
      if (!state.doInCurrentLine)
        state.currentIndent++;
      else
        state.doInCurrentLine = false;
      if (matched[0] == "proc" || matched[0] == "fun")
        state.tokenize = tokenFunProc;
      else if (matched[0] == "class")
        state.tokenize = tokenClass;
      else if (matched[0] == "meth")
        state.tokenize = tokenMeth;
      return "keyword";
    }
    if (stream.match(middleKeywords) || stream.match(commonKeywords3)) {
      return "keyword";
    }
    if (stream.match(endKeywords)) {
      state.currentIndent--;
      return "keyword";
    }
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString11(ch2);
      return state.tokenize(stream, state);
    }
    if (/[~\d]/.test(ch2)) {
      if (ch2 == "~") {
        if (!/^[0-9]/.test(stream.peek()))
          return null;
        else if (stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
          return "number";
      }
      if (ch2 == "0" && stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
        return "number";
      return null;
    }
    if (ch2 == "%") {
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment11;
        return tokenComment11(stream, state);
      }
    }
    if (singleOperators4.test(ch2)) {
      return "operator";
    }
    stream.eatWhile(/\w/);
    return "variable";
  }
  function tokenClass(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
    state.tokenize = tokenBase22;
    return "type";
  }
  function tokenMeth(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
    state.tokenize = tokenBase22;
    return "def";
  }
  function tokenFunProc(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    if (!state.hasPassedFirstStage && stream.eat("{")) {
      state.hasPassedFirstStage = true;
      return "bracket";
    } else if (state.hasPassedFirstStage) {
      stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
      state.hasPassedFirstStage = false;
      state.tokenize = tokenBase22;
      return "def";
    } else {
      state.tokenize = tokenBase22;
      return null;
    }
  }
  function tokenComment11(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase22;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenString11(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !escaped)
        state.tokenize = tokenBase22;
      return "string";
    };
  }
  function buildElectricInputRegEx() {
    var allClosings = middle.concat(end);
    return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
  }
  var singleOperators4, doubleOperators3, tripleOperators, middle, end, atoms10, commonKeywords3, openingKeywords, middleKeywords, endKeywords, oz;
  var init_oz = __esm({
    "node_modules/@codemirror/legacy-modes/mode/oz.js"() {
      singleOperators4 = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
      doubleOperators3 = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
      tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;
      middle = [
        "in",
        "then",
        "else",
        "of",
        "elseof",
        "elsecase",
        "elseif",
        "catch",
        "finally",
        "with",
        "require",
        "prepare",
        "import",
        "export",
        "define",
        "do"
      ];
      end = ["end"];
      atoms10 = wordRegexp8(["true", "false", "nil", "unit"]);
      commonKeywords3 = wordRegexp8([
        "andthen",
        "at",
        "attr",
        "declare",
        "feat",
        "from",
        "lex",
        "mod",
        "div",
        "mode",
        "orelse",
        "parser",
        "prod",
        "prop",
        "scanner",
        "self",
        "syn",
        "token"
      ]);
      openingKeywords = wordRegexp8([
        "local",
        "proc",
        "fun",
        "case",
        "class",
        "if",
        "cond",
        "or",
        "dis",
        "choice",
        "not",
        "thread",
        "try",
        "raise",
        "lock",
        "for",
        "suchthat",
        "meth",
        "functor"
      ]);
      middleKeywords = wordRegexp8(middle);
      endKeywords = wordRegexp8(end);
      oz = {
        name: "oz",
        startState: function() {
          return {
            tokenize: tokenBase22,
            currentIndent: 0,
            doInCurrentLine: false,
            hasPassedFirstStage: false
          };
        },
        token: function(stream, state) {
          if (stream.sol())
            state.doInCurrentLine = 0;
          return state.tokenize(stream, state);
        },
        indent: function(state, textAfter, cx2) {
          var trueText = textAfter.replace(/^\s+|\s+$/g, "");
          if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\[])/))
            return cx2.unit * (state.currentIndent - 1);
          if (state.currentIndent < 0)
            return 0;
          return state.currentIndent * cx2.unit;
        },
        languageData: {
          indentOnInut: buildElectricInputRegEx(),
          commentTokens: { line: "%", block: { open: "/*", close: "*/" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/pascal.js
  var pascal_exports = {};
  __export(pascal_exports, {
    pascal: () => pascal
  });
  function words11(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenBase23(stream, state) {
    var ch2 = stream.next();
    if (ch2 == "#" && state.startOfLine) {
      stream.skipToEnd();
      return "meta";
    }
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString12(ch2);
      return state.tokenize(stream, state);
    }
    if (ch2 == "(" && stream.eat("*")) {
      state.tokenize = tokenComment12;
      return tokenComment12(stream, state);
    }
    if (ch2 == "{") {
      state.tokenize = tokenCommentBraces;
      return tokenCommentBraces(stream, state);
    }
    if (/[\[\]\(\),;\:\.]/.test(ch2)) {
      return null;
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (ch2 == "/") {
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar8.test(ch2)) {
      stream.eatWhile(isOperatorChar8);
      return "operator";
    }
    stream.eatWhile(/[\w\$_]/);
    var cur = stream.current();
    if (keywords24.propertyIsEnumerable(cur))
      return "keyword";
    if (atoms11.propertyIsEnumerable(cur))
      return "atom";
    return "variable";
  }
  function tokenString12(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !escaped)
        state.tokenize = null;
      return "string";
    };
  }
  function tokenComment12(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == ")" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenCommentBraces(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "}") {
        state.tokenize = null;
        break;
      }
    }
    return "comment";
  }
  var keywords24, atoms11, isOperatorChar8, pascal;
  var init_pascal = __esm({
    "node_modules/@codemirror/legacy-modes/mode/pascal.js"() {
      keywords24 = words11(
        "absolute and array asm begin case const constructor destructor div do downto else end file for function goto if implementation in inherited inline interface label mod nil not object of operator or packed procedure program record reintroduce repeat self set shl shr string then to type unit until uses var while with xor as class dispinterface except exports finalization finally initialization inline is library on out packed property raise resourcestring threadvar try absolute abstract alias assembler bitpacked break cdecl continue cppdecl cvar default deprecated dynamic enumerator experimental export external far far16 forward generic helper implements index interrupt iocheck local message name near nodefault noreturn nostackframe oldfpccall otherwise overload override pascal platform private protected public published read register reintroduce result safecall saveregisters softfloat specialize static stdcall stored strict unaligned unimplemented varargs virtual write"
      );
      atoms11 = { "null": true };
      isOperatorChar8 = /[+\-*&%=<>!?|\/]/;
      pascal = {
        name: "pascal",
        startState: function() {
          return { tokenize: null };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = (state.tokenize || tokenBase23)(stream, state);
          if (style2 == "comment" || style2 == "meta")
            return style2;
          return style2;
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { block: { open: "(*", close: "*)" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/perl.js
  var perl_exports = {};
  __export(perl_exports, {
    perl: () => perl
  });
  function look(stream, c2) {
    return stream.string.charAt(stream.pos + (c2 || 0));
  }
  function prefix(stream, c2) {
    if (c2) {
      var x = stream.pos - c2;
      return stream.string.substr(x >= 0 ? x : 0, c2);
    } else {
      return stream.string.substr(0, stream.pos - 1);
    }
  }
  function suffix(stream, c2) {
    var y = stream.string.length;
    var x = y - stream.pos + 1;
    return stream.string.substr(stream.pos, c2 && c2 < y ? c2 : x);
  }
  function eatSuffix(stream, c2) {
    var x = stream.pos + c2;
    var y;
    if (x <= 0)
      stream.pos = 0;
    else if (x >= (y = stream.string.length - 1))
      stream.pos = y;
    else
      stream.pos = x;
  }
  function tokenChain(stream, state, chain12, style2, tail) {
    state.chain = null;
    state.style = null;
    state.tail = null;
    state.tokenize = function(stream2, state2) {
      var e = false, c2, i = 0;
      while (c2 = stream2.next()) {
        if (c2 === chain12[i] && !e) {
          if (chain12[++i] !== void 0) {
            state2.chain = chain12[i];
            state2.style = style2;
            state2.tail = tail;
          } else if (tail)
            stream2.eatWhile(tail);
          state2.tokenize = tokenPerl;
          return style2;
        }
        e = !e && c2 == "\\";
      }
      return style2;
    };
    return state.tokenize(stream, state);
  }
  function tokenSOMETHING(stream, state, string3) {
    state.tokenize = function(stream2, state2) {
      if (stream2.string == string3)
        state2.tokenize = tokenPerl;
      stream2.skipToEnd();
      return "string";
    };
    return state.tokenize(stream, state);
  }
  function tokenPerl(stream, state) {
    if (stream.eatSpace())
      return null;
    if (state.chain)
      return tokenChain(stream, state, state.chain, state.style, state.tail);
    if (stream.match(/^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/))
      return "number";
    if (stream.match(/^<<(?=[_a-zA-Z])/)) {
      stream.eatWhile(/\w/);
      return tokenSOMETHING(stream, state, stream.current().substr(2));
    }
    if (stream.sol() && stream.match(/^\=item(?!\w)/)) {
      return tokenSOMETHING(stream, state, "=cut");
    }
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      if (prefix(stream, 3) == "<<" + ch2) {
        var p = stream.pos;
        stream.eatWhile(/\w/);
        var n2 = stream.current().substr(1);
        if (n2 && stream.eat(ch2))
          return tokenSOMETHING(stream, state, n2);
        stream.pos = p;
      }
      return tokenChain(stream, state, [ch2], "string");
    }
    if (ch2 == "q") {
      var c2 = look(stream, -2);
      if (!(c2 && /\w/.test(c2))) {
        c2 = look(stream, 0);
        if (c2 == "x") {
          c2 = look(stream, 1);
          if (c2 == "(") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
          }
          if (c2 == "[") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
          }
          if (c2 == "{") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
          }
          if (c2 == "<") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
          }
          if (/[\^'"!~\/]/.test(c2)) {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, [stream.eat(c2)], RXstyle, RXmodifiers);
          }
        } else if (c2 == "q") {
          c2 = look(stream, 1);
          if (c2 == "(") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [")"], "string");
          }
          if (c2 == "[") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["]"], "string");
          }
          if (c2 == "{") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["}"], "string");
          }
          if (c2 == "<") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [">"], "string");
          }
          if (/[\^'"!~\/]/.test(c2)) {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, [stream.eat(c2)], "string");
          }
        } else if (c2 == "w") {
          c2 = look(stream, 1);
          if (c2 == "(") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [")"], "bracket");
          }
          if (c2 == "[") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["]"], "bracket");
          }
          if (c2 == "{") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["}"], "bracket");
          }
          if (c2 == "<") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [">"], "bracket");
          }
          if (/[\^'"!~\/]/.test(c2)) {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, [stream.eat(c2)], "bracket");
          }
        } else if (c2 == "r") {
          c2 = look(stream, 1);
          if (c2 == "(") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
          }
          if (c2 == "[") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
          }
          if (c2 == "{") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
          }
          if (c2 == "<") {
            eatSuffix(stream, 2);
            return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
          }
          if (/[\^'"!~\/]/.test(c2)) {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, [stream.eat(c2)], RXstyle, RXmodifiers);
          }
        } else if (/[\^'"!~\/(\[{<]/.test(c2)) {
          if (c2 == "(") {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, [")"], "string");
          }
          if (c2 == "[") {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, ["]"], "string");
          }
          if (c2 == "{") {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, ["}"], "string");
          }
          if (c2 == "<") {
            eatSuffix(stream, 1);
            return tokenChain(stream, state, [">"], "string");
          }
          if (/[\^'"!~\/]/.test(c2)) {
            return tokenChain(stream, state, [stream.eat(c2)], "string");
          }
        }
      }
    }
    if (ch2 == "m") {
      var c2 = look(stream, -2);
      if (!(c2 && /\w/.test(c2))) {
        c2 = stream.eat(/[(\[{<\^'"!~\/]/);
        if (c2) {
          if (/[\^'"!~\/]/.test(c2)) {
            return tokenChain(stream, state, [c2], RXstyle, RXmodifiers);
          }
          if (c2 == "(") {
            return tokenChain(stream, state, [")"], RXstyle, RXmodifiers);
          }
          if (c2 == "[") {
            return tokenChain(stream, state, ["]"], RXstyle, RXmodifiers);
          }
          if (c2 == "{") {
            return tokenChain(stream, state, ["}"], RXstyle, RXmodifiers);
          }
          if (c2 == "<") {
            return tokenChain(stream, state, [">"], RXstyle, RXmodifiers);
          }
        }
      }
    }
    if (ch2 == "s") {
      var c2 = /[\/>\]})\w]/.test(look(stream, -2));
      if (!c2) {
        c2 = stream.eat(/[(\[{<\^'"!~\/]/);
        if (c2) {
          if (c2 == "[")
            return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
          if (c2 == "{")
            return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
          if (c2 == "<")
            return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
          if (c2 == "(")
            return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
          return tokenChain(stream, state, [c2, c2], RXstyle, RXmodifiers);
        }
      }
    }
    if (ch2 == "y") {
      var c2 = /[\/>\]})\w]/.test(look(stream, -2));
      if (!c2) {
        c2 = stream.eat(/[(\[{<\^'"!~\/]/);
        if (c2) {
          if (c2 == "[")
            return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
          if (c2 == "{")
            return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
          if (c2 == "<")
            return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
          if (c2 == "(")
            return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
          return tokenChain(stream, state, [c2, c2], RXstyle, RXmodifiers);
        }
      }
    }
    if (ch2 == "t") {
      var c2 = /[\/>\]})\w]/.test(look(stream, -2));
      if (!c2) {
        c2 = stream.eat("r");
        if (c2) {
          c2 = stream.eat(/[(\[{<\^'"!~\/]/);
          if (c2) {
            if (c2 == "[")
              return tokenChain(stream, state, ["]", "]"], RXstyle, RXmodifiers);
            if (c2 == "{")
              return tokenChain(stream, state, ["}", "}"], RXstyle, RXmodifiers);
            if (c2 == "<")
              return tokenChain(stream, state, [">", ">"], RXstyle, RXmodifiers);
            if (c2 == "(")
              return tokenChain(stream, state, [")", ")"], RXstyle, RXmodifiers);
            return tokenChain(stream, state, [c2, c2], RXstyle, RXmodifiers);
          }
        }
      }
    }
    if (ch2 == "`") {
      return tokenChain(stream, state, [ch2], "builtin");
    }
    if (ch2 == "/") {
      if (!/~\s*$/.test(prefix(stream)))
        return "operator";
      else
        return tokenChain(stream, state, [ch2], RXstyle, RXmodifiers);
    }
    if (ch2 == "$") {
      var p = stream.pos;
      if (stream.eatWhile(/\d/) || stream.eat("{") && stream.eatWhile(/\d/) && stream.eat("}"))
        return "builtin";
      else
        stream.pos = p;
    }
    if (/[$@%]/.test(ch2)) {
      var p = stream.pos;
      if (stream.eat("^") && stream.eat(/[A-Z]/) || !/[@$%&]/.test(look(stream, -2)) && stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)) {
        var c2 = stream.current();
        if (PERL[c2])
          return "builtin";
      }
      stream.pos = p;
    }
    if (/[$@%&]/.test(ch2)) {
      if (stream.eatWhile(/[\w$]/) || stream.eat("{") && stream.eatWhile(/[\w$]/) && stream.eat("}")) {
        var c2 = stream.current();
        if (PERL[c2])
          return "builtin";
        else
          return "variable";
      }
    }
    if (ch2 == "#") {
      if (look(stream, -2) != "$") {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch2)) {
      var p = stream.pos;
      stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
      if (PERL[stream.current()])
        return "operator";
      else
        stream.pos = p;
    }
    if (ch2 == "_") {
      if (stream.pos == 1) {
        if (suffix(stream, 6) == "_END__") {
          return tokenChain(stream, state, ["\0"], "comment");
        } else if (suffix(stream, 7) == "_DATA__") {
          return tokenChain(stream, state, ["\0"], "builtin");
        } else if (suffix(stream, 7) == "_C__") {
          return tokenChain(stream, state, ["\0"], "string");
        }
      }
    }
    if (/\w/.test(ch2)) {
      var p = stream.pos;
      if (look(stream, -2) == "{" && (look(stream, 0) == "}" || stream.eatWhile(/\w/) && look(stream, 0) == "}"))
        return "string";
      else
        stream.pos = p;
    }
    if (/[A-Z]/.test(ch2)) {
      var l2 = look(stream, -2);
      var p = stream.pos;
      stream.eatWhile(/[A-Z_]/);
      if (/[\da-z]/.test(look(stream, 0))) {
        stream.pos = p;
      } else {
        var c2 = PERL[stream.current()];
        if (!c2)
          return "meta";
        if (c2[1])
          c2 = c2[0];
        if (l2 != ":") {
          if (c2 == 1)
            return "keyword";
          else if (c2 == 2)
            return "def";
          else if (c2 == 3)
            return "atom";
          else if (c2 == 4)
            return "operator";
          else if (c2 == 5)
            return "builtin";
          else
            return "meta";
        } else
          return "meta";
      }
    }
    if (/[a-zA-Z_]/.test(ch2)) {
      var l2 = look(stream, -2);
      stream.eatWhile(/\w/);
      var c2 = PERL[stream.current()];
      if (!c2)
        return "meta";
      if (c2[1])
        c2 = c2[0];
      if (l2 != ":") {
        if (c2 == 1)
          return "keyword";
        else if (c2 == 2)
          return "def";
        else if (c2 == 3)
          return "atom";
        else if (c2 == 4)
          return "operator";
        else if (c2 == 5)
          return "builtin";
        else
          return "meta";
      } else
        return "meta";
    }
    return null;
  }
  var PERL, RXstyle, RXmodifiers, perl;
  var init_perl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/perl.js"() {
      PERL = {
        //   null - magic touch
        //   1 - keyword
        //   2 - def
        //   3 - atom
        //   4 - operator
        //   5 - builtin (predefined)
        //   [x,y] - x=1,2,3; y=must be defined if x{...}
        //      PERL operators
        "->": 4,
        "++": 4,
        "--": 4,
        "**": 4,
        //   ! ~ \ and unary + and -
        "=~": 4,
        "!~": 4,
        "*": 4,
        "/": 4,
        "%": 4,
        "x": 4,
        "+": 4,
        "-": 4,
        ".": 4,
        "<<": 4,
        ">>": 4,
        //   named unary operators
        "<": 4,
        ">": 4,
        "<=": 4,
        ">=": 4,
        "lt": 4,
        "gt": 4,
        "le": 4,
        "ge": 4,
        "==": 4,
        "!=": 4,
        "<=>": 4,
        "eq": 4,
        "ne": 4,
        "cmp": 4,
        "~~": 4,
        "&": 4,
        "|": 4,
        "^": 4,
        "&&": 4,
        "||": 4,
        "//": 4,
        "..": 4,
        "...": 4,
        "?": 4,
        ":": 4,
        "=": 4,
        "+=": 4,
        "-=": 4,
        "*=": 4,
        //   etc. ???
        ",": 4,
        "=>": 4,
        "::": 4,
        //   list operators (rightward)
        "not": 4,
        "and": 4,
        "or": 4,
        "xor": 4,
        //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
        "BEGIN": [5, 1],
        "END": [5, 1],
        "PRINT": [5, 1],
        "PRINTF": [5, 1],
        "GETC": [5, 1],
        "READ": [5, 1],
        "READLINE": [5, 1],
        "DESTROY": [5, 1],
        "TIE": [5, 1],
        "TIEHANDLE": [5, 1],
        "UNTIE": [5, 1],
        "STDIN": 5,
        "STDIN_TOP": 5,
        "STDOUT": 5,
        "STDOUT_TOP": 5,
        "STDERR": 5,
        "STDERR_TOP": 5,
        "$ARG": 5,
        "$_": 5,
        "@ARG": 5,
        "@_": 5,
        "$LIST_SEPARATOR": 5,
        '$"': 5,
        "$PROCESS_ID": 5,
        "$PID": 5,
        "$$": 5,
        "$REAL_GROUP_ID": 5,
        "$GID": 5,
        "$(": 5,
        "$EFFECTIVE_GROUP_ID": 5,
        "$EGID": 5,
        "$)": 5,
        "$PROGRAM_NAME": 5,
        "$0": 5,
        "$SUBSCRIPT_SEPARATOR": 5,
        "$SUBSEP": 5,
        "$;": 5,
        "$REAL_USER_ID": 5,
        "$UID": 5,
        "$<": 5,
        "$EFFECTIVE_USER_ID": 5,
        "$EUID": 5,
        "$>": 5,
        "$a": 5,
        "$b": 5,
        "$COMPILING": 5,
        "$^C": 5,
        "$DEBUGGING": 5,
        "$^D": 5,
        "${^ENCODING}": 5,
        "$ENV": 5,
        "%ENV": 5,
        "$SYSTEM_FD_MAX": 5,
        "$^F": 5,
        "@F": 5,
        "${^GLOBAL_PHASE}": 5,
        "$^H": 5,
        "%^H": 5,
        "@INC": 5,
        "%INC": 5,
        "$INPLACE_EDIT": 5,
        "$^I": 5,
        "$^M": 5,
        "$OSNAME": 5,
        "$^O": 5,
        "${^OPEN}": 5,
        "$PERLDB": 5,
        "$^P": 5,
        "$SIG": 5,
        "%SIG": 5,
        "$BASETIME": 5,
        "$^T": 5,
        "${^TAINT}": 5,
        "${^UNICODE}": 5,
        "${^UTF8CACHE}": 5,
        "${^UTF8LOCALE}": 5,
        "$PERL_VERSION": 5,
        "$^V": 5,
        "${^WIN32_SLOPPY_STAT}": 5,
        "$EXECUTABLE_NAME": 5,
        "$^X": 5,
        "$1": 5,
        // - regexp $1, $2...
        "$MATCH": 5,
        "$&": 5,
        "${^MATCH}": 5,
        "$PREMATCH": 5,
        "$`": 5,
        "${^PREMATCH}": 5,
        "$POSTMATCH": 5,
        "$'": 5,
        "${^POSTMATCH}": 5,
        "$LAST_PAREN_MATCH": 5,
        "$+": 5,
        "$LAST_SUBMATCH_RESULT": 5,
        "$^N": 5,
        "@LAST_MATCH_END": 5,
        "@+": 5,
        "%LAST_PAREN_MATCH": 5,
        "%+": 5,
        "@LAST_MATCH_START": 5,
        "@-": 5,
        "%LAST_MATCH_START": 5,
        "%-": 5,
        "$LAST_REGEXP_CODE_RESULT": 5,
        "$^R": 5,
        "${^RE_DEBUG_FLAGS}": 5,
        "${^RE_TRIE_MAXBUF}": 5,
        "$ARGV": 5,
        "@ARGV": 5,
        "ARGV": 5,
        "ARGVOUT": 5,
        "$OUTPUT_FIELD_SEPARATOR": 5,
        "$OFS": 5,
        "$,": 5,
        "$INPUT_LINE_NUMBER": 5,
        "$NR": 5,
        "$.": 5,
        "$INPUT_RECORD_SEPARATOR": 5,
        "$RS": 5,
        "$/": 5,
        "$OUTPUT_RECORD_SEPARATOR": 5,
        "$ORS": 5,
        "$\\": 5,
        "$OUTPUT_AUTOFLUSH": 5,
        "$|": 5,
        "$ACCUMULATOR": 5,
        "$^A": 5,
        "$FORMAT_FORMFEED": 5,
        "$^L": 5,
        "$FORMAT_PAGE_NUMBER": 5,
        "$%": 5,
        "$FORMAT_LINES_LEFT": 5,
        "$-": 5,
        "$FORMAT_LINE_BREAK_CHARACTERS": 5,
        "$:": 5,
        "$FORMAT_LINES_PER_PAGE": 5,
        "$=": 5,
        "$FORMAT_TOP_NAME": 5,
        "$^": 5,
        "$FORMAT_NAME": 5,
        "$~": 5,
        "${^CHILD_ERROR_NATIVE}": 5,
        "$EXTENDED_OS_ERROR": 5,
        "$^E": 5,
        "$EXCEPTIONS_BEING_CAUGHT": 5,
        "$^S": 5,
        "$WARNING": 5,
        "$^W": 5,
        "${^WARNING_BITS}": 5,
        "$OS_ERROR": 5,
        "$ERRNO": 5,
        "$!": 5,
        "%OS_ERROR": 5,
        "%ERRNO": 5,
        "%!": 5,
        "$CHILD_ERROR": 5,
        "$?": 5,
        "$EVAL_ERROR": 5,
        "$@": 5,
        "$OFMT": 5,
        "$#": 5,
        "$*": 5,
        "$ARRAY_BASE": 5,
        "$[": 5,
        "$OLD_PERL_VERSION": 5,
        "$]": 5,
        //      PERL blocks
        "if": [1, 1],
        elsif: [1, 1],
        "else": [1, 1],
        "while": [1, 1],
        unless: [1, 1],
        "for": [1, 1],
        foreach: [1, 1],
        //      PERL functions
        "abs": 1,
        // - absolute value function
        accept: 1,
        // - accept an incoming socket connect
        alarm: 1,
        // - schedule a SIGALRM
        "atan2": 1,
        // - arctangent of Y/X in the range -PI to PI
        bind: 1,
        // - binds an address to a socket
        binmode: 1,
        // - prepare binary files for I/O
        bless: 1,
        // - create an object
        bootstrap: 1,
        //
        "break": 1,
        // - break out of a "given" block
        caller: 1,
        // - get context of the current subroutine call
        chdir: 1,
        // - change your current working directory
        chmod: 1,
        // - changes the permissions on a list of files
        chomp: 1,
        // - remove a trailing record separator from a string
        chop: 1,
        // - remove the last character from a string
        chown: 1,
        // - change the ownership on a list of files
        chr: 1,
        // - get character this number represents
        chroot: 1,
        // - make directory new root for path lookups
        close: 1,
        // - close file (or pipe or socket) handle
        closedir: 1,
        // - close directory handle
        connect: 1,
        // - connect to a remote socket
        "continue": [1, 1],
        // - optional trailing block in a while or foreach
        "cos": 1,
        // - cosine function
        crypt: 1,
        // - one-way passwd-style encryption
        dbmclose: 1,
        // - breaks binding on a tied dbm file
        dbmopen: 1,
        // - create binding on a tied dbm file
        "default": 1,
        //
        defined: 1,
        // - test whether a value, variable, or function is defined
        "delete": 1,
        // - deletes a value from a hash
        die: 1,
        // - raise an exception or bail out
        "do": 1,
        // - turn a BLOCK into a TERM
        dump: 1,
        // - create an immediate core dump
        each: 1,
        // - retrieve the next key/value pair from a hash
        endgrent: 1,
        // - be done using group file
        endhostent: 1,
        // - be done using hosts file
        endnetent: 1,
        // - be done using networks file
        endprotoent: 1,
        // - be done using protocols file
        endpwent: 1,
        // - be done using passwd file
        endservent: 1,
        // - be done using services file
        eof: 1,
        // - test a filehandle for its end
        "eval": 1,
        // - catch exceptions or compile and run code
        "exec": 1,
        // - abandon this program to run another
        exists: 1,
        // - test whether a hash key is present
        exit: 1,
        // - terminate this program
        "exp": 1,
        // - raise I to a power
        fcntl: 1,
        // - file control system call
        fileno: 1,
        // - return file descriptor from filehandle
        flock: 1,
        // - lock an entire file with an advisory lock
        fork: 1,
        // - create a new process just like this one
        format: 1,
        // - declare a picture format with use by the write() function
        formline: 1,
        // - internal function used for formats
        getc: 1,
        // - get the next character from the filehandle
        getgrent: 1,
        // - get next group record
        getgrgid: 1,
        // - get group record given group user ID
        getgrnam: 1,
        // - get group record given group name
        gethostbyaddr: 1,
        // - get host record given its address
        gethostbyname: 1,
        // - get host record given name
        gethostent: 1,
        // - get next hosts record
        getlogin: 1,
        // - return who logged in at this tty
        getnetbyaddr: 1,
        // - get network record given its address
        getnetbyname: 1,
        // - get networks record given name
        getnetent: 1,
        // - get next networks record
        getpeername: 1,
        // - find the other end of a socket connection
        getpgrp: 1,
        // - get process group
        getppid: 1,
        // - get parent process ID
        getpriority: 1,
        // - get current nice value
        getprotobyname: 1,
        // - get protocol record given name
        getprotobynumber: 1,
        // - get protocol record numeric protocol
        getprotoent: 1,
        // - get next protocols record
        getpwent: 1,
        // - get next passwd record
        getpwnam: 1,
        // - get passwd record given user login name
        getpwuid: 1,
        // - get passwd record given user ID
        getservbyname: 1,
        // - get services record given its name
        getservbyport: 1,
        // - get services record given numeric port
        getservent: 1,
        // - get next services record
        getsockname: 1,
        // - retrieve the sockaddr for a given socket
        getsockopt: 1,
        // - get socket options on a given socket
        given: 1,
        //
        glob: 1,
        // - expand filenames using wildcards
        gmtime: 1,
        // - convert UNIX time into record or string using Greenwich time
        "goto": 1,
        // - create spaghetti code
        grep: 1,
        // - locate elements in a list test true against a given criterion
        hex: 1,
        // - convert a string to a hexadecimal number
        "import": 1,
        // - patch a module's namespace into your own
        index: 1,
        // - find a substring within a string
        "int": 1,
        // - get the integer portion of a number
        ioctl: 1,
        // - system-dependent device control system call
        "join": 1,
        // - join a list into a string using a separator
        keys: 1,
        // - retrieve list of indices from a hash
        kill: 1,
        // - send a signal to a process or process group
        last: 1,
        // - exit a block prematurely
        lc: 1,
        // - return lower-case version of a string
        lcfirst: 1,
        // - return a string with just the next letter in lower case
        length: 1,
        // - return the number of bytes in a string
        "link": 1,
        // - create a hard link in the filesystem
        listen: 1,
        // - register your socket as a server
        local: 2,
        // - create a temporary value for a global variable (dynamic scoping)
        localtime: 1,
        // - convert UNIX time into record or string using local time
        lock: 1,
        // - get a thread lock on a variable, subroutine, or method
        "log": 1,
        // - retrieve the natural logarithm for a number
        lstat: 1,
        // - stat a symbolic link
        m: null,
        // - match a string with a regular expression pattern
        map: 1,
        // - apply a change to a list to get back a new list with the changes
        mkdir: 1,
        // - create a directory
        msgctl: 1,
        // - SysV IPC message control operations
        msgget: 1,
        // - get SysV IPC message queue
        msgrcv: 1,
        // - receive a SysV IPC message from a message queue
        msgsnd: 1,
        // - send a SysV IPC message to a message queue
        my: 2,
        // - declare and assign a local variable (lexical scoping)
        "new": 1,
        //
        next: 1,
        // - iterate a block prematurely
        no: 1,
        // - unimport some module symbols or semantics at compile time
        oct: 1,
        // - convert a string to an octal number
        open: 1,
        // - open a file, pipe, or descriptor
        opendir: 1,
        // - open a directory
        ord: 1,
        // - find a character's numeric representation
        our: 2,
        // - declare and assign a package variable (lexical scoping)
        pack: 1,
        // - convert a list into a binary representation
        "package": 1,
        // - declare a separate global namespace
        pipe: 1,
        // - open a pair of connected filehandles
        pop: 1,
        // - remove the last element from an array and return it
        pos: 1,
        // - find or set the offset for the last/next m//g search
        print: 1,
        // - output a list to a filehandle
        printf: 1,
        // - output a formatted list to a filehandle
        prototype: 1,
        // - get the prototype (if any) of a subroutine
        push: 1,
        // - append one or more elements to an array
        q: null,
        // - singly quote a string
        qq: null,
        // - doubly quote a string
        qr: null,
        // - Compile pattern
        quotemeta: null,
        // - quote regular expression magic characters
        qw: null,
        // - quote a list of words
        qx: null,
        // - backquote quote a string
        rand: 1,
        // - retrieve the next pseudorandom number
        read: 1,
        // - fixed-length buffered input from a filehandle
        readdir: 1,
        // - get a directory from a directory handle
        readline: 1,
        // - fetch a record from a file
        readlink: 1,
        // - determine where a symbolic link is pointing
        readpipe: 1,
        // - execute a system command and collect standard output
        recv: 1,
        // - receive a message over a Socket
        redo: 1,
        // - start this loop iteration over again
        ref: 1,
        // - find out the type of thing being referenced
        rename: 1,
        // - change a filename
        require: 1,
        // - load in external functions from a library at runtime
        reset: 1,
        // - clear all variables of a given name
        "return": 1,
        // - get out of a function early
        reverse: 1,
        // - flip a string or a list
        rewinddir: 1,
        // - reset directory handle
        rindex: 1,
        // - right-to-left substring search
        rmdir: 1,
        // - remove a directory
        s: null,
        // - replace a pattern with a string
        say: 1,
        // - print with newline
        scalar: 1,
        // - force a scalar context
        seek: 1,
        // - reposition file pointer for random-access I/O
        seekdir: 1,
        // - reposition directory pointer
        select: 1,
        // - reset default output or do I/O multiplexing
        semctl: 1,
        // - SysV semaphore control operations
        semget: 1,
        // - get set of SysV semaphores
        semop: 1,
        // - SysV semaphore operations
        send: 1,
        // - send a message over a socket
        setgrent: 1,
        // - prepare group file for use
        sethostent: 1,
        // - prepare hosts file for use
        setnetent: 1,
        // - prepare networks file for use
        setpgrp: 1,
        // - set the process group of a process
        setpriority: 1,
        // - set a process's nice value
        setprotoent: 1,
        // - prepare protocols file for use
        setpwent: 1,
        // - prepare passwd file for use
        setservent: 1,
        // - prepare services file for use
        setsockopt: 1,
        // - set some socket options
        shift: 1,
        // - remove the first element of an array, and return it
        shmctl: 1,
        // - SysV shared memory operations
        shmget: 1,
        // - get SysV shared memory segment identifier
        shmread: 1,
        // - read SysV shared memory
        shmwrite: 1,
        // - write SysV shared memory
        shutdown: 1,
        // - close down just half of a socket connection
        "sin": 1,
        // - return the sine of a number
        sleep: 1,
        // - block for some number of seconds
        socket: 1,
        // - create a socket
        socketpair: 1,
        // - create a pair of sockets
        "sort": 1,
        // - sort a list of values
        splice: 1,
        // - add or remove elements anywhere in an array
        "split": 1,
        // - split up a string using a regexp delimiter
        sprintf: 1,
        // - formatted print into a string
        "sqrt": 1,
        // - square root function
        srand: 1,
        // - seed the random number generator
        stat: 1,
        // - get a file's status information
        state: 1,
        // - declare and assign a state variable (persistent lexical scoping)
        study: 1,
        // - optimize input data for repeated searches
        "sub": 1,
        // - declare a subroutine, possibly anonymously
        "substr": 1,
        // - get or alter a portion of a string
        symlink: 1,
        // - create a symbolic link to a file
        syscall: 1,
        // - execute an arbitrary system call
        sysopen: 1,
        // - open a file, pipe, or descriptor
        sysread: 1,
        // - fixed-length unbuffered input from a filehandle
        sysseek: 1,
        // - position I/O pointer on handle used with sysread and syswrite
        system: 1,
        // - run a separate program
        syswrite: 1,
        // - fixed-length unbuffered output to a filehandle
        tell: 1,
        // - get current seekpointer on a filehandle
        telldir: 1,
        // - get current seekpointer on a directory handle
        tie: 1,
        // - bind a variable to an object class
        tied: 1,
        // - get a reference to the object underlying a tied variable
        time: 1,
        // - return number of seconds since 1970
        times: 1,
        // - return elapsed time for self and child processes
        tr: null,
        // - transliterate a string
        truncate: 1,
        // - shorten a file
        uc: 1,
        // - return upper-case version of a string
        ucfirst: 1,
        // - return a string with just the next letter in upper case
        umask: 1,
        // - set file creation mode mask
        undef: 1,
        // - remove a variable or function definition
        unlink: 1,
        // - remove one link to a file
        unpack: 1,
        // - convert binary structure into normal perl variables
        unshift: 1,
        // - prepend more elements to the beginning of a list
        untie: 1,
        // - break a tie binding to a variable
        use: 1,
        // - load in a module at compile time
        utime: 1,
        // - set a file's last access and modify times
        values: 1,
        // - return a list of the values in a hash
        vec: 1,
        // - test or set particular bits in a string
        wait: 1,
        // - wait for any child process to die
        waitpid: 1,
        // - wait for a particular child process to die
        wantarray: 1,
        // - get void vs scalar vs list context of current subroutine call
        warn: 1,
        // - print debugging info
        when: 1,
        //
        write: 1,
        // - print a picture record
        y: null
      };
      RXstyle = "string.special";
      RXmodifiers = /[goseximacplud]/;
      perl = {
        name: "perl",
        startState: function() {
          return {
            tokenize: tokenPerl,
            chain: null,
            style: null,
            tail: null
          };
        },
        token: function(stream, state) {
          return (state.tokenize || tokenPerl)(stream, state);
        },
        languageData: {
          commentTokens: { line: "#" },
          wordChars: "$"
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/pig.js
  var pig_exports = {};
  __export(pig_exports, {
    pig: () => pig
  });
  function words12(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function chain6(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenComment13(stream, state) {
    var isEnd = false;
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && isEnd) {
        state.tokenize = tokenBase24;
        break;
      }
      isEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenString13(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !escaped)
        state.tokenize = tokenBase24;
      return "error";
    };
  }
  function tokenBase24(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'")
      return chain6(stream, state, tokenString13(ch2));
    else if (/[\[\]{}\(\),;\.]/.test(ch2))
      return null;
    else if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    } else if (ch2 == "/") {
      if (stream.eat("*")) {
        return chain6(stream, state, tokenComment13);
      } else {
        stream.eatWhile(isOperatorChar9);
        return "operator";
      }
    } else if (ch2 == "-") {
      if (stream.eat("-")) {
        stream.skipToEnd();
        return "comment";
      } else {
        stream.eatWhile(isOperatorChar9);
        return "operator";
      }
    } else if (isOperatorChar9.test(ch2)) {
      stream.eatWhile(isOperatorChar9);
      return "operator";
    } else {
      stream.eatWhile(/[\w\$_]/);
      if (keywords25 && keywords25.propertyIsEnumerable(stream.current().toUpperCase())) {
        if (!stream.eat(")") && !stream.eat("."))
          return "keyword";
      }
      if (builtins7 && builtins7.propertyIsEnumerable(stream.current().toUpperCase()))
        return "builtin";
      if (types3 && types3.propertyIsEnumerable(stream.current().toUpperCase()))
        return "type";
      return "variable";
    }
  }
  var pBuiltins, pKeywords, pTypes, builtins7, keywords25, types3, isOperatorChar9, pig;
  var init_pig = __esm({
    "node_modules/@codemirror/legacy-modes/mode/pig.js"() {
      pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";
      pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE NEQ MATCHES TRUE FALSE DUMP";
      pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";
      builtins7 = words12(pBuiltins);
      keywords25 = words12(pKeywords);
      types3 = words12(pTypes);
      isOperatorChar9 = /[*+\-%<>=&?:\/!|]/;
      pig = {
        name: "pig",
        startState: function() {
          return {
            tokenize: tokenBase24,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          return style2;
        },
        languageData: {
          autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/powershell.js
  var powershell_exports = {};
  __export(powershell_exports, {
    powerShell: () => powerShell
  });
  function buildRegexp(patterns2, options) {
    options = options || {};
    var prefix2 = options.prefix !== void 0 ? options.prefix : "^";
    var suffix2 = options.suffix !== void 0 ? options.suffix : "\\b";
    for (var i = 0; i < patterns2.length; i++) {
      if (patterns2[i] instanceof RegExp) {
        patterns2[i] = patterns2[i].source;
      } else {
        patterns2[i] = patterns2[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
    }
    return new RegExp(prefix2 + "(" + patterns2.join("|") + ")" + suffix2, "i");
  }
  function tokenBase25(stream, state) {
    var parent = state.returnStack[state.returnStack.length - 1];
    if (parent && parent.shouldReturnFrom(state)) {
      state.tokenize = parent.tokenize;
      state.returnStack.pop();
      return state.tokenize(stream, state);
    }
    if (stream.eatSpace()) {
      return null;
    }
    if (stream.eat("(")) {
      state.bracketNesting += 1;
      return "punctuation";
    }
    if (stream.eat(")")) {
      state.bracketNesting -= 1;
      return "punctuation";
    }
    for (var key in grammar) {
      if (stream.match(grammar[key])) {
        return key;
      }
    }
    var ch2 = stream.next();
    if (ch2 === "'") {
      return tokenSingleQuoteString(stream, state);
    }
    if (ch2 === "$") {
      return tokenVariable(stream, state);
    }
    if (ch2 === '"') {
      return tokenDoubleQuoteString(stream, state);
    }
    if (ch2 === "<" && stream.eat("#")) {
      state.tokenize = tokenComment14;
      return tokenComment14(stream, state);
    }
    if (ch2 === "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 === "@") {
      var quoteMatch = stream.eat(/["']/);
      if (quoteMatch && stream.eol()) {
        state.tokenize = tokenMultiString;
        state.startQuote = quoteMatch[0];
        return tokenMultiString(stream, state);
      } else if (stream.eol()) {
        return "error";
      } else if (stream.peek().match(/[({]/)) {
        return "punctuation";
      } else if (stream.peek().match(varNames)) {
        return tokenVariable(stream, state);
      }
    }
    return "error";
  }
  function tokenSingleQuoteString(stream, state) {
    var ch2;
    while ((ch2 = stream.peek()) != null) {
      stream.next();
      if (ch2 === "'" && !stream.eat("'")) {
        state.tokenize = tokenBase25;
        return "string";
      }
    }
    return "error";
  }
  function tokenDoubleQuoteString(stream, state) {
    var ch2;
    while ((ch2 = stream.peek()) != null) {
      if (ch2 === "$") {
        state.tokenize = tokenStringInterpolation;
        return "string";
      }
      stream.next();
      if (ch2 === "`") {
        stream.next();
        continue;
      }
      if (ch2 === '"' && !stream.eat('"')) {
        state.tokenize = tokenBase25;
        return "string";
      }
    }
    return "error";
  }
  function tokenStringInterpolation(stream, state) {
    return tokenInterpolation2(stream, state, tokenDoubleQuoteString);
  }
  function tokenMultiStringReturn(stream, state) {
    state.tokenize = tokenMultiString;
    state.startQuote = '"';
    return tokenMultiString(stream, state);
  }
  function tokenHereStringInterpolation(stream, state) {
    return tokenInterpolation2(stream, state, tokenMultiStringReturn);
  }
  function tokenInterpolation2(stream, state, parentTokenize) {
    if (stream.match("$(")) {
      var savedBracketNesting = state.bracketNesting;
      state.returnStack.push({
        /*jshint loopfunc:true */
        shouldReturnFrom: function(state2) {
          return state2.bracketNesting === savedBracketNesting;
        },
        tokenize: parentTokenize
      });
      state.tokenize = tokenBase25;
      state.bracketNesting += 1;
      return "punctuation";
    } else {
      stream.next();
      state.returnStack.push({
        shouldReturnFrom: function() {
          return true;
        },
        tokenize: parentTokenize
      });
      state.tokenize = tokenVariable;
      return state.tokenize(stream, state);
    }
  }
  function tokenComment14(stream, state) {
    var maybeEnd = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (maybeEnd && ch2 == ">") {
        state.tokenize = tokenBase25;
        break;
      }
      maybeEnd = ch2 === "#";
    }
    return "comment";
  }
  function tokenVariable(stream, state) {
    var ch2 = stream.peek();
    if (stream.eat("{")) {
      state.tokenize = tokenVariableWithBraces;
      return tokenVariableWithBraces(stream, state);
    } else if (ch2 != void 0 && ch2.match(varNames)) {
      stream.eatWhile(varNames);
      state.tokenize = tokenBase25;
      return "variable";
    } else {
      state.tokenize = tokenBase25;
      return "error";
    }
  }
  function tokenVariableWithBraces(stream, state) {
    var ch2;
    while ((ch2 = stream.next()) != null) {
      if (ch2 === "}") {
        state.tokenize = tokenBase25;
        break;
      }
    }
    return "variable";
  }
  function tokenMultiString(stream, state) {
    var quote2 = state.startQuote;
    if (stream.sol() && stream.match(new RegExp(quote2 + "@"))) {
      state.tokenize = tokenBase25;
    } else if (quote2 === '"') {
      while (!stream.eol()) {
        var ch2 = stream.peek();
        if (ch2 === "$") {
          state.tokenize = tokenHereStringInterpolation;
          return "string";
        }
        stream.next();
        if (ch2 === "`") {
          stream.next();
        }
      }
    } else {
      stream.skipToEnd();
    }
    return "string";
  }
  var notCharacterOrDash, varNames, keywords26, punctuation2, wordOperators3, symbolOperators2, operators5, numbers, identifiers7, symbolBuiltins, namedBuiltins, variableBuiltins, builtins8, grammar, powerShell;
  var init_powershell = __esm({
    "node_modules/@codemirror/legacy-modes/mode/powershell.js"() {
      notCharacterOrDash = "(?=[^A-Za-z\\d\\-_]|$)";
      varNames = /[\w\-:]/;
      keywords26 = buildRegexp([
        /begin|break|catch|continue|data|default|do|dynamicparam/,
        /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
        /param|process|return|switch|throw|trap|try|until|where|while/
      ], { suffix: notCharacterOrDash });
      punctuation2 = /[\[\]{},;`\\\.]|@[({]/;
      wordOperators3 = buildRegexp([
        "f",
        /b?not/,
        /[ic]?split/,
        "join",
        /is(not)?/,
        "as",
        /[ic]?(eq|ne|[gl][te])/,
        /[ic]?(not)?(like|match|contains)/,
        /[ic]?replace/,
        /b?(and|or|xor)/
      ], { prefix: "-" });
      symbolOperators2 = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
      operators5 = buildRegexp([wordOperators3, symbolOperators2], { suffix: "" });
      numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;
      identifiers7 = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;
      symbolBuiltins = /[A-Z]:|%|\?/i;
      namedBuiltins = buildRegexp([
        /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
        /Checkpoint-Computer/,
        /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
        /Compare-Object/,
        /Complete-Transaction/,
        /Connect-PSSession/,
        /ConvertFrom-(Csv|Json|SecureString|StringData)/,
        /Convert-Path/,
        /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
        /Copy-Item(Property)?/,
        /Debug-Process/,
        /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
        /Disconnect-PSSession/,
        /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
        /(Enter|Exit)-PSSession/,
        /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
        /ForEach-Object/,
        /Format-(Custom|List|Table|Wide)/,
        new RegExp("Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)"),
        /Group-Object/,
        /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
        /ImportSystemModules/,
        /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
        /Join-Path/,
        /Limit-EventLog/,
        /Measure-(Command|Object)/,
        /Move-Item(Property)?/,
        new RegExp("New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)"),
        /Out-(Default|File|GridView|Host|Null|Printer|String)/,
        /Pause/,
        /(Pop|Push)-Location/,
        /Read-Host/,
        /Receive-(Job|PSSession)/,
        /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
        /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
        /Rename-(Computer|Item(Property)?)/,
        /Reset-ComputerMachinePassword/,
        /Resolve-Path/,
        /Restart-(Computer|Service)/,
        /Restore-Computer/,
        /Resume-(Job|Service)/,
        /Save-Help/,
        /Select-(Object|String|Xml)/,
        /Send-MailMessage/,
        new RegExp("Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)"),
        /Show-(Command|ControlPanelItem|EventLog)/,
        /Sort-Object/,
        /Split-Path/,
        /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
        /Stop-(Computer|Job|Process|Service|Transcript)/,
        /Suspend-(Job|Service)/,
        /TabExpansion2/,
        /Tee-Object/,
        /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
        /Trace-Command/,
        /Unblock-File/,
        /Undo-Transaction/,
        /Unregister-(Event|PSSessionConfiguration)/,
        /Update-(FormatData|Help|List|TypeData)/,
        /Use-Transaction/,
        /Wait-(Event|Job|Process)/,
        /Where-Object/,
        /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
        /cd|help|mkdir|more|oss|prompt/,
        /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
        /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
        /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
        /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
        /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
        /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
      ], { prefix: "", suffix: "" });
      variableBuiltins = buildRegexp([
        /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
        /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
        /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
        /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
        /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
        /WarningPreference|WhatIfPreference/,
        /Event|EventArgs|EventSubscriber|Sender/,
        /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
        /true|false|null/
      ], { prefix: "\\$", suffix: "" });
      builtins8 = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });
      grammar = {
        keyword: keywords26,
        number: numbers,
        operator: operators5,
        builtin: builtins8,
        punctuation: punctuation2,
        variable: identifiers7
      };
      powerShell = {
        name: "powershell",
        startState: function() {
          return {
            returnStack: [],
            bracketNesting: 0,
            tokenize: tokenBase25
          };
        },
        token: function(stream, state) {
          return state.tokenize(stream, state);
        },
        languageData: {
          commentTokens: { line: "#", block: { open: "<#", close: "#>" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/properties.js
  var properties_exports = {};
  __export(properties_exports, {
    properties: () => properties2
  });
  var properties2;
  var init_properties = __esm({
    "node_modules/@codemirror/legacy-modes/mode/properties.js"() {
      properties2 = {
        name: "properties",
        token: function(stream, state) {
          var sol = stream.sol() || state.afterSection;
          var eol2 = stream.eol();
          state.afterSection = false;
          if (sol) {
            if (state.nextMultiline) {
              state.inMultiline = true;
              state.nextMultiline = false;
            } else {
              state.position = "def";
            }
          }
          if (eol2 && !state.nextMultiline) {
            state.inMultiline = false;
            state.position = "def";
          }
          if (sol) {
            while (stream.eatSpace()) {
            }
          }
          var ch2 = stream.next();
          if (sol && (ch2 === "#" || ch2 === "!" || ch2 === ";")) {
            state.position = "comment";
            stream.skipToEnd();
            return "comment";
          } else if (sol && ch2 === "[") {
            state.afterSection = true;
            stream.skipTo("]");
            stream.eat("]");
            return "header";
          } else if (ch2 === "=" || ch2 === ":") {
            state.position = "quote";
            return null;
          } else if (ch2 === "\\" && state.position === "quote") {
            if (stream.eol()) {
              state.nextMultiline = true;
            }
          }
          return state.position;
        },
        startState: function() {
          return {
            position: "def",
            // Current position, "def", "quote" or "comment"
            nextMultiline: false,
            // Is the next line multiline value
            inMultiline: false,
            // Is the current line a multiline value
            afterSection: false
            // Did we just open a section
          };
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/protobuf.js
  var protobuf_exports = {};
  __export(protobuf_exports, {
    protobuf: () => protobuf
  });
  function wordRegexp9(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
  }
  function tokenBase26(stream) {
    if (stream.eatSpace())
      return null;
    if (stream.match("//")) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^[0-9\.+-]/, false)) {
      if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
        return "number";
      if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
        return "number";
      if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
        return "number";
    }
    if (stream.match(/^"([^"]|(""))*"/)) {
      return "string";
    }
    if (stream.match(/^'([^']|(''))*'/)) {
      return "string";
    }
    if (stream.match(keywords27)) {
      return "keyword";
    }
    if (stream.match(identifiers8)) {
      return "variable";
    }
    ;
    stream.next();
    return null;
  }
  var keywordArray2, keywords27, identifiers8, protobuf;
  var init_protobuf = __esm({
    "node_modules/@codemirror/legacy-modes/mode/protobuf.js"() {
      keywordArray2 = [
        "package",
        "message",
        "import",
        "syntax",
        "required",
        "optional",
        "repeated",
        "reserved",
        "default",
        "extensions",
        "packed",
        "bool",
        "bytes",
        "double",
        "enum",
        "float",
        "string",
        "int32",
        "int64",
        "uint32",
        "uint64",
        "sint32",
        "sint64",
        "fixed32",
        "fixed64",
        "sfixed32",
        "sfixed64",
        "option",
        "service",
        "rpc",
        "returns"
      ];
      keywords27 = wordRegexp9(keywordArray2);
      identifiers8 = new RegExp("^[_A-Za-z\xA1-\uFFFF][_A-Za-z0-9\xA1-\uFFFF]*");
      protobuf = {
        name: "protobuf",
        token: tokenBase26,
        languageData: {
          autocomplete: keywordArray2
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/puppet.js
  var puppet_exports = {};
  __export(puppet_exports, {
    puppet: () => puppet
  });
  function define2(style2, string3) {
    var split = string3.split(" ");
    for (var i = 0; i < split.length; i++) {
      words13[split[i]] = style2;
    }
  }
  function tokenString14(stream, state) {
    var current, prev, found_var = false;
    while (!stream.eol() && (current = stream.next()) != state.pending) {
      if (current === "$" && prev != "\\" && state.pending == '"') {
        found_var = true;
        break;
      }
      prev = current;
    }
    if (found_var) {
      stream.backUp(1);
    }
    if (current == state.pending) {
      state.continueString = false;
    } else {
      state.continueString = true;
    }
    return "string";
  }
  function tokenize2(stream, state) {
    var word2 = stream.match(/[\w]+/, false);
    var attribute3 = stream.match(/(\s+)?\w+\s+=>.*/, false);
    var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
    var special_resource = stream.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, false);
    var ch2 = stream.next();
    if (ch2 === "$") {
      if (stream.match(variable_regex2)) {
        return state.continueString ? "variableName.special" : "variable";
      }
      return "error";
    }
    if (state.continueString) {
      stream.backUp(1);
      return tokenString14(stream, state);
    }
    if (state.inDefinition) {
      if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
        return "def";
      }
      stream.match(/\s+{/);
      state.inDefinition = false;
    }
    if (state.inInclude) {
      stream.match(/(\s+)?\S+(\s+)?/);
      state.inInclude = false;
      return "def";
    }
    if (stream.match(/(\s+)?\w+\(/)) {
      stream.backUp(1);
      return "def";
    }
    if (attribute3) {
      stream.match(/(\s+)?\w+/);
      return "tag";
    }
    if (word2 && words13.hasOwnProperty(word2)) {
      stream.backUp(1);
      stream.match(/[\w]+/);
      if (stream.match(/\s+\S+\s+{/, false)) {
        state.inDefinition = true;
      }
      if (word2 == "include") {
        state.inInclude = true;
      }
      return words13[word2];
    }
    if (/(^|\s+)[A-Z][\w:_]+/.test(word2)) {
      stream.backUp(1);
      stream.match(/(^|\s+)[A-Z][\w:_]+/);
      return "def";
    }
    if (resource) {
      stream.match(/(\s+)?[\w:_]+/);
      return "def";
    }
    if (special_resource) {
      stream.match(/(\s+)?[@]{1,2}/);
      return "atom";
    }
    if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 == "'" || ch2 == '"') {
      state.pending = ch2;
      return tokenString14(stream, state);
    }
    if (ch2 == "{" || ch2 == "}") {
      return "bracket";
    }
    if (ch2 == "/") {
      stream.match(/^[^\/]*\//);
      return "string.special";
    }
    if (ch2.match(/[0-9]/)) {
      stream.eatWhile(/[0-9]+/);
      return "number";
    }
    if (ch2 == "=") {
      if (stream.peek() == ">") {
        stream.next();
      }
      return "operator";
    }
    stream.eatWhile(/[\w-]/);
    return null;
  }
  var words13, variable_regex2, puppet;
  var init_puppet = __esm({
    "node_modules/@codemirror/legacy-modes/mode/puppet.js"() {
      words13 = {};
      variable_regex2 = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;
      define2("keyword", "class define site node include import inherits");
      define2("keyword", "case if else in and elsif default or");
      define2("atom", "false true running present absent file directory undef");
      define2("builtin", "action augeas burst chain computer cron destination dport exec file filebucket group host icmp iniface interface jump k5login limit log_level log_prefix macauthorization mailalias maillist mcx mount nagios_command nagios_contact nagios_contactgroup nagios_host nagios_hostdependency nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo nagios_servicegroup nagios_timeperiod name notify outiface package proto reject resources router schedule scheduled_task selboolean selmodule service source sport ssh_authorized_key sshkey stage state table tidy todest toports tosource user vlan yumrepo zfs zone zpool");
      puppet = {
        name: "puppet",
        startState: function() {
          var state = {};
          state.inDefinition = false;
          state.inInclude = false;
          state.continueString = false;
          state.pending = false;
          return state;
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return tokenize2(stream, state);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/q.js
  var q_exports = {};
  __export(q_exports, {
    q: () => q
  });
  function buildRE(w) {
    return new RegExp("^(" + w.join("|") + ")$");
  }
  function tokenBase27(stream, state) {
    var sol = stream.sol(), c2 = stream.next();
    curPunc6 = null;
    if (sol) {
      if (c2 == "/")
        return (state.tokenize = tokenLineComment2)(stream, state);
      else if (c2 == "\\") {
        if (stream.eol() || /\s/.test(stream.peek()))
          return stream.skipToEnd(), /^\\\s*$/.test(stream.current()) ? (state.tokenize = tokenCommentToEOF)(stream) : state.tokenize = tokenBase27, "comment";
        else
          return state.tokenize = tokenBase27, "builtin";
      }
    }
    if (/\s/.test(c2))
      return stream.peek() == "/" ? (stream.skipToEnd(), "comment") : "null";
    if (c2 == '"')
      return (state.tokenize = tokenString15)(stream, state);
    if (c2 == "`")
      return stream.eatWhile(/[A-Za-z\d_:\/.]/), "macroName";
    if ("." == c2 && /\d/.test(stream.peek()) || /\d/.test(c2)) {
      var t2 = null;
      stream.backUp(1);
      if (stream.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/) || stream.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/) || stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/) || stream.match(/^\d+[ptuv]{1}/))
        t2 = "temporal";
      else if (stream.match(/^0[NwW]{1}/) || stream.match(/^0x[\da-fA-F]*/) || stream.match(/^[01]+[b]{1}/) || stream.match(/^\d+[chijn]{1}/) || stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/))
        t2 = "number";
      return t2 && (!(c2 = stream.peek()) || E.test(c2)) ? t2 : (stream.next(), "error");
    }
    if (/[A-Za-z]|\./.test(c2))
      return stream.eatWhile(/[A-Za-z._\d]/), keywords28.test(stream.current()) ? "keyword" : "variable";
    if (/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c2))
      return null;
    if (/[{}\(\[\]\)]/.test(c2))
      return null;
    return "error";
  }
  function tokenLineComment2(stream, state) {
    return stream.skipToEnd(), /\/\s*$/.test(stream.current()) ? (state.tokenize = tokenBlockComment2)(stream, state) : state.tokenize = tokenBase27, "comment";
  }
  function tokenBlockComment2(stream, state) {
    var f = stream.sol() && stream.peek() == "\\";
    stream.skipToEnd();
    if (f && /^\\\s*$/.test(stream.current()))
      state.tokenize = tokenBase27;
    return "comment";
  }
  function tokenCommentToEOF(stream) {
    return stream.skipToEnd(), "comment";
  }
  function tokenString15(stream, state) {
    var escaped = false, next2, end2 = false;
    while (next2 = stream.next()) {
      if (next2 == '"' && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
    if (end2)
      state.tokenize = tokenBase27;
    return "string";
  }
  function pushContext8(state, type7, col) {
    state.context = { prev: state.context, indent: state.indent, col, type: type7 };
  }
  function popContext8(state) {
    state.indent = state.context.indent;
    state.context = state.context.prev;
  }
  var curPunc6, keywords28, E, q;
  var init_q = __esm({
    "node_modules/@codemirror/legacy-modes/mode/q.js"() {
      keywords28 = buildRE(["abs", "acos", "aj", "aj0", "all", "and", "any", "asc", "asin", "asof", "atan", "attr", "avg", "avgs", "bin", "by", "ceiling", "cols", "cor", "cos", "count", "cov", "cross", "csv", "cut", "delete", "deltas", "desc", "dev", "differ", "distinct", "div", "do", "each", "ej", "enlist", "eval", "except", "exec", "exit", "exp", "fby", "fills", "first", "fkeys", "flip", "floor", "from", "get", "getenv", "group", "gtime", "hclose", "hcount", "hdel", "hopen", "hsym", "iasc", "idesc", "if", "ij", "in", "insert", "inter", "inv", "key", "keys", "last", "like", "list", "lj", "load", "log", "lower", "lsq", "ltime", "ltrim", "mavg", "max", "maxs", "mcount", "md5", "mdev", "med", "meta", "min", "mins", "mmax", "mmin", "mmu", "mod", "msum", "neg", "next", "not", "null", "or", "over", "parse", "peach", "pj", "plist", "prd", "prds", "prev", "prior", "rand", "rank", "ratios", "raze", "read0", "read1", "reciprocal", "reverse", "rload", "rotate", "rsave", "rtrim", "save", "scan", "select", "set", "setenv", "show", "signum", "sin", "sqrt", "ss", "ssr", "string", "sublist", "sum", "sums", "sv", "system", "tables", "tan", "til", "trim", "txf", "type", "uj", "ungroup", "union", "update", "upper", "upsert", "value", "var", "view", "views", "vs", "wavg", "where", "where", "while", "within", "wj", "wj1", "wsum", "xasc", "xbar", "xcol", "xcols", "xdesc", "xexp", "xgroup", "xkey", "xlog", "xprev", "xrank"]);
      E = /[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
      q = {
        name: "q",
        startState: function() {
          return {
            tokenize: tokenBase27,
            context: null,
            indent: 0,
            col: 0
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            if (state.context && state.context.align == null)
              state.context.align = false;
            state.indent = stream.indentation();
          }
          var style2 = state.tokenize(stream, state);
          if (style2 != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
            state.context.align = true;
          }
          if (curPunc6 == "(")
            pushContext8(state, ")", stream.column());
          else if (curPunc6 == "[")
            pushContext8(state, "]", stream.column());
          else if (curPunc6 == "{")
            pushContext8(state, "}", stream.column());
          else if (/[\]\}\)]/.test(curPunc6)) {
            while (state.context && state.context.type == "pattern")
              popContext8(state);
            if (state.context && curPunc6 == state.context.type)
              popContext8(state);
          } else if (curPunc6 == "." && state.context && state.context.type == "pattern")
            popContext8(state);
          else if (/atom|string|variable/.test(style2) && state.context) {
            if (/[\}\]]/.test(state.context.type))
              pushContext8(state, "pattern", stream.column());
            else if (state.context.type == "pattern" && !state.context.align) {
              state.context.align = true;
              state.context.col = stream.column();
            }
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var firstChar = textAfter && textAfter.charAt(0);
          var context = state.context;
          if (/[\]\}]/.test(firstChar))
            while (context && context.type == "pattern")
              context = context.prev;
          var closing3 = context && firstChar == context.type;
          if (!context)
            return 0;
          else if (context.type == "pattern")
            return context.col;
          else if (context.align)
            return context.col + (closing3 ? 0 : 1);
          else
            return context.indent + (closing3 ? 0 : cx2.unit);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/r.js
  var r_exports = {};
  __export(r_exports, {
    r: () => r
  });
  function wordObj2(words22) {
    var res = {};
    for (var i = 0; i < words22.length; ++i)
      res[words22[i]] = true;
    return res;
  }
  function tokenBase28(stream, state) {
    curPunc7 = null;
    var ch2 = stream.next();
    if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == "0" && stream.eat("x")) {
      stream.eatWhile(/[\da-f]/i);
      return "number";
    } else if (ch2 == "." && stream.eat(/\d/)) {
      stream.match(/\d*(?:e[+\-]?\d+)?/);
      return "number";
    } else if (/\d/.test(ch2)) {
      stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
      return "number";
    } else if (ch2 == "'" || ch2 == '"') {
      state.tokenize = tokenString16(ch2);
      return "string";
    } else if (ch2 == "`") {
      stream.match(/[^`]+`/);
      return "string.special";
    } else if (ch2 == "." && stream.match(/.(?:[.]|\d+)/)) {
      return "keyword";
    } else if (/[a-zA-Z\.]/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      var word2 = stream.current();
      if (atoms12.propertyIsEnumerable(word2))
        return "atom";
      if (keywords29.propertyIsEnumerable(word2)) {
        if (blockkeywords.propertyIsEnumerable(word2) && !stream.match(/\s*if(\s+|$)/, false))
          curPunc7 = "block";
        return "keyword";
      }
      if (builtins9.propertyIsEnumerable(word2))
        return "builtin";
      return "variable";
    } else if (ch2 == "%") {
      if (stream.skipTo("%"))
        stream.next();
      return "variableName.special";
    } else if (ch2 == "<" && stream.eat("-") || ch2 == "<" && stream.match("<-") || ch2 == "-" && stream.match(/>>?/)) {
      return "operator";
    } else if (ch2 == "=" && state.ctx.argList) {
      return "operator";
    } else if (opChars.test(ch2)) {
      if (ch2 == "$")
        return "operator";
      stream.eatWhile(opChars);
      return "operator";
    } else if (/[\(\){}\[\];]/.test(ch2)) {
      curPunc7 = ch2;
      if (ch2 == ";")
        return "punctuation";
      return null;
    } else {
      return null;
    }
  }
  function tokenString16(quote2) {
    return function(stream, state) {
      if (stream.eat("\\")) {
        var ch2 = stream.next();
        if (ch2 == "x")
          stream.match(/^[a-f0-9]{2}/i);
        else if ((ch2 == "u" || ch2 == "U") && stream.eat("{") && stream.skipTo("}"))
          stream.next();
        else if (ch2 == "u")
          stream.match(/^[a-f0-9]{4}/i);
        else if (ch2 == "U")
          stream.match(/^[a-f0-9]{8}/i);
        else if (/[0-7]/.test(ch2))
          stream.match(/^[0-7]{1,2}/);
        return "string.special";
      } else {
        var next2;
        while ((next2 = stream.next()) != null) {
          if (next2 == quote2) {
            state.tokenize = tokenBase28;
            break;
          }
          if (next2 == "\\") {
            stream.backUp(1);
            break;
          }
        }
        return "string";
      }
    };
  }
  function push(state, type7, stream) {
    state.ctx = {
      type: type7,
      indent: state.indent,
      flags: 0,
      column: stream.column(),
      prev: state.ctx
    };
  }
  function setFlag(state, flag) {
    var ctx = state.ctx;
    state.ctx = {
      type: ctx.type,
      indent: ctx.indent,
      flags: ctx.flags | flag,
      column: ctx.column,
      prev: ctx.prev
    };
  }
  function pop(state) {
    state.indent = state.ctx.indent;
    state.ctx = state.ctx.prev;
  }
  var commonAtoms, commonBuiltins2, commonKeywords4, commonBlockKeywords, atoms12, builtins9, keywords29, blockkeywords, opChars, curPunc7, ALIGN_YES, ALIGN_NO, BRACELESS, r;
  var init_r = __esm({
    "node_modules/@codemirror/legacy-modes/mode/r.js"() {
      commonAtoms = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
      commonBuiltins2 = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
      commonKeywords4 = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
      commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];
      atoms12 = wordObj2(commonAtoms);
      builtins9 = wordObj2(commonBuiltins2);
      keywords29 = wordObj2(commonKeywords4);
      blockkeywords = wordObj2(commonBlockKeywords);
      opChars = /[+\-*\/^<>=!&|~$:]/;
      ALIGN_YES = 1;
      ALIGN_NO = 2;
      BRACELESS = 4;
      r = {
        name: "r",
        startState: function(indentUnit2) {
          return {
            tokenize: tokenBase28,
            ctx: {
              type: "top",
              indent: -indentUnit2,
              flags: ALIGN_NO
            },
            indent: 0,
            afterIdent: false
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            if ((state.ctx.flags & 3) == 0)
              state.ctx.flags |= ALIGN_NO;
            if (state.ctx.flags & BRACELESS)
              pop(state);
            state.indent = stream.indentation();
          }
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          if (style2 != "comment" && (state.ctx.flags & ALIGN_NO) == 0)
            setFlag(state, ALIGN_YES);
          if ((curPunc7 == ";" || curPunc7 == "{" || curPunc7 == "}") && state.ctx.type == "block")
            pop(state);
          if (curPunc7 == "{")
            push(state, "}", stream);
          else if (curPunc7 == "(") {
            push(state, ")", stream);
            if (state.afterIdent)
              state.ctx.argList = true;
          } else if (curPunc7 == "[")
            push(state, "]", stream);
          else if (curPunc7 == "block")
            push(state, "block", stream);
          else if (curPunc7 == state.ctx.type)
            pop(state);
          else if (state.ctx.type == "block" && style2 != "comment")
            setFlag(state, BRACELESS);
          state.afterIdent = style2 == "variable" || style2 == "keyword";
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != tokenBase28)
            return 0;
          var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx, closing3 = firstChar == ctx.type;
          if (ctx.flags & BRACELESS)
            ctx = ctx.prev;
          if (ctx.type == "block")
            return ctx.indent + (firstChar == "{" ? 0 : cx2.unit);
          else if (ctx.flags & ALIGN_YES)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indent + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          wordChars: ".",
          commentTokens: { line: "#" },
          autocomplete: commonAtoms.concat(commonBuiltins2, commonKeywords4)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/rpm.js
  var rpm_exports = {};
  __export(rpm_exports, {
    rpmChanges: () => rpmChanges,
    rpmSpec: () => rpmSpec
  });
  var headerSeparator, headerLine, simpleEmail, rpmChanges, arch, preamble, section, control_flow_complex, control_flow_simple, operators6, rpmSpec;
  var init_rpm = __esm({
    "node_modules/@codemirror/legacy-modes/mode/rpm.js"() {
      headerSeparator = /^-+$/;
      headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
      simpleEmail = /^[\w+.-]+@[\w.-]+/;
      rpmChanges = {
        name: "rpmchanges",
        token: function(stream) {
          if (stream.sol()) {
            if (stream.match(headerSeparator)) {
              return "tag";
            }
            if (stream.match(headerLine)) {
              return "tag";
            }
          }
          if (stream.match(simpleEmail)) {
            return "string";
          }
          stream.next();
          return null;
        }
      };
      arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;
      preamble = /^[a-zA-Z0-9()]+:/;
      section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
      control_flow_complex = /^%(ifnarch|ifarch|if)/;
      control_flow_simple = /^%(else|endif)/;
      operators6 = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/;
      rpmSpec = {
        name: "rpmspec",
        startState: function() {
          return {
            controlFlow: false,
            macroParameters: false,
            section: false
          };
        },
        token: function(stream, state) {
          var ch2 = stream.peek();
          if (ch2 == "#") {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.sol()) {
            if (stream.match(preamble)) {
              return "header";
            }
            if (stream.match(section)) {
              return "atom";
            }
          }
          if (stream.match(/^\$\w+/)) {
            return "def";
          }
          if (stream.match(/^\$\{\w+\}/)) {
            return "def";
          }
          if (stream.match(control_flow_simple)) {
            return "keyword";
          }
          if (stream.match(control_flow_complex)) {
            state.controlFlow = true;
            return "keyword";
          }
          if (state.controlFlow) {
            if (stream.match(operators6)) {
              return "operator";
            }
            if (stream.match(/^(\d+)/)) {
              return "number";
            }
            if (stream.eol()) {
              state.controlFlow = false;
            }
          }
          if (stream.match(arch)) {
            if (stream.eol()) {
              state.controlFlow = false;
            }
            return "number";
          }
          if (stream.match(/^%[\w]+/)) {
            if (stream.match("(")) {
              state.macroParameters = true;
            }
            return "keyword";
          }
          if (state.macroParameters) {
            if (stream.match(/^\d+/)) {
              return "number";
            }
            if (stream.match(")")) {
              state.macroParameters = false;
              return "keyword";
            }
          }
          if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
            if (stream.eol()) {
              state.controlFlow = false;
            }
            return "def";
          }
          stream.next();
          return null;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/ruby.js
  var ruby_exports = {};
  __export(ruby_exports, {
    ruby: () => ruby
  });
  function wordObj3(words22) {
    var o = {};
    for (var i = 0, e = words22.length; i < e; ++i)
      o[words22[i]] = true;
    return o;
  }
  function chain7(newtok, stream, state) {
    state.tokenize.push(newtok);
    return newtok(stream, state);
  }
  function tokenBase29(stream, state) {
    if (stream.sol() && stream.match("=begin") && stream.eol()) {
      state.tokenize.push(readBlockComment);
      return "comment";
    }
    if (stream.eatSpace())
      return null;
    var ch2 = stream.next(), m;
    if (ch2 == "`" || ch2 == "'" || ch2 == '"') {
      return chain7(readQuoted2(ch2, "string", ch2 == '"' || ch2 == "`"), stream, state);
    } else if (ch2 == "/") {
      if (regexpAhead(stream))
        return chain7(readQuoted2(ch2, "string.special", true), stream, state);
      else
        return "operator";
    } else if (ch2 == "%") {
      var style2 = "string", embed = true;
      if (stream.eat("s"))
        style2 = "atom";
      else if (stream.eat(/[WQ]/))
        style2 = "string";
      else if (stream.eat(/[r]/))
        style2 = "string.special";
      else if (stream.eat(/[wxq]/)) {
        style2 = "string";
        embed = false;
      }
      var delim = stream.eat(/[^\w\s=]/);
      if (!delim)
        return "operator";
      if (opening.propertyIsEnumerable(delim))
        delim = opening[delim];
      return chain7(readQuoted2(delim, style2, embed, true), stream, state);
    } else if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
      return chain7(readHereDoc(m[2], m[1]), stream, state);
    } else if (ch2 == "0") {
      if (stream.eat("x"))
        stream.eatWhile(/[\da-fA-F]/);
      else if (stream.eat("b"))
        stream.eatWhile(/[01]/);
      else
        stream.eatWhile(/[0-7]/);
      return "number";
    } else if (/\d/.test(ch2)) {
      stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
      return "number";
    } else if (ch2 == "?") {
      while (stream.match(/^\\[CM]-/)) {
      }
      if (stream.eat("\\"))
        stream.eatWhile(/\w/);
      else
        stream.next();
      return "string";
    } else if (ch2 == ":") {
      if (stream.eat("'"))
        return chain7(readQuoted2("'", "atom", false), stream, state);
      if (stream.eat('"'))
        return chain7(readQuoted2('"', "atom", true), stream, state);
      if (stream.eat(/[\<\>]/)) {
        stream.eat(/[\<\>]/);
        return "atom";
      }
      if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
        return "atom";
      }
      if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
        stream.eatWhile(/[\w$\xa1-\uffff]/);
        stream.eat(/[\?\!\=]/);
        return "atom";
      }
      return "operator";
    } else if (ch2 == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
      stream.eat("@");
      stream.eatWhile(/[\w\xa1-\uffff]/);
      return "propertyName";
    } else if (ch2 == "$") {
      if (stream.eat(/[a-zA-Z_]/)) {
        stream.eatWhile(/[\w]/);
      } else if (stream.eat(/\d/)) {
        stream.eat(/\d/);
      } else {
        stream.next();
      }
      return "variableName.special";
    } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch2)) {
      stream.eatWhile(/[\w\xa1-\uffff]/);
      stream.eat(/[\?\!]/);
      if (stream.eat(":"))
        return "atom";
      return "variable";
    } else if (ch2 == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
      curPunc8 = "|";
      return null;
    } else if (/[\(\)\[\]{}\\;]/.test(ch2)) {
      curPunc8 = ch2;
      return null;
    } else if (ch2 == "-" && stream.eat(">")) {
      return "operator";
    } else if (/[=+\-\/*:\.^%<>~|]/.test(ch2)) {
      var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
      if (ch2 == "." && !more)
        curPunc8 = ".";
      return "operator";
    } else {
      return null;
    }
  }
  function regexpAhead(stream) {
    var start2 = stream.pos, depth = 0, next2, found = false, escaped = false;
    while ((next2 = stream.next()) != null) {
      if (!escaped) {
        if ("[{(".indexOf(next2) > -1) {
          depth++;
        } else if ("]})".indexOf(next2) > -1) {
          depth--;
          if (depth < 0)
            break;
        } else if (next2 == "/" && depth == 0) {
          found = true;
          break;
        }
        escaped = next2 == "\\";
      } else {
        escaped = false;
      }
    }
    stream.backUp(stream.pos - start2);
    return found;
  }
  function tokenBaseUntilBrace2(depth) {
    if (!depth)
      depth = 1;
    return function(stream, state) {
      if (stream.peek() == "}") {
        if (depth == 1) {
          state.tokenize.pop();
          return state.tokenize[state.tokenize.length - 1](stream, state);
        } else {
          state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace2(depth - 1);
        }
      } else if (stream.peek() == "{") {
        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace2(depth + 1);
      }
      return tokenBase29(stream, state);
    };
  }
  function tokenBaseOnce() {
    var alreadyCalled = false;
    return function(stream, state) {
      if (alreadyCalled) {
        state.tokenize.pop();
        return state.tokenize[state.tokenize.length - 1](stream, state);
      }
      alreadyCalled = true;
      return tokenBase29(stream, state);
    };
  }
  function readQuoted2(quote2, style2, embed, unescaped) {
    return function(stream, state) {
      var escaped = false, ch2;
      if (state.context.type === "read-quoted-paused") {
        state.context = state.context.prev;
        stream.eat("}");
      }
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && (unescaped || !escaped)) {
          state.tokenize.pop();
          break;
        }
        if (embed && ch2 == "#" && !escaped) {
          if (stream.eat("{")) {
            if (quote2 == "}") {
              state.context = { prev: state.context, type: "read-quoted-paused" };
            }
            state.tokenize.push(tokenBaseUntilBrace2());
            break;
          } else if (/[@\$]/.test(stream.peek())) {
            state.tokenize.push(tokenBaseOnce());
            break;
          }
        }
        escaped = !escaped && ch2 == "\\";
      }
      return style2;
    };
  }
  function readHereDoc(phrase, mayIndent) {
    return function(stream, state) {
      if (mayIndent)
        stream.eatSpace();
      if (stream.match(phrase))
        state.tokenize.pop();
      else
        stream.skipToEnd();
      return "string";
    };
  }
  function readBlockComment(stream, state) {
    if (stream.sol() && stream.match("=end") && stream.eol())
      state.tokenize.pop();
    stream.skipToEnd();
    return "comment";
  }
  var keywordList, keywords30, indentWords, dedentWords, opening, closing, curPunc8, ruby;
  var init_ruby = __esm({
    "node_modules/@codemirror/legacy-modes/mode/ruby.js"() {
      keywordList = [
        "alias",
        "and",
        "BEGIN",
        "begin",
        "break",
        "case",
        "class",
        "def",
        "defined?",
        "do",
        "else",
        "elsif",
        "END",
        "end",
        "ensure",
        "false",
        "for",
        "if",
        "in",
        "module",
        "next",
        "not",
        "or",
        "redo",
        "rescue",
        "retry",
        "return",
        "self",
        "super",
        "then",
        "true",
        "undef",
        "unless",
        "until",
        "when",
        "while",
        "yield",
        "nil",
        "raise",
        "throw",
        "catch",
        "fail",
        "loop",
        "callcc",
        "caller",
        "lambda",
        "proc",
        "public",
        "protected",
        "private",
        "require",
        "load",
        "require_relative",
        "extend",
        "autoload",
        "__END__",
        "__FILE__",
        "__LINE__",
        "__dir__"
      ];
      keywords30 = wordObj3(keywordList);
      indentWords = wordObj3([
        "def",
        "class",
        "case",
        "for",
        "while",
        "until",
        "module",
        "catch",
        "loop",
        "proc",
        "begin"
      ]);
      dedentWords = wordObj3(["end", "until"]);
      opening = { "[": "]", "{": "}", "(": ")" };
      closing = { "]": "[", "}": "{", ")": "(" };
      ruby = {
        name: "ruby",
        startState: function(indentUnit2) {
          return {
            tokenize: [tokenBase29],
            indented: 0,
            context: { type: "top", indented: -indentUnit2 },
            continuedLine: false,
            lastTok: null,
            varList: false
          };
        },
        token: function(stream, state) {
          curPunc8 = null;
          if (stream.sol())
            state.indented = stream.indentation();
          var style2 = state.tokenize[state.tokenize.length - 1](stream, state), kwtype;
          var thisTok = curPunc8;
          if (style2 == "variable") {
            var word2 = stream.current();
            style2 = state.lastTok == "." ? "property" : keywords30.propertyIsEnumerable(stream.current()) ? "keyword" : /^[A-Z]/.test(word2) ? "tag" : state.lastTok == "def" || state.lastTok == "class" || state.varList ? "def" : "variable";
            if (style2 == "keyword") {
              thisTok = word2;
              if (indentWords.propertyIsEnumerable(word2))
                kwtype = "indent";
              else if (dedentWords.propertyIsEnumerable(word2))
                kwtype = "dedent";
              else if ((word2 == "if" || word2 == "unless") && stream.column() == stream.indentation())
                kwtype = "indent";
              else if (word2 == "do" && state.context.indented < state.indented)
                kwtype = "indent";
            }
          }
          if (curPunc8 || style2 && style2 != "comment")
            state.lastTok = thisTok;
          if (curPunc8 == "|")
            state.varList = !state.varList;
          if (kwtype == "indent" || /[\(\[\{]/.test(curPunc8))
            state.context = { prev: state.context, type: curPunc8 || style2, indented: state.indented };
          else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc8)) && state.context.prev)
            state.context = state.context.prev;
          if (stream.eol())
            state.continuedLine = curPunc8 == "\\" || style2 == "operator";
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize[state.tokenize.length - 1] != tokenBase29)
            return null;
          var firstChar = textAfter && textAfter.charAt(0);
          var ct = state.context;
          var closed = ct.type == closing[firstChar] || ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
          return ct.indented + (closed ? 0 : cx2.unit) + (state.continuedLine ? cx2.unit : 0);
        },
        languageData: {
          indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
          commentTokens: { line: "#" },
          autocomplete: keywordList
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/sas.js
  var sas_exports = {};
  __export(sas_exports, {
    sas: () => sas
  });
  function define3(style2, string3, context) {
    if (context) {
      var split = string3.split(" ");
      for (var i = 0; i < split.length; i++) {
        words14[split[i]] = { style: style2, state: context };
      }
    }
  }
  function tokenize3(stream, state) {
    var ch2 = stream.next();
    if (ch2 === "/" && stream.eat("*")) {
      state.continueComment = true;
      return "comment";
    } else if (state.continueComment === true) {
      if (ch2 === "*" && stream.peek() === "/") {
        stream.next();
        state.continueComment = false;
      } else if (stream.skipTo("*")) {
        stream.skipTo("*");
        stream.next();
        if (stream.eat("/"))
          state.continueComment = false;
      } else {
        stream.skipToEnd();
      }
      return "comment";
    }
    if (ch2 == "*" && stream.column() == stream.indentation()) {
      stream.skipToEnd();
      return "comment";
    }
    var doubleOperator = ch2 + stream.peek();
    if ((ch2 === '"' || ch2 === "'") && !state.continueString) {
      state.continueString = ch2;
      return "string";
    } else if (state.continueString) {
      if (state.continueString == ch2) {
        state.continueString = null;
      } else if (stream.skipTo(state.continueString)) {
        stream.next();
        state.continueString = null;
      } else {
        stream.skipToEnd();
      }
      return "string";
    } else if (state.continueString !== null && stream.eol()) {
      stream.skipTo(state.continueString) || stream.skipToEnd();
      return "string";
    } else if (/[\d\.]/.test(ch2)) {
      if (ch2 === ".")
        stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
      else if (ch2 === "0")
        stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
      else
        stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
      return "number";
    } else if (isDoubleOperatorChar2.test(ch2 + stream.peek())) {
      stream.next();
      return "operator";
    } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
      stream.next();
      if (stream.peek() === " ")
        return isDoubleOperatorSym[doubleOperator.toLowerCase()];
    } else if (isSingleOperatorChar2.test(ch2)) {
      return "operator";
    }
    var word2;
    if (stream.match(/[%&;\w]+/, false) != null) {
      word2 = ch2 + stream.match(/[%&;\w]+/, true);
      if (/&/.test(word2))
        return "variable";
    } else {
      word2 = ch2;
    }
    if (state.nextword) {
      stream.match(/[\w]+/);
      if (stream.peek() === ".")
        stream.skipTo(" ");
      state.nextword = false;
      return "variableName.special";
    }
    word2 = word2.toLowerCase();
    if (state.inDataStep) {
      if (word2 === "run;" || stream.match(/run\s;/)) {
        state.inDataStep = false;
        return "builtin";
      }
      if (word2 && stream.next() === ".") {
        if (/\w/.test(stream.peek()))
          return "variableName.special";
        else
          return "variable";
      }
      if (word2 && words14.hasOwnProperty(word2) && (words14[word2].state.indexOf("inDataStep") !== -1 || words14[word2].state.indexOf("ALL") !== -1)) {
        if (stream.start < stream.pos)
          stream.backUp(stream.pos - stream.start);
        for (var i = 0; i < word2.length; ++i)
          stream.next();
        return words14[word2].style;
      }
    }
    if (state.inProc) {
      if (word2 === "run;" || word2 === "quit;") {
        state.inProc = false;
        return "builtin";
      }
      if (word2 && words14.hasOwnProperty(word2) && (words14[word2].state.indexOf("inProc") !== -1 || words14[word2].state.indexOf("ALL") !== -1)) {
        stream.match(/[\w]+/);
        return words14[word2].style;
      }
    }
    if (state.inMacro) {
      if (word2 === "%mend") {
        if (stream.peek() === ";")
          stream.next();
        state.inMacro = false;
        return "builtin";
      }
      if (word2 && words14.hasOwnProperty(word2) && (words14[word2].state.indexOf("inMacro") !== -1 || words14[word2].state.indexOf("ALL") !== -1)) {
        stream.match(/[\w]+/);
        return words14[word2].style;
      }
      return "atom";
    }
    if (word2 && words14.hasOwnProperty(word2)) {
      stream.backUp(1);
      stream.match(/[\w]+/);
      if (word2 === "data" && /=/.test(stream.peek()) === false) {
        state.inDataStep = true;
        state.nextword = true;
        return "builtin";
      }
      if (word2 === "proc") {
        state.inProc = true;
        state.nextword = true;
        return "builtin";
      }
      if (word2 === "%macro") {
        state.inMacro = true;
        state.nextword = true;
        return "builtin";
      }
      if (/title[1-9]/.test(word2))
        return "def";
      if (word2 === "footnote") {
        stream.eat(/[1-9]/);
        return "def";
      }
      if (state.inDataStep === true && words14[word2].state.indexOf("inDataStep") !== -1)
        return words14[word2].style;
      if (state.inProc === true && words14[word2].state.indexOf("inProc") !== -1)
        return words14[word2].style;
      if (state.inMacro === true && words14[word2].state.indexOf("inMacro") !== -1)
        return words14[word2].style;
      if (words14[word2].state.indexOf("ALL") !== -1)
        return words14[word2].style;
      return null;
    }
    return null;
  }
  var words14, isDoubleOperatorSym, isDoubleOperatorChar2, isSingleOperatorChar2, sas;
  var init_sas = __esm({
    "node_modules/@codemirror/legacy-modes/mode/sas.js"() {
      words14 = {};
      isDoubleOperatorSym = {
        eq: "operator",
        lt: "operator",
        le: "operator",
        gt: "operator",
        ge: "operator",
        "in": "operator",
        ne: "operator",
        or: "operator"
      };
      isDoubleOperatorChar2 = /(<=|>=|!=|<>)/;
      isSingleOperatorChar2 = /[=\(:\),{}.*<>+\-\/^\[\]]/;
      define3("def", "stack pgm view source debug nesting nolist", ["inDataStep"]);
      define3("def", "if while until for do do; end end; then else cancel", ["inDataStep"]);
      define3("def", "label format _n_ _error_", ["inDataStep"]);
      define3("def", "ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME", ["inDataStep"]);
      define3("def", "filevar finfo finv fipname fipnamel fipstate first firstobs floor", ["inDataStep"]);
      define3("def", "varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday", ["inDataStep"]);
      define3("def", "zipfips zipname zipnamel zipstate", ["inDataStep"]);
      define3("def", "put putc putn", ["inDataStep"]);
      define3("builtin", "data run", ["inDataStep"]);
      define3("def", "data", ["inProc"]);
      define3("def", "%if %end %end; %else %else; %do %do; %then", ["inMacro"]);
      define3("builtin", "proc run; quit; libname filename %macro %mend option options", ["ALL"]);
      define3("def", "footnote title libname ods", ["ALL"]);
      define3("def", "%let %put %global %sysfunc %eval ", ["ALL"]);
      define3("variable", "&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext", ["ALL"]);
      define3("def", "source2 nosource2 page pageno pagesize", ["ALL"]);
      define3("def", "_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max", ["inDataStep", "inProc"]);
      define3("operator", "and not ", ["inDataStep", "inProc"]);
      sas = {
        name: "sas",
        startState: function() {
          return {
            inDataStep: false,
            inProc: false,
            inMacro: false,
            nextword: false,
            continueString: null,
            continueComment: false
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return tokenize3(stream, state);
        },
        languageData: {
          commentTokens: { block: { open: "/*", close: "*/" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/sass.js
  var sass_exports = {};
  __export(sass_exports, {
    sass: () => sass
  });
  function tokenRegexp(words22) {
    return new RegExp("^" + words22.join("|"));
  }
  function isEndLine(stream) {
    return !stream.peek() || stream.match(/\s+$/, false);
  }
  function urlTokens(stream, state) {
    let ch2 = stream.peek();
    if (ch2 === ")") {
      stream.next();
      state.tokenizer = tokenBase30;
      return "operator";
    } else if (ch2 === "(") {
      stream.next();
      stream.eatSpace();
      return "operator";
    } else if (ch2 === "'" || ch2 === '"') {
      state.tokenizer = buildStringTokenizer(stream.next());
      return "string";
    } else {
      state.tokenizer = buildStringTokenizer(")", false);
      return "string";
    }
  }
  function comment2(indentation2, multiLine) {
    return function(stream, state) {
      if (stream.sol() && stream.indentation() <= indentation2) {
        state.tokenizer = tokenBase30;
        return tokenBase30(stream, state);
      }
      if (multiLine && stream.skipTo("*/")) {
        stream.next();
        stream.next();
        state.tokenizer = tokenBase30;
      } else {
        stream.skipToEnd();
      }
      return "comment";
    };
  }
  function buildStringTokenizer(quote2, greedy2) {
    if (greedy2 == null) {
      greedy2 = true;
    }
    function stringTokenizer2(stream, state) {
      let nextChar = stream.next();
      let peekChar = stream.peek();
      let previousChar = stream.string.charAt(stream.pos - 2);
      let endingString = nextChar !== "\\" && peekChar === quote2 || nextChar === quote2 && previousChar !== "\\";
      if (endingString) {
        if (nextChar !== quote2 && greedy2) {
          stream.next();
        }
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        state.tokenizer = tokenBase30;
        return "string";
      } else if (nextChar === "#" && peekChar === "{") {
        state.tokenizer = buildInterpolationTokenizer(stringTokenizer2);
        stream.next();
        return "operator";
      } else {
        return "string";
      }
    }
    return stringTokenizer2;
  }
  function buildInterpolationTokenizer(currentTokenizer) {
    return function(stream, state) {
      if (stream.peek() === "}") {
        stream.next();
        state.tokenizer = currentTokenizer;
        return "operator";
      } else {
        return tokenBase30(stream, state);
      }
    };
  }
  function indent3(state, stream) {
    if (state.indentCount == 0) {
      state.indentCount++;
      let lastScopeOffset = state.scopes[0].offset;
      let currentOffset = lastScopeOffset + stream.indentUnit;
      state.scopes.unshift({ offset: currentOffset });
    }
  }
  function dedent3(state) {
    if (state.scopes.length == 1)
      return;
    state.scopes.shift();
  }
  function tokenBase30(stream, state) {
    let ch2 = stream.peek();
    if (stream.match("/*")) {
      state.tokenizer = comment2(stream.indentation(), true);
      return state.tokenizer(stream, state);
    }
    if (stream.match("//")) {
      state.tokenizer = comment2(stream.indentation(), false);
      return state.tokenizer(stream, state);
    }
    if (stream.match("#{")) {
      state.tokenizer = buildInterpolationTokenizer(tokenBase30);
      return "operator";
    }
    if (ch2 === '"' || ch2 === "'") {
      stream.next();
      state.tokenizer = buildStringTokenizer(ch2);
      return "string";
    }
    if (!state.cursorHalf) {
      if (ch2 === "-") {
        if (stream.match(/^-\w+-/)) {
          return "meta";
        }
      }
      if (ch2 === ".") {
        stream.next();
        if (stream.match(/^[\w-]+/)) {
          indent3(state, stream);
          return "qualifier";
        } else if (stream.peek() === "#") {
          indent3(state, stream);
          return "tag";
        }
      }
      if (ch2 === "#") {
        stream.next();
        if (stream.match(/^[\w-]+/)) {
          indent3(state, stream);
          return "builtin";
        }
        if (stream.peek() === "#") {
          indent3(state, stream);
          return "tag";
        }
      }
      if (ch2 === "$") {
        stream.next();
        stream.eatWhile(/[\w-]/);
        return "variable-2";
      }
      if (stream.match(/^-?[0-9\.]+/))
        return "number";
      if (stream.match(/^(px|em|in)\b/))
        return "unit";
      if (stream.match(keywordsRegexp))
        return "keyword";
      if (stream.match(/^url/) && stream.peek() === "(") {
        state.tokenizer = urlTokens;
        return "atom";
      }
      if (ch2 === "=") {
        if (stream.match(/^=[\w-]+/)) {
          indent3(state, stream);
          return "meta";
        }
      }
      if (ch2 === "+") {
        if (stream.match(/^\+[\w-]+/)) {
          return "meta";
        }
      }
      if (ch2 === "@") {
        if (stream.match("@extend")) {
          if (!stream.match(/\s*[\w]/))
            dedent3(state);
        }
      }
      if (stream.match(/^@(else if|if|media|else|for|each|while|mixin|function)/)) {
        indent3(state, stream);
        return "def";
      }
      if (ch2 === "@") {
        stream.next();
        stream.eatWhile(/[\w-]/);
        return "def";
      }
      if (stream.eatWhile(/[\w-]/)) {
        if (stream.match(/ *: *[\w-\+\$#!\("']/, false)) {
          word = stream.current().toLowerCase();
          let prop = state.prevProp + "-" + word;
          if (propertyKeywords2.has(prop)) {
            return "property";
          } else if (propertyKeywords2.has(word)) {
            state.prevProp = word;
            return "property";
          } else if (fontProperties2.has(word)) {
            return "property";
          }
          return "tag";
        } else if (stream.match(/ *:/, false)) {
          indent3(state, stream);
          state.cursorHalf = 1;
          state.prevProp = stream.current().toLowerCase();
          return "property";
        } else if (stream.match(/ *,/, false)) {
          return "tag";
        } else {
          indent3(state, stream);
          return "tag";
        }
      }
      if (ch2 === ":") {
        if (stream.match(pseudoElementsRegexp)) {
          return "type";
        }
        stream.next();
        state.cursorHalf = 1;
        return "operator";
      }
    } else {
      if (ch2 === "#") {
        stream.next();
        if (stream.match(/[0-9a-fA-F]{6}|[0-9a-fA-F]{3}/)) {
          if (isEndLine(stream)) {
            state.cursorHalf = 0;
          }
          return "number";
        }
      }
      if (stream.match(/^-?[0-9\.]+/)) {
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        return "number";
      }
      if (stream.match(/^(px|em|in)\b/)) {
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        return "unit";
      }
      if (stream.match(keywordsRegexp)) {
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        return "keyword";
      }
      if (stream.match(/^url/) && stream.peek() === "(") {
        state.tokenizer = urlTokens;
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        return "atom";
      }
      if (ch2 === "$") {
        stream.next();
        stream.eatWhile(/[\w-]/);
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        return "variable-2";
      }
      if (ch2 === "!") {
        stream.next();
        state.cursorHalf = 0;
        return stream.match(/^[\w]+/) ? "keyword" : "operator";
      }
      if (stream.match(opRegexp)) {
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        return "operator";
      }
      if (stream.eatWhile(/[\w-]/)) {
        if (isEndLine(stream)) {
          state.cursorHalf = 0;
        }
        word = stream.current().toLowerCase();
        if (valueKeywords2.has(word)) {
          return "atom";
        } else if (colorKeywords2.has(word)) {
          return "keyword";
        } else if (propertyKeywords2.has(word)) {
          state.prevProp = stream.current().toLowerCase();
          return "property";
        } else {
          return "tag";
        }
      }
      if (isEndLine(stream)) {
        state.cursorHalf = 0;
        return null;
      }
    }
    if (stream.match(opRegexp))
      return "operator";
    stream.next();
    return null;
  }
  function tokenLexer2(stream, state) {
    if (stream.sol())
      state.indentCount = 0;
    let style2 = state.tokenizer(stream, state);
    let current = stream.current();
    if (current === "@return" || current === "}") {
      dedent3(state);
    }
    if (style2 !== null) {
      let startOfToken = stream.pos - current.length;
      let withCurrentIndent = startOfToken + stream.indentUnit * state.indentCount;
      let newScopes = [];
      for (let i = 0; i < state.scopes.length; i++) {
        let scope = state.scopes[i];
        if (scope.offset <= withCurrentIndent)
          newScopes.push(scope);
      }
      state.scopes = newScopes;
    }
    return style2;
  }
  var propertyKeywords2, colorKeywords2, valueKeywords2, fontProperties2, keywords31, keywordsRegexp, operators7, opRegexp, pseudoElementsRegexp, word, sass;
  var init_sass = __esm({
    "node_modules/@codemirror/legacy-modes/mode/sass.js"() {
      init_css();
      propertyKeywords2 = new Set(keywords5.properties);
      colorKeywords2 = new Set(keywords5.colors);
      valueKeywords2 = new Set(keywords5.values);
      fontProperties2 = new Set(keywords5.fonts);
      keywords31 = ["true", "false", "null", "auto"];
      keywordsRegexp = new RegExp("^" + keywords31.join("|"));
      operators7 = [
        "\\(",
        "\\)",
        "=",
        ">",
        "<",
        "==",
        ">=",
        "<=",
        "\\+",
        "-",
        "\\!=",
        "/",
        "\\*",
        "%",
        "and",
        "or",
        "not",
        ";",
        "\\{",
        "\\}",
        ":"
      ];
      opRegexp = tokenRegexp(operators7);
      pseudoElementsRegexp = /^::?[a-zA-Z_][\w\-]*/;
      sass = {
        name: "sass",
        startState: function() {
          return {
            tokenizer: tokenBase30,
            scopes: [{ offset: 0, type: "sass" }],
            indentCount: 0,
            cursorHalf: 0,
            // cursor half tells us if cursor lies after (1)
            // or before (0) colon (well... more or less)
            definedVars: [],
            definedMixins: []
          };
        },
        token: function(stream, state) {
          let style2 = tokenLexer2(stream, state);
          state.lastToken = { style: style2, content: stream.current() };
          return style2;
        },
        indent: function(state) {
          return state.scopes[0].offset;
        },
        languageData: {
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          autocomplete: keywords5.all
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/scheme.js
  var scheme_exports = {};
  __export(scheme_exports, {
    scheme: () => scheme
  });
  function makeKeywords2(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function stateStack(indent5, type7, prev) {
    this.indent = indent5;
    this.type = type7;
    this.prev = prev;
  }
  function pushStack(state, indent5, type7) {
    state.indentStack = new stateStack(indent5, type7, state.indentStack);
  }
  function popStack(state) {
    state.indentStack = state.indentStack.prev;
  }
  function isBinaryNumber(stream) {
    return stream.match(binaryMatcher);
  }
  function isOctalNumber(stream) {
    return stream.match(octalMatcher);
  }
  function isDecimalNumber(stream, backup) {
    if (backup === true) {
      stream.backUp(1);
    }
    return stream.match(decimalMatcher);
  }
  function isHexNumber(stream) {
    return stream.match(hexMatcher);
  }
  function processEscapedSequence(stream, options) {
    var next2, escaped = false;
    while ((next2 = stream.next()) != null) {
      if (next2 == options.token && !escaped) {
        options.state.mode = false;
        break;
      }
      escaped = !escaped && next2 == "\\";
    }
  }
  var BUILTIN2, COMMENT2, STRING2, SYMBOL, ATOM2, NUMBER2, BRACKET, INDENT_WORD_SKIP, keywords32, indentKeys, binaryMatcher, octalMatcher, hexMatcher, decimalMatcher, scheme;
  var init_scheme = __esm({
    "node_modules/@codemirror/legacy-modes/mode/scheme.js"() {
      BUILTIN2 = "builtin";
      COMMENT2 = "comment";
      STRING2 = "string";
      SYMBOL = "symbol";
      ATOM2 = "atom";
      NUMBER2 = "number";
      BRACKET = "bracket";
      INDENT_WORD_SKIP = 2;
      keywords32 = makeKeywords2("\u03BB case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");
      indentKeys = makeKeywords2("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless");
      binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);
      octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);
      hexMatcher = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);
      decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);
      scheme = {
        name: "scheme",
        startState: function() {
          return {
            indentStack: null,
            indentation: 0,
            mode: false,
            sExprComment: false,
            sExprQuote: false
          };
        },
        token: function(stream, state) {
          if (state.indentStack == null && stream.sol()) {
            state.indentation = stream.indentation();
          }
          if (stream.eatSpace()) {
            return null;
          }
          var returnType = null;
          switch (state.mode) {
            case "string":
              processEscapedSequence(stream, {
                token: '"',
                state
              });
              returnType = STRING2;
              break;
            case "symbol":
              processEscapedSequence(stream, {
                token: "|",
                state
              });
              returnType = SYMBOL;
              break;
            case "comment":
              var next2, maybeEnd = false;
              while ((next2 = stream.next()) != null) {
                if (next2 == "#" && maybeEnd) {
                  state.mode = false;
                  break;
                }
                maybeEnd = next2 == "|";
              }
              returnType = COMMENT2;
              break;
            case "s-expr-comment":
              state.mode = false;
              if (stream.peek() == "(" || stream.peek() == "[") {
                state.sExprComment = 0;
              } else {
                stream.eatWhile(/[^\s\(\)\[\]]/);
                returnType = COMMENT2;
                break;
              }
            default:
              var ch2 = stream.next();
              if (ch2 == '"') {
                state.mode = "string";
                returnType = STRING2;
              } else if (ch2 == "'") {
                if (stream.peek() == "(" || stream.peek() == "[") {
                  if (typeof state.sExprQuote != "number") {
                    state.sExprQuote = 0;
                  }
                  returnType = ATOM2;
                } else {
                  stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
                  returnType = ATOM2;
                }
              } else if (ch2 == "|") {
                state.mode = "symbol";
                returnType = SYMBOL;
              } else if (ch2 == "#") {
                if (stream.eat("|")) {
                  state.mode = "comment";
                  returnType = COMMENT2;
                } else if (stream.eat(/[tf]/i)) {
                  returnType = ATOM2;
                } else if (stream.eat(";")) {
                  state.mode = "s-expr-comment";
                  returnType = COMMENT2;
                } else {
                  var numTest = null, hasExactness = false, hasRadix = true;
                  if (stream.eat(/[ei]/i)) {
                    hasExactness = true;
                  } else {
                    stream.backUp(1);
                  }
                  if (stream.match(/^#b/i)) {
                    numTest = isBinaryNumber;
                  } else if (stream.match(/^#o/i)) {
                    numTest = isOctalNumber;
                  } else if (stream.match(/^#x/i)) {
                    numTest = isHexNumber;
                  } else if (stream.match(/^#d/i)) {
                    numTest = isDecimalNumber;
                  } else if (stream.match(/^[-+0-9.]/, false)) {
                    hasRadix = false;
                    numTest = isDecimalNumber;
                  } else if (!hasExactness) {
                    stream.eat("#");
                  }
                  if (numTest != null) {
                    if (hasRadix && !hasExactness) {
                      stream.match(/^#[ei]/i);
                    }
                    if (numTest(stream))
                      returnType = NUMBER2;
                  }
                }
              } else if (/^[-+0-9.]/.test(ch2) && isDecimalNumber(stream, true)) {
                returnType = NUMBER2;
              } else if (ch2 == ";") {
                stream.skipToEnd();
                returnType = COMMENT2;
              } else if (ch2 == "(" || ch2 == "[") {
                var keyWord = "";
                var indentTemp = stream.column(), letter;
                while ((letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null) {
                  keyWord += letter;
                }
                if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) {
                  pushStack(state, indentTemp + INDENT_WORD_SKIP, ch2);
                } else {
                  stream.eatSpace();
                  if (stream.eol() || stream.peek() == ";") {
                    pushStack(state, indentTemp + 1, ch2);
                  } else {
                    pushStack(state, indentTemp + stream.current().length, ch2);
                  }
                }
                stream.backUp(stream.current().length - 1);
                if (typeof state.sExprComment == "number")
                  state.sExprComment++;
                if (typeof state.sExprQuote == "number")
                  state.sExprQuote++;
                returnType = BRACKET;
              } else if (ch2 == ")" || ch2 == "]") {
                returnType = BRACKET;
                if (state.indentStack != null && state.indentStack.type == (ch2 == ")" ? "(" : "[")) {
                  popStack(state);
                  if (typeof state.sExprComment == "number") {
                    if (--state.sExprComment == 0) {
                      returnType = COMMENT2;
                      state.sExprComment = false;
                    }
                  }
                  if (typeof state.sExprQuote == "number") {
                    if (--state.sExprQuote == 0) {
                      returnType = ATOM2;
                      state.sExprQuote = false;
                    }
                  }
                }
              } else {
                stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
                if (keywords32 && keywords32.propertyIsEnumerable(stream.current())) {
                  returnType = BUILTIN2;
                } else
                  returnType = "variable";
              }
          }
          return typeof state.sExprComment == "number" ? COMMENT2 : typeof state.sExprQuote == "number" ? ATOM2 : returnType;
        },
        indent: function(state) {
          if (state.indentStack == null)
            return state.indentation;
          return state.indentStack.indent;
        },
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", '"'] },
          commentTokens: { line: ";;" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/shell.js
  var shell_exports = {};
  __export(shell_exports, {
    shell: () => shell
  });
  function define4(style2, dict) {
    for (var i = 0; i < dict.length; i++) {
      words15[dict[i]] = style2;
    }
  }
  function tokenBase31(stream, state) {
    if (stream.eatSpace())
      return null;
    var sol = stream.sol();
    var ch2 = stream.next();
    if (ch2 === "\\") {
      stream.next();
      return null;
    }
    if (ch2 === "'" || ch2 === '"' || ch2 === "`") {
      state.tokens.unshift(tokenString17(ch2, ch2 === "`" ? "quote" : "string"));
      return tokenize4(stream, state);
    }
    if (ch2 === "#") {
      if (sol && stream.eat("!")) {
        stream.skipToEnd();
        return "meta";
      }
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 === "$") {
      state.tokens.unshift(tokenDollar);
      return tokenize4(stream, state);
    }
    if (ch2 === "+" || ch2 === "=") {
      return "operator";
    }
    if (ch2 === "-") {
      stream.eat("-");
      stream.eatWhile(/\w/);
      return "attribute";
    }
    if (ch2 == "<") {
      if (stream.match("<<"))
        return "operator";
      var heredoc = stream.match(/^<-?\s*['"]?([^'"]*)['"]?/);
      if (heredoc) {
        state.tokens.unshift(tokenHeredoc(heredoc[1]));
        return "string.special";
      }
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/\d/);
      if (stream.eol() || !/\w/.test(stream.peek())) {
        return "number";
      }
    }
    stream.eatWhile(/[\w-]/);
    var cur = stream.current();
    if (stream.peek() === "=" && /\w+/.test(cur))
      return "def";
    return words15.hasOwnProperty(cur) ? words15[cur] : null;
  }
  function tokenString17(quote2, style2) {
    var close = quote2 == "(" ? ")" : quote2 == "{" ? "}" : quote2;
    return function(stream, state) {
      var next2, escaped = false;
      while ((next2 = stream.next()) != null) {
        if (next2 === close && !escaped) {
          state.tokens.shift();
          break;
        } else if (next2 === "$" && !escaped && quote2 !== "'" && stream.peek() != close) {
          escaped = true;
          stream.backUp(1);
          state.tokens.unshift(tokenDollar);
          break;
        } else if (!escaped && quote2 !== close && next2 === quote2) {
          state.tokens.unshift(tokenString17(quote2, style2));
          return tokenize4(stream, state);
        } else if (!escaped && /['"]/.test(next2) && !/['"]/.test(quote2)) {
          state.tokens.unshift(tokenStringStart(next2, "string"));
          stream.backUp(1);
          break;
        }
        escaped = !escaped && next2 === "\\";
      }
      return style2;
    };
  }
  function tokenStringStart(quote2, style2) {
    return function(stream, state) {
      state.tokens[0] = tokenString17(quote2, style2);
      stream.next();
      return tokenize4(stream, state);
    };
  }
  function tokenHeredoc(delim) {
    return function(stream, state) {
      if (stream.sol() && stream.string == delim)
        state.tokens.shift();
      stream.skipToEnd();
      return "string.special";
    };
  }
  function tokenize4(stream, state) {
    return (state.tokens[0] || tokenBase31)(stream, state);
  }
  var words15, commonAtoms2, commonKeywords5, commonCommands, tokenDollar, shell;
  var init_shell = __esm({
    "node_modules/@codemirror/legacy-modes/mode/shell.js"() {
      words15 = {};
      commonAtoms2 = ["true", "false"];
      commonKeywords5 = [
        "if",
        "then",
        "do",
        "else",
        "elif",
        "while",
        "until",
        "for",
        "in",
        "esac",
        "fi",
        "fin",
        "fil",
        "done",
        "exit",
        "set",
        "unset",
        "export",
        "function"
      ];
      commonCommands = [
        "ab",
        "awk",
        "bash",
        "beep",
        "cat",
        "cc",
        "cd",
        "chown",
        "chmod",
        "chroot",
        "clear",
        "cp",
        "curl",
        "cut",
        "diff",
        "echo",
        "find",
        "gawk",
        "gcc",
        "get",
        "git",
        "grep",
        "hg",
        "kill",
        "killall",
        "ln",
        "ls",
        "make",
        "mkdir",
        "openssl",
        "mv",
        "nc",
        "nl",
        "node",
        "npm",
        "ping",
        "ps",
        "restart",
        "rm",
        "rmdir",
        "sed",
        "service",
        "sh",
        "shopt",
        "shred",
        "source",
        "sort",
        "sleep",
        "ssh",
        "start",
        "stop",
        "su",
        "sudo",
        "svn",
        "tee",
        "telnet",
        "top",
        "touch",
        "vi",
        "vim",
        "wall",
        "wc",
        "wget",
        "who",
        "write",
        "yes",
        "zsh"
      ];
      define4("atom", commonAtoms2);
      define4("keyword", commonKeywords5);
      define4("builtin", commonCommands);
      tokenDollar = function(stream, state) {
        if (state.tokens.length > 1)
          stream.eat("$");
        var ch2 = stream.next();
        if (/['"({]/.test(ch2)) {
          state.tokens[0] = tokenString17(ch2, ch2 == "(" ? "quote" : ch2 == "{" ? "def" : "string");
          return tokenize4(stream, state);
        }
        if (!/\d/.test(ch2))
          stream.eatWhile(/\w/);
        state.tokens.shift();
        return "def";
      };
      shell = {
        name: "shell",
        startState: function() {
          return { tokens: [] };
        },
        token: function(stream, state) {
          return tokenize4(stream, state);
        },
        languageData: {
          autocomplete: commonAtoms2.concat(commonKeywords5, commonCommands),
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/sieve.js
  var sieve_exports = {};
  __export(sieve_exports, {
    sieve: () => sieve
  });
  function words16(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenBase32(stream, state) {
    var ch2 = stream.next();
    if (ch2 == "/" && stream.eat("*")) {
      state.tokenize = tokenCComment3;
      return tokenCComment3(stream, state);
    }
    if (ch2 === "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (ch2 == '"') {
      state.tokenize = tokenString18(ch2);
      return state.tokenize(stream, state);
    }
    if (ch2 == "(") {
      state._indent.push("(");
      state._indent.push("{");
      return null;
    }
    if (ch2 === "{") {
      state._indent.push("{");
      return null;
    }
    if (ch2 == ")") {
      state._indent.pop();
      state._indent.pop();
    }
    if (ch2 === "}") {
      state._indent.pop();
      return null;
    }
    if (ch2 == ",")
      return null;
    if (ch2 == ";")
      return null;
    if (/[{}\(\),;]/.test(ch2))
      return null;
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\d]/);
      stream.eat(/[KkMmGg]/);
      return "number";
    }
    if (ch2 == ":") {
      stream.eatWhile(/[a-zA-Z_]/);
      stream.eatWhile(/[a-zA-Z0-9_]/);
      return "operator";
    }
    stream.eatWhile(/\w/);
    var cur = stream.current();
    if (cur == "text" && stream.eat(":")) {
      state.tokenize = tokenMultiLineString;
      return "string";
    }
    if (keywords33.propertyIsEnumerable(cur))
      return "keyword";
    if (atoms13.propertyIsEnumerable(cur))
      return "atom";
    return null;
  }
  function tokenMultiLineString(stream, state) {
    state._multiLineString = true;
    if (!stream.sol()) {
      stream.eatSpace();
      if (stream.peek() == "#") {
        stream.skipToEnd();
        return "comment";
      }
      stream.skipToEnd();
      return "string";
    }
    if (stream.next() == "." && stream.eol()) {
      state._multiLineString = false;
      state.tokenize = tokenBase32;
    }
    return "string";
  }
  function tokenCComment3(stream, state) {
    var maybeEnd = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (maybeEnd && ch2 == "/") {
        state.tokenize = tokenBase32;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenString18(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped)
          break;
        escaped = !escaped && ch2 == "\\";
      }
      if (!escaped)
        state.tokenize = tokenBase32;
      return "string";
    };
  }
  var keywords33, atoms13, sieve;
  var init_sieve = __esm({
    "node_modules/@codemirror/legacy-modes/mode/sieve.js"() {
      keywords33 = words16("if elsif else stop require");
      atoms13 = words16("true false not");
      sieve = {
        name: "sieve",
        startState: function(base4) {
          return {
            tokenize: tokenBase32,
            baseIndent: base4 || 0,
            _indent: []
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return (state.tokenize || tokenBase32)(stream, state);
        },
        indent: function(state, _textAfter, cx2) {
          var length = state._indent.length;
          if (_textAfter && _textAfter[0] == "}")
            length--;
          if (length < 0)
            length = 0;
          return length * cx2.unit;
        },
        languageData: {
          indentOnInput: /^\s*\}$/
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/smalltalk.js
  var smalltalk_exports = {};
  __export(smalltalk_exports, {
    smalltalk: () => smalltalk
  });
  var specialChars, keywords34, Context8, Token, State, next, nextComment, nextString, nextSymbol, nextTemporaries, smalltalk;
  var init_smalltalk = __esm({
    "node_modules/@codemirror/legacy-modes/mode/smalltalk.js"() {
      specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
      keywords34 = /true|false|nil|self|super|thisContext/;
      Context8 = function(tokenizer2, parent) {
        this.next = tokenizer2;
        this.parent = parent;
      };
      Token = function(name2, context, eos) {
        this.name = name2;
        this.context = context;
        this.eos = eos;
      };
      State = function() {
        this.context = new Context8(next, null);
        this.expectVariable = true;
        this.indentation = 0;
        this.userIndentationDelta = 0;
      };
      State.prototype.userIndent = function(indentation2, indentUnit2) {
        this.userIndentationDelta = indentation2 > 0 ? indentation2 / indentUnit2 - this.indentation : 0;
      };
      next = function(stream, context, state) {
        var token = new Token(null, context, false);
        var aChar = stream.next();
        if (aChar === '"') {
          token = nextComment(stream, new Context8(nextComment, context));
        } else if (aChar === "'") {
          token = nextString(stream, new Context8(nextString, context));
        } else if (aChar === "#") {
          if (stream.peek() === "'") {
            stream.next();
            token = nextSymbol(stream, new Context8(nextSymbol, context));
          } else {
            if (stream.eatWhile(/[^\s.{}\[\]()]/))
              token.name = "string.special";
            else
              token.name = "meta";
          }
        } else if (aChar === "$") {
          if (stream.next() === "<") {
            stream.eatWhile(/[^\s>]/);
            stream.next();
          }
          token.name = "string.special";
        } else if (aChar === "|" && state.expectVariable) {
          token.context = new Context8(nextTemporaries, context);
        } else if (/[\[\]{}()]/.test(aChar)) {
          token.name = "bracket";
          token.eos = /[\[{(]/.test(aChar);
          if (aChar === "[") {
            state.indentation++;
          } else if (aChar === "]") {
            state.indentation = Math.max(0, state.indentation - 1);
          }
        } else if (specialChars.test(aChar)) {
          stream.eatWhile(specialChars);
          token.name = "operator";
          token.eos = aChar !== ";";
        } else if (/\d/.test(aChar)) {
          stream.eatWhile(/[\w\d]/);
          token.name = "number";
        } else if (/[\w_]/.test(aChar)) {
          stream.eatWhile(/[\w\d_]/);
          token.name = state.expectVariable ? keywords34.test(stream.current()) ? "keyword" : "variable" : null;
        } else {
          token.eos = state.expectVariable;
        }
        return token;
      };
      nextComment = function(stream, context) {
        stream.eatWhile(/[^"]/);
        return new Token("comment", stream.eat('"') ? context.parent : context, true);
      };
      nextString = function(stream, context) {
        stream.eatWhile(/[^']/);
        return new Token("string", stream.eat("'") ? context.parent : context, false);
      };
      nextSymbol = function(stream, context) {
        stream.eatWhile(/[^']/);
        return new Token("string.special", stream.eat("'") ? context.parent : context, false);
      };
      nextTemporaries = function(stream, context) {
        var token = new Token(null, context, false);
        var aChar = stream.next();
        if (aChar === "|") {
          token.context = context.parent;
          token.eos = true;
        } else {
          stream.eatWhile(/[^|]/);
          token.name = "variable";
        }
        return token;
      };
      smalltalk = {
        name: "smalltalk",
        startState: function() {
          return new State();
        },
        token: function(stream, state) {
          state.userIndent(stream.indentation(), stream.indentUnit);
          if (stream.eatSpace()) {
            return null;
          }
          var token = state.context.next(stream, state.context, state);
          state.context = token.context;
          state.expectVariable = token.eos;
          return token.name;
        },
        blankLine: function(state, indentUnit2) {
          state.userIndent(0, indentUnit2);
        },
        indent: function(state, textAfter, cx2) {
          var i = state.context.next === next && textAfter && textAfter.charAt(0) === "]" ? -1 : state.userIndentationDelta;
          return (state.indentation + i) * cx2.unit;
        },
        languageData: {
          indentOnInput: /^\s*\]$/
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/solr.js
  var solr_exports = {};
  __export(solr_exports, {
    solr: () => solr
  });
  function isNumber3(word2) {
    return parseFloat(word2).toString() === word2;
  }
  function tokenString19(quote2) {
    return function(stream, state) {
      var escaped = false, next2;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped)
          break;
        escaped = !escaped && next2 == "\\";
      }
      if (!escaped)
        state.tokenize = tokenBase33;
      return "string";
    };
  }
  function tokenOperator(operator4) {
    return function(stream, state) {
      if (operator4 == "|")
        stream.eat(/\|/);
      else if (operator4 == "&")
        stream.eat(/\&/);
      state.tokenize = tokenBase33;
      return "operator";
    };
  }
  function tokenWord(ch2) {
    return function(stream, state) {
      var word2 = ch2;
      while ((ch2 = stream.peek()) && ch2.match(isStringChar) != null) {
        word2 += stream.next();
      }
      state.tokenize = tokenBase33;
      if (isOperatorString.test(word2))
        return "operator";
      else if (isNumber3(word2))
        return "number";
      else if (stream.peek() == ":")
        return "propertyName";
      else
        return "string";
    };
  }
  function tokenBase33(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"')
      state.tokenize = tokenString19(ch2);
    else if (isOperatorChar10.test(ch2))
      state.tokenize = tokenOperator(ch2);
    else if (isStringChar.test(ch2))
      state.tokenize = tokenWord(ch2);
    return state.tokenize != tokenBase33 ? state.tokenize(stream, state) : null;
  }
  var isStringChar, isOperatorChar10, isOperatorString, solr;
  var init_solr = __esm({
    "node_modules/@codemirror/legacy-modes/mode/solr.js"() {
      isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
      isOperatorChar10 = /[\|\!\+\-\*\?\~\^\&]/;
      isOperatorString = /^(OR|AND|NOT|TO)$/i;
      solr = {
        name: "solr",
        startState: function() {
          return {
            tokenize: tokenBase33
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return state.tokenize(stream, state);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/sparql.js
  var sparql_exports = {};
  __export(sparql_exports, {
    sparql: () => sparql
  });
  function wordRegexp10(words22) {
    return new RegExp("^(?:" + words22.join("|") + ")$", "i");
  }
  function tokenBase34(stream, state) {
    var ch2 = stream.next();
    curPunc9 = null;
    if (ch2 == "$" || ch2 == "?") {
      if (ch2 == "?" && stream.match(/\s/, false)) {
        return "operator";
      }
      stream.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/);
      return "variableName.local";
    } else if (ch2 == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
      stream.match(/^[^\s\u00a0>]*>?/);
      return "atom";
    } else if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenLiteral(ch2);
      return state.tokenize(stream, state);
    } else if (/[{}\(\),\.;\[\]]/.test(ch2)) {
      curPunc9 = ch2;
      return "bracket";
    } else if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    } else if (operatorChars2.test(ch2)) {
      return "operator";
    } else if (ch2 == ":") {
      eatPnLocal(stream);
      return "atom";
    } else if (ch2 == "@") {
      stream.eatWhile(/[a-z\d\-]/i);
      return "meta";
    } else {
      stream.eatWhile(/[_\w\d]/);
      if (stream.eat(":")) {
        eatPnLocal(stream);
        return "atom";
      }
      var word2 = stream.current();
      if (ops.test(word2))
        return "builtin";
      else if (keywords35.test(word2))
        return "keyword";
      else
        return "variable";
    }
  }
  function eatPnLocal(stream) {
    stream.match(/(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i);
  }
  function tokenLiteral(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped) {
          state.tokenize = tokenBase34;
          break;
        }
        escaped = !escaped && ch2 == "\\";
      }
      return "string";
    };
  }
  function pushContext9(state, type7, col) {
    state.context = { prev: state.context, indent: state.indent, col, type: type7 };
  }
  function popContext9(state) {
    state.indent = state.context.indent;
    state.context = state.context.prev;
  }
  var curPunc9, ops, keywords35, operatorChars2, sparql;
  var init_sparql = __esm({
    "node_modules/@codemirror/legacy-modes/mode/sparql.js"() {
      ops = wordRegexp10([
        "str",
        "lang",
        "langmatches",
        "datatype",
        "bound",
        "sameterm",
        "isiri",
        "isuri",
        "iri",
        "uri",
        "bnode",
        "count",
        "sum",
        "min",
        "max",
        "avg",
        "sample",
        "group_concat",
        "rand",
        "abs",
        "ceil",
        "floor",
        "round",
        "concat",
        "substr",
        "strlen",
        "replace",
        "ucase",
        "lcase",
        "encode_for_uri",
        "contains",
        "strstarts",
        "strends",
        "strbefore",
        "strafter",
        "year",
        "month",
        "day",
        "hours",
        "minutes",
        "seconds",
        "timezone",
        "tz",
        "now",
        "uuid",
        "struuid",
        "md5",
        "sha1",
        "sha256",
        "sha384",
        "sha512",
        "coalesce",
        "if",
        "strlang",
        "strdt",
        "isnumeric",
        "regex",
        "exists",
        "isblank",
        "isliteral",
        "a",
        "bind"
      ]);
      keywords35 = wordRegexp10([
        "base",
        "prefix",
        "select",
        "distinct",
        "reduced",
        "construct",
        "describe",
        "ask",
        "from",
        "named",
        "where",
        "order",
        "limit",
        "offset",
        "filter",
        "optional",
        "graph",
        "by",
        "asc",
        "desc",
        "as",
        "having",
        "undef",
        "values",
        "group",
        "minus",
        "in",
        "not",
        "service",
        "silent",
        "using",
        "insert",
        "delete",
        "union",
        "true",
        "false",
        "with",
        "data",
        "copy",
        "to",
        "move",
        "add",
        "create",
        "drop",
        "clear",
        "load",
        "into"
      ]);
      operatorChars2 = /[*+\-<>=&|\^\/!\?]/;
      sparql = {
        name: "sparql",
        startState: function() {
          return {
            tokenize: tokenBase34,
            context: null,
            indent: 0,
            col: 0
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            if (state.context && state.context.align == null)
              state.context.align = false;
            state.indent = stream.indentation();
          }
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          if (style2 != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
            state.context.align = true;
          }
          if (curPunc9 == "(")
            pushContext9(state, ")", stream.column());
          else if (curPunc9 == "[")
            pushContext9(state, "]", stream.column());
          else if (curPunc9 == "{")
            pushContext9(state, "}", stream.column());
          else if (/[\]\}\)]/.test(curPunc9)) {
            while (state.context && state.context.type == "pattern")
              popContext9(state);
            if (state.context && curPunc9 == state.context.type) {
              popContext9(state);
              if (curPunc9 == "}" && state.context && state.context.type == "pattern")
                popContext9(state);
            }
          } else if (curPunc9 == "." && state.context && state.context.type == "pattern")
            popContext9(state);
          else if (/atom|string|variable/.test(style2) && state.context) {
            if (/[\}\]]/.test(state.context.type))
              pushContext9(state, "pattern", stream.column());
            else if (state.context.type == "pattern" && !state.context.align) {
              state.context.align = true;
              state.context.col = stream.column();
            }
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var firstChar = textAfter && textAfter.charAt(0);
          var context = state.context;
          if (/[\]\}]/.test(firstChar))
            while (context && context.type == "pattern")
              context = context.prev;
          var closing3 = context && firstChar == context.type;
          if (!context)
            return 0;
          else if (context.type == "pattern")
            return context.col;
          else if (context.align)
            return context.col + (closing3 ? 0 : 1);
          else
            return context.indent + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/spreadsheet.js
  var spreadsheet_exports = {};
  __export(spreadsheet_exports, {
    spreadsheet: () => spreadsheet
  });
  var spreadsheet;
  var init_spreadsheet = __esm({
    "node_modules/@codemirror/legacy-modes/mode/spreadsheet.js"() {
      spreadsheet = {
        name: "spreadsheet",
        startState: function() {
          return {
            stringType: null,
            stack: []
          };
        },
        token: function(stream, state) {
          if (!stream)
            return;
          if (state.stack.length === 0) {
            if (stream.peek() == '"' || stream.peek() == "'") {
              state.stringType = stream.peek();
              stream.next();
              state.stack.unshift("string");
            }
          }
          switch (state.stack[0]) {
            case "string":
              while (state.stack[0] === "string" && !stream.eol()) {
                if (stream.peek() === state.stringType) {
                  stream.next();
                  state.stack.shift();
                } else if (stream.peek() === "\\") {
                  stream.next();
                  stream.next();
                } else {
                  stream.match(/^.[^\\\"\']*/);
                }
              }
              return "string";
            case "characterClass":
              while (state.stack[0] === "characterClass" && !stream.eol()) {
                if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./)))
                  state.stack.shift();
              }
              return "operator";
          }
          var peek = stream.peek();
          switch (peek) {
            case "[":
              stream.next();
              state.stack.unshift("characterClass");
              return "bracket";
            case ":":
              stream.next();
              return "operator";
            case "\\":
              if (stream.match(/\\[a-z]+/))
                return "string.special";
              else {
                stream.next();
                return "atom";
              }
            case ".":
            case ",":
            case ";":
            case "*":
            case "-":
            case "+":
            case "^":
            case "<":
            case "/":
            case "=":
              stream.next();
              return "atom";
            case "$":
              stream.next();
              return "builtin";
          }
          if (stream.match(/\d+/)) {
            if (stream.match(/^\w+/))
              return "error";
            return "number";
          } else if (stream.match(/^[a-zA-Z_]\w*/)) {
            if (stream.match(/(?=[\(.])/, false))
              return "keyword";
            return "variable";
          } else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
            stream.next();
            return "bracket";
          } else if (!stream.eatSpace()) {
            stream.next();
          }
          return null;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/stylus.js
  var stylus_exports = {};
  __export(stylus_exports, {
    stylus: () => stylus
  });
  function wordRegexp11(words22) {
    words22 = words22.sort(function(a2, b) {
      return b > a2;
    });
    return new RegExp("^((" + words22.join(")|(") + "))\\b");
  }
  function keySet2(array2) {
    var keys = {};
    for (var i = 0; i < array2.length; ++i)
      keys[array2[i]] = true;
    return keys;
  }
  function escapeRegExp(text) {
    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
  function tokenBase35(stream, state) {
    firstWordMatch = stream.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/);
    state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\s*/, "") : "";
    state.context.line.indent = stream.indentation();
    ch = stream.peek();
    if (stream.match("//")) {
      stream.skipToEnd();
      return ["comment", "comment"];
    }
    if (stream.match("/*")) {
      state.tokenize = tokenCComment4;
      return tokenCComment4(stream, state);
    }
    if (ch == '"' || ch == "'") {
      stream.next();
      state.tokenize = tokenString20(ch);
      return state.tokenize(stream, state);
    }
    if (ch == "@") {
      stream.next();
      stream.eatWhile(/[\w\\-]/);
      return ["def", stream.current()];
    }
    if (ch == "#") {
      stream.next();
      if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i)) {
        return ["atom", "atom"];
      }
      if (stream.match(/^[a-z][\w-]*/i)) {
        return ["builtin", "hash"];
      }
    }
    if (stream.match(vendorPrefixesRegexp)) {
      return ["meta", "vendor-prefixes"];
    }
    if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
      stream.eatWhile(/[a-z%]/i);
      return ["number", "unit"];
    }
    if (ch == "!") {
      stream.next();
      return [stream.match(/^(important|optional)/i) ? "keyword" : "operator", "important"];
    }
    if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
      return ["qualifier", "qualifier"];
    }
    if (stream.match(documentTypesRegexp)) {
      if (stream.peek() == "(")
        state.tokenize = tokenParenthesized;
      return ["property", "word"];
    }
    if (stream.match(/^[a-z][\w-]*\(/i)) {
      stream.backUp(1);
      return ["keyword", "mixin"];
    }
    if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
      stream.backUp(1);
      return ["keyword", "block-mixin"];
    }
    if (stream.string.match(/^\s*&/) && stream.match(/^[-_]+[a-z][\w-]*/)) {
      return ["qualifier", "qualifier"];
    }
    if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
      stream.backUp(1);
      return ["variableName.special", "reference"];
    }
    if (stream.match(/^&{1}\s*$/)) {
      return ["variableName.special", "reference"];
    }
    if (stream.match(wordOperatorKeywordsRegexp)) {
      return ["operator", "operator"];
    }
    if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
      if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
        if (!wordIsTag(stream.current())) {
          stream.match(".");
          return ["variable", "variable-name"];
        }
      }
      return ["variable", "word"];
    }
    if (stream.match(operatorsRegexp)) {
      return ["operator", stream.current()];
    }
    if (/[:;,{}\[\]\(\)]/.test(ch)) {
      stream.next();
      return [null, ch];
    }
    stream.next();
    return [null, null];
  }
  function tokenCComment4(stream, state) {
    var maybeEnd = false, ch2;
    while ((ch2 = stream.next()) != null) {
      if (maybeEnd && ch2 == "/") {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return ["comment", "comment"];
  }
  function tokenString20(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped) {
          if (quote2 == ")")
            stream.backUp(1);
          break;
        }
        escaped = !escaped && ch2 == "\\";
      }
      if (ch2 == quote2 || !escaped && quote2 != ")")
        state.tokenize = null;
      return ["string", "string"];
    };
  }
  function tokenParenthesized(stream, state) {
    stream.next();
    if (!stream.match(/\s*[\"\')]/, false))
      state.tokenize = tokenString20(")");
    else
      state.tokenize = null;
    return [null, "("];
  }
  function Context9(type7, indent5, prev, line) {
    this.type = type7;
    this.indent = indent5;
    this.prev = prev;
    this.line = line || { firstWord: "", indent: 0 };
  }
  function pushContext10(state, stream, type7, indent5) {
    indent5 = indent5 >= 0 ? indent5 : stream.indentUnit;
    state.context = new Context9(type7, stream.indentation() + indent5, state.context);
    return type7;
  }
  function popContext10(state, stream, currentIndent) {
    var contextIndent = state.context.indent - stream.indentUnit;
    currentIndent = currentIndent || false;
    state.context = state.context.prev;
    if (currentIndent)
      state.context.indent = contextIndent;
    return state.context.type;
  }
  function pass2(type7, stream, state) {
    return states[state.context.type](type7, stream, state);
  }
  function popAndPass(type7, stream, state, n2) {
    for (var i = n2 || 1; i > 0; i--)
      state.context = state.context.prev;
    return pass2(type7, stream, state);
  }
  function wordIsTag(word2) {
    return word2.toLowerCase() in tagKeywords;
  }
  function wordIsProperty(word2) {
    word2 = word2.toLowerCase();
    return word2 in propertyKeywords3 || word2 in fontProperties3;
  }
  function wordIsBlock(word2) {
    return word2.toLowerCase() in blockKeywords4;
  }
  function wordIsVendorPrefix(word2) {
    return word2.toLowerCase().match(vendorPrefixesRegexp);
  }
  function wordAsValue(word2) {
    var wordLC = word2.toLowerCase();
    var override2 = "variable";
    if (wordIsTag(word2))
      override2 = "tag";
    else if (wordIsBlock(word2))
      override2 = "block-keyword";
    else if (wordIsProperty(word2))
      override2 = "property";
    else if (wordLC in valueKeywords3 || wordLC in commonAtoms3)
      override2 = "atom";
    else if (wordLC == "return" || wordLC in colorKeywords3)
      override2 = "keyword";
    else if (word2.match(/^[A-Z]/))
      override2 = "string";
    return override2;
  }
  function typeIsBlock(type7, stream) {
    return endOfLine(stream) && (type7 == "{" || type7 == "]" || type7 == "hash" || type7 == "qualifier") || type7 == "block-mixin";
  }
  function typeIsInterpolation(type7, stream) {
    return type7 == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
  }
  function typeIsPseudo(type7, stream) {
    return type7 == ":" && stream.match(/^[a-z-]+/, false);
  }
  function startOfLine(stream) {
    return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));
  }
  function endOfLine(stream) {
    return stream.eol() || stream.match(/^\s*$/, false);
  }
  function firstWordOfLine(line) {
    var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
    var result = typeof line == "string" ? line.match(re) : line.string.match(re);
    return result ? result[0].replace(/^\s*/, "") : "";
  }
  var tagKeywords_, documentTypes_2, mediaTypes_2, mediaFeatures_2, propertyKeywords_2, nonStandardPropertyKeywords_2, fontProperties_2, colorKeywords_2, valueKeywords_2, wordOperatorKeywords_, blockKeywords_, commonAtoms_, commonDef_, hintWords, tagKeywords, tagVariablesRegexp, propertyKeywords3, nonStandardPropertyKeywords2, valueKeywords3, colorKeywords3, documentTypes2, documentTypesRegexp, mediaFeatures2, mediaTypes2, fontProperties3, operatorsRegexp, wordOperatorKeywordsRegexp, blockKeywords4, vendorPrefixesRegexp, commonAtoms3, firstWordMatch, states, ch, style, type5, override, stylus;
  var init_stylus = __esm({
    "node_modules/@codemirror/legacy-modes/mode/stylus.js"() {
      tagKeywords_ = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "bgsound", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "menuitem", "meta", "meter", "nav", "nobr", "noframes", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "var", "video"];
      documentTypes_2 = ["domain", "regexp", "url-prefix", "url"];
      mediaTypes_2 = ["all", "aural", "braille", "handheld", "print", "projection", "screen", "tty", "tv", "embossed"];
      mediaFeatures_2 = ["width", "min-width", "max-width", "height", "min-height", "max-height", "device-width", "min-device-width", "max-device-width", "device-height", "min-device-height", "max-device-height", "aspect-ratio", "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio", "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color", "max-color", "color-index", "min-color-index", "max-color-index", "monochrome", "min-monochrome", "max-monochrome", "resolution", "min-resolution", "max-resolution", "scan", "grid", "dynamic-range", "video-dynamic-range"];
      propertyKeywords_2 = ["align-content", "align-items", "align-self", "alignment-adjust", "alignment-baseline", "anchor-point", "animation", "animation-delay", "animation-direction", "animation-duration", "animation-fill-mode", "animation-iteration-count", "animation-name", "animation-play-state", "animation-timing-function", "appearance", "azimuth", "backface-visibility", "background", "background-attachment", "background-clip", "background-color", "background-image", "background-origin", "background-position", "background-repeat", "background-size", "baseline-shift", "binding", "bleed", "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target", "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style", "border-bottom-width", "border-collapse", "border-color", "border-image", "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source", "border-image-width", "border-left", "border-left-color", "border-left-style", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style", "border-top-width", "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing", "break-after", "break-before", "break-inside", "caption-side", "clear", "clip", "color", "color-profile", "column-count", "column-fill", "column-gap", "column-rule", "column-rule-color", "column-rule-style", "column-rule-width", "column-span", "column-width", "columns", "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after", "cue-before", "cursor", "direction", "display", "dominant-baseline", "drop-initial-after-adjust", "drop-initial-after-align", "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size", "drop-initial-value", "elevation", "empty-cells", "fit", "fit-position", "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow", "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into", "font", "font-feature-settings", "font-family", "font-kerning", "font-language-override", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant", "font-variant-alternates", "font-variant-caps", "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric", "font-variant-position", "font-weight", "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-position", "grid-auto-rows", "grid-column", "grid-column-end", "grid-column-start", "grid-row", "grid-row-end", "grid-row-start", "grid-template", "grid-template-areas", "grid-template-columns", "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon", "image-orientation", "image-rendering", "image-resolution", "inline-box-align", "justify-content", "left", "letter-spacing", "line-break", "line-height", "line-stacking", "line-stacking-ruby", "line-stacking-shift", "line-stacking-strategy", "list-style", "list-style-image", "list-style-position", "list-style-type", "margin", "margin-bottom", "margin-left", "margin-right", "margin-top", "marker-offset", "marks", "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed", "marquee-style", "max-height", "max-width", "min-height", "min-width", "move-to", "nav-down", "nav-index", "nav-left", "nav-right", "nav-up", "object-fit", "object-position", "opacity", "order", "orphans", "outline", "outline-color", "outline-offset", "outline-style", "outline-width", "overflow", "overflow-style", "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom", "padding-left", "padding-right", "padding-top", "page", "page-break-after", "page-break-before", "page-break-inside", "page-policy", "pause", "pause-after", "pause-before", "perspective", "perspective-origin", "pitch", "pitch-range", "play-during", "position", "presentation-level", "punctuation-trim", "quotes", "region-break-after", "region-break-before", "region-break-inside", "region-fragment", "rendering-intent", "resize", "rest", "rest-after", "rest-before", "richness", "right", "rotation", "rotation-point", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span", "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside", "size", "speak", "speak-as", "speak-header", "speak-numeral", "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size", "table-layout", "target", "target-name", "target-new", "target-position", "text-align", "text-align-last", "text-decoration", "text-decoration-color", "text-decoration-line", "text-decoration-skip", "text-decoration-style", "text-emphasis", "text-emphasis-color", "text-emphasis-position", "text-emphasis-style", "text-height", "text-indent", "text-justify", "text-outline", "text-overflow", "text-shadow", "text-size-adjust", "text-space-collapse", "text-transform", "text-underline-position", "text-wrap", "top", "transform", "transform-origin", "transform-style", "transition", "transition-delay", "transition-duration", "transition-property", "transition-timing-function", "unicode-bidi", "vertical-align", "visibility", "voice-balance", "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate", "voice-stress", "voice-volume", "volume", "white-space", "widows", "width", "will-change", "word-break", "word-spacing", "word-wrap", "z-index", "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color", "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events", "color-interpolation", "color-interpolation-filters", "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering", "marker", "marker-end", "marker-mid", "marker-start", "shape-rendering", "stroke", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering", "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal", "glyph-orientation-vertical", "text-anchor", "writing-mode", "font-smoothing", "osx-font-smoothing"];
      nonStandardPropertyKeywords_2 = ["scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color", "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color", "scrollbar-3d-light-color", "scrollbar-track-color", "shape-inside", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "zoom"];
      fontProperties_2 = ["font-family", "src", "unicode-range", "font-variant", "font-feature-settings", "font-stretch", "font-weight", "font-style"];
      colorKeywords_2 = ["aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige", "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite", "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta", "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue", "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan", "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white", "whitesmoke", "yellow", "yellowgreen"];
      valueKeywords_2 = ["above", "absolute", "activeborder", "additive", "activecaption", "afar", "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always", "amharic", "amharic-abegede", "antialiased", "appworkspace", "arabic-indic", "armenian", "asterisks", "attr", "auto", "avoid", "avoid-column", "avoid-page", "avoid-region", "background", "backwards", "baseline", "below", "bidi-override", "binary", "bengali", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box", "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian", "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch", "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote", "col-resize", "collapse", "column", "compact", "condensed", "conic-gradient", "contain", "content", "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover", "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "dashed", "decimal", "decimal-leading-zero", "default", "default-button", "destination-atop", "destination-in", "destination-out", "destination-over", "devanagari", "disc", "discard", "disclosure-closed", "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede", "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er", "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er", "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et", "ethiopic-halehame-gez", "ethiopic-halehame-om-et", "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et", "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig", "ethiopic-numeric", "ew-resize", "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fixed", "flat", "flex", "footnotes", "forwards", "from", "geometricPrecision", "georgian", "graytext", "groove", "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hebrew", "help", "hidden", "hide", "high", "higher", "highlight", "highlighttext", "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "icon", "ignore", "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "japanese-formal", "japanese-informal", "justify", "kannada", "katakana", "katakana-iroha", "keep-all", "khmer", "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal", "landscape", "lao", "large", "larger", "left", "level", "lighter", "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian", "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian", "lower-roman", "lowercase", "ltr", "malayalam", "match", "matrix", "matrix3d", "media-play-button", "media-slider", "media-sliderthumb", "media-volume-slider", "media-volume-sliderthumb", "medium", "menu", "menulist", "menulist-button", "menutext", "message-box", "middle", "min-intrinsic", "mix", "mongolian", "monospace", "move", "multiple", "myanmar", "n-resize", "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "open-quote", "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset", "outside", "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused", "persian", "perspective", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio", "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient", "repeating-conic-gradient", "repeat-x", "repeat-y", "reset", "reverse", "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round", "row-resize", "rtl", "run-in", "running", "s-resize", "sans-serif", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield", "searchfield-cancel-button", "searchfield-decoration", "searchfield-results-button", "searchfield-results-decoration", "semi-condensed", "semi-expanded", "separate", "serif", "show", "sidama", "simp-chinese-formal", "simp-chinese-informal", "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal", "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps", "small-caption", "smaller", "solid", "somali", "source-atop", "source-in", "source-out", "source-over", "space", "spell-out", "square", "square-button", "standard", "start", "static", "status-bar", "stretch", "stroke", "sub", "subpixel-antialiased", "super", "sw-resize", "symbolic", "symbols", "table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row", "table-row-group", "tamil", "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai", "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er", "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top", "trad-chinese-formal", "trad-chinese-informal", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent", "ultra-condensed", "ultra-expanded", "underline", "up", "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal", "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url", "var", "vertical", "vertical-text", "visible", "visibleFill", "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe", "windowtext", "words", "x-large", "x-small", "xor", "xx-large", "xx-small", "bicubic", "optimizespeed", "grayscale", "row", "row-reverse", "wrap", "wrap-reverse", "column-reverse", "flex-start", "flex-end", "space-between", "space-around", "unset"];
      wordOperatorKeywords_ = ["in", "and", "or", "not", "is not", "is a", "is", "isnt", "defined", "if unless"];
      blockKeywords_ = ["for", "if", "else", "unless", "from", "to"];
      commonAtoms_ = ["null", "true", "false", "href", "title", "type", "not-allowed", "readonly", "disabled"];
      commonDef_ = ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"];
      hintWords = tagKeywords_.concat(
        documentTypes_2,
        mediaTypes_2,
        mediaFeatures_2,
        propertyKeywords_2,
        nonStandardPropertyKeywords_2,
        colorKeywords_2,
        valueKeywords_2,
        fontProperties_2,
        wordOperatorKeywords_,
        blockKeywords_,
        commonAtoms_,
        commonDef_
      );
      tagKeywords = keySet2(tagKeywords_);
      tagVariablesRegexp = /^(a|b|i|s|col|em)$/i;
      propertyKeywords3 = keySet2(propertyKeywords_2);
      nonStandardPropertyKeywords2 = keySet2(nonStandardPropertyKeywords_2);
      valueKeywords3 = keySet2(valueKeywords_2);
      colorKeywords3 = keySet2(colorKeywords_2);
      documentTypes2 = keySet2(documentTypes_2);
      documentTypesRegexp = wordRegexp11(documentTypes_2);
      mediaFeatures2 = keySet2(mediaFeatures_2);
      mediaTypes2 = keySet2(mediaTypes_2);
      fontProperties3 = keySet2(fontProperties_2);
      operatorsRegexp = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/;
      wordOperatorKeywordsRegexp = wordRegexp11(wordOperatorKeywords_);
      blockKeywords4 = keySet2(blockKeywords_);
      vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i);
      commonAtoms3 = keySet2(commonAtoms_);
      firstWordMatch = "";
      states = {};
      states.block = function(type7, stream, state) {
        if (type7 == "comment" && startOfLine(stream) || type7 == "," && endOfLine(stream) || type7 == "mixin") {
          return pushContext10(state, stream, "block", 0);
        }
        if (typeIsInterpolation(type7, stream)) {
          return pushContext10(state, stream, "interpolation");
        }
        if (endOfLine(stream) && type7 == "]") {
          if (!/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {
            return pushContext10(state, stream, "block", 0);
          }
        }
        if (typeIsBlock(type7, stream)) {
          return pushContext10(state, stream, "block");
        }
        if (type7 == "}" && endOfLine(stream)) {
          return pushContext10(state, stream, "block", 0);
        }
        if (type7 == "variable-name") {
          if (stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {
            return pushContext10(state, stream, "variableName");
          } else {
            return pushContext10(state, stream, "variableName", 0);
          }
        }
        if (type7 == "=") {
          if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {
            return pushContext10(state, stream, "block", 0);
          }
          return pushContext10(state, stream, "block");
        }
        if (type7 == "*") {
          if (endOfLine(stream) || stream.match(/\s*(,|\.|#|\[|:|{)/, false)) {
            override = "tag";
            return pushContext10(state, stream, "block");
          }
        }
        if (typeIsPseudo(type7, stream)) {
          return pushContext10(state, stream, "pseudo");
        }
        if (/@(font-face|media|supports|(-moz-)?document)/.test(type7)) {
          return pushContext10(state, stream, endOfLine(stream) ? "block" : "atBlock");
        }
        if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type7)) {
          return pushContext10(state, stream, "keyframes");
        }
        if (/@extends?/.test(type7)) {
          return pushContext10(state, stream, "extend", 0);
        }
        if (type7 && type7.charAt(0) == "@") {
          if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {
            override = "variable";
            return "block";
          }
          if (/(@import|@require|@charset)/.test(type7)) {
            return pushContext10(state, stream, "block", 0);
          }
          return pushContext10(state, stream, "block");
        }
        if (type7 == "reference" && endOfLine(stream)) {
          return pushContext10(state, stream, "block");
        }
        if (type7 == "(") {
          return pushContext10(state, stream, "parens");
        }
        if (type7 == "vendor-prefixes") {
          return pushContext10(state, stream, "vendorPrefixes");
        }
        if (type7 == "word") {
          var word2 = stream.current();
          override = wordAsValue(word2);
          if (override == "property") {
            if (startOfLine(stream)) {
              return pushContext10(state, stream, "block", 0);
            } else {
              override = "atom";
              return "block";
            }
          }
          if (override == "tag") {
            if (/embed|menu|pre|progress|sub|table/.test(word2)) {
              if (wordIsProperty(firstWordOfLine(stream))) {
                override = "atom";
                return "block";
              }
            }
            if (stream.string.match(new RegExp("\\[\\s*" + word2 + "|" + word2 + "\\s*\\]"))) {
              override = "atom";
              return "block";
            }
            if (tagVariablesRegexp.test(word2)) {
              if (startOfLine(stream) && stream.string.match(/=/) || !startOfLine(stream) && !stream.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) && !wordIsTag(firstWordOfLine(stream))) {
                override = "variable";
                if (wordIsBlock(firstWordOfLine(stream)))
                  return "block";
                return pushContext10(state, stream, "block", 0);
              }
            }
            if (endOfLine(stream))
              return pushContext10(state, stream, "block");
          }
          if (override == "block-keyword") {
            override = "keyword";
            if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
              return "block";
            }
            return pushContext10(state, stream, "block");
          }
          if (word2 == "return")
            return pushContext10(state, stream, "block", 0);
          if (override == "variable" && stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)) {
            return pushContext10(state, stream, "block");
          }
        }
        return state.context.type;
      };
      states.parens = function(type7, stream, state) {
        if (type7 == "(")
          return pushContext10(state, stream, "parens");
        if (type7 == ")") {
          if (state.context.prev.type == "parens") {
            return popContext10(state, stream);
          }
          if (stream.string.match(/^[a-z][\w-]*\(/i) && endOfLine(stream) || wordIsBlock(firstWordOfLine(stream)) || /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(firstWordOfLine(stream)) || !stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) && wordIsTag(firstWordOfLine(stream))) {
            return pushContext10(state, stream, "block");
          }
          if (stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) || stream.string.match(/^\s*(\(|\)|[0-9])/) || stream.string.match(/^\s+[a-z][\w-]*\(/i) || stream.string.match(/^\s+[\$-]?[a-z]/i)) {
            return pushContext10(state, stream, "block", 0);
          }
          if (endOfLine(stream))
            return pushContext10(state, stream, "block");
          else
            return pushContext10(state, stream, "block", 0);
        }
        if (type7 && type7.charAt(0) == "@" && wordIsProperty(stream.current().slice(1))) {
          override = "variable";
        }
        if (type7 == "word") {
          var word2 = stream.current();
          override = wordAsValue(word2);
          if (override == "tag" && tagVariablesRegexp.test(word2)) {
            override = "variable";
          }
          if (override == "property" || word2 == "to")
            override = "atom";
        }
        if (type7 == "variable-name") {
          return pushContext10(state, stream, "variableName");
        }
        if (typeIsPseudo(type7, stream)) {
          return pushContext10(state, stream, "pseudo");
        }
        return state.context.type;
      };
      states.vendorPrefixes = function(type7, stream, state) {
        if (type7 == "word") {
          override = "property";
          return pushContext10(state, stream, "block", 0);
        }
        return popContext10(state, stream);
      };
      states.pseudo = function(type7, stream, state) {
        if (!wordIsProperty(firstWordOfLine(stream.string))) {
          stream.match(/^[a-z-]+/);
          override = "variableName.special";
          if (endOfLine(stream))
            return pushContext10(state, stream, "block");
          return popContext10(state, stream);
        }
        return popAndPass(type7, stream, state);
      };
      states.atBlock = function(type7, stream, state) {
        if (type7 == "(")
          return pushContext10(state, stream, "atBlock_parens");
        if (typeIsBlock(type7, stream)) {
          return pushContext10(state, stream, "block");
        }
        if (typeIsInterpolation(type7, stream)) {
          return pushContext10(state, stream, "interpolation");
        }
        if (type7 == "word") {
          var word2 = stream.current().toLowerCase();
          if (/^(only|not|and|or)$/.test(word2))
            override = "keyword";
          else if (documentTypes2.hasOwnProperty(word2))
            override = "tag";
          else if (mediaTypes2.hasOwnProperty(word2))
            override = "attribute";
          else if (mediaFeatures2.hasOwnProperty(word2))
            override = "property";
          else if (nonStandardPropertyKeywords2.hasOwnProperty(word2))
            override = "string.special";
          else
            override = wordAsValue(stream.current());
          if (override == "tag" && endOfLine(stream)) {
            return pushContext10(state, stream, "block");
          }
        }
        if (type7 == "operator" && /^(not|and|or)$/.test(stream.current())) {
          override = "keyword";
        }
        return state.context.type;
      };
      states.atBlock_parens = function(type7, stream, state) {
        if (type7 == "{" || type7 == "}")
          return state.context.type;
        if (type7 == ")") {
          if (endOfLine(stream))
            return pushContext10(state, stream, "block");
          else
            return pushContext10(state, stream, "atBlock");
        }
        if (type7 == "word") {
          var word2 = stream.current().toLowerCase();
          override = wordAsValue(word2);
          if (/^(max|min)/.test(word2))
            override = "property";
          if (override == "tag") {
            tagVariablesRegexp.test(word2) ? override = "variable" : override = "atom";
          }
          return state.context.type;
        }
        return states.atBlock(type7, stream, state);
      };
      states.keyframes = function(type7, stream, state) {
        if (stream.indentation() == "0" && (type7 == "}" && startOfLine(stream) || type7 == "]" || type7 == "hash" || type7 == "qualifier" || wordIsTag(stream.current()))) {
          return popAndPass(type7, stream, state);
        }
        if (type7 == "{")
          return pushContext10(state, stream, "keyframes");
        if (type7 == "}") {
          if (startOfLine(stream))
            return popContext10(state, stream, true);
          else
            return pushContext10(state, stream, "keyframes");
        }
        if (type7 == "unit" && /^[0-9]+\%$/.test(stream.current())) {
          return pushContext10(state, stream, "keyframes");
        }
        if (type7 == "word") {
          override = wordAsValue(stream.current());
          if (override == "block-keyword") {
            override = "keyword";
            return pushContext10(state, stream, "keyframes");
          }
        }
        if (/@(font-face|media|supports|(-moz-)?document)/.test(type7)) {
          return pushContext10(state, stream, endOfLine(stream) ? "block" : "atBlock");
        }
        if (type7 == "mixin") {
          return pushContext10(state, stream, "block", 0);
        }
        return state.context.type;
      };
      states.interpolation = function(type7, stream, state) {
        if (type7 == "{")
          popContext10(state, stream) && pushContext10(state, stream, "block");
        if (type7 == "}") {
          if (stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) || stream.string.match(/^\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream))) {
            return pushContext10(state, stream, "block");
          }
          if (!stream.string.match(/^(\{|\s*\&)/) || stream.match(/\s*[\w-]/, false)) {
            return pushContext10(state, stream, "block", 0);
          }
          return pushContext10(state, stream, "block");
        }
        if (type7 == "variable-name") {
          return pushContext10(state, stream, "variableName", 0);
        }
        if (type7 == "word") {
          override = wordAsValue(stream.current());
          if (override == "tag")
            override = "atom";
        }
        return state.context.type;
      };
      states.extend = function(type7, stream, state) {
        if (type7 == "[" || type7 == "=")
          return "extend";
        if (type7 == "]")
          return popContext10(state, stream);
        if (type7 == "word") {
          override = wordAsValue(stream.current());
          return "extend";
        }
        return popContext10(state, stream);
      };
      states.variableName = function(type7, stream, state) {
        if (type7 == "string" || type7 == "[" || type7 == "]" || stream.current().match(/^(\.|\$)/)) {
          if (stream.current().match(/^\.[\w-]+/i))
            override = "variable";
          return "variableName";
        }
        return popAndPass(type7, stream, state);
      };
      stylus = {
        name: "stylus",
        startState: function() {
          return {
            tokenize: null,
            state: "block",
            context: new Context9("block", 0, null)
          };
        },
        token: function(stream, state) {
          if (!state.tokenize && stream.eatSpace())
            return null;
          style = (state.tokenize || tokenBase35)(stream, state);
          if (style && typeof style == "object") {
            type5 = style[1];
            style = style[0];
          }
          override = style;
          state.state = states[state.state](type5, stream, state);
          return override;
        },
        indent: function(state, textAfter, iCx) {
          var cx2 = state.context, ch2 = textAfter && textAfter.charAt(0), indent5 = cx2.indent, lineFirstWord = firstWordOfLine(textAfter), lineIndent = iCx.lineIndent(iCx.pos), prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : "", prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;
          if (cx2.prev && (ch2 == "}" && (cx2.type == "block" || cx2.type == "atBlock" || cx2.type == "keyframes") || ch2 == ")" && (cx2.type == "parens" || cx2.type == "atBlock_parens") || ch2 == "{" && cx2.type == "at")) {
            indent5 = cx2.indent - iCx.unit;
          } else if (!/(\})/.test(ch2)) {
            if (/@|\$|\d/.test(ch2) || /^\{/.test(textAfter) || /^\s*\/(\/|\*)/.test(textAfter) || /^\s*\/\*/.test(prevLineFirstWord) || /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) || /^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) || /^return/.test(textAfter) || wordIsBlock(lineFirstWord)) {
              indent5 = lineIndent;
            } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch2) || wordIsTag(lineFirstWord)) {
              if (/\,\s*$/.test(prevLineFirstWord)) {
                indent5 = prevLineIndent;
              } else if (!state.sol() && (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {
                indent5 = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
              } else {
                indent5 = lineIndent;
              }
            } else if (!/,\s*$/.test(textAfter) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {
              if (wordIsBlock(prevLineFirstWord)) {
                indent5 = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
              } else if (/^\{/.test(prevLineFirstWord)) {
                indent5 = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + iCx.unit;
              } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {
                indent5 = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;
              } else if (/^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(prevLineFirstWord) || /=\s*$/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord) || /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)) {
                indent5 = prevLineIndent + iCx.unit;
              } else {
                indent5 = lineIndent;
              }
            }
          }
          return indent5;
        },
        languageData: {
          indentOnInput: /^\s*\}$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          autocomplete: hintWords
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/swift.js
  var swift_exports = {};
  __export(swift_exports, {
    swift: () => swift
  });
  function wordSet(words22) {
    var set2 = {};
    for (var i = 0; i < words22.length; i++)
      set2[words22[i]] = true;
    return set2;
  }
  function tokenBase36(stream, state, prev) {
    if (stream.sol())
      state.indented = stream.indentation();
    if (stream.eatSpace())
      return null;
    var ch2 = stream.peek();
    if (ch2 == "/") {
      if (stream.match("//")) {
        stream.skipToEnd();
        return "comment";
      }
      if (stream.match("/*")) {
        state.tokenize.push(tokenComment15);
        return tokenComment15(stream, state);
      }
    }
    if (stream.match(instruction))
      return "builtin";
    if (stream.match(attribute2))
      return "attribute";
    if (stream.match(binary))
      return "number";
    if (stream.match(octal))
      return "number";
    if (stream.match(hexadecimal))
      return "number";
    if (stream.match(decimal))
      return "number";
    if (stream.match(property2))
      return "property";
    if (operators8.indexOf(ch2) > -1) {
      stream.next();
      return "operator";
    }
    if (punc.indexOf(ch2) > -1) {
      stream.next();
      stream.match("..");
      return "punctuation";
    }
    var stringMatch;
    if (stringMatch = stream.match(/("""|"|')/)) {
      var tokenize6 = tokenString21.bind(null, stringMatch[0]);
      state.tokenize.push(tokenize6);
      return tokenize6(stream, state);
    }
    if (stream.match(identifier5)) {
      var ident = stream.current();
      if (types4.hasOwnProperty(ident))
        return "type";
      if (atoms14.hasOwnProperty(ident))
        return "atom";
      if (keywords36.hasOwnProperty(ident)) {
        if (definingKeywords.hasOwnProperty(ident))
          state.prev = "define";
        return "keyword";
      }
      if (prev == "define")
        return "def";
      return "variable";
    }
    stream.next();
    return null;
  }
  function tokenUntilClosingParen() {
    var depth = 0;
    return function(stream, state, prev) {
      var inner = tokenBase36(stream, state, prev);
      if (inner == "punctuation") {
        if (stream.current() == "(")
          ++depth;
        else if (stream.current() == ")") {
          if (depth == 0) {
            stream.backUp(1);
            state.tokenize.pop();
            return state.tokenize[state.tokenize.length - 1](stream, state);
          } else
            --depth;
        }
      }
      return inner;
    };
  }
  function tokenString21(openQuote, stream, state) {
    var singleLine = openQuote.length == 1;
    var ch2, escaped = false;
    while (ch2 = stream.peek()) {
      if (escaped) {
        stream.next();
        if (ch2 == "(") {
          state.tokenize.push(tokenUntilClosingParen());
          return "string";
        }
        escaped = false;
      } else if (stream.match(openQuote)) {
        state.tokenize.pop();
        return "string";
      } else {
        stream.next();
        escaped = ch2 == "\\";
      }
    }
    if (singleLine) {
      state.tokenize.pop();
    }
    return "string";
  }
  function tokenComment15(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 === "/" && stream.eat("*")) {
        state.tokenize.push(tokenComment15);
      } else if (ch2 === "*" && stream.eat("/")) {
        state.tokenize.pop();
        break;
      }
    }
    return "comment";
  }
  function Context10(prev, align, indented) {
    this.prev = prev;
    this.align = align;
    this.indented = indented;
  }
  function pushContext11(state, stream) {
    var align = stream.match(/^\s*($|\/[\/\*]|[)}\]])/, false) ? null : stream.column() + 1;
    state.context = new Context10(state.context, align, state.indented);
  }
  function popContext11(state) {
    if (state.context) {
      state.indented = state.context.indented;
      state.context = state.context.prev;
    }
  }
  var keywords36, definingKeywords, atoms14, types4, operators8, punc, binary, octal, hexadecimal, decimal, identifier5, property2, instruction, attribute2, swift;
  var init_swift = __esm({
    "node_modules/@codemirror/legacy-modes/mode/swift.js"() {
      keywords36 = wordSet([
        "_",
        "var",
        "let",
        "actor",
        "class",
        "enum",
        "extension",
        "import",
        "protocol",
        "struct",
        "func",
        "typealias",
        "associatedtype",
        "open",
        "public",
        "internal",
        "fileprivate",
        "private",
        "deinit",
        "init",
        "new",
        "override",
        "self",
        "subscript",
        "super",
        "convenience",
        "dynamic",
        "final",
        "indirect",
        "lazy",
        "required",
        "static",
        "unowned",
        "unowned(safe)",
        "unowned(unsafe)",
        "weak",
        "as",
        "is",
        "break",
        "case",
        "continue",
        "default",
        "else",
        "fallthrough",
        "for",
        "guard",
        "if",
        "in",
        "repeat",
        "switch",
        "where",
        "while",
        "defer",
        "return",
        "inout",
        "mutating",
        "nonmutating",
        "isolated",
        "nonisolated",
        "catch",
        "do",
        "rethrows",
        "throw",
        "throws",
        "async",
        "await",
        "try",
        "didSet",
        "get",
        "set",
        "willSet",
        "assignment",
        "associativity",
        "infix",
        "left",
        "none",
        "operator",
        "postfix",
        "precedence",
        "precedencegroup",
        "prefix",
        "right",
        "Any",
        "AnyObject",
        "Type",
        "dynamicType",
        "Self",
        "Protocol",
        "__COLUMN__",
        "__FILE__",
        "__FUNCTION__",
        "__LINE__"
      ]);
      definingKeywords = wordSet(["var", "let", "actor", "class", "enum", "extension", "import", "protocol", "struct", "func", "typealias", "associatedtype", "for"]);
      atoms14 = wordSet(["true", "false", "nil", "self", "super", "_"]);
      types4 = wordSet([
        "Array",
        "Bool",
        "Character",
        "Dictionary",
        "Double",
        "Float",
        "Int",
        "Int8",
        "Int16",
        "Int32",
        "Int64",
        "Never",
        "Optional",
        "Set",
        "String",
        "UInt8",
        "UInt16",
        "UInt32",
        "UInt64",
        "Void"
      ]);
      operators8 = "+-/*%=|&<>~^?!";
      punc = ":;,.(){}[]";
      binary = /^\-?0b[01][01_]*/;
      octal = /^\-?0o[0-7][0-7_]*/;
      hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
      decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
      identifier5 = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
      property2 = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
      instruction = /^\#[A-Za-z]+/;
      attribute2 = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
      swift = {
        name: "swift",
        startState: function() {
          return {
            prev: null,
            context: null,
            indented: 0,
            tokenize: []
          };
        },
        token: function(stream, state) {
          var prev = state.prev;
          state.prev = null;
          var tokenize6 = state.tokenize[state.tokenize.length - 1] || tokenBase36;
          var style2 = tokenize6(stream, state, prev);
          if (!style2 || style2 == "comment")
            state.prev = prev;
          else if (!state.prev)
            state.prev = style2;
          if (style2 == "punctuation") {
            var bracket2 = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
            if (bracket2)
              (bracket2[1] ? popContext11 : pushContext11)(state, stream);
          }
          return style2;
        },
        indent: function(state, textAfter, iCx) {
          var cx2 = state.context;
          if (!cx2)
            return 0;
          var closing3 = /^[\]\}\)]/.test(textAfter);
          if (cx2.align != null)
            return cx2.align - (closing3 ? 1 : 0);
          return cx2.indented + (closing3 ? 0 : iCx.unit);
        },
        languageData: {
          indentOnInput: /^\s*[\)\}\]]$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/stex.js
  var stex_exports = {};
  __export(stex_exports, {
    stex: () => stex,
    stexMath: () => stexMath
  });
  function mkStex(mathMode) {
    function pushCommand(state, command2) {
      state.cmdState.push(command2);
    }
    function peekCommand(state) {
      if (state.cmdState.length > 0) {
        return state.cmdState[state.cmdState.length - 1];
      } else {
        return null;
      }
    }
    function popCommand(state) {
      var plug = state.cmdState.pop();
      if (plug) {
        plug.closeBracket();
      }
    }
    function getMostPowerful(state) {
      var context = state.cmdState;
      for (var i = context.length - 1; i >= 0; i--) {
        var plug = context[i];
        if (plug.name == "DEFAULT") {
          continue;
        }
        return plug;
      }
      return { styleIdentifier: function() {
        return null;
      } };
    }
    function addPluginPattern(pluginName2, cmdStyle, styles2) {
      return function() {
        this.name = pluginName2;
        this.bracketNo = 0;
        this.style = cmdStyle;
        this.styles = styles2;
        this.argument = null;
        this.styleIdentifier = function() {
          return this.styles[this.bracketNo - 1] || null;
        };
        this.openBracket = function() {
          this.bracketNo++;
          return "bracket";
        };
        this.closeBracket = function() {
        };
      };
    }
    var plugins = {};
    plugins["importmodule"] = addPluginPattern("importmodule", "tag", ["string", "builtin"]);
    plugins["documentclass"] = addPluginPattern("documentclass", "tag", ["", "atom"]);
    plugins["usepackage"] = addPluginPattern("usepackage", "tag", ["atom"]);
    plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
    plugins["end"] = addPluginPattern("end", "tag", ["atom"]);
    plugins["label"] = addPluginPattern("label", "tag", ["atom"]);
    plugins["ref"] = addPluginPattern("ref", "tag", ["atom"]);
    plugins["eqref"] = addPluginPattern("eqref", "tag", ["atom"]);
    plugins["cite"] = addPluginPattern("cite", "tag", ["atom"]);
    plugins["bibitem"] = addPluginPattern("bibitem", "tag", ["atom"]);
    plugins["Bibitem"] = addPluginPattern("Bibitem", "tag", ["atom"]);
    plugins["RBibitem"] = addPluginPattern("RBibitem", "tag", ["atom"]);
    plugins["DEFAULT"] = function() {
      this.name = "DEFAULT";
      this.style = "tag";
      this.styleIdentifier = this.openBracket = this.closeBracket = function() {
      };
    };
    function setState(state, f) {
      state.f = f;
    }
    function normal4(source, state) {
      var plug;
      if (source.match(/^\\[a-zA-Z@\xc0-\u1fff\u2060-\uffff]+/)) {
        var cmdName = source.current().slice(1);
        plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins["DEFAULT"];
        plug = new plug();
        pushCommand(state, plug);
        setState(state, beginParams);
        return plug.style;
      }
      if (source.match(/^\\[$&%#{}_]/)) {
        return "tag";
      }
      if (source.match(/^\\[,;!\/\\]/)) {
        return "tag";
      }
      if (source.match("\\[")) {
        setState(state, function(source2, state2) {
          return inMathMode(source2, state2, "\\]");
        });
        return "keyword";
      }
      if (source.match("\\(")) {
        setState(state, function(source2, state2) {
          return inMathMode(source2, state2, "\\)");
        });
        return "keyword";
      }
      if (source.match("$$")) {
        setState(state, function(source2, state2) {
          return inMathMode(source2, state2, "$$");
        });
        return "keyword";
      }
      if (source.match("$")) {
        setState(state, function(source2, state2) {
          return inMathMode(source2, state2, "$");
        });
        return "keyword";
      }
      var ch2 = source.next();
      if (ch2 == "%") {
        source.skipToEnd();
        return "comment";
      } else if (ch2 == "}" || ch2 == "]") {
        plug = peekCommand(state);
        if (plug) {
          plug.closeBracket(ch2);
          setState(state, beginParams);
        } else {
          return "error";
        }
        return "bracket";
      } else if (ch2 == "{" || ch2 == "[") {
        plug = plugins["DEFAULT"];
        plug = new plug();
        pushCommand(state, plug);
        return "bracket";
      } else if (/\d/.test(ch2)) {
        source.eatWhile(/[\w.%]/);
        return "atom";
      } else {
        source.eatWhile(/[\w\-_]/);
        plug = getMostPowerful(state);
        if (plug.name == "begin") {
          plug.argument = source.current();
        }
        return plug.styleIdentifier();
      }
    }
    function inMathMode(source, state, endModeSeq) {
      if (source.eatSpace()) {
        return null;
      }
      if (endModeSeq && source.match(endModeSeq)) {
        setState(state, normal4);
        return "keyword";
      }
      if (source.match(/^\\[a-zA-Z@]+/)) {
        return "tag";
      }
      if (source.match(/^[a-zA-Z]+/)) {
        return "variableName.special";
      }
      if (source.match(/^\\[$&%#{}_]/)) {
        return "tag";
      }
      if (source.match(/^\\[,;!\/]/)) {
        return "tag";
      }
      if (source.match(/^[\^_&]/)) {
        return "tag";
      }
      if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
        return null;
      }
      if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
        return "number";
      }
      var ch2 = source.next();
      if (ch2 == "{" || ch2 == "}" || ch2 == "[" || ch2 == "]" || ch2 == "(" || ch2 == ")") {
        return "bracket";
      }
      if (ch2 == "%") {
        source.skipToEnd();
        return "comment";
      }
      return "error";
    }
    function beginParams(source, state) {
      var ch2 = source.peek(), lastPlug;
      if (ch2 == "{" || ch2 == "[") {
        lastPlug = peekCommand(state);
        lastPlug.openBracket(ch2);
        source.eat(ch2);
        setState(state, normal4);
        return "bracket";
      }
      if (/[ \t\r]/.test(ch2)) {
        source.eat(ch2);
        return null;
      }
      setState(state, normal4);
      popCommand(state);
      return normal4(source, state);
    }
    return {
      name: "stex",
      startState: function() {
        var f = mathMode ? function(source, state) {
          return inMathMode(source, state);
        } : normal4;
        return {
          cmdState: [],
          f
        };
      },
      copyState: function(s2) {
        return {
          cmdState: s2.cmdState.slice(),
          f: s2.f
        };
      },
      token: function(stream, state) {
        return state.f(stream, state);
      },
      blankLine: function(state) {
        state.f = normal4;
        state.cmdState.length = 0;
      },
      languageData: {
        commentTokens: { line: "%" }
      }
    };
  }
  var stex, stexMath;
  var init_stex = __esm({
    "node_modules/@codemirror/legacy-modes/mode/stex.js"() {
      stex = mkStex(false);
      stexMath = mkStex(true);
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/verilog.js
  var verilog_exports = {};
  __export(verilog_exports, {
    tlv: () => tlv,
    verilog: () => verilog
  });
  function mkVerilog(parserConfig4) {
    var statementIndentUnit2 = parserConfig4.statementIndentUnit, dontAlignCalls = parserConfig4.dontAlignCalls, noIndentKeywords = parserConfig4.noIndentKeywords || [], multiLineStrings5 = parserConfig4.multiLineStrings, hooks4 = parserConfig4.hooks || {};
    function words22(str) {
      var obj = {}, words23 = str.split(" ");
      for (var i2 = 0; i2 < words23.length; ++i2)
        obj[words23[i2]] = true;
      return obj;
    }
    var keywords47 = words22(
      "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor"
    );
    var isOperatorChar16 = /[\+\-\*\/!~&|^%=?:]/;
    var isBracketChar = /[\[\]{}()]/;
    var unsignedNumber = /\d[0-9_]*/;
    var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
    var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
    var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
    var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
    var realLiteral = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;
    var closingBracketOrWord = /^((\w+)|[)}\]])/;
    var closingBracket = /[)}\]]/;
    var curPunc14;
    var curKeyword;
    var blockKeywords6 = words22(
      "case checker class clocking config function generate interface module package primitive program property specify sequence table task"
    );
    var openClose = {};
    for (var keyword3 in blockKeywords6) {
      openClose[keyword3] = "end" + keyword3;
    }
    openClose["begin"] = "end";
    openClose["casex"] = "endcase";
    openClose["casez"] = "endcase";
    openClose["do"] = "while";
    openClose["fork"] = "join;join_any;join_none";
    openClose["covergroup"] = "endgroup";
    for (var i in noIndentKeywords) {
      var keyword3 = noIndentKeywords[i];
      if (openClose[keyword3]) {
        openClose[keyword3] = void 0;
      }
    }
    var statementKeywords = words22("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");
    function tokenBase48(stream, state) {
      var ch2 = stream.peek(), style2;
      if (hooks4[ch2] && (style2 = hooks4[ch2](stream, state)) != false)
        return style2;
      if (hooks4.tokenBase && (style2 = hooks4.tokenBase(stream, state)) != false)
        return style2;
      if (/[,;:\.]/.test(ch2)) {
        curPunc14 = stream.next();
        return null;
      }
      if (isBracketChar.test(ch2)) {
        curPunc14 = stream.next();
        return "bracket";
      }
      if (ch2 == "`") {
        stream.next();
        if (stream.eatWhile(/[\w\$_]/)) {
          return "def";
        } else {
          return null;
        }
      }
      if (ch2 == "$") {
        stream.next();
        if (stream.eatWhile(/[\w\$_]/)) {
          return "meta";
        } else {
          return null;
        }
      }
      if (ch2 == "#") {
        stream.next();
        stream.eatWhile(/[\d_.]/);
        return "def";
      }
      if (ch2 == '"') {
        stream.next();
        state.tokenize = tokenString30(ch2);
        return state.tokenize(stream, state);
      }
      if (ch2 == "/") {
        stream.next();
        if (stream.eat("*")) {
          state.tokenize = tokenComment21;
          return tokenComment21(stream, state);
        }
        if (stream.eat("/")) {
          stream.skipToEnd();
          return "comment";
        }
        stream.backUp(1);
      }
      if (stream.match(realLiteral) || stream.match(decimalLiteral) || stream.match(binaryLiteral) || stream.match(octLiteral) || stream.match(hexLiteral) || stream.match(unsignedNumber) || stream.match(realLiteral)) {
        return "number";
      }
      if (stream.eatWhile(isOperatorChar16)) {
        return "meta";
      }
      if (stream.eatWhile(/[\w\$_]/)) {
        var cur = stream.current();
        if (keywords47[cur]) {
          if (openClose[cur]) {
            curPunc14 = "newblock";
          }
          if (statementKeywords[cur]) {
            curPunc14 = "newstatement";
          }
          curKeyword = cur;
          return "keyword";
        }
        return "variable";
      }
      stream.next();
      return null;
    }
    function tokenString30(quote2) {
      return function(stream, state) {
        var escaped = false, next2, end2 = false;
        while ((next2 = stream.next()) != null) {
          if (next2 == quote2 && !escaped) {
            end2 = true;
            break;
          }
          escaped = !escaped && next2 == "\\";
        }
        if (end2 || !(escaped || multiLineStrings5))
          state.tokenize = tokenBase48;
        return "string";
      };
    }
    function tokenComment21(stream, state) {
      var maybeEnd = false, ch2;
      while (ch2 = stream.next()) {
        if (ch2 == "/" && maybeEnd) {
          state.tokenize = tokenBase48;
          break;
        }
        maybeEnd = ch2 == "*";
      }
      return "comment";
    }
    function Context14(indented, column, type7, align, prev) {
      this.indented = indented;
      this.column = column;
      this.type = type7;
      this.align = align;
      this.prev = prev;
    }
    function pushContext17(state, col, type7) {
      var indent5 = state.indented;
      var c2 = new Context14(indent5, col, type7, null, state.context);
      return state.context = c2;
    }
    function popContext17(state) {
      var t2 = state.context.type;
      if (t2 == ")" || t2 == "]" || t2 == "}") {
        state.indented = state.context.indented;
      }
      return state.context = state.context.prev;
    }
    function isClosing(text, contextClosing) {
      if (text == contextClosing) {
        return true;
      } else {
        var closingKeywords = contextClosing.split(";");
        for (var i2 in closingKeywords) {
          if (text == closingKeywords[i2]) {
            return true;
          }
        }
        return false;
      }
    }
    function buildElectricInputRegEx2() {
      var allClosings = [];
      for (var i2 in openClose) {
        if (openClose[i2]) {
          var closings = openClose[i2].split(";");
          for (var j in closings) {
            allClosings.push(closings[j]);
          }
        }
      }
      var re = new RegExp("[{}()\\[\\]]|(" + allClosings.join("|") + ")$");
      return re;
    }
    return {
      name: "verilog",
      startState: function(indentUnit2) {
        var state = {
          tokenize: null,
          context: new Context14(-indentUnit2, 0, "top", false),
          indented: 0,
          startOfLine: true
        };
        if (hooks4.startState)
          hooks4.startState(state);
        return state;
      },
      token: function(stream, state) {
        var ctx = state.context;
        if (stream.sol()) {
          if (ctx.align == null)
            ctx.align = false;
          state.indented = stream.indentation();
          state.startOfLine = true;
        }
        if (hooks4.token) {
          var style2 = hooks4.token(stream, state);
          if (style2 !== void 0) {
            return style2;
          }
        }
        if (stream.eatSpace())
          return null;
        curPunc14 = null;
        curKeyword = null;
        var style2 = (state.tokenize || tokenBase48)(stream, state);
        if (style2 == "comment" || style2 == "meta" || style2 == "variable")
          return style2;
        if (ctx.align == null)
          ctx.align = true;
        if (curPunc14 == ctx.type) {
          popContext17(state);
        } else if (curPunc14 == ";" && ctx.type == "statement" || ctx.type && isClosing(curKeyword, ctx.type)) {
          ctx = popContext17(state);
          while (ctx && ctx.type == "statement")
            ctx = popContext17(state);
        } else if (curPunc14 == "{") {
          pushContext17(state, stream.column(), "}");
        } else if (curPunc14 == "[") {
          pushContext17(state, stream.column(), "]");
        } else if (curPunc14 == "(") {
          pushContext17(state, stream.column(), ")");
        } else if (ctx && ctx.type == "endcase" && curPunc14 == ":") {
          pushContext17(state, stream.column(), "statement");
        } else if (curPunc14 == "newstatement") {
          pushContext17(state, stream.column(), "statement");
        } else if (curPunc14 == "newblock") {
          if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) {
          } else if (curKeyword == "task" && ctx && ctx.type == "statement") {
          } else {
            var close = openClose[curKeyword];
            pushContext17(state, stream.column(), close);
          }
        }
        state.startOfLine = false;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        if (state.tokenize != tokenBase48 && state.tokenize != null)
          return null;
        if (hooks4.indent) {
          var fromHook = hooks4.indent(state);
          if (fromHook >= 0)
            return fromHook;
        }
        var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
        if (ctx.type == "statement" && firstChar == "}")
          ctx = ctx.prev;
        var closing3 = false;
        var possibleClosing = textAfter.match(closingBracketOrWord);
        if (possibleClosing)
          closing3 = isClosing(possibleClosing[0], ctx.type);
        if (ctx.type == "statement")
          return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit2 || cx2.unit);
        else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls)
          return ctx.column + (closing3 ? 0 : 1);
        else if (ctx.type == ")" && !closing3)
          return ctx.indented + (statementIndentUnit2 || cx2.unit);
        else
          return ctx.indented + (closing3 ? 0 : cx2.unit);
      },
      languageData: {
        indentOnInput: buildElectricInputRegEx2(),
        commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
      }
    };
  }
  var verilog, tlvIdentifierStyle, tlvScopePrefixChars, tlvIndentUnit, tlvTrackStatements, tlvIdentMatch, tlvLineIndentationMatch, tlvCommentMatch, tlv;
  var init_verilog = __esm({
    "node_modules/@codemirror/legacy-modes/mode/verilog.js"() {
      verilog = mkVerilog({});
      tlvIdentifierStyle = {
        "|": "link",
        ">": "property",
        // Should condition this off for > TLV 1c.
        "$": "variable",
        "$$": "variable",
        "?$": "qualifier",
        "?*": "qualifier",
        "-": "contentSeparator",
        "/": "property",
        "/-": "property",
        "@": "variableName.special",
        "@-": "variableName.special",
        "@++": "variableName.special",
        "@+=": "variableName.special",
        "@+=-": "variableName.special",
        "@--": "variableName.special",
        "@-=": "variableName.special",
        "%+": "tag",
        "%-": "tag",
        "%": "tag",
        ">>": "tag",
        "<<": "tag",
        "<>": "tag",
        "#": "tag",
        // Need to choose a style for this.
        "^": "attribute",
        "^^": "attribute",
        "^!": "attribute",
        "*": "variable",
        "**": "variable",
        "\\": "keyword",
        '"': "comment"
      };
      tlvScopePrefixChars = {
        "/": "beh-hier",
        ">": "beh-hier",
        "-": "phys-hier",
        "|": "pipe",
        "?": "when",
        "@": "stage",
        "\\": "keyword"
      };
      tlvIndentUnit = 3;
      tlvTrackStatements = false;
      tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;
      tlvLineIndentationMatch = /^[! ] */;
      tlvCommentMatch = /^\/[\/\*]/;
      tlv = mkVerilog({
        hooks: {
          electricInput: false,
          // Return undefined for verilog tokenizing, or style for TLV token (null not used).
          // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
          // can be enabled with the definition of cm-tlv-* styles, including highlighting for:
          //   - M4 tokens
          //   - TLV scope indentation
          //   - Statement delimitation (enabled by tlvTrackStatements)
          token: function(stream, state) {
            var style2 = void 0;
            var match3;
            if (stream.sol() && !state.tlvInBlockComment) {
              if (stream.peek() == "\\") {
                style2 = "def";
                stream.skipToEnd();
                if (stream.string.match(/\\SV/)) {
                  state.tlvCodeActive = false;
                } else if (stream.string.match(/\\TLV/)) {
                  state.tlvCodeActive = true;
                }
              }
              if (state.tlvCodeActive && stream.pos == 0 && state.indented == 0 && (match3 = stream.match(tlvLineIndentationMatch, false))) {
                state.indented = match3[0].length;
              }
              var indented = state.indented;
              var depth = indented / tlvIndentUnit;
              if (depth <= state.tlvIndentationStyle.length) {
                var blankline = stream.string.length == indented;
                var chPos = depth * tlvIndentUnit;
                if (chPos < stream.string.length) {
                  var bodyString = stream.string.slice(chPos);
                  var ch2 = bodyString[0];
                  if (tlvScopePrefixChars[ch2] && ((match3 = bodyString.match(tlvIdentMatch)) && tlvIdentifierStyle[match3[1]])) {
                    indented += tlvIndentUnit;
                    if (!(ch2 == "\\" && chPos > 0)) {
                      state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch2];
                      if (tlvTrackStatements) {
                        state.statementComment = false;
                      }
                      depth++;
                    }
                  }
                }
                if (!blankline) {
                  while (state.tlvIndentationStyle.length > depth) {
                    state.tlvIndentationStyle.pop();
                  }
                }
              }
              state.tlvNextIndent = indented;
            }
            if (state.tlvCodeActive) {
              var beginStatement = false;
              if (tlvTrackStatements) {
                beginStatement = stream.peek() != " " && // not a space
                style2 === void 0 && // not a region identifier
                !state.tlvInBlockComment && // not in block comment
                //!stream.match(tlvCommentMatch, false) && // not comment start
                stream.column() == state.tlvIndentationStyle.length * tlvIndentUnit;
                if (beginStatement) {
                  if (state.statementComment) {
                    beginStatement = false;
                  }
                  state.statementComment = stream.match(tlvCommentMatch, false);
                }
              }
              var match3;
              if (style2 !== void 0) {
              } else if (state.tlvInBlockComment) {
                if (stream.match(/^.*?\*\//)) {
                  state.tlvInBlockComment = false;
                  if (tlvTrackStatements && !stream.eol()) {
                    state.statementComment = false;
                  }
                } else {
                  stream.skipToEnd();
                }
                style2 = "comment";
              } else if ((match3 = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {
                if (match3[0] == "//") {
                  stream.skipToEnd();
                } else {
                  state.tlvInBlockComment = true;
                }
                style2 = "comment";
              } else if (match3 = stream.match(tlvIdentMatch)) {
                var prefix2 = match3[1];
                var mnemonic = match3[2];
                if (
                  // is identifier prefix
                  tlvIdentifierStyle.hasOwnProperty(prefix2) && // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
                  (mnemonic.length > 0 || stream.eol())
                ) {
                  style2 = tlvIdentifierStyle[prefix2];
                } else {
                  stream.backUp(stream.current().length - 1);
                }
              } else if (stream.match(/^\t+/)) {
                style2 = "invalid";
              } else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
                style2 = "meta";
              } else if (match3 = stream.match(/^[mM]4([\+_])?[\w\d_]*/)) {
                style2 = match3[1] == "+" ? "keyword.special" : "keyword";
              } else if (stream.match(/^ +/)) {
                if (stream.eol()) {
                  style2 = "error";
                }
              } else if (stream.match(/^[\w\d_]+/)) {
                style2 = "number";
              } else {
                stream.next();
              }
            } else {
              if (stream.match(/^[mM]4([\w\d_]*)/)) {
                style2 = "keyword";
              }
            }
            return style2;
          },
          indent: function(state) {
            return state.tlvCodeActive == true ? state.tlvNextIndent : -1;
          },
          startState: function(state) {
            state.tlvIndentationStyle = [];
            state.tlvCodeActive = true;
            state.tlvNextIndent = -1;
            state.tlvInBlockComment = false;
            if (tlvTrackStatements) {
              state.statementComment = false;
            }
          }
        }
      });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/tcl.js
  var tcl_exports = {};
  __export(tcl_exports, {
    tcl: () => tcl
  });
  function parseWords2(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function chain8(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenBase37(stream, state) {
    var beforeParams = state.beforeParams;
    state.beforeParams = false;
    var ch2 = stream.next();
    if ((ch2 == '"' || ch2 == "'") && state.inParams) {
      return chain8(stream, state, tokenString22(ch2));
    } else if (/[\[\]{}\(\),;\.]/.test(ch2)) {
      if (ch2 == "(" && beforeParams)
        state.inParams = true;
      else if (ch2 == ")")
        state.inParams = false;
      return null;
    } else if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    } else if (ch2 == "#") {
      if (stream.eat("*"))
        return chain8(stream, state, tokenComment16);
      if (ch2 == "#" && stream.match(/ *\[ *\[/))
        return chain8(stream, state, tokenUnparsed2);
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == '"') {
      stream.skipTo(/"/);
      return "comment";
    } else if (ch2 == "$") {
      stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
      stream.eatWhile(/}/);
      state.beforeParams = true;
      return "builtin";
    } else if (isOperatorChar11.test(ch2)) {
      stream.eatWhile(isOperatorChar11);
      return "comment";
    } else {
      stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
      var word2 = stream.current().toLowerCase();
      if (keywords37 && keywords37.propertyIsEnumerable(word2))
        return "keyword";
      if (functions2 && functions2.propertyIsEnumerable(word2)) {
        state.beforeParams = true;
        return "keyword";
      }
      return null;
    }
  }
  function tokenString22(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2)
        state.tokenize = tokenBase37;
      return "string";
    };
  }
  function tokenComment16(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "#" && maybeEnd) {
        state.tokenize = tokenBase37;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenUnparsed2(stream, state) {
    var maybeEnd = 0, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "#" && maybeEnd == 2) {
        state.tokenize = tokenBase37;
        break;
      }
      if (ch2 == "]")
        maybeEnd++;
      else if (ch2 != " ")
        maybeEnd = 0;
    }
    return "meta";
  }
  var keywords37, functions2, isOperatorChar11, tcl;
  var init_tcl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/tcl.js"() {
      keywords37 = parseWords2("Tcl safe after append array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd close concat continue dde eof encoding error eval exec exit expr fblocked fconfigure fcopy file fileevent filename filename flush for foreach format gets glob global history http if incr info interp join lappend lindex linsert list llength load lrange lreplace lsearch lset lsort memory msgcat namespace open package parray pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp registry regsub rename resource return scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest tclvars tell time trace unknown unset update uplevel upvar variable vwait");
      functions2 = parseWords2("if elseif else and not or eq ne in ni for foreach while switch");
      isOperatorChar11 = /[+\-*&%=<>!?^\/\|]/;
      tcl = {
        name: "tcl",
        startState: function() {
          return {
            tokenize: tokenBase37,
            beforeParams: false,
            inParams: false
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return state.tokenize(stream, state);
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/textile.js
  var textile_exports = {};
  __export(textile_exports, {
    textile: () => textile
  });
  function startNewLine(stream, state) {
    state.mode = Modes.newLayout;
    state.tableHeading = false;
    if (state.layoutType === "definitionList" && state.spanningLayout && stream.match(RE("definitionListEnd"), false))
      state.spanningLayout = false;
  }
  function handlePhraseModifier(stream, state, ch2) {
    if (ch2 === "_") {
      if (stream.eat("_"))
        return togglePhraseModifier(stream, state, "italic", /__/, 2);
      else
        return togglePhraseModifier(stream, state, "em", /_/, 1);
    }
    if (ch2 === "*") {
      if (stream.eat("*")) {
        return togglePhraseModifier(stream, state, "bold", /\*\*/, 2);
      }
      return togglePhraseModifier(stream, state, "strong", /\*/, 1);
    }
    if (ch2 === "[") {
      if (stream.match(/\d+\]/))
        state.footCite = true;
      return tokenStyles(state);
    }
    if (ch2 === "(") {
      var spec = stream.match(/^(r|tm|c)\)/);
      if (spec)
        return TOKEN_STYLES.specialChar;
    }
    if (ch2 === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
      return TOKEN_STYLES.html;
    if (ch2 === "?" && stream.eat("?"))
      return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);
    if (ch2 === "=" && stream.eat("="))
      return togglePhraseModifier(stream, state, "notextile", /==/, 2);
    if (ch2 === "-" && !stream.eat("-"))
      return togglePhraseModifier(stream, state, "deletion", /-/, 1);
    if (ch2 === "+")
      return togglePhraseModifier(stream, state, "addition", /\+/, 1);
    if (ch2 === "~")
      return togglePhraseModifier(stream, state, "sub", /~/, 1);
    if (ch2 === "^")
      return togglePhraseModifier(stream, state, "sup", /\^/, 1);
    if (ch2 === "%")
      return togglePhraseModifier(stream, state, "span", /%/, 1);
    if (ch2 === "@")
      return togglePhraseModifier(stream, state, "code", /@/, 1);
    if (ch2 === "!") {
      var type7 = togglePhraseModifier(stream, state, "image", /(?:\([^\)]+\))?!/, 1);
      stream.match(/^:\S+/);
      return type7;
    }
    return tokenStyles(state);
  }
  function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {
    var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;
    var charAfter = stream.peek();
    if (state[phraseModifier]) {
      if ((!charAfter || /\W/.test(charAfter)) && charBefore && /\S/.test(charBefore)) {
        var type7 = tokenStyles(state);
        state[phraseModifier] = false;
        return type7;
      }
    } else if ((!charBefore || /\W/.test(charBefore)) && charAfter && /\S/.test(charAfter) && stream.match(new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"), false)) {
      state[phraseModifier] = true;
      state.mode = Modes.attributes;
    }
    return tokenStyles(state);
  }
  function tokenStyles(state) {
    var disabled = textileDisabled(state);
    if (disabled)
      return disabled;
    var styles2 = [];
    if (state.layoutType)
      styles2.push(TOKEN_STYLES[state.layoutType]);
    styles2 = styles2.concat(activeStyles(
      state,
      "addition",
      "bold",
      "cite",
      "code",
      "deletion",
      "em",
      "footCite",
      "image",
      "italic",
      "link",
      "span",
      "strong",
      "sub",
      "sup",
      "table",
      "tableHeading"
    ));
    if (state.layoutType === "header")
      styles2.push(TOKEN_STYLES.header + "-" + state.header);
    return styles2.length ? styles2.join(" ") : null;
  }
  function textileDisabled(state) {
    var type7 = state.layoutType;
    switch (type7) {
      case "notextile":
      case "code":
      case "pre":
        return TOKEN_STYLES[type7];
      default:
        if (state.notextile)
          return TOKEN_STYLES.notextile + (type7 ? " " + TOKEN_STYLES[type7] : "");
        return null;
    }
  }
  function activeStyles(state) {
    var styles2 = [];
    for (var i = 1; i < arguments.length; ++i) {
      if (state[arguments[i]])
        styles2.push(TOKEN_STYLES[arguments[i]]);
    }
    return styles2;
  }
  function blankLine(state) {
    var spanningLayout = state.spanningLayout, type7 = state.layoutType;
    for (var key in state)
      if (state.hasOwnProperty(key))
        delete state[key];
    state.mode = Modes.newLayout;
    if (spanningLayout) {
      state.layoutType = type7;
      state.spanningLayout = true;
    }
  }
  function RE(name2) {
    return REs.cache[name2] || (REs.cache[name2] = REs.createRe(name2));
  }
  var TOKEN_STYLES, REs, Modes, textile;
  var init_textile = __esm({
    "node_modules/@codemirror/legacy-modes/mode/textile.js"() {
      TOKEN_STYLES = {
        addition: "inserted",
        attributes: "propertyName",
        bold: "strong",
        cite: "keyword",
        code: "monospace",
        definitionList: "list",
        deletion: "deleted",
        div: "punctuation",
        em: "emphasis",
        footnote: "variable",
        footCite: "qualifier",
        header: "heading",
        html: "comment",
        image: "atom",
        italic: "emphasis",
        link: "link",
        linkDefinition: "link",
        list1: "list",
        list2: "list.special",
        list3: "list",
        notextile: "string.special",
        pre: "operator",
        p: "content",
        quote: "bracket",
        span: "quote",
        specialChar: "character",
        strong: "strong",
        sub: "content.special",
        sup: "content.special",
        table: "variableName.special",
        tableHeading: "operator"
      };
      REs = {
        cache: {},
        single: {
          bc: "bc",
          bq: "bq",
          definitionList: /- .*?:=+/,
          definitionListEnd: /.*=:\s*$/,
          div: "div",
          drawTable: /\|.*\|/,
          foot: /fn\d+/,
          header: /h[1-6]/,
          html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
          link: /[^"]+":\S/,
          linkDefinition: /\[[^\s\]]+\]\S+/,
          list: /(?:#+|\*+)/,
          notextile: "notextile",
          para: "p",
          pre: "pre",
          table: "table",
          tableCellAttributes: /[\/\\]\d+/,
          tableHeading: /\|_\./,
          tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
          text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
        },
        attributes: {
          align: /(?:<>|<|>|=)/,
          selector: /\([^\(][^\)]+\)/,
          lang: /\[[^\[\]]+\]/,
          pad: /(?:\(+|\)+){1,2}/,
          css: /\{[^\}]+\}/
        },
        createRe: function(name2) {
          switch (name2) {
            case "drawTable":
              return REs.makeRe("^", REs.single.drawTable, "$");
            case "html":
              return REs.makeRe("^", REs.single.html, "(?:", REs.single.html, ")*", "$");
            case "linkDefinition":
              return REs.makeRe("^", REs.single.linkDefinition, "$");
            case "listLayout":
              return REs.makeRe("^", REs.single.list, RE("allAttributes"), "*\\s+");
            case "tableCellAttributes":
              return REs.makeRe("^", REs.choiceRe(
                REs.single.tableCellAttributes,
                RE("allAttributes")
              ), "+\\.");
            case "type":
              return REs.makeRe("^", RE("allTypes"));
            case "typeLayout":
              return REs.makeRe(
                "^",
                RE("allTypes"),
                RE("allAttributes"),
                "*\\.\\.?",
                "(\\s+|$)"
              );
            case "attributes":
              return REs.makeRe("^", RE("allAttributes"), "+");
            case "allTypes":
              return REs.choiceRe(
                REs.single.div,
                REs.single.foot,
                REs.single.header,
                REs.single.bc,
                REs.single.bq,
                REs.single.notextile,
                REs.single.pre,
                REs.single.table,
                REs.single.para
              );
            case "allAttributes":
              return REs.choiceRe(
                REs.attributes.selector,
                REs.attributes.css,
                REs.attributes.lang,
                REs.attributes.align,
                REs.attributes.pad
              );
            default:
              return REs.makeRe("^", REs.single[name2]);
          }
        },
        makeRe: function() {
          var pattern = "";
          for (var i = 0; i < arguments.length; ++i) {
            var arg = arguments[i];
            pattern += typeof arg === "string" ? arg : arg.source;
          }
          return new RegExp(pattern);
        },
        choiceRe: function() {
          var parts = [arguments[0]];
          for (var i = 1; i < arguments.length; ++i) {
            parts[i * 2 - 1] = "|";
            parts[i * 2] = arguments[i];
          }
          parts.unshift("(?:");
          parts.push(")");
          return REs.makeRe.apply(null, parts);
        }
      };
      Modes = {
        newLayout: function(stream, state) {
          if (stream.match(RE("typeLayout"), false)) {
            state.spanningLayout = false;
            return (state.mode = Modes.blockType)(stream, state);
          }
          var newMode;
          if (!textileDisabled(state)) {
            if (stream.match(RE("listLayout"), false))
              newMode = Modes.list;
            else if (stream.match(RE("drawTable"), false))
              newMode = Modes.table;
            else if (stream.match(RE("linkDefinition"), false))
              newMode = Modes.linkDefinition;
            else if (stream.match(RE("definitionList")))
              newMode = Modes.definitionList;
            else if (stream.match(RE("html"), false))
              newMode = Modes.html;
          }
          return (state.mode = newMode || Modes.text)(stream, state);
        },
        blockType: function(stream, state) {
          var match3, type7;
          state.layoutType = null;
          if (match3 = stream.match(RE("type")))
            type7 = match3[0];
          else
            return (state.mode = Modes.text)(stream, state);
          if (match3 = type7.match(RE("header"))) {
            state.layoutType = "header";
            state.header = parseInt(match3[0][1]);
          } else if (type7.match(RE("bq"))) {
            state.layoutType = "quote";
          } else if (type7.match(RE("bc"))) {
            state.layoutType = "code";
          } else if (type7.match(RE("foot"))) {
            state.layoutType = "footnote";
          } else if (type7.match(RE("notextile"))) {
            state.layoutType = "notextile";
          } else if (type7.match(RE("pre"))) {
            state.layoutType = "pre";
          } else if (type7.match(RE("div"))) {
            state.layoutType = "div";
          } else if (type7.match(RE("table"))) {
            state.layoutType = "table";
          }
          state.mode = Modes.attributes;
          return tokenStyles(state);
        },
        text: function(stream, state) {
          if (stream.match(RE("text")))
            return tokenStyles(state);
          var ch2 = stream.next();
          if (ch2 === '"')
            return (state.mode = Modes.link)(stream, state);
          return handlePhraseModifier(stream, state, ch2);
        },
        attributes: function(stream, state) {
          state.mode = Modes.layoutLength;
          if (stream.match(RE("attributes")))
            return TOKEN_STYLES.attributes;
          else
            return tokenStyles(state);
        },
        layoutLength: function(stream, state) {
          if (stream.eat(".") && stream.eat("."))
            state.spanningLayout = true;
          state.mode = Modes.text;
          return tokenStyles(state);
        },
        list: function(stream, state) {
          var match3 = stream.match(RE("list"));
          state.listDepth = match3[0].length;
          var listMod = (state.listDepth - 1) % 3;
          if (!listMod)
            state.layoutType = "list1";
          else if (listMod === 1)
            state.layoutType = "list2";
          else
            state.layoutType = "list3";
          state.mode = Modes.attributes;
          return tokenStyles(state);
        },
        link: function(stream, state) {
          state.mode = Modes.text;
          if (stream.match(RE("link"))) {
            stream.match(/\S+/);
            return TOKEN_STYLES.link;
          }
          return tokenStyles(state);
        },
        linkDefinition: function(stream) {
          stream.skipToEnd();
          return TOKEN_STYLES.linkDefinition;
        },
        definitionList: function(stream, state) {
          stream.match(RE("definitionList"));
          state.layoutType = "definitionList";
          if (stream.match(/\s*$/))
            state.spanningLayout = true;
          else
            state.mode = Modes.attributes;
          return tokenStyles(state);
        },
        html: function(stream) {
          stream.skipToEnd();
          return TOKEN_STYLES.html;
        },
        table: function(stream, state) {
          state.layoutType = "table";
          return (state.mode = Modes.tableCell)(stream, state);
        },
        tableCell: function(stream, state) {
          if (stream.match(RE("tableHeading")))
            state.tableHeading = true;
          else
            stream.eat("|");
          state.mode = Modes.tableCellAttributes;
          return tokenStyles(state);
        },
        tableCellAttributes: function(stream, state) {
          state.mode = Modes.tableText;
          if (stream.match(RE("tableCellAttributes")))
            return TOKEN_STYLES.attributes;
          else
            return tokenStyles(state);
        },
        tableText: function(stream, state) {
          if (stream.match(RE("tableText")))
            return tokenStyles(state);
          if (stream.peek() === "|") {
            state.mode = Modes.tableCell;
            return tokenStyles(state);
          }
          return handlePhraseModifier(stream, state, stream.next());
        }
      };
      textile = {
        name: "textile",
        startState: function() {
          return { mode: Modes.newLayout };
        },
        token: function(stream, state) {
          if (stream.sol())
            startNewLine(stream, state);
          return state.mode(stream, state);
        },
        blankLine
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js
  var tiddlywiki_exports = {};
  __export(tiddlywiki_exports, {
    tiddlyWiki: () => tiddlyWiki
  });
  function chain9(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenBase38(stream, state) {
    var sol = stream.sol(), ch2 = stream.peek();
    state.block = false;
    if (sol && /[<\/\*{}\-]/.test(ch2)) {
      if (stream.match(reCodeBlockStart)) {
        state.block = true;
        return chain9(stream, state, twTokenCode);
      }
      if (stream.match(reBlockQuote))
        return "quote";
      if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))
        return "comment";
      if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))
        return "comment";
      if (stream.match(reHR))
        return "contentSeparator";
    }
    stream.next();
    if (sol && /[\/\*!#;:>|]/.test(ch2)) {
      if (ch2 == "!") {
        stream.skipToEnd();
        return "header";
      }
      if (ch2 == "*") {
        stream.eatWhile("*");
        return "comment";
      }
      if (ch2 == "#") {
        stream.eatWhile("#");
        return "comment";
      }
      if (ch2 == ";") {
        stream.eatWhile(";");
        return "comment";
      }
      if (ch2 == ":") {
        stream.eatWhile(":");
        return "comment";
      }
      if (ch2 == ">") {
        stream.eatWhile(">");
        return "quote";
      }
      if (ch2 == "|")
        return "header";
    }
    if (ch2 == "{" && stream.match("{{"))
      return chain9(stream, state, twTokenCode);
    if (/[hf]/i.test(ch2) && /[ti]/i.test(stream.peek()) && stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
      return "link";
    if (ch2 == '"')
      return "string";
    if (ch2 == "~")
      return "brace";
    if (/[\[\]]/.test(ch2) && stream.match(ch2))
      return "brace";
    if (ch2 == "@") {
      stream.eatWhile(isSpaceName);
      return "link";
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/\d/);
      return "number";
    }
    if (ch2 == "/") {
      if (stream.eat("%")) {
        return chain9(stream, state, twTokenComment);
      } else if (stream.eat("/")) {
        return chain9(stream, state, twTokenEm);
      }
    }
    if (ch2 == "_" && stream.eat("_"))
      return chain9(stream, state, twTokenUnderline);
    if (ch2 == "-" && stream.eat("-")) {
      if (stream.peek() != " ")
        return chain9(stream, state, twTokenStrike);
      if (stream.peek() == " ")
        return "brace";
    }
    if (ch2 == "'" && stream.eat("'"))
      return chain9(stream, state, twTokenStrong);
    if (ch2 == "<" && stream.eat("<"))
      return chain9(stream, state, twTokenMacro);
    stream.eatWhile(/[\w\$_]/);
    return textwords.propertyIsEnumerable(stream.current()) ? "keyword" : null;
  }
  function twTokenComment(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase38;
        break;
      }
      maybeEnd = ch2 == "%";
    }
    return "comment";
  }
  function twTokenStrong(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "'" && maybeEnd) {
        state.tokenize = tokenBase38;
        break;
      }
      maybeEnd = ch2 == "'";
    }
    return "strong";
  }
  function twTokenCode(stream, state) {
    var sb = state.block;
    if (sb && stream.current()) {
      return "comment";
    }
    if (!sb && stream.match(reUntilCodeStop)) {
      state.tokenize = tokenBase38;
      return "comment";
    }
    if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
      state.tokenize = tokenBase38;
      return "comment";
    }
    stream.next();
    return "comment";
  }
  function twTokenEm(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = tokenBase38;
        break;
      }
      maybeEnd = ch2 == "/";
    }
    return "emphasis";
  }
  function twTokenUnderline(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "_" && maybeEnd) {
        state.tokenize = tokenBase38;
        break;
      }
      maybeEnd = ch2 == "_";
    }
    return "link";
  }
  function twTokenStrike(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "-" && maybeEnd) {
        state.tokenize = tokenBase38;
        break;
      }
      maybeEnd = ch2 == "-";
    }
    return "deleted";
  }
  function twTokenMacro(stream, state) {
    if (stream.current() == "<<") {
      return "meta";
    }
    var ch2 = stream.next();
    if (!ch2) {
      state.tokenize = tokenBase38;
      return null;
    }
    if (ch2 == ">") {
      if (stream.peek() == ">") {
        stream.next();
        state.tokenize = tokenBase38;
        return "meta";
      }
    }
    stream.eatWhile(/[\w\$_]/);
    return keywords38.propertyIsEnumerable(stream.current()) ? "keyword" : null;
  }
  var textwords, keywords38, isSpaceName, reHR, reWikiCommentStart, reWikiCommentStop, reBlockQuote, reJsCodeStart, reJsCodeStop, reXmlCodeStart, reXmlCodeStop, reCodeBlockStart, reCodeBlockStop, reUntilCodeStop, tiddlyWiki;
  var init_tiddlywiki = __esm({
    "node_modules/@codemirror/legacy-modes/mode/tiddlywiki.js"() {
      textwords = {};
      keywords38 = {
        "allTags": true,
        "closeAll": true,
        "list": true,
        "newJournal": true,
        "newTiddler": true,
        "permaview": true,
        "saveChanges": true,
        "search": true,
        "slider": true,
        "tabs": true,
        "tag": true,
        "tagging": true,
        "tags": true,
        "tiddler": true,
        "timeline": true,
        "today": true,
        "version": true,
        "option": true,
        "with": true,
        "filter": true
      };
      isSpaceName = /[\w_\-]/i;
      reHR = /^\-\-\-\-+$/;
      reWikiCommentStart = /^\/\*\*\*$/;
      reWikiCommentStop = /^\*\*\*\/$/;
      reBlockQuote = /^<<<$/;
      reJsCodeStart = /^\/\/\{\{\{$/;
      reJsCodeStop = /^\/\/\}\}\}$/;
      reXmlCodeStart = /^<!--\{\{\{-->$/;
      reXmlCodeStop = /^<!--\}\}\}-->$/;
      reCodeBlockStart = /^\{\{\{$/;
      reCodeBlockStop = /^\}\}\}$/;
      reUntilCodeStop = /.*?\}\}\}/;
      tiddlyWiki = {
        name: "tiddlywiki",
        startState: function() {
          return { tokenize: tokenBase38 };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          return style2;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/tiki.js
  var tiki_exports = {};
  __export(tiki_exports, {
    tiki: () => tiki
  });
  function inBlock2(style2, terminator, returnTokenizer) {
    return function(stream, state) {
      while (!stream.eol()) {
        if (stream.match(terminator)) {
          state.tokenize = inText;
          break;
        }
        stream.next();
      }
      if (returnTokenizer)
        state.tokenize = returnTokenizer;
      return style2;
    };
  }
  function inLine(style2) {
    return function(stream, state) {
      while (!stream.eol()) {
        stream.next();
      }
      state.tokenize = inText;
      return style2;
    };
  }
  function inText(stream, state) {
    function chain12(parser14) {
      state.tokenize = parser14;
      return parser14(stream, state);
    }
    var sol = stream.sol();
    var ch2 = stream.next();
    switch (ch2) {
      case "{":
        stream.eat("/");
        stream.eatSpace();
        stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
        state.tokenize = inPlugin;
        return "tag";
      case "_":
        if (stream.eat("_"))
          return chain12(inBlock2("strong", "__", inText));
        break;
      case "'":
        if (stream.eat("'"))
          return chain12(inBlock2("em", "''", inText));
        break;
      case "(":
        if (stream.eat("("))
          return chain12(inBlock2("link", "))", inText));
        break;
      case "[":
        return chain12(inBlock2("url", "]", inText));
        break;
      case "|":
        if (stream.eat("|"))
          return chain12(inBlock2("comment", "||"));
        break;
      case "-":
        if (stream.eat("=")) {
          return chain12(inBlock2("header string", "=-", inText));
        } else if (stream.eat("-")) {
          return chain12(inBlock2("error tw-deleted", "--", inText));
        }
        break;
      case "=":
        if (stream.match("=="))
          return chain12(inBlock2("tw-underline", "===", inText));
        break;
      case ":":
        if (stream.eat(":"))
          return chain12(inBlock2("comment", "::"));
        break;
      case "^":
        return chain12(inBlock2("tw-box", "^"));
        break;
      case "~":
        if (stream.match("np~"))
          return chain12(inBlock2("meta", "~/np~"));
        break;
    }
    if (sol) {
      switch (ch2) {
        case "!":
          if (stream.match("!!!!!")) {
            return chain12(inLine("header string"));
          } else if (stream.match("!!!!")) {
            return chain12(inLine("header string"));
          } else if (stream.match("!!!")) {
            return chain12(inLine("header string"));
          } else if (stream.match("!!")) {
            return chain12(inLine("header string"));
          } else {
            return chain12(inLine("header string"));
          }
          break;
        case "*":
        case "#":
        case "+":
          return chain12(inLine("tw-listitem bracket"));
          break;
      }
    }
    return null;
  }
  function inPlugin(stream, state) {
    var ch2 = stream.next();
    var peek = stream.peek();
    if (ch2 == "}") {
      state.tokenize = inText;
      return "tag";
    } else if (ch2 == "(" || ch2 == ")") {
      return "bracket";
    } else if (ch2 == "=") {
      type6 = "equals";
      if (peek == ">") {
        stream.next();
        peek = stream.peek();
      }
      if (!/[\'\"]/.test(peek)) {
        state.tokenize = inAttributeNoQuote();
      }
      return "operator";
    } else if (/[\'\"]/.test(ch2)) {
      state.tokenize = inAttribute(ch2);
      return state.tokenize(stream, state);
    } else {
      stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
      return "keyword";
    }
  }
  function inAttribute(quote2) {
    return function(stream, state) {
      while (!stream.eol()) {
        if (stream.next() == quote2) {
          state.tokenize = inPlugin;
          break;
        }
      }
      return "string";
    };
  }
  function inAttributeNoQuote() {
    return function(stream, state) {
      while (!stream.eol()) {
        var ch2 = stream.next();
        var peek = stream.peek();
        if (ch2 == " " || ch2 == "," || /[ )}]/.test(peek)) {
          state.tokenize = inPlugin;
          break;
        }
      }
      return "string";
    };
  }
  function pass3() {
    for (var i = arguments.length - 1; i >= 0; i--)
      curState.cc.push(arguments[i]);
  }
  function cont2() {
    pass3.apply(null, arguments);
    return true;
  }
  function pushContext12(pluginName2, startOfLine2) {
    var noIndent = curState.context && curState.context.noIndent;
    curState.context = {
      prev: curState.context,
      pluginName: pluginName2,
      indent: curState.indented,
      startOfLine: startOfLine2,
      noIndent
    };
  }
  function popContext12() {
    if (curState.context)
      curState.context = curState.context.prev;
  }
  function element(type7) {
    if (type7 == "openPlugin") {
      curState.pluginName = pluginName;
      return cont2(attributes, endplugin(curState.startOfLine));
    } else if (type7 == "closePlugin") {
      var err = false;
      if (curState.context) {
        err = curState.context.pluginName != pluginName;
        popContext12();
      } else {
        err = true;
      }
      if (err)
        setStyle = "error";
      return cont2(endcloseplugin(err));
    } else if (type7 == "string") {
      if (!curState.context || curState.context.name != "!cdata")
        pushContext12("!cdata");
      if (curState.tokenize == inText)
        popContext12();
      return cont2();
    } else
      return cont2();
  }
  function endplugin(startOfLine2) {
    return function(type7) {
      if (type7 == "selfclosePlugin" || type7 == "endPlugin")
        return cont2();
      if (type7 == "endPlugin") {
        pushContext12(curState.pluginName, startOfLine2);
        return cont2();
      }
      return cont2();
    };
  }
  function endcloseplugin(err) {
    return function(type7) {
      if (err)
        setStyle = "error";
      if (type7 == "endPlugin")
        return cont2();
      return pass3();
    };
  }
  function attributes(type7) {
    if (type7 == "keyword") {
      setStyle = "attribute";
      return cont2(attributes);
    }
    if (type7 == "equals")
      return cont2(attvalue, attributes);
    return pass3();
  }
  function attvalue(type7) {
    if (type7 == "keyword") {
      setStyle = "string";
      return cont2();
    }
    if (type7 == "string")
      return cont2(attvaluemaybe);
    return pass3();
  }
  function attvaluemaybe(type7) {
    if (type7 == "string")
      return cont2(attvaluemaybe);
    else
      return pass3();
  }
  var pluginName, type6, curState, setStyle, tiki;
  var init_tiki = __esm({
    "node_modules/@codemirror/legacy-modes/mode/tiki.js"() {
      tiki = {
        name: "tiki",
        startState: function() {
          return { tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            state.startOfLine = true;
            state.indented = stream.indentation();
          }
          if (stream.eatSpace())
            return null;
          setStyle = type6 = pluginName = null;
          var style2 = state.tokenize(stream, state);
          if ((style2 || type6) && style2 != "comment") {
            curState = state;
            while (true) {
              var comb = state.cc.pop() || element;
              if (comb(type6 || style2))
                break;
            }
          }
          state.startOfLine = false;
          return setStyle || style2;
        },
        indent: function(state, textAfter, cx2) {
          var context = state.context;
          if (context && context.noIndent)
            return 0;
          if (context && /^{\//.test(textAfter))
            context = context.prev;
          while (context && !context.startOfLine)
            context = context.prev;
          if (context)
            return context.indent + cx2.unit;
          else
            return 0;
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/toml.js
  var toml_exports = {};
  __export(toml_exports, {
    toml: () => toml
  });
  var toml;
  var init_toml = __esm({
    "node_modules/@codemirror/legacy-modes/mode/toml.js"() {
      toml = {
        name: "toml",
        startState: function() {
          return {
            inString: false,
            stringType: "",
            lhs: true,
            inArray: 0
          };
        },
        token: function(stream, state) {
          if (!state.inString && (stream.peek() == '"' || stream.peek() == "'")) {
            state.stringType = stream.peek();
            stream.next();
            state.inString = true;
          }
          if (stream.sol() && state.inArray === 0) {
            state.lhs = true;
          }
          if (state.inString) {
            while (state.inString && !stream.eol()) {
              if (stream.peek() === state.stringType) {
                stream.next();
                state.inString = false;
              } else if (stream.peek() === "\\") {
                stream.next();
                stream.next();
              } else {
                stream.match(/^.[^\\\"\']*/);
              }
            }
            return state.lhs ? "property" : "string";
          } else if (state.inArray && stream.peek() === "]") {
            stream.next();
            state.inArray--;
            return "bracket";
          } else if (state.lhs && stream.peek() === "[" && stream.skipTo("]")) {
            stream.next();
            if (stream.peek() === "]")
              stream.next();
            return "atom";
          } else if (stream.peek() === "#") {
            stream.skipToEnd();
            return "comment";
          } else if (stream.eatSpace()) {
            return null;
          } else if (state.lhs && stream.eatWhile(function(c2) {
            return c2 != "=" && c2 != " ";
          })) {
            return "property";
          } else if (state.lhs && stream.peek() === "=") {
            stream.next();
            state.lhs = false;
            return null;
          } else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
            return "atom";
          } else if (!state.lhs && (stream.match("true") || stream.match("false"))) {
            return "atom";
          } else if (!state.lhs && stream.peek() === "[") {
            state.inArray++;
            stream.next();
            return "bracket";
          } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
            return "number";
          } else if (!stream.eatSpace()) {
            stream.next();
          }
          return null;
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/troff.js
  var troff_exports = {};
  __export(troff_exports, {
    troff: () => troff
  });
  function tokenBase39(stream) {
    if (stream.eatSpace())
      return null;
    var sol = stream.sol();
    var ch2 = stream.next();
    if (ch2 === "\\") {
      if (stream.match("fB") || stream.match("fR") || stream.match("fI") || stream.match("u") || stream.match("d") || stream.match("%") || stream.match("&")) {
        return "string";
      }
      if (stream.match("m[")) {
        stream.skipTo("]");
        stream.next();
        return "string";
      }
      if (stream.match("s+") || stream.match("s-")) {
        stream.eatWhile(/[\d-]/);
        return "string";
      }
      if (stream.match("(") || stream.match("*(")) {
        stream.eatWhile(/[\w-]/);
        return "string";
      }
      return "string";
    }
    if (sol && (ch2 === "." || ch2 === "'")) {
      if (stream.eat("\\") && stream.eat('"')) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (sol && ch2 === ".") {
      if (stream.match("B ") || stream.match("I ") || stream.match("R ")) {
        return "attribute";
      }
      if (stream.match("TH ") || stream.match("SH ") || stream.match("SS ") || stream.match("HP ")) {
        stream.skipToEnd();
        return "quote";
      }
      if (stream.match(/[A-Z]/) && stream.match(/[A-Z]/) || stream.match(/[a-z]/) && stream.match(/[a-z]/)) {
        return "attribute";
      }
    }
    stream.eatWhile(/[\w-]/);
    var cur = stream.current();
    return words17.hasOwnProperty(cur) ? words17[cur] : null;
  }
  function tokenize5(stream, state) {
    return (state.tokens[0] || tokenBase39)(stream, state);
  }
  var words17, troff;
  var init_troff = __esm({
    "node_modules/@codemirror/legacy-modes/mode/troff.js"() {
      words17 = {};
      troff = {
        name: "troff",
        startState: function() {
          return { tokens: [] };
        },
        token: function(stream, state) {
          return tokenize5(stream, state);
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/ttcn.js
  var ttcn_exports = {};
  __export(ttcn_exports, {
    ttcn: () => ttcn
  });
  function words18(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function add(obj) {
    if (obj) {
      for (var prop in obj)
        if (obj.hasOwnProperty(prop))
          wordList.push(prop);
    }
  }
  function tokenBase40(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString23(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\[\]{}\(\),;\\:\?\.]/.test(ch2)) {
      curPunc10 = ch2;
      return "punctuation";
    }
    if (ch2 == "#") {
      stream.skipToEnd();
      return "atom";
    }
    if (ch2 == "%") {
      stream.eatWhile(/\b/);
      return "atom";
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (ch2 == "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment17;
        return tokenComment17(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar12.test(ch2)) {
      if (ch2 == "@") {
        if (stream.match("try") || stream.match("catch") || stream.match("lazy")) {
          return "keyword";
        }
      }
      stream.eatWhile(isOperatorChar12);
      return "operator";
    }
    stream.eatWhile(/[\w\$_\xa1-\uffff]/);
    var cur = stream.current();
    if (keywords39.propertyIsEnumerable(cur))
      return "keyword";
    if (builtin4.propertyIsEnumerable(cur))
      return "builtin";
    if (timerOps.propertyIsEnumerable(cur))
      return "def";
    if (configOps.propertyIsEnumerable(cur))
      return "def";
    if (verdictOps.propertyIsEnumerable(cur))
      return "def";
    if (portOps.propertyIsEnumerable(cur))
      return "def";
    if (sutOps.propertyIsEnumerable(cur))
      return "def";
    if (functionOps.propertyIsEnumerable(cur))
      return "def";
    if (verdictConsts.propertyIsEnumerable(cur))
      return "string";
    if (booleanConsts.propertyIsEnumerable(cur))
      return "string";
    if (otherConsts.propertyIsEnumerable(cur))
      return "string";
    if (types5.propertyIsEnumerable(cur))
      return "typeName.standard";
    if (visibilityModifiers.propertyIsEnumerable(cur))
      return "modifier";
    if (templateMatch.propertyIsEnumerable(cur))
      return "atom";
    return "variable";
  }
  function tokenString23(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          var afterQuote = stream.peek();
          if (afterQuote) {
            afterQuote = afterQuote.toLowerCase();
            if (afterQuote == "b" || afterQuote == "h" || afterQuote == "o")
              stream.next();
          }
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !(escaped || multiLineStrings2))
        state.tokenize = null;
      return "string";
    };
  }
  function tokenComment17(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "/" && maybeEnd) {
        state.tokenize = null;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function Context11(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext13(state, col, type7) {
    var indent5 = state.indented;
    if (state.context && state.context.type == "statement")
      indent5 = state.context.indented;
    return state.context = new Context11(indent5, col, type7, null, state.context);
  }
  function popContext13(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var parserConfig2, wordList, keywords39, builtin4, timerOps, portOps, configOps, verdictOps, sutOps, functionOps, verdictConsts, booleanConsts, otherConsts, types5, visibilityModifiers, templateMatch, multiLineStrings2, indentStatements, isOperatorChar12, curPunc10, ttcn;
  var init_ttcn = __esm({
    "node_modules/@codemirror/legacy-modes/mode/ttcn.js"() {
      parserConfig2 = {
        name: "ttcn",
        keywords: words18("activate address alive all alt altstep and and4b any break case component const continue control deactivate display do else encode enumerated except exception execute extends extension external for from function goto group if import in infinity inout interleave label language length log match message mixed mod modifies module modulepar mtc noblock not not4b nowait of on optional or or4b out override param pattern port procedure record recursive rem repeat return runs select self sender set signature system template testcase to type union value valueof var variant while with xor xor4b"),
        builtin: words18("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue decomp decvalue float2int float2str hex2bit hex2int hex2oct hex2str int2bit int2char int2float int2hex int2oct int2str int2unichar isbound ischosen ispresent isvalue lengthof log2str oct2bit oct2char oct2hex oct2int oct2str regexp replace rnd sizeof str2bit str2float str2hex str2int str2oct substr unichar2int unichar2char enum2int"),
        types: words18("anytype bitstring boolean char charstring default float hexstring integer objid octetstring universal verdicttype timer"),
        timerOps: words18("read running start stop timeout"),
        portOps: words18("call catch check clear getcall getreply halt raise receive reply send trigger"),
        configOps: words18("create connect disconnect done kill killed map unmap"),
        verdictOps: words18("getverdict setverdict"),
        sutOps: words18("action"),
        functionOps: words18("apply derefers refers"),
        verdictConsts: words18("error fail inconc none pass"),
        booleanConsts: words18("true false"),
        otherConsts: words18("null NULL omit"),
        visibilityModifiers: words18("private public friend"),
        templateMatch: words18("complement ifpresent subset superset permutation"),
        multiLineStrings: true
      };
      wordList = [];
      add(parserConfig2.keywords);
      add(parserConfig2.builtin);
      add(parserConfig2.timerOps);
      add(parserConfig2.portOps);
      keywords39 = parserConfig2.keywords || {};
      builtin4 = parserConfig2.builtin || {};
      timerOps = parserConfig2.timerOps || {};
      portOps = parserConfig2.portOps || {};
      configOps = parserConfig2.configOps || {};
      verdictOps = parserConfig2.verdictOps || {};
      sutOps = parserConfig2.sutOps || {};
      functionOps = parserConfig2.functionOps || {};
      verdictConsts = parserConfig2.verdictConsts || {};
      booleanConsts = parserConfig2.booleanConsts || {};
      otherConsts = parserConfig2.otherConsts || {};
      types5 = parserConfig2.types || {};
      visibilityModifiers = parserConfig2.visibilityModifiers || {};
      templateMatch = parserConfig2.templateMatch || {};
      multiLineStrings2 = parserConfig2.multiLineStrings;
      indentStatements = parserConfig2.indentStatements !== false;
      isOperatorChar12 = /[+\-*&@=<>!\/]/;
      ttcn = {
        name: "ttcn",
        startState: function() {
          return {
            tokenize: null,
            context: new Context11(0, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace())
            return null;
          curPunc10 = null;
          var style2 = (state.tokenize || tokenBase40)(stream, state);
          if (style2 == "comment")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if ((curPunc10 == ";" || curPunc10 == ":" || curPunc10 == ",") && ctx.type == "statement") {
            popContext13(state);
          } else if (curPunc10 == "{")
            pushContext13(state, stream.column(), "}");
          else if (curPunc10 == "[")
            pushContext13(state, stream.column(), "]");
          else if (curPunc10 == "(")
            pushContext13(state, stream.column(), ")");
          else if (curPunc10 == "}") {
            while (ctx.type == "statement")
              ctx = popContext13(state);
            if (ctx.type == "}")
              ctx = popContext13(state);
            while (ctx.type == "statement")
              ctx = popContext13(state);
          } else if (curPunc10 == ctx.type)
            popContext13(state);
          else if (indentStatements && ((ctx.type == "}" || ctx.type == "top") && curPunc10 != ";" || ctx.type == "statement" && curPunc10 == "newstatement"))
            pushContext13(state, stream.column(), "statement");
          state.startOfLine = false;
          return style2;
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
          autocomplete: wordList
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js
  var ttcn_cfg_exports = {};
  __export(ttcn_cfg_exports, {
    ttcnCfg: () => ttcnCfg
  });
  function words19(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenBase41(stream, state) {
    var ch2 = stream.next();
    if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenString24(ch2);
      return state.tokenize(stream, state);
    }
    if (/[:=]/.test(ch2)) {
      curPunc11 = ch2;
      return "punctuation";
    }
    if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    }
    if (/\d/.test(ch2)) {
      stream.eatWhile(/[\w\.]/);
      return "number";
    }
    if (isOperatorChar13.test(ch2)) {
      stream.eatWhile(isOperatorChar13);
      return "operator";
    }
    if (ch2 == "[") {
      stream.eatWhile(/[\w_\]]/);
      return "number";
    }
    stream.eatWhile(/[\w\$_]/);
    var cur = stream.current();
    if (keywords40.propertyIsEnumerable(cur))
      return "keyword";
    if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))
      return "atom";
    if (externalCommands.propertyIsEnumerable(cur))
      return "deleted";
    return "variable";
  }
  function tokenString24(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          var afterNext = stream.peek();
          if (afterNext) {
            afterNext = afterNext.toLowerCase();
            if (afterNext == "b" || afterNext == "h" || afterNext == "o")
              stream.next();
          }
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2 || !(escaped || multiLineStrings3))
        state.tokenize = null;
      return "string";
    };
  }
  function Context12(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext14(state, col, type7) {
    var indent5 = state.indented;
    if (state.context && state.context.type == "statement")
      indent5 = state.context.indented;
    return state.context = new Context12(indent5, col, type7, null, state.context);
  }
  function popContext14(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var parserConfig3, keywords40, fileNCtrlMaskOptions, externalCommands, multiLineStrings3, indentStatements2, isOperatorChar13, curPunc11, ttcnCfg;
  var init_ttcn_cfg = __esm({
    "node_modules/@codemirror/legacy-modes/mode/ttcn-cfg.js"() {
      parserConfig3 = {
        name: "ttcn-cfg",
        keywords: words19("Yes No LogFile FileMask ConsoleMask AppendFile TimeStampFormat LogEventTypes SourceInfoFormat LogEntityName LogSourceInfo DiskFullAction LogFileNumber LogFileSize MatchingHints Detailed Compact SubCategories Stack Single None Seconds DateTime Time Stop Error Retry Delete TCPPort KillTimer NumHCs UnixSocketsEnabled LocalAddress"),
        fileNCtrlMaskOptions: words19("TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION TTCN_USER TTCN_FUNCTION TTCN_STATISTICS TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG EXECUTOR ERROR WARNING PORTEVENT TIMEROP VERDICTOP DEFAULTOP TESTCASE ACTION USER FUNCTION STATISTICS PARALLEL MATCHING DEBUG LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED DEBUG_ENCDEC DEBUG_TESTPORT DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED FUNCTION_RND FUNCTION_UNQUALIFIED MATCHING_DONE MATCHING_MCSUCCESS MATCHING_MCUNSUCC MATCHING_MMSUCCESS MATCHING_MMUNSUCC MATCHING_PCSUCCESS MATCHING_PCUNSUCC MATCHING_PMSUCCESS MATCHING_PMUNSUCC MATCHING_PROBLEM MATCHING_TIMEOUT MATCHING_UNQUALIFIED PARALLEL_PORTCONN PARALLEL_PORTMAP PARALLEL_PTC PARALLEL_UNQUALIFIED PORTEVENT_DUALRECV PORTEVENT_DUALSEND PORTEVENT_MCRECV PORTEVENT_MCSEND PORTEVENT_MMRECV PORTEVENT_MMSEND PORTEVENT_MQUEUE PORTEVENT_PCIN PORTEVENT_PCOUT PORTEVENT_PMIN PORTEVENT_PMOUT PORTEVENT_PQUEUE PORTEVENT_STATE PORTEVENT_UNQUALIFIED STATISTICS_UNQUALIFIED STATISTICS_VERDICT TESTCASE_FINISH TESTCASE_START TESTCASE_UNQUALIFIED TIMEROP_GUARD TIMEROP_READ TIMEROP_START TIMEROP_STOP TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED USER_UNQUALIFIED VERDICTOP_FINAL VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"),
        externalCommands: words19("BeginControlPart EndControlPart BeginTestCase EndTestCase"),
        multiLineStrings: true
      };
      keywords40 = parserConfig3.keywords;
      fileNCtrlMaskOptions = parserConfig3.fileNCtrlMaskOptions;
      externalCommands = parserConfig3.externalCommands;
      multiLineStrings3 = parserConfig3.multiLineStrings;
      indentStatements2 = parserConfig3.indentStatements !== false;
      isOperatorChar13 = /[\|]/;
      ttcnCfg = {
        name: "ttcn",
        startState: function() {
          return {
            tokenize: null,
            context: new Context12(0, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace())
            return null;
          curPunc11 = null;
          var style2 = (state.tokenize || tokenBase41)(stream, state);
          if (style2 == "comment")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if ((curPunc11 == ";" || curPunc11 == ":" || curPunc11 == ",") && ctx.type == "statement") {
            popContext14(state);
          } else if (curPunc11 == "{")
            pushContext14(state, stream.column(), "}");
          else if (curPunc11 == "[")
            pushContext14(state, stream.column(), "]");
          else if (curPunc11 == "(")
            pushContext14(state, stream.column(), ")");
          else if (curPunc11 == "}") {
            while (ctx.type == "statement")
              ctx = popContext14(state);
            if (ctx.type == "}")
              ctx = popContext14(state);
            while (ctx.type == "statement")
              ctx = popContext14(state);
          } else if (curPunc11 == ctx.type)
            popContext14(state);
          else if (indentStatements2 && ((ctx.type == "}" || ctx.type == "top") && curPunc11 != ";" || ctx.type == "statement" && curPunc11 == "newstatement"))
            pushContext14(state, stream.column(), "statement");
          state.startOfLine = false;
          return style2;
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/turtle.js
  var turtle_exports = {};
  __export(turtle_exports, {
    turtle: () => turtle
  });
  function wordRegexp12(words22) {
    return new RegExp("^(?:" + words22.join("|") + ")$", "i");
  }
  function tokenBase42(stream, state) {
    var ch2 = stream.next();
    curPunc12 = null;
    if (ch2 == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
      stream.match(/^[^\s\u00a0>]*>?/);
      return "atom";
    } else if (ch2 == '"' || ch2 == "'") {
      state.tokenize = tokenLiteral2(ch2);
      return state.tokenize(stream, state);
    } else if (/[{}\(\),\.;\[\]]/.test(ch2)) {
      curPunc12 = ch2;
      return null;
    } else if (ch2 == "#") {
      stream.skipToEnd();
      return "comment";
    } else if (operatorChars3.test(ch2)) {
      stream.eatWhile(operatorChars3);
      return null;
    } else if (ch2 == ":") {
      return "operator";
    } else {
      stream.eatWhile(/[_\w\d]/);
      if (stream.peek() == ":") {
        return "variableName.special";
      } else {
        var word2 = stream.current();
        if (keywords41.test(word2)) {
          return "meta";
        }
        if (ch2 >= "A" && ch2 <= "Z") {
          return "comment";
        } else {
          return "keyword";
        }
      }
      var word2 = stream.current();
      if (ops2.test(word2))
        return null;
      else if (keywords41.test(word2))
        return "meta";
      else
        return "variable";
    }
  }
  function tokenLiteral2(quote2) {
    return function(stream, state) {
      var escaped = false, ch2;
      while ((ch2 = stream.next()) != null) {
        if (ch2 == quote2 && !escaped) {
          state.tokenize = tokenBase42;
          break;
        }
        escaped = !escaped && ch2 == "\\";
      }
      return "string";
    };
  }
  function pushContext15(state, type7, col) {
    state.context = { prev: state.context, indent: state.indent, col, type: type7 };
  }
  function popContext15(state) {
    state.indent = state.context.indent;
    state.context = state.context.prev;
  }
  var curPunc12, ops2, keywords41, operatorChars3, turtle;
  var init_turtle = __esm({
    "node_modules/@codemirror/legacy-modes/mode/turtle.js"() {
      ops2 = wordRegexp12([]);
      keywords41 = wordRegexp12(["@prefix", "@base", "a"]);
      operatorChars3 = /[*+\-<>=&|]/;
      turtle = {
        name: "turtle",
        startState: function() {
          return {
            tokenize: tokenBase42,
            context: null,
            indent: 0,
            col: 0
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            if (state.context && state.context.align == null)
              state.context.align = false;
            state.indent = stream.indentation();
          }
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          if (style2 != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
            state.context.align = true;
          }
          if (curPunc12 == "(")
            pushContext15(state, ")", stream.column());
          else if (curPunc12 == "[")
            pushContext15(state, "]", stream.column());
          else if (curPunc12 == "{")
            pushContext15(state, "}", stream.column());
          else if (/[\]\}\)]/.test(curPunc12)) {
            while (state.context && state.context.type == "pattern")
              popContext15(state);
            if (state.context && curPunc12 == state.context.type)
              popContext15(state);
          } else if (curPunc12 == "." && state.context && state.context.type == "pattern")
            popContext15(state);
          else if (/atom|string|variable/.test(style2) && state.context) {
            if (/[\}\]]/.test(state.context.type))
              pushContext15(state, "pattern", stream.column());
            else if (state.context.type == "pattern" && !state.context.align) {
              state.context.align = true;
              state.context.col = stream.column();
            }
          }
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var firstChar = textAfter && textAfter.charAt(0);
          var context = state.context;
          if (/[\]\}]/.test(firstChar))
            while (context && context.type == "pattern")
              context = context.prev;
          var closing3 = context && firstChar == context.type;
          if (!context)
            return 0;
          else if (context.type == "pattern")
            return context.col;
          else if (context.align)
            return context.col + (closing3 ? 0 : 1);
          else
            return context.indent + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/webidl.js
  var webidl_exports = {};
  __export(webidl_exports, {
    webIDL: () => webIDL
  });
  function wordRegexp13(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b");
  }
  function readToken4(stream, state) {
    if (stream.eatSpace())
      return null;
    if (state.inComment) {
      if (stream.match(multilineCommentsEnd)) {
        state.inComment = false;
        return "comment";
      }
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match("//")) {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(multilineComments))
      return "comment";
    if (stream.match(multilineCommentsStart)) {
      state.inComment = true;
      return "comment";
    }
    if (stream.match(/^-?[0-9\.]/, false)) {
      if (stream.match(integers) || stream.match(floats))
        return "number";
    }
    if (stream.match(strings))
      return "string";
    if (state.startDef && stream.match(identifiers9))
      return "def";
    if (state.endDef && stream.match(identifiersEnd)) {
      state.endDef = false;
      return "def";
    }
    if (stream.match(keywords42))
      return "keyword";
    if (stream.match(types6)) {
      var lastToken = state.lastToken;
      var nextToken = (stream.match(/^\s*(.+?)\b/, false) || [])[1];
      if (lastToken === ":" || lastToken === "implements" || nextToken === "implements" || nextToken === "=") {
        return "builtin";
      } else {
        return "type";
      }
    }
    if (stream.match(builtins10))
      return "builtin";
    if (stream.match(atoms15))
      return "atom";
    if (stream.match(identifiers9))
      return "variable";
    if (stream.match(singleOperators5))
      return "operator";
    stream.next();
    return null;
  }
  var builtinArray2, builtins10, typeArray2, types6, keywordArray3, keywords42, atomArray, atoms15, startDefArray, startDefs, endDefArray, endDefs, singleOperators5, integers, floats, identifiers9, identifiersEnd, strings, multilineComments, multilineCommentsStart, multilineCommentsEnd, webIDL;
  var init_webidl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/webidl.js"() {
      builtinArray2 = [
        "Clamp",
        "Constructor",
        "EnforceRange",
        "Exposed",
        "ImplicitThis",
        "Global",
        "PrimaryGlobal",
        "LegacyArrayClass",
        "LegacyUnenumerableNamedProperties",
        "LenientThis",
        "NamedConstructor",
        "NewObject",
        "NoInterfaceObject",
        "OverrideBuiltins",
        "PutForwards",
        "Replaceable",
        "SameObject",
        "TreatNonObjectAsNull",
        "TreatNullAs",
        "EmptyString",
        "Unforgeable",
        "Unscopeable"
      ];
      builtins10 = wordRegexp13(builtinArray2);
      typeArray2 = [
        "unsigned",
        "short",
        "long",
        // UnsignedIntegerType
        "unrestricted",
        "float",
        "double",
        // UnrestrictedFloatType
        "boolean",
        "byte",
        "octet",
        // Rest of PrimitiveType
        "Promise",
        // PromiseType
        "ArrayBuffer",
        "DataView",
        "Int8Array",
        "Int16Array",
        "Int32Array",
        "Uint8Array",
        "Uint16Array",
        "Uint32Array",
        "Uint8ClampedArray",
        "Float32Array",
        "Float64Array",
        // BufferRelatedType
        "ByteString",
        "DOMString",
        "USVString",
        "sequence",
        "object",
        "RegExp",
        "Error",
        "DOMException",
        "FrozenArray",
        // Rest of NonAnyType
        "any",
        // Rest of SingleType
        "void"
        // Rest of ReturnType
      ];
      types6 = wordRegexp13(typeArray2);
      keywordArray3 = [
        "attribute",
        "callback",
        "const",
        "deleter",
        "dictionary",
        "enum",
        "getter",
        "implements",
        "inherit",
        "interface",
        "iterable",
        "legacycaller",
        "maplike",
        "partial",
        "required",
        "serializer",
        "setlike",
        "setter",
        "static",
        "stringifier",
        "typedef",
        // ArgumentNameKeyword except
        // "unrestricted"
        "optional",
        "readonly",
        "or"
      ];
      keywords42 = wordRegexp13(keywordArray3);
      atomArray = [
        "true",
        "false",
        // BooleanLiteral
        "Infinity",
        "NaN",
        // FloatLiteral
        "null"
        // Rest of ConstValue
      ];
      atoms15 = wordRegexp13(atomArray);
      startDefArray = ["callback", "dictionary", "enum", "interface"];
      startDefs = wordRegexp13(startDefArray);
      endDefArray = ["typedef"];
      endDefs = wordRegexp13(endDefArray);
      singleOperators5 = /^[:<=>?]/;
      integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
      floats = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
      identifiers9 = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
      identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
      strings = /^"[^"]*"/;
      multilineComments = /^\/\*.*?\*\//;
      multilineCommentsStart = /^\/\*.*/;
      multilineCommentsEnd = /^.*?\*\//;
      webIDL = {
        name: "webidl",
        startState: function() {
          return {
            // Is in multiline comment
            inComment: false,
            // Last non-whitespace, matched token
            lastToken: "",
            // Next token is a definition
            startDef: false,
            // Last token of the statement is a definition
            endDef: false
          };
        },
        token: function(stream, state) {
          var style2 = readToken4(stream, state);
          if (style2) {
            var cur = stream.current();
            state.lastToken = cur;
            if (style2 === "keyword") {
              state.startDef = startDefs.test(cur);
              state.endDef = state.endDef || endDefs.test(cur);
            } else {
              state.startDef = false;
            }
          }
          return style2;
        },
        languageData: {
          autocomplete: builtinArray2.concat(typeArray2).concat(keywordArray3).concat(atomArray)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/vb.js
  var vb_exports = {};
  __export(vb_exports, {
    vb: () => vb
  });
  function wordRegexp14(words22) {
    return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
  }
  function indent4(_stream, state) {
    state.currentIndent++;
  }
  function dedent4(_stream, state) {
    state.currentIndent--;
  }
  function tokenBase43(stream, state) {
    if (stream.eatSpace()) {
      return null;
    }
    var ch2 = stream.peek();
    if (ch2 === "'") {
      stream.skipToEnd();
      return "comment";
    }
    if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
      var floatLiteral = false;
      if (stream.match(/^\d*\.\d+F?/i)) {
        floatLiteral = true;
      } else if (stream.match(/^\d+\.\d*F?/)) {
        floatLiteral = true;
      } else if (stream.match(/^\.\d+F?/)) {
        floatLiteral = true;
      }
      if (floatLiteral) {
        stream.eat(/J/i);
        return "number";
      }
      var intLiteral = false;
      if (stream.match(/^&H[0-9a-f]+/i)) {
        intLiteral = true;
      } else if (stream.match(/^&O[0-7]+/i)) {
        intLiteral = true;
      } else if (stream.match(/^[1-9]\d*F?/)) {
        stream.eat(/J/i);
        intLiteral = true;
      } else if (stream.match(/^0(?![\dx])/i)) {
        intLiteral = true;
      }
      if (intLiteral) {
        stream.eat(/L/i);
        return "number";
      }
    }
    if (stream.match(stringPrefixes3)) {
      state.tokenize = tokenStringFactory2(stream.current());
      return state.tokenize(stream, state);
    }
    if (stream.match(tripleDelimiters2) || stream.match(doubleDelimiters2)) {
      return null;
    }
    if (stream.match(doubleOperators4) || stream.match(singleOperators6) || stream.match(wordOperators4)) {
      return "operator";
    }
    if (stream.match(singleDelimiters3)) {
      return null;
    }
    if (stream.match(doOpening)) {
      indent4(stream, state);
      state.doInCurrentLine = true;
      return "keyword";
    }
    if (stream.match(opening2)) {
      if (!state.doInCurrentLine)
        indent4(stream, state);
      else
        state.doInCurrentLine = false;
      return "keyword";
    }
    if (stream.match(middle2)) {
      return "keyword";
    }
    if (stream.match(doubleClosing)) {
      dedent4(stream, state);
      dedent4(stream, state);
      return "keyword";
    }
    if (stream.match(closing2)) {
      dedent4(stream, state);
      return "keyword";
    }
    if (stream.match(types7)) {
      return "keyword";
    }
    if (stream.match(keywords43)) {
      return "keyword";
    }
    if (stream.match(identifiers10)) {
      return "variable";
    }
    stream.next();
    return ERRORCLASS2;
  }
  function tokenStringFactory2(delimiter2) {
    var singleline = delimiter2.length == 1;
    var OUTCLASS = "string";
    return function(stream, state) {
      while (!stream.eol()) {
        stream.eatWhile(/[^'"]/);
        if (stream.match(delimiter2)) {
          state.tokenize = tokenBase43;
          return OUTCLASS;
        } else {
          stream.eat(/['"]/);
        }
      }
      if (singleline) {
        state.tokenize = tokenBase43;
      }
      return OUTCLASS;
    };
  }
  function tokenLexer3(stream, state) {
    var style2 = state.tokenize(stream, state);
    var current = stream.current();
    if (current === ".") {
      style2 = state.tokenize(stream, state);
      if (style2 === "variable") {
        return "variable";
      } else {
        return ERRORCLASS2;
      }
    }
    var delimiter_index = "[({".indexOf(current);
    if (delimiter_index !== -1) {
      indent4(stream, state);
    }
    if (indentInfo === "dedent") {
      if (dedent4(stream, state)) {
        return ERRORCLASS2;
      }
    }
    delimiter_index = "])}".indexOf(current);
    if (delimiter_index !== -1) {
      if (dedent4(stream, state)) {
        return ERRORCLASS2;
      }
    }
    return style2;
  }
  var ERRORCLASS2, singleOperators6, singleDelimiters3, doubleOperators4, doubleDelimiters2, tripleDelimiters2, identifiers10, openingKeywords2, middleKeywords2, endKeywords2, operatorKeywords, wordOperators4, commonKeywords6, commontypes, keywords43, types7, stringPrefixes3, opening2, middle2, closing2, doubleClosing, doOpening, indentInfo, vb;
  var init_vb = __esm({
    "node_modules/@codemirror/legacy-modes/mode/vb.js"() {
      ERRORCLASS2 = "error";
      singleOperators6 = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
      singleDelimiters3 = new RegExp("^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]");
      doubleOperators4 = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
      doubleDelimiters2 = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
      tripleDelimiters2 = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
      identifiers10 = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");
      openingKeywords2 = ["class", "module", "sub", "enum", "select", "while", "if", "function", "get", "set", "property", "try", "structure", "synclock", "using", "with"];
      middleKeywords2 = ["else", "elseif", "case", "catch", "finally"];
      endKeywords2 = ["next", "loop"];
      operatorKeywords = ["and", "andalso", "or", "orelse", "xor", "in", "not", "is", "isnot", "like"];
      wordOperators4 = wordRegexp14(operatorKeywords);
      commonKeywords6 = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];
      commontypes = ["object", "boolean", "char", "string", "byte", "sbyte", "short", "ushort", "int16", "uint16", "integer", "uinteger", "int32", "uint32", "long", "ulong", "int64", "uint64", "decimal", "single", "double", "float", "date", "datetime", "intptr", "uintptr"];
      keywords43 = wordRegexp14(commonKeywords6);
      types7 = wordRegexp14(commontypes);
      stringPrefixes3 = '"';
      opening2 = wordRegexp14(openingKeywords2);
      middle2 = wordRegexp14(middleKeywords2);
      closing2 = wordRegexp14(endKeywords2);
      doubleClosing = wordRegexp14(["end"]);
      doOpening = wordRegexp14(["do"]);
      indentInfo = null;
      vb = {
        name: "vb",
        startState: function() {
          return {
            tokenize: tokenBase43,
            lastToken: null,
            currentIndent: 0,
            nextLineIndent: 0,
            doInCurrentLine: false
          };
        },
        token: function(stream, state) {
          if (stream.sol()) {
            state.currentIndent += state.nextLineIndent;
            state.nextLineIndent = 0;
            state.doInCurrentLine = 0;
          }
          var style2 = tokenLexer3(stream, state);
          state.lastToken = { style: style2, content: stream.current() };
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          var trueText = textAfter.replace(/^\s+|\s+$/g, "");
          if (trueText.match(closing2) || trueText.match(doubleClosing) || trueText.match(middle2))
            return cx2.unit * (state.currentIndent - 1);
          if (state.currentIndent < 0)
            return 0;
          return state.currentIndent * cx2.unit;
        },
        languageData: {
          closeBrackets: { brackets: ["(", "[", "{", '"'] },
          commentTokens: { line: "'" },
          autocomplete: openingKeywords2.concat(middleKeywords2).concat(endKeywords2).concat(operatorKeywords).concat(commonKeywords6).concat(commontypes)
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/vbscript.js
  var vbscript_exports = {};
  __export(vbscript_exports, {
    vbScript: () => vbScript,
    vbScriptASP: () => vbScriptASP
  });
  function mkVBScript(parserConf) {
    var ERRORCLASS3 = "error";
    function wordRegexp16(words22) {
      return new RegExp("^((" + words22.join(")|(") + "))\\b", "i");
    }
    var singleOperators7 = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
    var doubleOperators5 = new RegExp("^((<>)|(<=)|(>=))");
    var singleDelimiters4 = new RegExp("^[\\.,]");
    var brackets2 = new RegExp("^[\\(\\)]");
    var identifiers11 = new RegExp("^[A-Za-z][_A-Za-z0-9]*");
    var openingKeywords3 = ["class", "sub", "select", "while", "if", "function", "property", "with", "for"];
    var middleKeywords3 = ["else", "elseif", "case"];
    var endKeywords3 = ["next", "loop", "wend"];
    var wordOperators5 = wordRegexp16(["and", "or", "not", "xor", "is", "mod", "eqv", "imp"]);
    var commonkeywords = [
      "dim",
      "redim",
      "then",
      "until",
      "randomize",
      "byval",
      "byref",
      "new",
      "property",
      "exit",
      "in",
      "const",
      "private",
      "public",
      "get",
      "set",
      "let",
      "stop",
      "on error resume next",
      "on error goto 0",
      "option explicit",
      "call",
      "me"
    ];
    var atomWords2 = ["true", "false", "nothing", "empty", "null"];
    var builtinFuncsWords = [
      "abs",
      "array",
      "asc",
      "atn",
      "cbool",
      "cbyte",
      "ccur",
      "cdate",
      "cdbl",
      "chr",
      "cint",
      "clng",
      "cos",
      "csng",
      "cstr",
      "date",
      "dateadd",
      "datediff",
      "datepart",
      "dateserial",
      "datevalue",
      "day",
      "escape",
      "eval",
      "execute",
      "exp",
      "filter",
      "formatcurrency",
      "formatdatetime",
      "formatnumber",
      "formatpercent",
      "getlocale",
      "getobject",
      "getref",
      "hex",
      "hour",
      "inputbox",
      "instr",
      "instrrev",
      "int",
      "fix",
      "isarray",
      "isdate",
      "isempty",
      "isnull",
      "isnumeric",
      "isobject",
      "join",
      "lbound",
      "lcase",
      "left",
      "len",
      "loadpicture",
      "log",
      "ltrim",
      "rtrim",
      "trim",
      "maths",
      "mid",
      "minute",
      "month",
      "monthname",
      "msgbox",
      "now",
      "oct",
      "replace",
      "rgb",
      "right",
      "rnd",
      "round",
      "scriptengine",
      "scriptenginebuildversion",
      "scriptenginemajorversion",
      "scriptengineminorversion",
      "second",
      "setlocale",
      "sgn",
      "sin",
      "space",
      "split",
      "sqr",
      "strcomp",
      "string",
      "strreverse",
      "tan",
      "time",
      "timer",
      "timeserial",
      "timevalue",
      "typename",
      "ubound",
      "ucase",
      "unescape",
      "vartype",
      "weekday",
      "weekdayname",
      "year"
    ];
    var builtinConsts = [
      "vbBlack",
      "vbRed",
      "vbGreen",
      "vbYellow",
      "vbBlue",
      "vbMagenta",
      "vbCyan",
      "vbWhite",
      "vbBinaryCompare",
      "vbTextCompare",
      "vbSunday",
      "vbMonday",
      "vbTuesday",
      "vbWednesday",
      "vbThursday",
      "vbFriday",
      "vbSaturday",
      "vbUseSystemDayOfWeek",
      "vbFirstJan1",
      "vbFirstFourDays",
      "vbFirstFullWeek",
      "vbGeneralDate",
      "vbLongDate",
      "vbShortDate",
      "vbLongTime",
      "vbShortTime",
      "vbObjectError",
      "vbOKOnly",
      "vbOKCancel",
      "vbAbortRetryIgnore",
      "vbYesNoCancel",
      "vbYesNo",
      "vbRetryCancel",
      "vbCritical",
      "vbQuestion",
      "vbExclamation",
      "vbInformation",
      "vbDefaultButton1",
      "vbDefaultButton2",
      "vbDefaultButton3",
      "vbDefaultButton4",
      "vbApplicationModal",
      "vbSystemModal",
      "vbOK",
      "vbCancel",
      "vbAbort",
      "vbRetry",
      "vbIgnore",
      "vbYes",
      "vbNo",
      "vbCr",
      "VbCrLf",
      "vbFormFeed",
      "vbLf",
      "vbNewLine",
      "vbNullChar",
      "vbNullString",
      "vbTab",
      "vbVerticalTab",
      "vbUseDefault",
      "vbTrue",
      "vbFalse",
      "vbEmpty",
      "vbNull",
      "vbInteger",
      "vbLong",
      "vbSingle",
      "vbDouble",
      "vbCurrency",
      "vbDate",
      "vbString",
      "vbObject",
      "vbError",
      "vbBoolean",
      "vbVariant",
      "vbDataObject",
      "vbDecimal",
      "vbByte",
      "vbArray"
    ];
    var builtinObjsWords = ["WScript", "err", "debug", "RegExp"];
    var knownProperties = ["description", "firstindex", "global", "helpcontext", "helpfile", "ignorecase", "length", "number", "pattern", "source", "value", "count"];
    var knownMethods = ["clear", "execute", "raise", "replace", "test", "write", "writeline", "close", "open", "state", "eof", "update", "addnew", "end", "createobject", "quit"];
    var aspBuiltinObjsWords = ["server", "response", "request", "session", "application"];
    var aspKnownProperties = [
      "buffer",
      "cachecontrol",
      "charset",
      "contenttype",
      "expires",
      "expiresabsolute",
      "isclientconnected",
      "pics",
      "status",
      //response
      "clientcertificate",
      "cookies",
      "form",
      "querystring",
      "servervariables",
      "totalbytes",
      //request
      "contents",
      "staticobjects",
      //application
      "codepage",
      "lcid",
      "sessionid",
      "timeout",
      //session
      "scripttimeout"
    ];
    var aspKnownMethods = [
      "addheader",
      "appendtolog",
      "binarywrite",
      "end",
      "flush",
      "redirect",
      //response
      "binaryread",
      //request
      "remove",
      "removeall",
      "lock",
      "unlock",
      //application
      "abandon",
      //session
      "getlasterror",
      "htmlencode",
      "mappath",
      "transfer",
      "urlencode"
    ];
    var knownWords = knownMethods.concat(knownProperties);
    builtinObjsWords = builtinObjsWords.concat(builtinConsts);
    if (parserConf.isASP) {
      builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
      knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);
    }
    ;
    var keywords47 = wordRegexp16(commonkeywords);
    var atoms17 = wordRegexp16(atomWords2);
    var builtinFuncs = wordRegexp16(builtinFuncsWords);
    var builtinObjs = wordRegexp16(builtinObjsWords);
    var known = wordRegexp16(knownWords);
    var stringPrefixes4 = '"';
    var opening3 = wordRegexp16(openingKeywords3);
    var middle3 = wordRegexp16(middleKeywords3);
    var closing3 = wordRegexp16(endKeywords3);
    var doubleClosing2 = wordRegexp16(["end"]);
    var doOpening2 = wordRegexp16(["do"]);
    var noIndentWords = wordRegexp16(["on error resume next", "exit"]);
    var comment3 = wordRegexp16(["rem"]);
    function indent5(_stream, state) {
      state.currentIndent++;
    }
    function dedent5(_stream, state) {
      state.currentIndent--;
    }
    function tokenBase48(stream, state) {
      if (stream.eatSpace()) {
        return null;
      }
      var ch2 = stream.peek();
      if (ch2 === "'") {
        stream.skipToEnd();
        return "comment";
      }
      if (stream.match(comment3)) {
        stream.skipToEnd();
        return "comment";
      }
      if (stream.match(/^((&H)|(&O))?[0-9\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)) {
        var floatLiteral = false;
        if (stream.match(/^\d*\.\d+/i)) {
          floatLiteral = true;
        } else if (stream.match(/^\d+\.\d*/)) {
          floatLiteral = true;
        } else if (stream.match(/^\.\d+/)) {
          floatLiteral = true;
        }
        if (floatLiteral) {
          stream.eat(/J/i);
          return "number";
        }
        var intLiteral = false;
        if (stream.match(/^&H[0-9a-f]+/i)) {
          intLiteral = true;
        } else if (stream.match(/^&O[0-7]+/i)) {
          intLiteral = true;
        } else if (stream.match(/^[1-9]\d*F?/)) {
          stream.eat(/J/i);
          intLiteral = true;
        } else if (stream.match(/^0(?![\dx])/i)) {
          intLiteral = true;
        }
        if (intLiteral) {
          stream.eat(/L/i);
          return "number";
        }
      }
      if (stream.match(stringPrefixes4)) {
        state.tokenize = tokenStringFactory3(stream.current());
        return state.tokenize(stream, state);
      }
      if (stream.match(doubleOperators5) || stream.match(singleOperators7) || stream.match(wordOperators5)) {
        return "operator";
      }
      if (stream.match(singleDelimiters4)) {
        return null;
      }
      if (stream.match(brackets2)) {
        return "bracket";
      }
      if (stream.match(noIndentWords)) {
        state.doInCurrentLine = true;
        return "keyword";
      }
      if (stream.match(doOpening2)) {
        indent5(stream, state);
        state.doInCurrentLine = true;
        return "keyword";
      }
      if (stream.match(opening3)) {
        if (!state.doInCurrentLine)
          indent5(stream, state);
        else
          state.doInCurrentLine = false;
        return "keyword";
      }
      if (stream.match(middle3)) {
        return "keyword";
      }
      if (stream.match(doubleClosing2)) {
        dedent5(stream, state);
        dedent5(stream, state);
        return "keyword";
      }
      if (stream.match(closing3)) {
        if (!state.doInCurrentLine)
          dedent5(stream, state);
        else
          state.doInCurrentLine = false;
        return "keyword";
      }
      if (stream.match(keywords47)) {
        return "keyword";
      }
      if (stream.match(atoms17)) {
        return "atom";
      }
      if (stream.match(known)) {
        return "variableName.special";
      }
      if (stream.match(builtinFuncs)) {
        return "builtin";
      }
      if (stream.match(builtinObjs)) {
        return "builtin";
      }
      if (stream.match(identifiers11)) {
        return "variable";
      }
      stream.next();
      return ERRORCLASS3;
    }
    function tokenStringFactory3(delimiter2) {
      var singleline = delimiter2.length == 1;
      var OUTCLASS = "string";
      return function(stream, state) {
        while (!stream.eol()) {
          stream.eatWhile(/[^'"]/);
          if (stream.match(delimiter2)) {
            state.tokenize = tokenBase48;
            return OUTCLASS;
          } else {
            stream.eat(/['"]/);
          }
        }
        if (singleline) {
          state.tokenize = tokenBase48;
        }
        return OUTCLASS;
      };
    }
    function tokenLexer4(stream, state) {
      var style2 = state.tokenize(stream, state);
      var current = stream.current();
      if (current === ".") {
        style2 = state.tokenize(stream, state);
        current = stream.current();
        if (style2 && (style2.substr(0, 8) === "variable" || style2 === "builtin" || style2 === "keyword")) {
          if (style2 === "builtin" || style2 === "keyword")
            style2 = "variable";
          if (knownWords.indexOf(current.substr(1)) > -1)
            style2 = "keyword";
          return style2;
        } else {
          return ERRORCLASS3;
        }
      }
      return style2;
    }
    return {
      name: "vbscript",
      startState: function() {
        return {
          tokenize: tokenBase48,
          lastToken: null,
          currentIndent: 0,
          nextLineIndent: 0,
          doInCurrentLine: false,
          ignoreKeyword: false
        };
      },
      token: function(stream, state) {
        if (stream.sol()) {
          state.currentIndent += state.nextLineIndent;
          state.nextLineIndent = 0;
          state.doInCurrentLine = 0;
        }
        var style2 = tokenLexer4(stream, state);
        state.lastToken = { style: style2, content: stream.current() };
        if (style2 === null)
          style2 = null;
        return style2;
      },
      indent: function(state, textAfter, cx2) {
        var trueText = textAfter.replace(/^\s+|\s+$/g, "");
        if (trueText.match(closing3) || trueText.match(doubleClosing2) || trueText.match(middle3))
          return cx2.unit * (state.currentIndent - 1);
        if (state.currentIndent < 0)
          return 0;
        return state.currentIndent * cx2.unit;
      }
    };
  }
  var vbScript, vbScriptASP;
  var init_vbscript = __esm({
    "node_modules/@codemirror/legacy-modes/mode/vbscript.js"() {
      vbScript = mkVBScript({});
      vbScriptASP = mkVBScript({ isASP: true });
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/velocity.js
  var velocity_exports = {};
  __export(velocity_exports, {
    velocity: () => velocity
  });
  function parseWords3(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function chain10(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenBase44(stream, state) {
    var beforeParams = state.beforeParams;
    state.beforeParams = false;
    var ch2 = stream.next();
    if (ch2 == "'" && !state.inString && state.inParams) {
      state.lastTokenWasBuiltin = false;
      return chain10(stream, state, tokenString25(ch2));
    } else if (ch2 == '"') {
      state.lastTokenWasBuiltin = false;
      if (state.inString) {
        state.inString = false;
        return "string";
      } else if (state.inParams)
        return chain10(stream, state, tokenString25(ch2));
    } else if (/[\[\]{}\(\),;\.]/.test(ch2)) {
      if (ch2 == "(" && beforeParams)
        state.inParams = true;
      else if (ch2 == ")") {
        state.inParams = false;
        state.lastTokenWasBuiltin = true;
      }
      return null;
    } else if (/\d/.test(ch2)) {
      state.lastTokenWasBuiltin = false;
      stream.eatWhile(/[\w\.]/);
      return "number";
    } else if (ch2 == "#" && stream.eat("*")) {
      state.lastTokenWasBuiltin = false;
      return chain10(stream, state, tokenComment18);
    } else if (ch2 == "#" && stream.match(/ *\[ *\[/)) {
      state.lastTokenWasBuiltin = false;
      return chain10(stream, state, tokenUnparsed3);
    } else if (ch2 == "#" && stream.eat("#")) {
      state.lastTokenWasBuiltin = false;
      stream.skipToEnd();
      return "comment";
    } else if (ch2 == "$") {
      stream.eat("!");
      stream.eatWhile(/[\w\d\$_\.{}-]/);
      if (specials2 && specials2.propertyIsEnumerable(stream.current())) {
        return "keyword";
      } else {
        state.lastTokenWasBuiltin = true;
        state.beforeParams = true;
        return "builtin";
      }
    } else if (isOperatorChar14.test(ch2)) {
      state.lastTokenWasBuiltin = false;
      stream.eatWhile(isOperatorChar14);
      return "operator";
    } else {
      stream.eatWhile(/[\w\$_{}@]/);
      var word2 = stream.current();
      if (keywords44 && keywords44.propertyIsEnumerable(word2))
        return "keyword";
      if (functions3 && functions3.propertyIsEnumerable(word2) || stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek() == "(" && !(functions3 && functions3.propertyIsEnumerable(word2.toLowerCase()))) {
        state.beforeParams = true;
        state.lastTokenWasBuiltin = false;
        return "keyword";
      }
      if (state.inString) {
        state.lastTokenWasBuiltin = false;
        return "string";
      }
      if (stream.pos > word2.length && stream.string.charAt(stream.pos - word2.length - 1) == "." && state.lastTokenWasBuiltin)
        return "builtin";
      state.lastTokenWasBuiltin = false;
      return null;
    }
  }
  function tokenString25(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        if (quote2 == '"' && stream.peek() == "$" && !escaped) {
          state.inString = true;
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "\\";
      }
      if (end2)
        state.tokenize = tokenBase44;
      return "string";
    };
  }
  function tokenComment18(stream, state) {
    var maybeEnd = false, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "#" && maybeEnd) {
        state.tokenize = tokenBase44;
        break;
      }
      maybeEnd = ch2 == "*";
    }
    return "comment";
  }
  function tokenUnparsed3(stream, state) {
    var maybeEnd = 0, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "#" && maybeEnd == 2) {
        state.tokenize = tokenBase44;
        break;
      }
      if (ch2 == "]")
        maybeEnd++;
      else if (ch2 != " ")
        maybeEnd = 0;
    }
    return "meta";
  }
  var keywords44, functions3, specials2, isOperatorChar14, velocity;
  var init_velocity = __esm({
    "node_modules/@codemirror/legacy-modes/mode/velocity.js"() {
      keywords44 = parseWords3("#end #else #break #stop #[[ #]] #{end} #{else} #{break} #{stop}");
      functions3 = parseWords3("#if #elseif #foreach #set #include #parse #macro #define #evaluate #{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}");
      specials2 = parseWords3("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent");
      isOperatorChar14 = /[+\-*&%=<>!?:\/|]/;
      velocity = {
        name: "velocity",
        startState: function() {
          return {
            tokenize: tokenBase44,
            beforeParams: false,
            inParams: false,
            inString: false,
            lastTokenWasBuiltin: false
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return state.tokenize(stream, state);
        },
        languageData: {
          commentTokens: { line: "##", block: { open: "#*", close: "*#" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/vhdl.js
  var vhdl_exports = {};
  __export(vhdl_exports, {
    vhdl: () => vhdl
  });
  function words20(str) {
    var obj = {}, words22 = str.split(",");
    for (var i = 0; i < words22.length; ++i) {
      var allCaps = words22[i].toUpperCase();
      var firstCap = words22[i].charAt(0).toUpperCase() + words22[i].slice(1);
      obj[words22[i]] = true;
      obj[allCaps] = true;
      obj[firstCap] = true;
    }
    return obj;
  }
  function metaHook2(stream) {
    stream.eatWhile(/[\w\$_]/);
    return "meta";
  }
  function tokenBase45(stream, state) {
    var ch2 = stream.next();
    if (hooks3[ch2]) {
      var result = hooks3[ch2](stream, state);
      if (result !== false)
        return result;
    }
    if (ch2 == '"') {
      state.tokenize = tokenString27(ch2);
      return state.tokenize(stream, state);
    }
    if (ch2 == "'") {
      state.tokenize = tokenString26(ch2);
      return state.tokenize(stream, state);
    }
    if (/[\[\]{}\(\),;\:\.]/.test(ch2)) {
      curPunc13 = ch2;
      return null;
    }
    if (/[\d']/.test(ch2)) {
      stream.eatWhile(/[\w\.']/);
      return "number";
    }
    if (ch2 == "-") {
      if (stream.eat("-")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    if (isOperatorChar15.test(ch2)) {
      stream.eatWhile(isOperatorChar15);
      return "operator";
    }
    stream.eatWhile(/[\w\$_]/);
    var cur = stream.current();
    if (keywords45.propertyIsEnumerable(cur.toLowerCase())) {
      if (blockKeywords5.propertyIsEnumerable(cur))
        curPunc13 = "newstatement";
      return "keyword";
    }
    if (atoms16.propertyIsEnumerable(cur))
      return "atom";
    return "variable";
  }
  function tokenString26(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "--";
      }
      if (end2 || !(escaped || multiLineStrings4))
        state.tokenize = tokenBase45;
      return "string";
    };
  }
  function tokenString27(quote2) {
    return function(stream, state) {
      var escaped = false, next2, end2 = false;
      while ((next2 = stream.next()) != null) {
        if (next2 == quote2 && !escaped) {
          end2 = true;
          break;
        }
        escaped = !escaped && next2 == "--";
      }
      if (end2 || !(escaped || multiLineStrings4))
        state.tokenize = tokenBase45;
      return "string.special";
    };
  }
  function Context13(indented, column, type7, align, prev) {
    this.indented = indented;
    this.column = column;
    this.type = type7;
    this.align = align;
    this.prev = prev;
  }
  function pushContext16(state, col, type7) {
    return state.context = new Context13(state.indented, col, type7, null, state.context);
  }
  function popContext16(state) {
    var t2 = state.context.type;
    if (t2 == ")" || t2 == "]" || t2 == "}")
      state.indented = state.context.indented;
    return state.context = state.context.prev;
  }
  var atoms16, hooks3, multiLineStrings4, keywords45, blockKeywords5, isOperatorChar15, curPunc13, vhdl;
  var init_vhdl = __esm({
    "node_modules/@codemirror/legacy-modes/mode/vhdl.js"() {
      atoms16 = words20("null");
      hooks3 = { "`": metaHook2, "$": metaHook2 };
      multiLineStrings4 = false;
      keywords45 = words20("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");
      blockKeywords5 = words20("architecture,entity,begin,case,port,else,elsif,end,for,function,if");
      isOperatorChar15 = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
      vhdl = {
        name: "vhdl",
        startState: function(indentUnit2) {
          return {
            tokenize: null,
            context: new Context13(-indentUnit2, 0, "top", false),
            indented: 0,
            startOfLine: true
          };
        },
        token: function(stream, state) {
          var ctx = state.context;
          if (stream.sol()) {
            if (ctx.align == null)
              ctx.align = false;
            state.indented = stream.indentation();
            state.startOfLine = true;
          }
          if (stream.eatSpace())
            return null;
          curPunc13 = null;
          var style2 = (state.tokenize || tokenBase45)(stream, state);
          if (style2 == "comment" || style2 == "meta")
            return style2;
          if (ctx.align == null)
            ctx.align = true;
          if ((curPunc13 == ";" || curPunc13 == ":") && ctx.type == "statement")
            popContext16(state);
          else if (curPunc13 == "{")
            pushContext16(state, stream.column(), "}");
          else if (curPunc13 == "[")
            pushContext16(state, stream.column(), "]");
          else if (curPunc13 == "(")
            pushContext16(state, stream.column(), ")");
          else if (curPunc13 == "}") {
            while (ctx.type == "statement")
              ctx = popContext16(state);
            if (ctx.type == "}")
              ctx = popContext16(state);
            while (ctx.type == "statement")
              ctx = popContext16(state);
          } else if (curPunc13 == ctx.type)
            popContext16(state);
          else if (ctx.type == "}" || ctx.type == "top" || ctx.type == "statement" && curPunc13 == "newstatement")
            pushContext16(state, stream.column(), "statement");
          state.startOfLine = false;
          return style2;
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize != tokenBase45 && state.tokenize != null)
            return 0;
          var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing3 = firstChar == ctx.type;
          if (ctx.type == "statement")
            return ctx.indented + (firstChar == "{" ? 0 : cx2.unit);
          else if (ctx.align)
            return ctx.column + (closing3 ? 0 : 1);
          else
            return ctx.indented + (closing3 ? 0 : cx2.unit);
        },
        languageData: {
          indentOnInput: /^\s*[{}]$/,
          commentTokens: { line: "--" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/xquery.js
  var xquery_exports = {};
  __export(xquery_exports, {
    xQuery: () => xQuery
  });
  function chain11(stream, state, f) {
    state.tokenize = f;
    return f(stream, state);
  }
  function tokenBase46(stream, state) {
    var ch2 = stream.next(), mightBeFunction = false, isEQName = isEQNameAhead(stream);
    if (ch2 == "<") {
      if (stream.match("!--", true))
        return chain11(stream, state, tokenXMLComment);
      if (stream.match("![CDATA", false)) {
        state.tokenize = tokenCDATA;
        return "tag";
      }
      if (stream.match("?", false)) {
        return chain11(stream, state, tokenPreProcessing);
      }
      var isclose = stream.eat("/");
      stream.eatSpace();
      var tagName2 = "", c2;
      while (c2 = stream.eat(/[^\s\u00a0=<>\"\'\/?]/))
        tagName2 += c2;
      return chain11(stream, state, tokenTag(tagName2, isclose));
    } else if (ch2 == "{") {
      pushStateStack(state, { type: "codeblock" });
      return null;
    } else if (ch2 == "}") {
      popStateStack(state);
      return null;
    } else if (isInXmlBlock(state)) {
      if (ch2 == ">")
        return "tag";
      else if (ch2 == "/" && stream.eat(">")) {
        popStateStack(state);
        return "tag";
      } else
        return "variable";
    } else if (/\d/.test(ch2)) {
      stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
      return "atom";
    } else if (ch2 === "(" && stream.eat(":")) {
      pushStateStack(state, { type: "comment" });
      return chain11(stream, state, tokenComment19);
    } else if (!isEQName && (ch2 === '"' || ch2 === "'"))
      return chain11(stream, state, tokenString28(ch2));
    else if (ch2 === "$") {
      return chain11(stream, state, tokenVariable2);
    } else if (ch2 === ":" && stream.eat("=")) {
      return "keyword";
    } else if (ch2 === "(") {
      pushStateStack(state, { type: "paren" });
      return null;
    } else if (ch2 === ")") {
      popStateStack(state);
      return null;
    } else if (ch2 === "[") {
      pushStateStack(state, { type: "bracket" });
      return null;
    } else if (ch2 === "]") {
      popStateStack(state);
      return null;
    } else {
      var known = keywords46.propertyIsEnumerable(ch2) && keywords46[ch2];
      if (isEQName && ch2 === '"')
        while (stream.next() !== '"') {
        }
      if (isEQName && ch2 === "'")
        while (stream.next() !== "'") {
        }
      if (!known)
        stream.eatWhile(/[\w\$_-]/);
      var foundColon = stream.eat(":");
      if (!stream.eat(":") && foundColon) {
        stream.eatWhile(/[\w\$_-]/);
      }
      if (stream.match(/^[ \t]*\(/, false)) {
        mightBeFunction = true;
      }
      var word2 = stream.current();
      known = keywords46.propertyIsEnumerable(word2) && keywords46[word2];
      if (mightBeFunction && !known)
        known = { type: "function_call", style: "def" };
      if (isInXmlConstructor(state)) {
        popStateStack(state);
        return "variable";
      }
      if (word2 == "element" || word2 == "attribute" || known.type == "axis_specifier")
        pushStateStack(state, { type: "xmlconstructor" });
      return known ? known.style : "variable";
    }
  }
  function tokenComment19(stream, state) {
    var maybeEnd = false, maybeNested = false, nestedCount = 0, ch2;
    while (ch2 = stream.next()) {
      if (ch2 == ")" && maybeEnd) {
        if (nestedCount > 0)
          nestedCount--;
        else {
          popStateStack(state);
          break;
        }
      } else if (ch2 == ":" && maybeNested) {
        nestedCount++;
      }
      maybeEnd = ch2 == ":";
      maybeNested = ch2 == "(";
    }
    return "comment";
  }
  function tokenString28(quote2, f) {
    return function(stream, state) {
      var ch2;
      if (isInString(state) && stream.current() == quote2) {
        popStateStack(state);
        if (f)
          state.tokenize = f;
        return "string";
      }
      pushStateStack(state, { type: "string", name: quote2, tokenize: tokenString28(quote2, f) });
      if (stream.match("{", false) && isInXmlAttributeBlock(state)) {
        state.tokenize = tokenBase46;
        return "string";
      }
      while (ch2 = stream.next()) {
        if (ch2 == quote2) {
          popStateStack(state);
          if (f)
            state.tokenize = f;
          break;
        } else {
          if (stream.match("{", false) && isInXmlAttributeBlock(state)) {
            state.tokenize = tokenBase46;
            return "string";
          }
        }
      }
      return "string";
    };
  }
  function tokenVariable2(stream, state) {
    var isVariableChar = /[\w\$_-]/;
    if (stream.eat('"')) {
      while (stream.next() !== '"') {
      }
      ;
      stream.eat(":");
    } else {
      stream.eatWhile(isVariableChar);
      if (!stream.match(":=", false))
        stream.eat(":");
    }
    stream.eatWhile(isVariableChar);
    state.tokenize = tokenBase46;
    return "variable";
  }
  function tokenTag(name2, isclose) {
    return function(stream, state) {
      stream.eatSpace();
      if (isclose && stream.eat(">")) {
        popStateStack(state);
        state.tokenize = tokenBase46;
        return "tag";
      }
      if (!stream.eat("/"))
        pushStateStack(state, { type: "tag", name: name2, tokenize: tokenBase46 });
      if (!stream.eat(">")) {
        state.tokenize = tokenAttribute;
        return "tag";
      } else {
        state.tokenize = tokenBase46;
      }
      return "tag";
    };
  }
  function tokenAttribute(stream, state) {
    var ch2 = stream.next();
    if (ch2 == "/" && stream.eat(">")) {
      if (isInXmlAttributeBlock(state))
        popStateStack(state);
      if (isInXmlBlock(state))
        popStateStack(state);
      return "tag";
    }
    if (ch2 == ">") {
      if (isInXmlAttributeBlock(state))
        popStateStack(state);
      return "tag";
    }
    if (ch2 == "=")
      return null;
    if (ch2 == '"' || ch2 == "'")
      return chain11(stream, state, tokenString28(ch2, tokenAttribute));
    if (!isInXmlAttributeBlock(state))
      pushStateStack(state, { type: "attribute", tokenize: tokenAttribute });
    stream.eat(/[a-zA-Z_:]/);
    stream.eatWhile(/[-a-zA-Z0-9_:.]/);
    stream.eatSpace();
    if (stream.match(">", false) || stream.match("/", false)) {
      popStateStack(state);
      state.tokenize = tokenBase46;
    }
    return "attribute";
  }
  function tokenXMLComment(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "-" && stream.match("->", true)) {
        state.tokenize = tokenBase46;
        return "comment";
      }
    }
  }
  function tokenCDATA(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "]" && stream.match("]", true)) {
        state.tokenize = tokenBase46;
        return "comment";
      }
    }
  }
  function tokenPreProcessing(stream, state) {
    var ch2;
    while (ch2 = stream.next()) {
      if (ch2 == "?" && stream.match(">", true)) {
        state.tokenize = tokenBase46;
        return "processingInstruction";
      }
    }
  }
  function isInXmlBlock(state) {
    return isIn(state, "tag");
  }
  function isInXmlAttributeBlock(state) {
    return isIn(state, "attribute");
  }
  function isInXmlConstructor(state) {
    return isIn(state, "xmlconstructor");
  }
  function isInString(state) {
    return isIn(state, "string");
  }
  function isEQNameAhead(stream) {
    if (stream.current() === '"')
      return stream.match(/^[^\"]+\"\:/, false);
    else if (stream.current() === "'")
      return stream.match(/^[^\"]+\'\:/, false);
    else
      return false;
  }
  function isIn(state, type7) {
    return state.stack.length && state.stack[state.stack.length - 1].type == type7;
  }
  function pushStateStack(state, newState) {
    state.stack.push(newState);
  }
  function popStateStack(state) {
    state.stack.pop();
    var reinstateTokenize = state.stack.length && state.stack[state.stack.length - 1].tokenize;
    state.tokenize = reinstateTokenize || tokenBase46;
  }
  var keywords46, xQuery;
  var init_xquery = __esm({
    "node_modules/@codemirror/legacy-modes/mode/xquery.js"() {
      keywords46 = function() {
        function kw2(type7) {
          return { type: type7, style: "keyword" };
        }
        var operator4 = kw2("operator"), atom4 = { type: "atom", style: "atom" }, punctuation3 = { type: "punctuation", style: null }, qualifier = { type: "axis_specifier", style: "qualifier" };
        var kwObj = {
          ",": punctuation3
        };
        var basic = [
          "after",
          "all",
          "allowing",
          "ancestor",
          "ancestor-or-self",
          "any",
          "array",
          "as",
          "ascending",
          "at",
          "attribute",
          "base-uri",
          "before",
          "boundary-space",
          "by",
          "case",
          "cast",
          "castable",
          "catch",
          "child",
          "collation",
          "comment",
          "construction",
          "contains",
          "content",
          "context",
          "copy",
          "copy-namespaces",
          "count",
          "decimal-format",
          "declare",
          "default",
          "delete",
          "descendant",
          "descendant-or-self",
          "descending",
          "diacritics",
          "different",
          "distance",
          "document",
          "document-node",
          "element",
          "else",
          "empty",
          "empty-sequence",
          "encoding",
          "end",
          "entire",
          "every",
          "exactly",
          "except",
          "external",
          "first",
          "following",
          "following-sibling",
          "for",
          "from",
          "ftand",
          "ftnot",
          "ft-option",
          "ftor",
          "function",
          "fuzzy",
          "greatest",
          "group",
          "if",
          "import",
          "in",
          "inherit",
          "insensitive",
          "insert",
          "instance",
          "intersect",
          "into",
          "invoke",
          "is",
          "item",
          "language",
          "last",
          "lax",
          "least",
          "let",
          "levels",
          "lowercase",
          "map",
          "modify",
          "module",
          "most",
          "namespace",
          "next",
          "no",
          "node",
          "nodes",
          "no-inherit",
          "no-preserve",
          "not",
          "occurs",
          "of",
          "only",
          "option",
          "order",
          "ordered",
          "ordering",
          "paragraph",
          "paragraphs",
          "parent",
          "phrase",
          "preceding",
          "preceding-sibling",
          "preserve",
          "previous",
          "processing-instruction",
          "relationship",
          "rename",
          "replace",
          "return",
          "revalidation",
          "same",
          "satisfies",
          "schema",
          "schema-attribute",
          "schema-element",
          "score",
          "self",
          "sensitive",
          "sentence",
          "sentences",
          "sequence",
          "skip",
          "sliding",
          "some",
          "stable",
          "start",
          "stemming",
          "stop",
          "strict",
          "strip",
          "switch",
          "text",
          "then",
          "thesaurus",
          "times",
          "to",
          "transform",
          "treat",
          "try",
          "tumbling",
          "type",
          "typeswitch",
          "union",
          "unordered",
          "update",
          "updating",
          "uppercase",
          "using",
          "validate",
          "value",
          "variable",
          "version",
          "weight",
          "when",
          "where",
          "wildcards",
          "window",
          "with",
          "without",
          "word",
          "words",
          "xquery"
        ];
        for (var i = 0, l2 = basic.length; i < l2; i++) {
          kwObj[basic[i]] = kw2(basic[i]);
        }
        ;
        var types8 = [
          "xs:anyAtomicType",
          "xs:anySimpleType",
          "xs:anyType",
          "xs:anyURI",
          "xs:base64Binary",
          "xs:boolean",
          "xs:byte",
          "xs:date",
          "xs:dateTime",
          "xs:dateTimeStamp",
          "xs:dayTimeDuration",
          "xs:decimal",
          "xs:double",
          "xs:duration",
          "xs:ENTITIES",
          "xs:ENTITY",
          "xs:float",
          "xs:gDay",
          "xs:gMonth",
          "xs:gMonthDay",
          "xs:gYear",
          "xs:gYearMonth",
          "xs:hexBinary",
          "xs:ID",
          "xs:IDREF",
          "xs:IDREFS",
          "xs:int",
          "xs:integer",
          "xs:item",
          "xs:java",
          "xs:language",
          "xs:long",
          "xs:Name",
          "xs:NCName",
          "xs:negativeInteger",
          "xs:NMTOKEN",
          "xs:NMTOKENS",
          "xs:nonNegativeInteger",
          "xs:nonPositiveInteger",
          "xs:normalizedString",
          "xs:NOTATION",
          "xs:numeric",
          "xs:positiveInteger",
          "xs:precisionDecimal",
          "xs:QName",
          "xs:short",
          "xs:string",
          "xs:time",
          "xs:token",
          "xs:unsignedByte",
          "xs:unsignedInt",
          "xs:unsignedLong",
          "xs:unsignedShort",
          "xs:untyped",
          "xs:untypedAtomic",
          "xs:yearMonthDuration"
        ];
        for (var i = 0, l2 = types8.length; i < l2; i++) {
          kwObj[types8[i]] = atom4;
        }
        ;
        var operators9 = ["eq", "ne", "lt", "le", "gt", "ge", ":=", "=", ">", ">=", "<", "<=", ".", "|", "?", "and", "or", "div", "idiv", "mod", "*", "/", "+", "-"];
        for (var i = 0, l2 = operators9.length; i < l2; i++) {
          kwObj[operators9[i]] = operator4;
        }
        ;
        var axis_specifiers = [
          "self::",
          "attribute::",
          "child::",
          "descendant::",
          "descendant-or-self::",
          "parent::",
          "ancestor::",
          "ancestor-or-self::",
          "following::",
          "preceding::",
          "following-sibling::",
          "preceding-sibling::"
        ];
        for (var i = 0, l2 = axis_specifiers.length; i < l2; i++) {
          kwObj[axis_specifiers[i]] = qualifier;
        }
        ;
        return kwObj;
      }();
      xQuery = {
        name: "xquery",
        startState: function() {
          return {
            tokenize: tokenBase46,
            cc: [],
            stack: []
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          var style2 = state.tokenize(stream, state);
          return style2;
        },
        languageData: {
          commentTokens: { block: { open: "(:", close: ":)" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/yacas.js
  var yacas_exports = {};
  __export(yacas_exports, {
    yacas: () => yacas
  });
  function words21(str) {
    var obj = {}, words22 = str.split(" ");
    for (var i = 0; i < words22.length; ++i)
      obj[words22[i]] = true;
    return obj;
  }
  function tokenBase47(stream, state) {
    var ch2;
    ch2 = stream.next();
    if (ch2 === '"') {
      state.tokenize = tokenString29;
      return state.tokenize(stream, state);
    }
    if (ch2 === "/") {
      if (stream.eat("*")) {
        state.tokenize = tokenComment20;
        return state.tokenize(stream, state);
      }
      if (stream.eat("/")) {
        stream.skipToEnd();
        return "comment";
      }
    }
    stream.backUp(1);
    var m = stream.match(/^(\w+)\s*\(/, false);
    if (m !== null && bodiedOps.hasOwnProperty(m[1]))
      state.scopes.push("bodied");
    var scope = currentScope2(state);
    if (scope === "bodied" && ch2 === "[")
      state.scopes.pop();
    if (ch2 === "[" || ch2 === "{" || ch2 === "(")
      state.scopes.push(ch2);
    scope = currentScope2(state);
    if (scope === "[" && ch2 === "]" || scope === "{" && ch2 === "}" || scope === "(" && ch2 === ")")
      state.scopes.pop();
    if (ch2 === ";") {
      while (scope === "bodied") {
        state.scopes.pop();
        scope = currentScope2(state);
      }
    }
    if (stream.match(/\d+ *#/, true, false)) {
      return "qualifier";
    }
    if (stream.match(reFloatForm2, true, false)) {
      return "number";
    }
    if (stream.match(rePattern, true, false)) {
      return "variableName.special";
    }
    if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
      return "bracket";
    }
    if (stream.match(reFunctionLike, true, false)) {
      stream.backUp(1);
      return "variableName.function";
    }
    if (stream.match(reIdentifier, true, false)) {
      return "variable";
    }
    if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
      return "operator";
    }
    return "error";
  }
  function tokenString29(stream, state) {
    var next2, end2 = false, escaped = false;
    while ((next2 = stream.next()) != null) {
      if (next2 === '"' && !escaped) {
        end2 = true;
        break;
      }
      escaped = !escaped && next2 === "\\";
    }
    if (end2 && !escaped) {
      state.tokenize = tokenBase47;
    }
    return "string";
  }
  function tokenComment20(stream, state) {
    var prev, next2;
    while ((next2 = stream.next()) != null) {
      if (prev === "*" && next2 === "/") {
        state.tokenize = tokenBase47;
        break;
      }
      prev = next2;
    }
    return "comment";
  }
  function currentScope2(state) {
    var scope = null;
    if (state.scopes.length > 0)
      scope = state.scopes[state.scopes.length - 1];
    return scope;
  }
  var bodiedOps, pFloatForm, pIdentifier, reFloatForm2, reIdentifier, rePattern, reFunctionLike, yacas;
  var init_yacas = __esm({
    "node_modules/@codemirror/legacy-modes/mode/yacas.js"() {
      bodiedOps = words21("Assert BackQuote D Defun Deriv For ForEach FromFile FromString Function Integrate InverseTaylor Limit LocalSymbols Macro MacroRule MacroRulePattern NIntegrate Rule RulePattern Subst TD TExplicitSum TSum Taylor Taylor1 Taylor2 Taylor3 ToFile ToStdout ToString TraceRule Until While");
      pFloatForm = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
      pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";
      reFloatForm2 = new RegExp(pFloatForm);
      reIdentifier = new RegExp(pIdentifier);
      rePattern = new RegExp(pIdentifier + "?_" + pIdentifier);
      reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");
      yacas = {
        name: "yacas",
        startState: function() {
          return {
            tokenize: tokenBase47,
            scopes: []
          };
        },
        token: function(stream, state) {
          if (stream.eatSpace())
            return null;
          return state.tokenize(stream, state);
        },
        indent: function(state, textAfter, cx2) {
          if (state.tokenize !== tokenBase47 && state.tokenize !== null)
            return null;
          var delta = 0;
          if (textAfter === "]" || textAfter === "];" || textAfter === "}" || textAfter === "};" || textAfter === ");")
            delta = -1;
          return (state.scopes.length + delta) * cx2.unit;
        },
        languageData: {
          electricInput: /[{}\[\]()\;]/,
          commentTokens: { line: "//", block: { open: "/*", close: "*/" } }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/yaml.js
  var yaml_exports = {};
  __export(yaml_exports, {
    yaml: () => yaml
  });
  var cons, keywordRegex, yaml;
  var init_yaml = __esm({
    "node_modules/@codemirror/legacy-modes/mode/yaml.js"() {
      cons = ["true", "false", "on", "off", "yes", "no"];
      keywordRegex = new RegExp("\\b((" + cons.join(")|(") + "))$", "i");
      yaml = {
        name: "yaml",
        token: function(stream, state) {
          var ch2 = stream.peek();
          var esc = state.escaped;
          state.escaped = false;
          if (ch2 == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
            stream.skipToEnd();
            return "comment";
          }
          if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
            return "string";
          if (state.literal && stream.indentation() > state.keyCol) {
            stream.skipToEnd();
            return "string";
          } else if (state.literal) {
            state.literal = false;
          }
          if (stream.sol()) {
            state.keyCol = 0;
            state.pair = false;
            state.pairStart = false;
            if (stream.match("---")) {
              return "def";
            }
            if (stream.match("...")) {
              return "def";
            }
            if (stream.match(/^\s*-\s+/)) {
              return "meta";
            }
          }
          if (stream.match(/^(\{|\}|\[|\])/)) {
            if (ch2 == "{")
              state.inlinePairs++;
            else if (ch2 == "}")
              state.inlinePairs--;
            else if (ch2 == "[")
              state.inlineList++;
            else
              state.inlineList--;
            return "meta";
          }
          if (state.inlineList > 0 && !esc && ch2 == ",") {
            stream.next();
            return "meta";
          }
          if (state.inlinePairs > 0 && !esc && ch2 == ",") {
            state.keyCol = 0;
            state.pair = false;
            state.pairStart = false;
            stream.next();
            return "meta";
          }
          if (state.pairStart) {
            if (stream.match(/^\s*(\||\>)\s*/)) {
              state.literal = true;
              return "meta";
            }
            ;
            if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) {
              return "variable";
            }
            if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) {
              return "number";
            }
            if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) {
              return "number";
            }
            if (stream.match(keywordRegex)) {
              return "keyword";
            }
          }
          if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
            state.pair = true;
            state.keyCol = stream.indentation();
            return "atom";
          }
          if (state.pair && stream.match(/^:\s*/)) {
            state.pairStart = true;
            return "meta";
          }
          state.pairStart = false;
          state.escaped = ch2 == "\\";
          stream.next();
          return null;
        },
        startState: function() {
          return {
            pair: false,
            pairStart: false,
            keyCol: 0,
            inlinePairs: 0,
            inlineList: 0,
            literal: false,
            escaped: false
          };
        },
        languageData: {
          commentTokens: { line: "#" }
        }
      };
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/z80.js
  var z80_exports = {};
  __export(z80_exports, {
    ez80: () => ez80,
    z80: () => z80
  });
  function mkZ80(ez802) {
    var keywords1, keywords210;
    if (ez802) {
      keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
      keywords210 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
    } else {
      keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
      keywords210 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
    }
    var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
    var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
    var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
    var numbers2 = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;
    return {
      name: "z80",
      startState: function() {
        return {
          context: 0
        };
      },
      token: function(stream, state) {
        if (!stream.column())
          state.context = 0;
        if (stream.eatSpace())
          return null;
        var w;
        if (stream.eatWhile(/\w/)) {
          if (ez802 && stream.eat(".")) {
            stream.eatWhile(/\w/);
          }
          w = stream.current();
          if (stream.indentation()) {
            if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
              state.context = 4;
              return "variable";
            }
            if (state.context == 2 && variables2.test(w)) {
              state.context = 4;
              return "variableName.special";
            }
            if (keywords1.test(w)) {
              state.context = 1;
              return "keyword";
            } else if (keywords210.test(w)) {
              state.context = 2;
              return "keyword";
            } else if (state.context == 4 && numbers2.test(w)) {
              return "number";
            }
            if (errors.test(w))
              return "error";
          } else if (stream.match(numbers2)) {
            return "number";
          } else {
            return null;
          }
        } else if (stream.eat(";")) {
          stream.skipToEnd();
          return "comment";
        } else if (stream.eat('"')) {
          while (w = stream.next()) {
            if (w == '"')
              break;
            if (w == "\\")
              stream.next();
          }
          return "string";
        } else if (stream.eat("'")) {
          if (stream.match(/\\?.'/))
            return "number";
        } else if (stream.eat(".") || stream.sol() && stream.eat("#")) {
          state.context = 5;
          if (stream.eatWhile(/\w/))
            return "def";
        } else if (stream.eat("$")) {
          if (stream.eatWhile(/[\da-f]/i))
            return "number";
        } else if (stream.eat("%")) {
          if (stream.eatWhile(/[01]/))
            return "number";
        } else {
          stream.next();
        }
        return null;
      }
    };
  }
  var z80, ez80;
  var init_z80 = __esm({
    "node_modules/@codemirror/legacy-modes/mode/z80.js"() {
      z80 = mkZ80(false);
      ez80 = mkZ80(true);
    }
  });

  // node_modules/@codemirror/legacy-modes/mode/mscgen.js
  var mscgen_exports = {};
  __export(mscgen_exports, {
    mscgen: () => mscgen,
    msgenny: () => msgenny,
    xu: () => xu
  });
  function mkParser(lang) {
    return {
      name: "mscgen",
      startState: startStateFn,
      copyState: copyStateFn,
      token: produceTokenFunction(lang),
      languageData: {
        commentTokens: { line: "#", block: { open: "/*", close: "*/" } }
      }
    };
  }
  function wordRegexpBoundary(pWords) {
    return new RegExp("^\\b(" + pWords.join("|") + ")\\b", "i");
  }
  function wordRegexp15(pWords) {
    return new RegExp("^(?:" + pWords.join("|") + ")", "i");
  }
  function startStateFn() {
    return {
      inComment: false,
      inString: false,
      inAttributeList: false,
      inScript: false
    };
  }
  function copyStateFn(pState) {
    return {
      inComment: pState.inComment,
      inString: pState.inString,
      inAttributeList: pState.inAttributeList,
      inScript: pState.inScript
    };
  }
  function produceTokenFunction(pConfig) {
    return function(pStream, pState) {
      if (pStream.match(wordRegexp15(pConfig.brackets), true, true)) {
        return "bracket";
      }
      if (!pState.inComment) {
        if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
          pState.inComment = true;
          return "comment";
        }
        if (pStream.match(wordRegexp15(pConfig.singlecomment), true, true)) {
          pStream.skipToEnd();
          return "comment";
        }
      }
      if (pState.inComment) {
        if (pStream.match(/[^\*\/]*\*\//, true, true))
          pState.inComment = false;
        else
          pStream.skipToEnd();
        return "comment";
      }
      if (!pState.inString && pStream.match(/\"(\\\"|[^\"])*/, true, true)) {
        pState.inString = true;
        return "string";
      }
      if (pState.inString) {
        if (pStream.match(/[^\"]*\"/, true, true))
          pState.inString = false;
        else
          pStream.skipToEnd();
        return "string";
      }
      if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))
        return "keyword";
      if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))
        return "keyword";
      if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))
        return "keyword";
      if (pStream.match(wordRegexp15(pConfig.arcsOthers), true, true))
        return "keyword";
      if (!!pConfig.operators && pStream.match(wordRegexp15(pConfig.operators), true, true))
        return "operator";
      if (!!pConfig.constants && pStream.match(wordRegexp15(pConfig.constants), true, true))
        return "variable";
      if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match("[", true, true)) {
        pConfig.inAttributeList = true;
        return "bracket";
      }
      if (pConfig.inAttributeList) {
        if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {
          return "attribute";
        }
        if (pStream.match("]", true, true)) {
          pConfig.inAttributeList = false;
          return "bracket";
        }
      }
      pStream.next();
      return null;
    };
  }
  var mscgen, msgenny, xu;
  var init_mscgen = __esm({
    "node_modules/@codemirror/legacy-modes/mode/mscgen.js"() {
      mscgen = mkParser({
        "keywords": ["msc"],
        "options": ["hscale", "width", "arcgradient", "wordwraparcs"],
        "constants": ["true", "false", "on", "off"],
        "attributes": ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
        "brackets": ["\\{", "\\}"],
        // [ and  ] are brackets too, but these get handled in with lists
        "arcsWords": ["note", "abox", "rbox", "box"],
        "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
        "singlecomment": ["//", "#"],
        "operators": ["="]
      });
      msgenny = mkParser({
        "keywords": null,
        "options": ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
        "constants": ["true", "false", "on", "off", "auto"],
        "attributes": null,
        "brackets": ["\\{", "\\}"],
        "arcsWords": ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
        "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
        "singlecomment": ["//", "#"],
        "operators": ["="]
      });
      xu = mkParser({
        "keywords": ["msc", "xu"],
        "options": ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
        "constants": ["true", "false", "on", "off", "auto"],
        "attributes": ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
        "brackets": ["\\{", "\\}"],
        // [ and  ] are brackets too, but these get handled in with lists
        "arcsWords": ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
        "arcsOthers": ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
        "singlecomment": ["//", "#"],
        "operators": ["="]
      });
    }
  });

  // node_modules/luxon/src/errors.js
  var LuxonError = class extends Error {
  };
  var InvalidDateTimeError = class extends LuxonError {
    constructor(reason) {
      super(`Invalid DateTime: ${reason.toMessage()}`);
    }
  };
  var InvalidIntervalError = class extends LuxonError {
    constructor(reason) {
      super(`Invalid Interval: ${reason.toMessage()}`);
    }
  };
  var InvalidDurationError = class extends LuxonError {
    constructor(reason) {
      super(`Invalid Duration: ${reason.toMessage()}`);
    }
  };
  var ConflictingSpecificationError = class extends LuxonError {
  };
  var InvalidUnitError = class extends LuxonError {
    constructor(unit) {
      super(`Invalid unit ${unit}`);
    }
  };
  var InvalidArgumentError = class extends LuxonError {
  };
  var ZoneIsAbstractError = class extends LuxonError {
    constructor() {
      super("Zone is an abstract class");
    }
  };

  // node_modules/luxon/src/impl/formats.js
  var n = "numeric";
  var s = "short";
  var l = "long";
  var DATE_SHORT = {
    year: n,
    month: n,
    day: n
  };
  var DATE_MED = {
    year: n,
    month: s,
    day: n
  };
  var DATE_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s
  };
  var DATE_FULL = {
    year: n,
    month: l,
    day: n
  };
  var DATE_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l
  };
  var TIME_SIMPLE = {
    hour: n,
    minute: n
  };
  var TIME_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n
  };
  var TIME_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
  };
  var TIME_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
  };
  var TIME_24_SIMPLE = {
    hour: n,
    minute: n,
    hourCycle: "h23"
  };
  var TIME_24_WITH_SECONDS = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23"
  };
  var TIME_24_WITH_SHORT_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: s
  };
  var TIME_24_WITH_LONG_OFFSET = {
    hour: n,
    minute: n,
    second: n,
    hourCycle: "h23",
    timeZoneName: l
  };
  var DATETIME_SHORT = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n
  };
  var DATETIME_SHORT_WITH_SECONDS = {
    year: n,
    month: n,
    day: n,
    hour: n,
    minute: n,
    second: n
  };
  var DATETIME_MED = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n
  };
  var DATETIME_MED_WITH_SECONDS = {
    year: n,
    month: s,
    day: n,
    hour: n,
    minute: n,
    second: n
  };
  var DATETIME_MED_WITH_WEEKDAY = {
    year: n,
    month: s,
    day: n,
    weekday: s,
    hour: n,
    minute: n
  };
  var DATETIME_FULL = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    timeZoneName: s
  };
  var DATETIME_FULL_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: s
  };
  var DATETIME_HUGE = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    timeZoneName: l
  };
  var DATETIME_HUGE_WITH_SECONDS = {
    year: n,
    month: l,
    day: n,
    weekday: l,
    hour: n,
    minute: n,
    second: n,
    timeZoneName: l
  };

  // node_modules/luxon/src/zone.js
  var Zone = class {
    /**
     * The type of zone
     * @abstract
     * @type {string}
     */
    get type() {
      throw new ZoneIsAbstractError();
    }
    /**
     * The name of this zone.
     * @abstract
     * @type {string}
     */
    get name() {
      throw new ZoneIsAbstractError();
    }
    get ianaName() {
      return this.name;
    }
    /**
     * Returns whether the offset is known to be fixed for the whole year.
     * @abstract
     * @type {boolean}
     */
    get isUniversal() {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns the offset's common name (such as EST) at the specified timestamp
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the name
     * @param {Object} opts - Options to affect the format
     * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
     * @param {string} opts.locale - What locale to return the offset name in.
     * @return {string}
     */
    offsetName(ts, opts) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Returns the offset's value as a string
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to get the offset
     * @param {string} format - What style of offset to return.
     *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
     * @return {string}
     */
    formatOffset(ts, format) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Return the offset in minutes for this zone at the specified timestamp.
     * @abstract
     * @param {number} ts - Epoch milliseconds for which to compute the offset
     * @return {number}
     */
    offset(ts) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Return whether this Zone is equal to another zone
     * @abstract
     * @param {Zone} otherZone - the zone to compare
     * @return {boolean}
     */
    equals(otherZone) {
      throw new ZoneIsAbstractError();
    }
    /**
     * Return whether this Zone is valid.
     * @abstract
     * @type {boolean}
     */
    get isValid() {
      throw new ZoneIsAbstractError();
    }
  };

  // node_modules/luxon/src/zones/systemZone.js
  var singleton = null;
  var SystemZone = class extends Zone {
    /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */
    static get instance() {
      if (singleton === null) {
        singleton = new SystemZone();
      }
      return singleton;
    }
    /** @override **/
    get type() {
      return "system";
    }
    /** @override **/
    get name() {
      return new Intl.DateTimeFormat().resolvedOptions().timeZone;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName(ts, { format, locale }) {
      return parseZoneInfo(ts, format, locale);
    }
    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.offset(ts), format);
    }
    /** @override **/
    offset(ts) {
      return -new Date(ts).getTimezoneOffset();
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "system";
    }
    /** @override **/
    get isValid() {
      return true;
    }
  };

  // node_modules/luxon/src/zones/IANAZone.js
  var dtfCache = {};
  function makeDTF(zone) {
    if (!dtfCache[zone]) {
      dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        era: "short"
      });
    }
    return dtfCache[zone];
  }
  var typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
  };
  function hackyOffset(dtf, date) {
    const formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), [, fMonth, fDay, fYear, fadOrBc, fHour, fMinute, fSecond] = parsed;
    return [fYear, fMonth, fDay, fadOrBc, fHour, fMinute, fSecond];
  }
  function partsOffset(dtf, date) {
    const formatted = dtf.formatToParts(date);
    const filled = [];
    for (let i = 0; i < formatted.length; i++) {
      const { type: type7, value } = formatted[i];
      const pos = typeToPos[type7];
      if (type7 === "era") {
        filled[pos] = value;
      } else if (!isUndefined(pos)) {
        filled[pos] = parseInt(value, 10);
      }
    }
    return filled;
  }
  var ianaZoneCache = {};
  var IANAZone = class extends Zone {
    /**
     * @param {string} name - Zone name
     * @return {IANAZone}
     */
    static create(name2) {
      if (!ianaZoneCache[name2]) {
        ianaZoneCache[name2] = new IANAZone(name2);
      }
      return ianaZoneCache[name2];
    }
    /**
     * Reset local caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCache() {
      ianaZoneCache = {};
      dtfCache = {};
    }
    /**
     * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
     * @param {string} s - The string to check validity on
     * @example IANAZone.isValidSpecifier("America/New_York") //=> true
     * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
     * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
     * @return {boolean}
     */
    static isValidSpecifier(s2) {
      return this.isValidZone(s2);
    }
    /**
     * Returns whether the provided string identifies a real zone
     * @param {string} zone - The string to check
     * @example IANAZone.isValidZone("America/New_York") //=> true
     * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
     * @example IANAZone.isValidZone("Sport~~blorp") //=> false
     * @return {boolean}
     */
    static isValidZone(zone) {
      if (!zone) {
        return false;
      }
      try {
        new Intl.DateTimeFormat("en-US", { timeZone: zone }).format();
        return true;
      } catch (e) {
        return false;
      }
    }
    constructor(name2) {
      super();
      this.zoneName = name2;
      this.valid = IANAZone.isValidZone(name2);
    }
    /** @override **/
    get type() {
      return "iana";
    }
    /** @override **/
    get name() {
      return this.zoneName;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName(ts, { format, locale }) {
      return parseZoneInfo(ts, format, locale, this.name);
    }
    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.offset(ts), format);
    }
    /** @override **/
    offset(ts) {
      const date = new Date(ts);
      if (isNaN(date))
        return NaN;
      const dtf = makeDTF(this.name);
      let [year, month, day, adOrBc, hour, minute, second] = dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date);
      if (adOrBc === "BC") {
        year = -Math.abs(year) + 1;
      }
      const adjustedHour = hour === 24 ? 0 : hour;
      const asUTC = objToLocalTS({
        year,
        month,
        day,
        hour: adjustedHour,
        minute,
        second,
        millisecond: 0
      });
      let asTS = +date;
      const over = asTS % 1e3;
      asTS -= over >= 0 ? over : 1e3 + over;
      return (asUTC - asTS) / (60 * 1e3);
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "iana" && otherZone.name === this.name;
    }
    /** @override **/
    get isValid() {
      return this.valid;
    }
  };

  // node_modules/luxon/src/impl/locale.js
  var intlLFCache = {};
  function getCachedLF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlLFCache[key];
    if (!dtf) {
      dtf = new Intl.ListFormat(locString, opts);
      intlLFCache[key] = dtf;
    }
    return dtf;
  }
  var intlDTCache = {};
  function getCachedDTF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let dtf = intlDTCache[key];
    if (!dtf) {
      dtf = new Intl.DateTimeFormat(locString, opts);
      intlDTCache[key] = dtf;
    }
    return dtf;
  }
  var intlNumCache = {};
  function getCachedINF(locString, opts = {}) {
    const key = JSON.stringify([locString, opts]);
    let inf = intlNumCache[key];
    if (!inf) {
      inf = new Intl.NumberFormat(locString, opts);
      intlNumCache[key] = inf;
    }
    return inf;
  }
  var intlRelCache = {};
  function getCachedRTF(locString, opts = {}) {
    const { base: base4, ...cacheKeyOpts } = opts;
    const key = JSON.stringify([locString, cacheKeyOpts]);
    let inf = intlRelCache[key];
    if (!inf) {
      inf = new Intl.RelativeTimeFormat(locString, opts);
      intlRelCache[key] = inf;
    }
    return inf;
  }
  var sysLocaleCache = null;
  function systemLocale() {
    if (sysLocaleCache) {
      return sysLocaleCache;
    } else {
      sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
      return sysLocaleCache;
    }
  }
  function parseLocaleString(localeStr) {
    const xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) {
      localeStr = localeStr.substring(0, xIndex);
    }
    const uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) {
      return [localeStr];
    } else {
      let options;
      let selectedStr;
      try {
        options = getCachedDTF(localeStr).resolvedOptions();
        selectedStr = localeStr;
      } catch (e) {
        const smaller = localeStr.substring(0, uIndex);
        options = getCachedDTF(smaller).resolvedOptions();
        selectedStr = smaller;
      }
      const { numberingSystem, calendar } = options;
      return [selectedStr, numberingSystem, calendar];
    }
  }
  function intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
      if (!localeStr.includes("-u-")) {
        localeStr += "-u";
      }
      if (outputCalendar) {
        localeStr += `-ca-${outputCalendar}`;
      }
      if (numberingSystem) {
        localeStr += `-nu-${numberingSystem}`;
      }
      return localeStr;
    } else {
      return localeStr;
    }
  }
  function mapMonths(f) {
    const ms = [];
    for (let i = 1; i <= 12; i++) {
      const dt = DateTime.utc(2016, i, 1);
      ms.push(f(dt));
    }
    return ms;
  }
  function mapWeekdays(f) {
    const ms = [];
    for (let i = 1; i <= 7; i++) {
      const dt = DateTime.utc(2016, 11, 13 + i);
      ms.push(f(dt));
    }
    return ms;
  }
  function listStuff(loc, length, defaultOK, englishFn, intlFn) {
    const mode = loc.listingMode(defaultOK);
    if (mode === "error") {
      return null;
    } else if (mode === "en") {
      return englishFn(length);
    } else {
      return intlFn(length);
    }
  }
  function supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") {
      return false;
    } else {
      return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
    }
  }
  var PolyNumberFormatter = class {
    constructor(intl, forceSimple, opts) {
      this.padTo = opts.padTo || 0;
      this.floor = opts.floor || false;
      const { padTo, floor, ...otherOpts } = opts;
      if (!forceSimple || Object.keys(otherOpts).length > 0) {
        const intlOpts = { useGrouping: false, ...opts };
        if (opts.padTo > 0)
          intlOpts.minimumIntegerDigits = opts.padTo;
        this.inf = getCachedINF(intl, intlOpts);
      }
    }
    format(i) {
      if (this.inf) {
        const fixed = this.floor ? Math.floor(i) : i;
        return this.inf.format(fixed);
      } else {
        const fixed = this.floor ? Math.floor(i) : roundTo(i, 3);
        return padStart(fixed, this.padTo);
      }
    }
  };
  var PolyDateFormatter = class {
    constructor(dt, intl, opts) {
      this.opts = opts;
      this.originalZone = void 0;
      let z2 = void 0;
      if (this.opts.timeZone) {
        this.dt = dt;
      } else if (dt.zone.type === "fixed") {
        const gmtOffset = -1 * (dt.offset / 60);
        const offsetZ = gmtOffset >= 0 ? `Etc/GMT+${gmtOffset}` : `Etc/GMT${gmtOffset}`;
        if (dt.offset !== 0 && IANAZone.create(offsetZ).valid) {
          z2 = offsetZ;
          this.dt = dt;
        } else {
          z2 = "UTC";
          this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({ minutes: dt.offset });
          this.originalZone = dt.zone;
        }
      } else if (dt.zone.type === "system") {
        this.dt = dt;
      } else if (dt.zone.type === "iana") {
        this.dt = dt;
        z2 = dt.zone.name;
      } else {
        z2 = "UTC";
        this.dt = dt.setZone("UTC").plus({ minutes: dt.offset });
        this.originalZone = dt.zone;
      }
      const intlOpts = { ...this.opts };
      intlOpts.timeZone = intlOpts.timeZone || z2;
      this.dtf = getCachedDTF(intl, intlOpts);
    }
    format() {
      if (this.originalZone) {
        return this.formatToParts().map(({ value }) => value).join("");
      }
      return this.dtf.format(this.dt.toJSDate());
    }
    formatToParts() {
      const parts = this.dtf.formatToParts(this.dt.toJSDate());
      if (this.originalZone) {
        return parts.map((part) => {
          if (part.type === "timeZoneName") {
            const offsetName = this.originalZone.offsetName(this.dt.ts, {
              locale: this.dt.locale,
              format: this.opts.timeZoneName
            });
            return {
              ...part,
              value: offsetName
            };
          } else {
            return part;
          }
        });
      }
      return parts;
    }
    resolvedOptions() {
      return this.dtf.resolvedOptions();
    }
  };
  var PolyRelFormatter = class {
    constructor(intl, isEnglish, opts) {
      this.opts = { style: "long", ...opts };
      if (!isEnglish && hasRelative()) {
        this.rtf = getCachedRTF(intl, opts);
      }
    }
    format(count, unit) {
      if (this.rtf) {
        return this.rtf.format(count, unit);
      } else {
        return formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
      }
    }
    formatToParts(count, unit) {
      if (this.rtf) {
        return this.rtf.formatToParts(count, unit);
      } else {
        return [];
      }
    }
  };
  var Locale = class {
    static fromOpts(opts) {
      return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);
    }
    static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {
      const specifiedLocale = locale || Settings.defaultLocale;
      const localeR = specifiedLocale || (defaultToEN ? "en-US" : systemLocale());
      const numberingSystemR = numberingSystem || Settings.defaultNumberingSystem;
      const outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;
      return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);
    }
    static resetCache() {
      sysLocaleCache = null;
      intlDTCache = {};
      intlNumCache = {};
      intlRelCache = {};
    }
    static fromObject({ locale, numberingSystem, outputCalendar } = {}) {
      return Locale.create(locale, numberingSystem, outputCalendar);
    }
    constructor(locale, numbering, outputCalendar, specifiedLocale) {
      const [parsedLocale, parsedNumberingSystem, parsedOutputCalendar] = parseLocaleString(locale);
      this.locale = parsedLocale;
      this.numberingSystem = numbering || parsedNumberingSystem || null;
      this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
      this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
      this.weekdaysCache = { format: {}, standalone: {} };
      this.monthsCache = { format: {}, standalone: {} };
      this.meridiemCache = null;
      this.eraCache = {};
      this.specifiedLocale = specifiedLocale;
      this.fastNumbersCached = null;
    }
    get fastNumbers() {
      if (this.fastNumbersCached == null) {
        this.fastNumbersCached = supportsFastNumbers(this);
      }
      return this.fastNumbersCached;
    }
    listingMode() {
      const isActuallyEn = this.isEnglish();
      const hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
      return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    }
    clone(alts) {
      if (!alts || Object.getOwnPropertyNames(alts).length === 0) {
        return this;
      } else {
        return Locale.create(
          alts.locale || this.specifiedLocale,
          alts.numberingSystem || this.numberingSystem,
          alts.outputCalendar || this.outputCalendar,
          alts.defaultToEN || false
        );
      }
    }
    redefaultToEN(alts = {}) {
      return this.clone({ ...alts, defaultToEN: true });
    }
    redefaultToSystem(alts = {}) {
      return this.clone({ ...alts, defaultToEN: false });
    }
    months(length, format = false, defaultOK = true) {
      return listStuff(this, length, defaultOK, months, () => {
        const intl = format ? { month: length, day: "numeric" } : { month: length }, formatStr = format ? "format" : "standalone";
        if (!this.monthsCache[formatStr][length]) {
          this.monthsCache[formatStr][length] = mapMonths((dt) => this.extract(dt, intl, "month"));
        }
        return this.monthsCache[formatStr][length];
      });
    }
    weekdays(length, format = false, defaultOK = true) {
      return listStuff(this, length, defaultOK, weekdays, () => {
        const intl = format ? { weekday: length, year: "numeric", month: "long", day: "numeric" } : { weekday: length }, formatStr = format ? "format" : "standalone";
        if (!this.weekdaysCache[formatStr][length]) {
          this.weekdaysCache[formatStr][length] = mapWeekdays(
            (dt) => this.extract(dt, intl, "weekday")
          );
        }
        return this.weekdaysCache[formatStr][length];
      });
    }
    meridiems(defaultOK = true) {
      return listStuff(
        this,
        void 0,
        defaultOK,
        () => meridiems,
        () => {
          if (!this.meridiemCache) {
            const intl = { hour: "numeric", hourCycle: "h12" };
            this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(
              (dt) => this.extract(dt, intl, "dayperiod")
            );
          }
          return this.meridiemCache;
        }
      );
    }
    eras(length, defaultOK = true) {
      return listStuff(this, length, defaultOK, eras, () => {
        const intl = { era: length };
        if (!this.eraCache[length]) {
          this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(
            (dt) => this.extract(dt, intl, "era")
          );
        }
        return this.eraCache[length];
      });
    }
    extract(dt, intlOpts, field) {
      const df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching2 = results.find((m) => m.type.toLowerCase() === field);
      return matching2 ? matching2.value : null;
    }
    numberFormatter(opts = {}) {
      return new PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
    }
    dtFormatter(dt, intlOpts = {}) {
      return new PolyDateFormatter(dt, this.intl, intlOpts);
    }
    relFormatter(opts = {}) {
      return new PolyRelFormatter(this.intl, this.isEnglish(), opts);
    }
    listFormatter(opts = {}) {
      return getCachedLF(this.intl, opts);
    }
    isEnglish() {
      return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
    }
    equals(other) {
      return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
    }
  };

  // node_modules/luxon/src/zones/fixedOffsetZone.js
  var singleton2 = null;
  var FixedOffsetZone = class extends Zone {
    /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */
    static get utcInstance() {
      if (singleton2 === null) {
        singleton2 = new FixedOffsetZone(0);
      }
      return singleton2;
    }
    /**
     * Get an instance with a specified offset
     * @param {number} offset - The offset in minutes
     * @return {FixedOffsetZone}
     */
    static instance(offset2) {
      return offset2 === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset2);
    }
    /**
     * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
     * @param {string} s - The offset string to parse
     * @example FixedOffsetZone.parseSpecifier("UTC+6")
     * @example FixedOffsetZone.parseSpecifier("UTC+06")
     * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
     * @return {FixedOffsetZone}
     */
    static parseSpecifier(s2) {
      if (s2) {
        const r2 = s2.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
        if (r2) {
          return new FixedOffsetZone(signedOffset(r2[1], r2[2]));
        }
      }
      return null;
    }
    constructor(offset2) {
      super();
      this.fixed = offset2;
    }
    /** @override **/
    get type() {
      return "fixed";
    }
    /** @override **/
    get name() {
      return this.fixed === 0 ? "UTC" : `UTC${formatOffset(this.fixed, "narrow")}`;
    }
    get ianaName() {
      if (this.fixed === 0) {
        return "Etc/UTC";
      } else {
        return `Etc/GMT${formatOffset(-this.fixed, "narrow")}`;
      }
    }
    /** @override **/
    offsetName() {
      return this.name;
    }
    /** @override **/
    formatOffset(ts, format) {
      return formatOffset(this.fixed, format);
    }
    /** @override **/
    get isUniversal() {
      return true;
    }
    /** @override **/
    offset() {
      return this.fixed;
    }
    /** @override **/
    equals(otherZone) {
      return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    }
    /** @override **/
    get isValid() {
      return true;
    }
  };

  // node_modules/luxon/src/zones/invalidZone.js
  var InvalidZone = class extends Zone {
    constructor(zoneName) {
      super();
      this.zoneName = zoneName;
    }
    /** @override **/
    get type() {
      return "invalid";
    }
    /** @override **/
    get name() {
      return this.zoneName;
    }
    /** @override **/
    get isUniversal() {
      return false;
    }
    /** @override **/
    offsetName() {
      return null;
    }
    /** @override **/
    formatOffset() {
      return "";
    }
    /** @override **/
    offset() {
      return NaN;
    }
    /** @override **/
    equals() {
      return false;
    }
    /** @override **/
    get isValid() {
      return false;
    }
  };

  // node_modules/luxon/src/impl/zoneUtil.js
  function normalizeZone(input, defaultZone2) {
    let offset2;
    if (isUndefined(input) || input === null) {
      return defaultZone2;
    } else if (input instanceof Zone) {
      return input;
    } else if (isString(input)) {
      const lowered = input.toLowerCase();
      if (lowered === "default")
        return defaultZone2;
      else if (lowered === "local" || lowered === "system")
        return SystemZone.instance;
      else if (lowered === "utc" || lowered === "gmt")
        return FixedOffsetZone.utcInstance;
      else
        return FixedOffsetZone.parseSpecifier(lowered) || IANAZone.create(input);
    } else if (isNumber(input)) {
      return FixedOffsetZone.instance(input);
    } else if (typeof input === "object" && input.offset && typeof input.offset === "number") {
      return input;
    } else {
      return new InvalidZone(input);
    }
  }

  // node_modules/luxon/src/settings.js
  var now = () => Date.now();
  var defaultZone = "system";
  var defaultLocale = null;
  var defaultNumberingSystem = null;
  var defaultOutputCalendar = null;
  var twoDigitCutoffYear = 60;
  var throwOnInvalid;
  var Settings = class {
    /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */
    static get now() {
      return now;
    }
    /**
     * Set the callback for returning the current timestamp.
     * The function should return a number, which will be interpreted as an Epoch millisecond count
     * @type {function}
     * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future
     * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time
     */
    static set now(n2) {
      now = n2;
    }
    /**
     * Set the default time zone to create DateTimes in. Does not affect existing instances.
     * Use the value "system" to reset this value to the system's time zone.
     * @type {string}
     */
    static set defaultZone(zone) {
      defaultZone = zone;
    }
    /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */
    static get defaultZone() {
      return normalizeZone(defaultZone, SystemZone.instance);
    }
    /**
     * Get the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultLocale() {
      return defaultLocale;
    }
    /**
     * Set the default locale to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultLocale(locale) {
      defaultLocale = locale;
    }
    /**
     * Get the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultNumberingSystem() {
      return defaultNumberingSystem;
    }
    /**
     * Set the default numbering system to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultNumberingSystem(numberingSystem) {
      defaultNumberingSystem = numberingSystem;
    }
    /**
     * Get the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static get defaultOutputCalendar() {
      return defaultOutputCalendar;
    }
    /**
     * Set the default output calendar to create DateTimes with. Does not affect existing instances.
     * @type {string}
     */
    static set defaultOutputCalendar(outputCalendar) {
      defaultOutputCalendar = outputCalendar;
    }
    /**
     * Get the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     */
    static get twoDigitCutoffYear() {
      return twoDigitCutoffYear;
    }
    /**
     * Set the cutoff year after which a string encoding a year as two digits is interpreted to occur in the current century.
     * @type {number}
     * @example Settings.twoDigitCutoffYear = 0 // cut-off year is 0, so all 'yy' are interpretted as current century
     * @example Settings.twoDigitCutoffYear = 50 // '49' -> 1949; '50' -> 2050
     * @example Settings.twoDigitCutoffYear = 1950 // interpretted as 50
     * @example Settings.twoDigitCutoffYear = 2050 // ALSO interpretted as 50
     */
    static set twoDigitCutoffYear(cutoffYear) {
      twoDigitCutoffYear = cutoffYear % 100;
    }
    /**
     * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static get throwOnInvalid() {
      return throwOnInvalid;
    }
    /**
     * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals
     * @type {boolean}
     */
    static set throwOnInvalid(t2) {
      throwOnInvalid = t2;
    }
    /**
     * Reset Luxon's global caches. Should only be necessary in testing scenarios.
     * @return {void}
     */
    static resetCaches() {
      Locale.resetCache();
      IANAZone.resetCache();
    }
  };

  // node_modules/luxon/src/impl/util.js
  function isUndefined(o) {
    return typeof o === "undefined";
  }
  function isNumber(o) {
    return typeof o === "number";
  }
  function isInteger(o) {
    return typeof o === "number" && o % 1 === 0;
  }
  function isString(o) {
    return typeof o === "string";
  }
  function isDate(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
  }
  function hasRelative() {
    try {
      return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e) {
      return false;
    }
  }
  function maybeArray(thing) {
    return Array.isArray(thing) ? thing : [thing];
  }
  function bestBy(arr, by, compare2) {
    if (arr.length === 0) {
      return void 0;
    }
    return arr.reduce((best, next2) => {
      const pair2 = [by(next2), next2];
      if (!best) {
        return pair2;
      } else if (compare2(best[0], pair2[0]) === best[0]) {
        return best;
      } else {
        return pair2;
      }
    }, null)[1];
  }
  function pick(obj, keys) {
    return keys.reduce((a2, k) => {
      a2[k] = obj[k];
      return a2;
    }, {});
  }
  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }
  function integerBetween(thing, bottom, top3) {
    return isInteger(thing) && thing >= bottom && thing <= top3;
  }
  function floorMod(x, n2) {
    return x - n2 * Math.floor(x / n2);
  }
  function padStart(input, n2 = 2) {
    const isNeg = input < 0;
    let padded;
    if (isNeg) {
      padded = "-" + ("" + -input).padStart(n2, "0");
    } else {
      padded = ("" + input).padStart(n2, "0");
    }
    return padded;
  }
  function parseInteger(string3) {
    if (isUndefined(string3) || string3 === null || string3 === "") {
      return void 0;
    } else {
      return parseInt(string3, 10);
    }
  }
  function parseFloating(string3) {
    if (isUndefined(string3) || string3 === null || string3 === "") {
      return void 0;
    } else {
      return parseFloat(string3);
    }
  }
  function parseMillis(fraction) {
    if (isUndefined(fraction) || fraction === null || fraction === "") {
      return void 0;
    } else {
      const f = parseFloat("0." + fraction) * 1e3;
      return Math.floor(f);
    }
  }
  function roundTo(number3, digits, towardZero = false) {
    const factor2 = 10 ** digits, rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number3 * factor2) / factor2;
  }
  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }
  function daysInMonth(year, month) {
    const modMonth = floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
    if (modMonth === 2) {
      return isLeapYear(modYear) ? 29 : 28;
    } else {
      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][modMonth - 1];
    }
  }
  function objToLocalTS(obj) {
    let d3 = Date.UTC(
      obj.year,
      obj.month - 1,
      obj.day,
      obj.hour,
      obj.minute,
      obj.second,
      obj.millisecond
    );
    if (obj.year < 100 && obj.year >= 0) {
      d3 = new Date(d3);
      d3.setUTCFullYear(obj.year, obj.month - 1, obj.day);
    }
    return +d3;
  }
  function weeksInWeekYear(weekYear) {
    const p1 = (weekYear + Math.floor(weekYear / 4) - Math.floor(weekYear / 100) + Math.floor(weekYear / 400)) % 7, last = weekYear - 1, p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;
    return p1 === 4 || p2 === 3 ? 53 : 52;
  }
  function untruncateYear(year) {
    if (year > 99) {
      return year;
    } else
      return year > Settings.twoDigitCutoffYear ? 1900 + year : 2e3 + year;
  }
  function parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {
    const date = new Date(ts), intlOpts = {
      hourCycle: "h23",
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit"
    };
    if (timeZone) {
      intlOpts.timeZone = timeZone;
    }
    const modified = { timeZoneName: offsetFormat, ...intlOpts };
    const parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find((m) => m.type.toLowerCase() === "timezonename");
    return parsed ? parsed.value : null;
  }
  function signedOffset(offHourStr, offMinuteStr) {
    let offHour = parseInt(offHourStr, 10);
    if (Number.isNaN(offHour)) {
      offHour = 0;
    }
    const offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
  }
  function asNumber(value) {
    const numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue))
      throw new InvalidArgumentError(`Invalid unit value ${value}`);
    return numericValue;
  }
  function normalizeObject(obj, normalizer) {
    const normalized = {};
    for (const u2 in obj) {
      if (hasOwnProperty(obj, u2)) {
        const v = obj[u2];
        if (v === void 0 || v === null)
          continue;
        normalized[normalizer(u2)] = asNumber(v);
      }
    }
    return normalized;
  }
  function formatOffset(offset2, format) {
    const hours = Math.trunc(Math.abs(offset2 / 60)), minutes = Math.trunc(Math.abs(offset2 % 60)), sign2 = offset2 >= 0 ? "+" : "-";
    switch (format) {
      case "short":
        return `${sign2}${padStart(hours, 2)}:${padStart(minutes, 2)}`;
      case "narrow":
        return `${sign2}${hours}${minutes > 0 ? `:${minutes}` : ""}`;
      case "techie":
        return `${sign2}${padStart(hours, 2)}${padStart(minutes, 2)}`;
      default:
        throw new RangeError(`Value format ${format} is out of range for property format`);
    }
  }
  function timeObject(obj) {
    return pick(obj, ["hour", "minute", "second", "millisecond"]);
  }

  // node_modules/luxon/src/impl/english.js
  var monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  var monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  var monthsNarrow = ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"];
  function months(length) {
    switch (length) {
      case "narrow":
        return [...monthsNarrow];
      case "short":
        return [...monthsShort];
      case "long":
        return [...monthsLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"];
      case "2-digit":
        return ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];
      default:
        return null;
    }
  }
  var weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
  ];
  var weekdaysShort = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
  var weekdaysNarrow = ["M", "T", "W", "T", "F", "S", "S"];
  function weekdays(length) {
    switch (length) {
      case "narrow":
        return [...weekdaysNarrow];
      case "short":
        return [...weekdaysShort];
      case "long":
        return [...weekdaysLong];
      case "numeric":
        return ["1", "2", "3", "4", "5", "6", "7"];
      default:
        return null;
    }
  }
  var meridiems = ["AM", "PM"];
  var erasLong = ["Before Christ", "Anno Domini"];
  var erasShort = ["BC", "AD"];
  var erasNarrow = ["B", "A"];
  function eras(length) {
    switch (length) {
      case "narrow":
        return [...erasNarrow];
      case "short":
        return [...erasShort];
      case "long":
        return [...erasLong];
      default:
        return null;
    }
  }
  function meridiemForDateTime(dt) {
    return meridiems[dt.hour < 12 ? 0 : 1];
  }
  function weekdayForDateTime(dt, length) {
    return weekdays(length)[dt.weekday - 1];
  }
  function monthForDateTime(dt, length) {
    return months(length)[dt.month - 1];
  }
  function eraForDateTime(dt, length) {
    return eras(length)[dt.year < 0 ? 0 : 1];
  }
  function formatRelativeTime(unit, count, numeric = "always", narrow = false) {
    const units = {
      years: ["year", "yr."],
      quarters: ["quarter", "qtr."],
      months: ["month", "mo."],
      weeks: ["week", "wk."],
      days: ["day", "day", "days"],
      hours: ["hour", "hr."],
      minutes: ["minute", "min."],
      seconds: ["second", "sec."]
    };
    const lastable = ["hours", "minutes", "seconds"].indexOf(unit) === -1;
    if (numeric === "auto" && lastable) {
      const isDay = unit === "days";
      switch (count) {
        case 1:
          return isDay ? "tomorrow" : `next ${units[unit][0]}`;
        case -1:
          return isDay ? "yesterday" : `last ${units[unit][0]}`;
        case 0:
          return isDay ? "today" : `this ${units[unit][0]}`;
        default:
      }
    }
    const isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
    return isInPast ? `${fmtValue} ${fmtUnit} ago` : `in ${fmtValue} ${fmtUnit}`;
  }

  // node_modules/luxon/src/impl/formatter.js
  function stringifyTokens(splits, tokenToString) {
    let s2 = "";
    for (const token of splits) {
      if (token.literal) {
        s2 += token.val;
      } else {
        s2 += tokenToString(token.val);
      }
    }
    return s2;
  }
  var macroTokenToFormatOpts = {
    D: DATE_SHORT,
    DD: DATE_MED,
    DDD: DATE_FULL,
    DDDD: DATE_HUGE,
    t: TIME_SIMPLE,
    tt: TIME_WITH_SECONDS,
    ttt: TIME_WITH_SHORT_OFFSET,
    tttt: TIME_WITH_LONG_OFFSET,
    T: TIME_24_SIMPLE,
    TT: TIME_24_WITH_SECONDS,
    TTT: TIME_24_WITH_SHORT_OFFSET,
    TTTT: TIME_24_WITH_LONG_OFFSET,
    f: DATETIME_SHORT,
    ff: DATETIME_MED,
    fff: DATETIME_FULL,
    ffff: DATETIME_HUGE,
    F: DATETIME_SHORT_WITH_SECONDS,
    FF: DATETIME_MED_WITH_SECONDS,
    FFF: DATETIME_FULL_WITH_SECONDS,
    FFFF: DATETIME_HUGE_WITH_SECONDS
  };
  var Formatter = class {
    static create(locale, opts = {}) {
      return new Formatter(locale, opts);
    }
    static parseFormat(fmt) {
      let current = null, currentFull = "", bracketed3 = false;
      const splits = [];
      for (let i = 0; i < fmt.length; i++) {
        const c2 = fmt.charAt(i);
        if (c2 === "'") {
          if (currentFull.length > 0) {
            splits.push({ literal: bracketed3 || /^\s+$/.test(currentFull), val: currentFull });
          }
          current = null;
          currentFull = "";
          bracketed3 = !bracketed3;
        } else if (bracketed3) {
          currentFull += c2;
        } else if (c2 === current) {
          currentFull += c2;
        } else {
          if (currentFull.length > 0) {
            splits.push({ literal: /^\s+$/.test(currentFull), val: currentFull });
          }
          currentFull = c2;
          current = c2;
        }
      }
      if (currentFull.length > 0) {
        splits.push({ literal: bracketed3 || /^\s+$/.test(currentFull), val: currentFull });
      }
      return splits;
    }
    static macroTokenToFormatOpts(token) {
      return macroTokenToFormatOpts[token];
    }
    constructor(locale, formatOpts) {
      this.opts = formatOpts;
      this.loc = locale;
      this.systemLoc = null;
    }
    formatWithSystemDefault(dt, opts) {
      if (this.systemLoc === null) {
        this.systemLoc = this.loc.redefaultToSystem();
      }
      const df = this.systemLoc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.format();
    }
    formatDateTime(dt, opts = {}) {
      const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.format();
    }
    formatDateTimeParts(dt, opts = {}) {
      const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.formatToParts();
    }
    formatInterval(interval, opts = {}) {
      const df = this.loc.dtFormatter(interval.start, { ...this.opts, ...opts });
      return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    }
    resolvedOptions(dt, opts = {}) {
      const df = this.loc.dtFormatter(dt, { ...this.opts, ...opts });
      return df.resolvedOptions();
    }
    num(n2, p = 0) {
      if (this.opts.forceSimple) {
        return padStart(n2, p);
      }
      const opts = { ...this.opts };
      if (p > 0) {
        opts.padTo = p;
      }
      return this.loc.numberFormatter(opts).format(n2);
    }
    formatDateTimeFromString(dt, fmt) {
      const knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string3 = (opts, extract) => this.loc.extract(dt, opts, extract), formatOffset2 = (opts) => {
        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {
          return "Z";
        }
        return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
      }, meridiem = () => knownEnglish ? meridiemForDateTime(dt) : string3({ hour: "numeric", hourCycle: "h12" }, "dayperiod"), month = (length, standalone) => knownEnglish ? monthForDateTime(dt, length) : string3(standalone ? { month: length } : { month: length, day: "numeric" }, "month"), weekday = (length, standalone) => knownEnglish ? weekdayForDateTime(dt, length) : string3(
        standalone ? { weekday: length } : { weekday: length, month: "long", day: "numeric" },
        "weekday"
      ), maybeMacro = (token) => {
        const formatOpts = Formatter.macroTokenToFormatOpts(token);
        if (formatOpts) {
          return this.formatWithSystemDefault(dt, formatOpts);
        } else {
          return token;
        }
      }, era = (length) => knownEnglish ? eraForDateTime(dt, length) : string3({ era: length }, "era"), tokenToString = (token) => {
        switch (token) {
          case "S":
            return this.num(dt.millisecond);
          case "u":
          case "SSS":
            return this.num(dt.millisecond, 3);
          case "s":
            return this.num(dt.second);
          case "ss":
            return this.num(dt.second, 2);
          case "uu":
            return this.num(Math.floor(dt.millisecond / 10), 2);
          case "uuu":
            return this.num(Math.floor(dt.millisecond / 100));
          case "m":
            return this.num(dt.minute);
          case "mm":
            return this.num(dt.minute, 2);
          case "h":
            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
          case "hh":
            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
          case "H":
            return this.num(dt.hour);
          case "HH":
            return this.num(dt.hour, 2);
          case "Z":
            return formatOffset2({ format: "narrow", allowZ: this.opts.allowZ });
          case "ZZ":
            return formatOffset2({ format: "short", allowZ: this.opts.allowZ });
          case "ZZZ":
            return formatOffset2({ format: "techie", allowZ: this.opts.allowZ });
          case "ZZZZ":
            return dt.zone.offsetName(dt.ts, { format: "short", locale: this.loc.locale });
          case "ZZZZZ":
            return dt.zone.offsetName(dt.ts, { format: "long", locale: this.loc.locale });
          case "z":
            return dt.zoneName;
          case "a":
            return meridiem();
          case "d":
            return useDateTimeFormatter ? string3({ day: "numeric" }, "day") : this.num(dt.day);
          case "dd":
            return useDateTimeFormatter ? string3({ day: "2-digit" }, "day") : this.num(dt.day, 2);
          case "c":
            return this.num(dt.weekday);
          case "ccc":
            return weekday("short", true);
          case "cccc":
            return weekday("long", true);
          case "ccccc":
            return weekday("narrow", true);
          case "E":
            return this.num(dt.weekday);
          case "EEE":
            return weekday("short", false);
          case "EEEE":
            return weekday("long", false);
          case "EEEEE":
            return weekday("narrow", false);
          case "L":
            return useDateTimeFormatter ? string3({ month: "numeric", day: "numeric" }, "month") : this.num(dt.month);
          case "LL":
            return useDateTimeFormatter ? string3({ month: "2-digit", day: "numeric" }, "month") : this.num(dt.month, 2);
          case "LLL":
            return month("short", true);
          case "LLLL":
            return month("long", true);
          case "LLLLL":
            return month("narrow", true);
          case "M":
            return useDateTimeFormatter ? string3({ month: "numeric" }, "month") : this.num(dt.month);
          case "MM":
            return useDateTimeFormatter ? string3({ month: "2-digit" }, "month") : this.num(dt.month, 2);
          case "MMM":
            return month("short", false);
          case "MMMM":
            return month("long", false);
          case "MMMMM":
            return month("narrow", false);
          case "y":
            return useDateTimeFormatter ? string3({ year: "numeric" }, "year") : this.num(dt.year);
          case "yy":
            return useDateTimeFormatter ? string3({ year: "2-digit" }, "year") : this.num(dt.year.toString().slice(-2), 2);
          case "yyyy":
            return useDateTimeFormatter ? string3({ year: "numeric" }, "year") : this.num(dt.year, 4);
          case "yyyyyy":
            return useDateTimeFormatter ? string3({ year: "numeric" }, "year") : this.num(dt.year, 6);
          case "G":
            return era("short");
          case "GG":
            return era("long");
          case "GGGGG":
            return era("narrow");
          case "kk":
            return this.num(dt.weekYear.toString().slice(-2), 2);
          case "kkkk":
            return this.num(dt.weekYear, 4);
          case "W":
            return this.num(dt.weekNumber);
          case "WW":
            return this.num(dt.weekNumber, 2);
          case "o":
            return this.num(dt.ordinal);
          case "ooo":
            return this.num(dt.ordinal, 3);
          case "q":
            return this.num(dt.quarter);
          case "qq":
            return this.num(dt.quarter, 2);
          case "X":
            return this.num(Math.floor(dt.ts / 1e3));
          case "x":
            return this.num(dt.ts);
          default:
            return maybeMacro(token);
        }
      };
      return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
    }
    formatDurationFromString(dur, fmt) {
      const tokenToField = (token) => {
        switch (token[0]) {
          case "S":
            return "millisecond";
          case "s":
            return "second";
          case "m":
            return "minute";
          case "h":
            return "hour";
          case "d":
            return "day";
          case "w":
            return "week";
          case "M":
            return "month";
          case "y":
            return "year";
          default:
            return null;
        }
      }, tokenToString = (lildur) => (token) => {
        const mapped = tokenToField(token);
        if (mapped) {
          return this.num(lildur.get(mapped), token.length);
        } else {
          return token;
        }
      }, tokens2 = Formatter.parseFormat(fmt), realTokens = tokens2.reduce(
        (found, { literal: literal2, val }) => literal2 ? found : found.concat(val),
        []
      ), collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter((t2) => t2));
      return stringifyTokens(tokens2, tokenToString(collapsed));
    }
  };

  // node_modules/luxon/src/impl/invalid.js
  var Invalid = class {
    constructor(reason, explanation) {
      this.reason = reason;
      this.explanation = explanation;
    }
    toMessage() {
      if (this.explanation) {
        return `${this.reason}: ${this.explanation}`;
      } else {
        return this.reason;
      }
    }
  };

  // node_modules/luxon/src/impl/regexParser.js
  var ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
  function combineRegexes(...regexes) {
    const full = regexes.reduce((f, r2) => f + r2.source, "");
    return RegExp(`^${full}$`);
  }
  function combineExtractors(...extractors) {
    return (m) => extractors.reduce(
      ([mergedVals, mergedZone, cursor], ex) => {
        const [val, zone, next2] = ex(m, cursor);
        return [{ ...mergedVals, ...val }, zone || mergedZone, next2];
      },
      [{}, null, 1]
    ).slice(0, 2);
  }
  function parse(s2, ...patterns2) {
    if (s2 == null) {
      return [null, null];
    }
    for (const [regex, extractor] of patterns2) {
      const m = regex.exec(s2);
      if (m) {
        return extractor(m);
      }
    }
    return [null, null];
  }
  function simpleParse(...keys) {
    return (match3, cursor) => {
      const ret4 = {};
      let i;
      for (i = 0; i < keys.length; i++) {
        ret4[keys[i]] = parseInteger(match3[cursor + i]);
      }
      return [ret4, null, cursor + i];
    };
  }
  var offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
  var isoExtendedZone = `(?:${offsetRegex.source}?(?:\\[(${ianaRegex.source})\\])?)?`;
  var isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
  var isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${isoExtendedZone}`);
  var isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`);
  var isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
  var isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
  var isoOrdinalRegex = /(\d{4})-?(\d{3})/;
  var extractISOWeekData = simpleParse("weekYear", "weekNumber", "weekDay");
  var extractISOOrdinalData = simpleParse("year", "ordinal");
  var sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/;
  var sqlTimeRegex = RegExp(
    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`
  );
  var sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);
  function int(match3, pos, fallback2) {
    const m = match3[pos];
    return isUndefined(m) ? fallback2 : parseInteger(m);
  }
  function extractISOYmd(match3, cursor) {
    const item = {
      year: int(match3, cursor),
      month: int(match3, cursor + 1, 1),
      day: int(match3, cursor + 2, 1)
    };
    return [item, null, cursor + 3];
  }
  function extractISOTime(match3, cursor) {
    const item = {
      hours: int(match3, cursor, 0),
      minutes: int(match3, cursor + 1, 0),
      seconds: int(match3, cursor + 2, 0),
      milliseconds: parseMillis(match3[cursor + 3])
    };
    return [item, null, cursor + 4];
  }
  function extractISOOffset(match3, cursor) {
    const local = !match3[cursor] && !match3[cursor + 1], fullOffset = signedOffset(match3[cursor + 1], match3[cursor + 2]), zone = local ? null : FixedOffsetZone.instance(fullOffset);
    return [{}, zone, cursor + 3];
  }
  function extractIANAZone(match3, cursor) {
    const zone = match3[cursor] ? IANAZone.create(match3[cursor]) : null;
    return [{}, zone, cursor + 1];
  }
  var isoTimeOnly = RegExp(`^T?${isoTimeBaseRegex.source}$`);
  var isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
  function extractISODuration(match3) {
    const [s2, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match3;
    const hasNegativePrefix = s2[0] === "-";
    const negativeSeconds = secondStr && secondStr[0] === "-";
    const maybeNegate = (num, force = false) => num !== void 0 && (force || num && hasNegativePrefix) ? -num : num;
    return [
      {
        years: maybeNegate(parseFloating(yearStr)),
        months: maybeNegate(parseFloating(monthStr)),
        weeks: maybeNegate(parseFloating(weekStr)),
        days: maybeNegate(parseFloating(dayStr)),
        hours: maybeNegate(parseFloating(hourStr)),
        minutes: maybeNegate(parseFloating(minuteStr)),
        seconds: maybeNegate(parseFloating(secondStr), secondStr === "-0"),
        milliseconds: maybeNegate(parseMillis(millisecondsStr), negativeSeconds)
      }
    ];
  }
  var obsOffsets = {
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };
  function fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    const result = {
      year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),
      month: monthsShort.indexOf(monthStr) + 1,
      day: parseInteger(dayStr),
      hour: parseInteger(hourStr),
      minute: parseInteger(minuteStr)
    };
    if (secondStr)
      result.second = parseInteger(secondStr);
    if (weekdayStr) {
      result.weekday = weekdayStr.length > 3 ? weekdaysLong.indexOf(weekdayStr) + 1 : weekdaysShort.indexOf(weekdayStr) + 1;
    }
    return result;
  }
  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
  function extractRFC2822(match3) {
    const [
      ,
      weekdayStr,
      dayStr,
      monthStr,
      yearStr,
      hourStr,
      minuteStr,
      secondStr,
      obsOffset,
      milOffset,
      offHourStr,
      offMinuteStr
    ] = match3, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    let offset2;
    if (obsOffset) {
      offset2 = obsOffsets[obsOffset];
    } else if (milOffset) {
      offset2 = 0;
    } else {
      offset2 = signedOffset(offHourStr, offMinuteStr);
    }
    return [result, new FixedOffsetZone(offset2)];
  }
  function preprocessRFC2822(s2) {
    return s2.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
  }
  var rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/;
  var rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/;
  var ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
  function extractRFC1123Or850(match3) {
    const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match3, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }
  function extractASCII(match3) {
    const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match3, result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [result, FixedOffsetZone.utcInstance];
  }
  var isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);
  var isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);
  var isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);
  var isoTimeCombinedRegex = combineRegexes(isoTimeRegex);
  var extractISOYmdTimeAndOffset = combineExtractors(
    extractISOYmd,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  var extractISOWeekTimeAndOffset = combineExtractors(
    extractISOWeekData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  var extractISOOrdinalDateAndTime = combineExtractors(
    extractISOOrdinalData,
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  var extractISOTimeAndOffset = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  function parseISODate(s2) {
    return parse(
      s2,
      [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],
      [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDateAndTime],
      [isoTimeCombinedRegex, extractISOTimeAndOffset]
    );
  }
  function parseRFC2822Date(s2) {
    return parse(preprocessRFC2822(s2), [rfc2822, extractRFC2822]);
  }
  function parseHTTPDate(s2) {
    return parse(
      s2,
      [rfc1123, extractRFC1123Or850],
      [rfc850, extractRFC1123Or850],
      [ascii, extractASCII]
    );
  }
  function parseISODuration(s2) {
    return parse(s2, [isoDuration, extractISODuration]);
  }
  var extractISOTimeOnly = combineExtractors(extractISOTime);
  function parseISOTimeOnly(s2) {
    return parse(s2, [isoTimeOnly, extractISOTimeOnly]);
  }
  var sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);
  var sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);
  var extractISOTimeOffsetAndIANAZone = combineExtractors(
    extractISOTime,
    extractISOOffset,
    extractIANAZone
  );
  function parseSQL(s2) {
    return parse(
      s2,
      [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],
      [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]
    );
  }

  // node_modules/luxon/src/duration.js
  var INVALID = "Invalid Duration";
  var lowOrderMatrix = {
    weeks: {
      days: 7,
      hours: 7 * 24,
      minutes: 7 * 24 * 60,
      seconds: 7 * 24 * 60 * 60,
      milliseconds: 7 * 24 * 60 * 60 * 1e3
    },
    days: {
      hours: 24,
      minutes: 24 * 60,
      seconds: 24 * 60 * 60,
      milliseconds: 24 * 60 * 60 * 1e3
    },
    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1e3 },
    minutes: { seconds: 60, milliseconds: 60 * 1e3 },
    seconds: { milliseconds: 1e3 }
  };
  var casualMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: 52,
      days: 365,
      hours: 365 * 24,
      minutes: 365 * 24 * 60,
      seconds: 365 * 24 * 60 * 60,
      milliseconds: 365 * 24 * 60 * 60 * 1e3
    },
    quarters: {
      months: 3,
      weeks: 13,
      days: 91,
      hours: 91 * 24,
      minutes: 91 * 24 * 60,
      seconds: 91 * 24 * 60 * 60,
      milliseconds: 91 * 24 * 60 * 60 * 1e3
    },
    months: {
      weeks: 4,
      days: 30,
      hours: 30 * 24,
      minutes: 30 * 24 * 60,
      seconds: 30 * 24 * 60 * 60,
      milliseconds: 30 * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix
  };
  var daysInYearAccurate = 146097 / 400;
  var daysInMonthAccurate = 146097 / 4800;
  var accurateMatrix = {
    years: {
      quarters: 4,
      months: 12,
      weeks: daysInYearAccurate / 7,
      days: daysInYearAccurate,
      hours: daysInYearAccurate * 24,
      minutes: daysInYearAccurate * 24 * 60,
      seconds: daysInYearAccurate * 24 * 60 * 60,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3
    },
    quarters: {
      months: 3,
      weeks: daysInYearAccurate / 28,
      days: daysInYearAccurate / 4,
      hours: daysInYearAccurate * 24 / 4,
      minutes: daysInYearAccurate * 24 * 60 / 4,
      seconds: daysInYearAccurate * 24 * 60 * 60 / 4,
      milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1e3 / 4
    },
    months: {
      weeks: daysInMonthAccurate / 7,
      days: daysInMonthAccurate,
      hours: daysInMonthAccurate * 24,
      minutes: daysInMonthAccurate * 24 * 60,
      seconds: daysInMonthAccurate * 24 * 60 * 60,
      milliseconds: daysInMonthAccurate * 24 * 60 * 60 * 1e3
    },
    ...lowOrderMatrix
  };
  var orderedUnits = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
  ];
  var reverseUnits = orderedUnits.slice(0).reverse();
  function clone(dur, alts, clear = false) {
    const conf = {
      values: clear ? alts.values : { ...dur.values, ...alts.values || {} },
      loc: dur.loc.clone(alts.loc),
      conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
      matrix: alts.matrix || dur.matrix
    };
    return new Duration(conf);
  }
  function antiTrunc(n2) {
    return n2 < 0 ? Math.floor(n2) : Math.ceil(n2);
  }
  function convert(matrix, fromMap, fromUnit, toMap, toUnit) {
    const conv = matrix[toUnit][fromUnit], raw = fromMap[fromUnit] / conv, sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]), added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);
    toMap[toUnit] += added;
    fromMap[fromUnit] -= added * conv;
  }
  function normalizeValues(matrix, vals) {
    reverseUnits.reduce((previous, current) => {
      if (!isUndefined(vals[current])) {
        if (previous) {
          convert(matrix, vals, previous, vals, current);
        }
        return current;
      } else {
        return previous;
      }
    }, null);
  }
  function removeZeroes(vals) {
    const newVals = {};
    for (const [key, value] of Object.entries(vals)) {
      if (value !== 0) {
        newVals[key] = value;
      }
    }
    return newVals;
  }
  var Duration = class {
    /**
     * @private
     */
    constructor(config) {
      const accurate = config.conversionAccuracy === "longterm" || false;
      let matrix = accurate ? accurateMatrix : casualMatrix;
      if (config.matrix) {
        matrix = config.matrix;
      }
      this.values = config.values;
      this.loc = config.loc || Locale.create();
      this.conversionAccuracy = accurate ? "longterm" : "casual";
      this.invalid = config.invalid || null;
      this.matrix = matrix;
      this.isLuxonDuration = true;
    }
    /**
     * Create Duration from a number of milliseconds.
     * @param {number} count of milliseconds
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    static fromMillis(count, opts) {
      return Duration.fromObject({ milliseconds: count }, opts);
    }
    /**
     * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
     * If this object is empty then a zero milliseconds duration is returned.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.years
     * @param {number} obj.quarters
     * @param {number} obj.months
     * @param {number} obj.weeks
     * @param {number} obj.days
     * @param {number} obj.hours
     * @param {number} obj.minutes
     * @param {number} obj.seconds
     * @param {number} obj.milliseconds
     * @param {Object} [opts=[]] - options for creating this Duration
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the custom conversion system to use
     * @return {Duration}
     */
    static fromObject(obj, opts = {}) {
      if (obj == null || typeof obj !== "object") {
        throw new InvalidArgumentError(
          `Duration.fromObject: argument expected to be an object, got ${obj === null ? "null" : typeof obj}`
        );
      }
      return new Duration({
        values: normalizeObject(obj, Duration.normalizeUnit),
        loc: Locale.fromObject(opts),
        conversionAccuracy: opts.conversionAccuracy,
        matrix: opts.matrix
      });
    }
    /**
     * Create a Duration from DurationLike.
     *
     * @param {Object | number | Duration} durationLike
     * One of:
     * - object with keys like 'years' and 'hours'.
     * - number representing milliseconds
     * - Duration instance
     * @return {Duration}
     */
    static fromDurationLike(durationLike) {
      if (isNumber(durationLike)) {
        return Duration.fromMillis(durationLike);
      } else if (Duration.isDuration(durationLike)) {
        return durationLike;
      } else if (typeof durationLike === "object") {
        return Duration.fromObject(durationLike);
      } else {
        throw new InvalidArgumentError(
          `Unknown duration argument ${durationLike} of type ${typeof durationLike}`
        );
      }
    }
    /**
     * Create a Duration from an ISO 8601 duration string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the preset conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
     * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
     * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
     * @return {Duration}
     */
    static fromISO(text, opts) {
      const [parsed] = parseISODuration(text);
      if (parsed) {
        return Duration.fromObject(parsed, opts);
      } else {
        return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }
    /**
     * Create a Duration from an ISO 8601 time string.
     * @param {string} text - text to parse
     * @param {Object} opts - options for parsing
     * @param {string} [opts.locale='en-US'] - the locale to use
     * @param {string} opts.numberingSystem - the numbering system to use
     * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
     * @param {string} [opts.matrix=Object] - the conversion system to use
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
     * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
     * @return {Duration}
     */
    static fromISOTime(text, opts) {
      const [parsed] = parseISOTimeOnly(text);
      if (parsed) {
        return Duration.fromObject(parsed, opts);
      } else {
        return Duration.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
      }
    }
    /**
     * Create an invalid Duration.
     * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Duration}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Duration is invalid");
      }
      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
      if (Settings.throwOnInvalid) {
        throw new InvalidDurationError(invalid);
      } else {
        return new Duration({ invalid });
      }
    }
    /**
     * @private
     */
    static normalizeUnit(unit) {
      const normalized = {
        year: "years",
        years: "years",
        quarter: "quarters",
        quarters: "quarters",
        month: "months",
        months: "months",
        week: "weeks",
        weeks: "weeks",
        day: "days",
        days: "days",
        hour: "hours",
        hours: "hours",
        minute: "minutes",
        minutes: "minutes",
        second: "seconds",
        seconds: "seconds",
        millisecond: "milliseconds",
        milliseconds: "milliseconds"
      }[unit ? unit.toLowerCase() : unit];
      if (!normalized)
        throw new InvalidUnitError(unit);
      return normalized;
    }
    /**
     * Check if an object is a Duration. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDuration(o) {
      return o && o.isLuxonDuration || false;
    }
    /**
     * Get  the locale of a Duration, such 'en-GB'
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
     * * `S` for milliseconds
     * * `s` for seconds
     * * `m` for minutes
     * * `h` for hours
     * * `d` for days
     * * `w` for weeks
     * * `M` for months
     * * `y` for years
     * Notes:
     * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
     * * Tokens can be escaped by wrapping with single quotes.
     * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
     * @param {string} fmt - the format string
     * @param {Object} opts - options
     * @param {boolean} [opts.floor=true] - floor numerical values
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      const fmtOpts = {
        ...opts,
        floor: opts.round !== false && opts.floor !== false
      };
      return this.isValid ? Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : INVALID;
    }
    /**
     * Returns a string representation of a Duration with all units included.
     * To modify its behavior use the `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat
     * @param opts - On option object to override the formatting. Accepts the same keys as the options parameter of the native `Int.NumberFormat` constructor, as well as `listStyle`.
     * @example
     * ```js
     * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
     * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
     * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
     * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
     * ```
     */
    toHuman(opts = {}) {
      const l2 = orderedUnits.map((unit) => {
        const val = this.values[unit];
        if (isUndefined(val)) {
          return null;
        }
        return this.loc.numberFormatter({ style: "unit", unitDisplay: "long", ...opts, unit: unit.slice(0, -1) }).format(val);
      }).filter((n2) => n2);
      return this.loc.listFormatter({ type: "conjunction", style: opts.listStyle || "narrow", ...opts }).format(l2);
    }
    /**
     * Returns a JavaScript object with this Duration's values.
     * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
     * @return {Object}
     */
    toObject() {
      if (!this.isValid)
        return {};
      return { ...this.values };
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Duration.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
     * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
     * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
     * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
     * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
     * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
     * @return {string}
     */
    toISO() {
      if (!this.isValid)
        return null;
      let s2 = "P";
      if (this.years !== 0)
        s2 += this.years + "Y";
      if (this.months !== 0 || this.quarters !== 0)
        s2 += this.months + this.quarters * 3 + "M";
      if (this.weeks !== 0)
        s2 += this.weeks + "W";
      if (this.days !== 0)
        s2 += this.days + "D";
      if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0)
        s2 += "T";
      if (this.hours !== 0)
        s2 += this.hours + "H";
      if (this.minutes !== 0)
        s2 += this.minutes + "M";
      if (this.seconds !== 0 || this.milliseconds !== 0)
        s2 += roundTo(this.seconds + this.milliseconds / 1e3, 3) + "S";
      if (s2 === "P")
        s2 += "T0S";
      return s2;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
     * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Times
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
     * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
     * @return {string}
     */
    toISOTime(opts = {}) {
      if (!this.isValid)
        return null;
      const millis = this.toMillis();
      if (millis < 0 || millis >= 864e5)
        return null;
      opts = {
        suppressMilliseconds: false,
        suppressSeconds: false,
        includePrefix: false,
        format: "extended",
        ...opts
      };
      const value = this.shiftTo("hours", "minutes", "seconds", "milliseconds");
      let fmt = opts.format === "basic" ? "hhmm" : "hh:mm";
      if (!opts.suppressSeconds || value.seconds !== 0 || value.milliseconds !== 0) {
        fmt += opts.format === "basic" ? "ss" : ":ss";
        if (!opts.suppressMilliseconds || value.milliseconds !== 0) {
          fmt += ".SSS";
        }
      }
      let str = value.toFormat(fmt);
      if (opts.includePrefix) {
        str = "T" + str;
      }
      return str;
    }
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }
    /**
     * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
     * @return {string}
     */
    toString() {
      return this.toISO();
    }
    /**
     * Returns an milliseconds value of this Duration.
     * @return {number}
     */
    toMillis() {
      return this.as("milliseconds");
    }
    /**
     * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }
    /**
     * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    plus(duration) {
      if (!this.isValid)
        return this;
      const dur = Duration.fromDurationLike(duration), result = {};
      for (const k of orderedUnits) {
        if (hasOwnProperty(dur.values, k) || hasOwnProperty(this.values, k)) {
          result[k] = dur.get(k) + this.get(k);
        }
      }
      return clone(this, { values: result }, true);
    }
    /**
     * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @return {Duration}
     */
    minus(duration) {
      if (!this.isValid)
        return this;
      const dur = Duration.fromDurationLike(duration);
      return this.plus(dur.negate());
    }
    /**
     * Scale this Duration by the specified amount. Return a newly-constructed Duration.
     * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
     * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
     * @return {Duration}
     */
    mapUnits(fn2) {
      if (!this.isValid)
        return this;
      const result = {};
      for (const k of Object.keys(this.values)) {
        result[k] = asNumber(fn2(this.values[k], k));
      }
      return clone(this, { values: result }, true);
    }
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
     * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
     * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
     * @return {number}
     */
    get(unit) {
      return this[Duration.normalizeUnit(unit)];
    }
    /**
     * "Set" the values of specified units. Return a newly-constructed Duration.
     * @param {Object} values - a mapping of units to numbers
     * @example dur.set({ years: 2017 })
     * @example dur.set({ hours: 8, minutes: 30 })
     * @return {Duration}
     */
    set(values2) {
      if (!this.isValid)
        return this;
      const mixed = { ...this.values, ...normalizeObject(values2, Duration.normalizeUnit) };
      return clone(this, { values: mixed });
    }
    /**
     * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
     * @example dur.reconfigure({ locale: 'en-GB' })
     * @return {Duration}
     */
    reconfigure({ locale, numberingSystem, conversionAccuracy, matrix } = {}) {
      const loc = this.loc.clone({ locale, numberingSystem });
      const opts = { loc, matrix, conversionAccuracy };
      return clone(this, opts);
    }
    /**
     * Return the length of the duration in the specified unit.
     * @param {string} unit - a unit such as 'minutes' or 'days'
     * @example Duration.fromObject({years: 1}).as('days') //=> 365
     * @example Duration.fromObject({years: 1}).as('months') //=> 12
     * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
     * @return {number}
     */
    as(unit) {
      return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    }
    /**
     * Reduce this Duration to its canonical representation in its current units.
     * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
     * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
     * @return {Duration}
     */
    normalize() {
      if (!this.isValid)
        return this;
      const vals = this.toObject();
      normalizeValues(this.matrix, vals);
      return clone(this, { values: vals }, true);
    }
    /**
     * Rescale units to its largest representation
     * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
     * @return {Duration}
     */
    rescale() {
      if (!this.isValid)
        return this;
      const vals = removeZeroes(this.normalize().shiftToAll().toObject());
      return clone(this, { values: vals }, true);
    }
    /**
     * Convert this Duration into its representation in a different set of units.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
     * @return {Duration}
     */
    shiftTo(...units) {
      if (!this.isValid)
        return this;
      if (units.length === 0) {
        return this;
      }
      units = units.map((u2) => Duration.normalizeUnit(u2));
      const built = {}, accumulated = {}, vals = this.toObject();
      let lastUnit;
      for (const k of orderedUnits) {
        if (units.indexOf(k) >= 0) {
          lastUnit = k;
          let own = 0;
          for (const ak in accumulated) {
            own += this.matrix[ak][k] * accumulated[ak];
            accumulated[ak] = 0;
          }
          if (isNumber(vals[k])) {
            own += vals[k];
          }
          const i = Math.trunc(own);
          built[k] = i;
          accumulated[k] = (own * 1e3 - i * 1e3) / 1e3;
          for (const down in vals) {
            if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {
              convert(this.matrix, vals, down, built, k);
            }
          }
        } else if (isNumber(vals[k])) {
          accumulated[k] = vals[k];
        }
      }
      for (const key in accumulated) {
        if (accumulated[key] !== 0) {
          built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
        }
      }
      return clone(this, { values: built }, true).normalize();
    }
    /**
     * Shift this Duration to all available units.
     * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
     * @return {Duration}
     */
    shiftToAll() {
      if (!this.isValid)
        return this;
      return this.shiftTo(
        "years",
        "months",
        "weeks",
        "days",
        "hours",
        "minutes",
        "seconds",
        "milliseconds"
      );
    }
    /**
     * Return the negative of this Duration.
     * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
     * @return {Duration}
     */
    negate() {
      if (!this.isValid)
        return this;
      const negated = {};
      for (const k of Object.keys(this.values)) {
        negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
      }
      return clone(this, { values: negated }, true);
    }
    /**
     * Get the years.
     * @type {number}
     */
    get years() {
      return this.isValid ? this.values.years || 0 : NaN;
    }
    /**
     * Get the quarters.
     * @type {number}
     */
    get quarters() {
      return this.isValid ? this.values.quarters || 0 : NaN;
    }
    /**
     * Get the months.
     * @type {number}
     */
    get months() {
      return this.isValid ? this.values.months || 0 : NaN;
    }
    /**
     * Get the weeks
     * @type {number}
     */
    get weeks() {
      return this.isValid ? this.values.weeks || 0 : NaN;
    }
    /**
     * Get the days.
     * @type {number}
     */
    get days() {
      return this.isValid ? this.values.days || 0 : NaN;
    }
    /**
     * Get the hours.
     * @type {number}
     */
    get hours() {
      return this.isValid ? this.values.hours || 0 : NaN;
    }
    /**
     * Get the minutes.
     * @type {number}
     */
    get minutes() {
      return this.isValid ? this.values.minutes || 0 : NaN;
    }
    /**
     * Get the seconds.
     * @return {number}
     */
    get seconds() {
      return this.isValid ? this.values.seconds || 0 : NaN;
    }
    /**
     * Get the milliseconds.
     * @return {number}
     */
    get milliseconds() {
      return this.isValid ? this.values.milliseconds || 0 : NaN;
    }
    /**
     * Returns whether the Duration is invalid. Invalid durations are returned by diff operations
     * on invalid DateTimes or Intervals.
     * @return {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this Duration became invalid, or null if the Duration is valid
     * @return {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Duration became invalid, or null if the Duration is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Equality check
     * Two Durations are equal iff they have the same units and the same values for each unit.
     * @param {Duration} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }
      if (!this.loc.equals(other.loc)) {
        return false;
      }
      function eq(v1, v2) {
        if (v1 === void 0 || v1 === 0)
          return v2 === void 0 || v2 === 0;
        return v1 === v2;
      }
      for (const u2 of orderedUnits) {
        if (!eq(this.values[u2], other.values[u2])) {
          return false;
        }
      }
      return true;
    }
  };

  // node_modules/luxon/src/interval.js
  var INVALID2 = "Invalid Interval";
  function validateStartEnd(start2, end2) {
    if (!start2 || !start2.isValid) {
      return Interval.invalid("missing or invalid start");
    } else if (!end2 || !end2.isValid) {
      return Interval.invalid("missing or invalid end");
    } else if (end2 < start2) {
      return Interval.invalid(
        "end before start",
        `The end of an interval must be after its start, but you had start=${start2.toISO()} and end=${end2.toISO()}`
      );
    } else {
      return null;
    }
  }
  var Interval = class {
    /**
     * @private
     */
    constructor(config) {
      this.s = config.start;
      this.e = config.end;
      this.invalid = config.invalid || null;
      this.isLuxonInterval = true;
    }
    /**
     * Create an invalid Interval.
     * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {Interval}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the Interval is invalid");
      }
      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
      if (Settings.throwOnInvalid) {
        throw new InvalidIntervalError(invalid);
      } else {
        return new Interval({ invalid });
      }
    }
    /**
     * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
     * @param {DateTime|Date|Object} start
     * @param {DateTime|Date|Object} end
     * @return {Interval}
     */
    static fromDateTimes(start2, end2) {
      const builtStart = friendlyDateTime(start2), builtEnd = friendlyDateTime(end2);
      const validateError = validateStartEnd(builtStart, builtEnd);
      if (validateError == null) {
        return new Interval({
          start: builtStart,
          end: builtEnd
        });
      } else {
        return validateError;
      }
    }
    /**
     * Create an Interval from a start DateTime and a Duration to extend to.
     * @param {DateTime|Date|Object} start
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static after(start2, duration) {
      const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(start2);
      return Interval.fromDateTimes(dt, dt.plus(dur));
    }
    /**
     * Create an Interval from an end DateTime and a Duration to extend backwards to.
     * @param {DateTime|Date|Object} end
     * @param {Duration|Object|number} duration - the length of the Interval.
     * @return {Interval}
     */
    static before(end2, duration) {
      const dur = Duration.fromDurationLike(duration), dt = friendlyDateTime(end2);
      return Interval.fromDateTimes(dt.minus(dur), dt);
    }
    /**
     * Create an Interval from an ISO 8601 string.
     * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
     * @param {string} text - the ISO string to parse
     * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {Interval}
     */
    static fromISO(text, opts) {
      const [s2, e] = (text || "").split("/", 2);
      if (s2 && e) {
        let start2, startIsValid;
        try {
          start2 = DateTime.fromISO(s2, opts);
          startIsValid = start2.isValid;
        } catch (e2) {
          startIsValid = false;
        }
        let end2, endIsValid;
        try {
          end2 = DateTime.fromISO(e, opts);
          endIsValid = end2.isValid;
        } catch (e2) {
          endIsValid = false;
        }
        if (startIsValid && endIsValid) {
          return Interval.fromDateTimes(start2, end2);
        }
        if (startIsValid) {
          const dur = Duration.fromISO(e, opts);
          if (dur.isValid) {
            return Interval.after(start2, dur);
          }
        } else if (endIsValid) {
          const dur = Duration.fromISO(s2, opts);
          if (dur.isValid) {
            return Interval.before(end2, dur);
          }
        }
      }
      return Interval.invalid("unparsable", `the input "${text}" can't be parsed as ISO 8601`);
    }
    /**
     * Check if an object is an Interval. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isInterval(o) {
      return o && o.isLuxonInterval || false;
    }
    /**
     * Returns the start of the Interval
     * @type {DateTime}
     */
    get start() {
      return this.isValid ? this.s : null;
    }
    /**
     * Returns the end of the Interval
     * @type {DateTime}
     */
    get end() {
      return this.isValid ? this.e : null;
    }
    /**
     * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.
     * @type {boolean}
     */
    get isValid() {
      return this.invalidReason === null;
    }
    /**
     * Returns an error code if this Interval is invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this Interval became invalid, or null if the Interval is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Returns the length of the Interval in the specified unit.
     * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
     * @return {number}
     */
    length(unit = "milliseconds") {
      return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;
    }
    /**
     * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
     * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
     * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
     * @param {string} [unit='milliseconds'] - the unit of time to count.
     * @return {number}
     */
    count(unit = "milliseconds") {
      if (!this.isValid)
        return NaN;
      const start2 = this.start.startOf(unit), end2 = this.end.startOf(unit);
      return Math.floor(end2.diff(start2, unit).get(unit)) + (end2.valueOf() !== this.end.valueOf());
    }
    /**
     * Returns whether this Interval's start and end are both in the same unit of time
     * @param {string} unit - the unit of time to check sameness on
     * @return {boolean}
     */
    hasSame(unit) {
      return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    }
    /**
     * Return whether this Interval has the same start and end DateTimes.
     * @return {boolean}
     */
    isEmpty() {
      return this.s.valueOf() === this.e.valueOf();
    }
    /**
     * Return whether this Interval's start is after the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isAfter(dateTime) {
      if (!this.isValid)
        return false;
      return this.s > dateTime;
    }
    /**
     * Return whether this Interval's end is before the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    isBefore(dateTime) {
      if (!this.isValid)
        return false;
      return this.e <= dateTime;
    }
    /**
     * Return whether this Interval contains the specified DateTime.
     * @param {DateTime} dateTime
     * @return {boolean}
     */
    contains(dateTime) {
      if (!this.isValid)
        return false;
      return this.s <= dateTime && this.e > dateTime;
    }
    /**
     * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
     * @param {Object} values - the values to set
     * @param {DateTime} values.start - the starting DateTime
     * @param {DateTime} values.end - the ending DateTime
     * @return {Interval}
     */
    set({ start: start2, end: end2 } = {}) {
      if (!this.isValid)
        return this;
      return Interval.fromDateTimes(start2 || this.s, end2 || this.e);
    }
    /**
     * Split this Interval at each of the specified DateTimes
     * @param {...DateTime} dateTimes - the unit of time to count.
     * @return {Array}
     */
    splitAt(...dateTimes) {
      if (!this.isValid)
        return [];
      const sorted = dateTimes.map(friendlyDateTime).filter((d3) => this.contains(d3)).sort(), results = [];
      let { s: s2 } = this, i = 0;
      while (s2 < this.e) {
        const added = sorted[i] || this.e, next2 = +added > +this.e ? this.e : added;
        results.push(Interval.fromDateTimes(s2, next2));
        s2 = next2;
        i += 1;
      }
      return results;
    }
    /**
     * Split this Interval into smaller Intervals, each of the specified length.
     * Left over time is grouped into a smaller interval
     * @param {Duration|Object|number} duration - The length of each resulting interval.
     * @return {Array}
     */
    splitBy(duration) {
      const dur = Duration.fromDurationLike(duration);
      if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) {
        return [];
      }
      let { s: s2 } = this, idx = 1, next2;
      const results = [];
      while (s2 < this.e) {
        const added = this.start.plus(dur.mapUnits((x) => x * idx));
        next2 = +added > +this.e ? this.e : added;
        results.push(Interval.fromDateTimes(s2, next2));
        s2 = next2;
        idx += 1;
      }
      return results;
    }
    /**
     * Split this Interval into the specified number of smaller intervals.
     * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
     * @return {Array}
     */
    divideEqually(numberOfParts) {
      if (!this.isValid)
        return [];
      return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    }
    /**
     * Return whether this Interval overlaps with the specified Interval
     * @param {Interval} other
     * @return {boolean}
     */
    overlaps(other) {
      return this.e > other.s && this.s < other.e;
    }
    /**
     * Return whether this Interval's end is adjacent to the specified Interval's start.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsStart(other) {
      if (!this.isValid)
        return false;
      return +this.e === +other.s;
    }
    /**
     * Return whether this Interval's start is adjacent to the specified Interval's end.
     * @param {Interval} other
     * @return {boolean}
     */
    abutsEnd(other) {
      if (!this.isValid)
        return false;
      return +other.e === +this.s;
    }
    /**
     * Return whether this Interval engulfs the start and end of the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    engulfs(other) {
      if (!this.isValid)
        return false;
      return this.s <= other.s && this.e >= other.e;
    }
    /**
     * Return whether this Interval has the same start and end as the specified Interval.
     * @param {Interval} other
     * @return {boolean}
     */
    equals(other) {
      if (!this.isValid || !other.isValid) {
        return false;
      }
      return this.s.equals(other.s) && this.e.equals(other.e);
    }
    /**
     * Return an Interval representing the intersection of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
     * Returns null if the intersection is empty, meaning, the intervals don't intersect.
     * @param {Interval} other
     * @return {Interval}
     */
    intersection(other) {
      if (!this.isValid)
        return this;
      const s2 = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
      if (s2 >= e) {
        return null;
      } else {
        return Interval.fromDateTimes(s2, e);
      }
    }
    /**
     * Return an Interval representing the union of this Interval and the specified Interval.
     * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
     * @param {Interval} other
     * @return {Interval}
     */
    union(other) {
      if (!this.isValid)
        return this;
      const s2 = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
      return Interval.fromDateTimes(s2, e);
    }
    /**
     * Merge an array of Intervals into a equivalent minimal set of Intervals.
     * Combines overlapping and adjacent Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static merge(intervals) {
      const [found, final2] = intervals.sort((a2, b) => a2.s - b.s).reduce(
        ([sofar, current], item) => {
          if (!current) {
            return [sofar, item];
          } else if (current.overlaps(item) || current.abutsStart(item)) {
            return [sofar, current.union(item)];
          } else {
            return [sofar.concat([current]), item];
          }
        },
        [[], null]
      );
      if (final2) {
        found.push(final2);
      }
      return found;
    }
    /**
     * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
     * @param {Array} intervals
     * @return {Array}
     */
    static xor(intervals) {
      let start2 = null, currentCount = 0;
      const results = [], ends = intervals.map((i) => [
        { time: i.s, type: "s" },
        { time: i.e, type: "e" }
      ]), flattened = Array.prototype.concat(...ends), arr = flattened.sort((a2, b) => a2.time - b.time);
      for (const i of arr) {
        currentCount += i.type === "s" ? 1 : -1;
        if (currentCount === 1) {
          start2 = i.time;
        } else {
          if (start2 && +start2 !== +i.time) {
            results.push(Interval.fromDateTimes(start2, i.time));
          }
          start2 = null;
        }
      }
      return Interval.merge(results);
    }
    /**
     * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
     * @param {...Interval} intervals
     * @return {Array}
     */
    difference(...intervals) {
      return Interval.xor([this].concat(intervals)).map((i) => this.intersection(i)).filter((i) => i && !i.isEmpty());
    }
    /**
     * Returns a string representation of this Interval appropriate for debugging.
     * @return {string}
     */
    toString() {
      if (!this.isValid)
        return INVALID2;
      return `[${this.s.toISO()} \u2013 ${this.e.toISO()})`;
    }
    /**
     * Returns a localized string representing this Interval. Accepts the same options as the
     * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
     * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
     * is browser-specific, but in general it will return an appropriate representation of the
     * Interval in the assigned locale. Defaults to the system's locale if no locale has been
     * specified.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
     * Intl.DateTimeFormat constructor options.
     * @param {Object} opts - Options to override the configuration of the start DateTime.
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
     * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
     * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid ? Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : INVALID2;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this Interval.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISO(opts) {
      if (!this.isValid)
        return INVALID2;
      return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;
    }
    /**
     * Returns an ISO 8601-compliant string representation of date of this Interval.
     * The time components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @return {string}
     */
    toISODate() {
      if (!this.isValid)
        return INVALID2;
      return `${this.s.toISODate()}/${this.e.toISODate()}`;
    }
    /**
     * Returns an ISO 8601-compliant string representation of time of this Interval.
     * The date components are ignored.
     * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
     * @param {Object} opts - The same options as {@link DateTime#toISO}
     * @return {string}
     */
    toISOTime(opts) {
      if (!this.isValid)
        return INVALID2;
      return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;
    }
    /**
     * Returns a string representation of this Interval formatted according to the specified format
     * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
     * formatting tool.
     * @param {string} dateFormat - The format string. This string formats the start and end time.
     * See {@link DateTime#toFormat} for details.
     * @param {Object} opts - Options.
     * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
     * representations.
     * @return {string}
     */
    toFormat(dateFormat, { separator: separator2 = " \u2013 " } = {}) {
      if (!this.isValid)
        return INVALID2;
      return `${this.s.toFormat(dateFormat)}${separator2}${this.e.toFormat(dateFormat)}`;
    }
    /**
     * Return a Duration representing the time spanned by this interval.
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
     * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
     * @return {Duration}
     */
    toDuration(unit, opts) {
      if (!this.isValid) {
        return Duration.invalid(this.invalidReason);
      }
      return this.e.diff(this.s, unit, opts);
    }
    /**
     * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
     * @param {function} mapFn
     * @return {Interval}
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
     * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
     */
    mapEndpoints(mapFn) {
      return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
    }
  };

  // node_modules/luxon/src/info.js
  var Info = class {
    /**
     * Return whether the specified zone contains a DST.
     * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
     * @return {boolean}
     */
    static hasDST(zone = Settings.defaultZone) {
      const proto = DateTime.now().setZone(zone).set({ month: 12 });
      return !zone.isUniversal && proto.offset !== proto.set({ month: 6 }).offset;
    }
    /**
     * Return whether the specified zone is a valid IANA specifier.
     * @param {string} zone - Zone to check
     * @return {boolean}
     */
    static isValidIANAZone(zone) {
      return IANAZone.isValidZone(zone);
    }
    /**
     * Converts the input into a {@link Zone} instance.
     *
     * * If `input` is already a Zone instance, it is returned unchanged.
     * * If `input` is a string containing a valid time zone name, a Zone instance
     *   with that name is returned.
     * * If `input` is a string that doesn't refer to a known time zone, a Zone
     *   instance with {@link Zone#isValid} == false is returned.
     * * If `input is a number, a Zone instance with the specified fixed offset
     *   in minutes is returned.
     * * If `input` is `null` or `undefined`, the default zone is returned.
     * @param {string|Zone|number} [input] - the value to be converted
     * @return {Zone}
     */
    static normalizeZone(input) {
      return normalizeZone(input, Settings.defaultZone);
    }
    /**
     * Return an array of standalone month names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @example Info.months()[0] //=> 'January'
     * @example Info.months('short')[0] //=> 'Jan'
     * @example Info.months('numeric')[0] //=> '1'
     * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
     * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
     * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
     * @return {Array}
     */
    static months(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
      return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length);
    }
    /**
     * Return an array of format month names.
     * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
     * changes the string.
     * See {@link Info#months}
     * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @param {string} [opts.outputCalendar='gregory'] - the calendar
     * @return {Array}
     */
    static monthsFormat(length = "long", { locale = null, numberingSystem = null, locObj = null, outputCalendar = "gregory" } = {}) {
      return (locObj || Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
    }
    /**
     * Return an array of standalone week names.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @example Info.weekdays()[0] //=> 'Monday'
     * @example Info.weekdays('short')[0] //=> 'Mon'
     * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
     * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
     * @return {Array}
     */
    static weekdays(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length);
    }
    /**
     * Return an array of format week names.
     * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
     * changes the string.
     * See {@link Info#weekdays}
     * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale=null] - the locale code
     * @param {string} [opts.numberingSystem=null] - the numbering system
     * @param {string} [opts.locObj=null] - an existing locale object to use
     * @return {Array}
     */
    static weekdaysFormat(length = "long", { locale = null, numberingSystem = null, locObj = null } = {}) {
      return (locObj || Locale.create(locale, numberingSystem, null)).weekdays(length, true);
    }
    /**
     * Return an array of meridiems.
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.meridiems() //=> [ 'AM', 'PM' ]
     * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
     * @return {Array}
     */
    static meridiems({ locale = null } = {}) {
      return Locale.create(locale).meridiems();
    }
    /**
     * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
     * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
     * @param {Object} opts - options
     * @param {string} [opts.locale] - the locale code
     * @example Info.eras() //=> [ 'BC', 'AD' ]
     * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
     * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
     * @return {Array}
     */
    static eras(length = "short", { locale = null } = {}) {
      return Locale.create(locale, null, "gregory").eras(length);
    }
    /**
     * Return the set of available features in this environment.
     * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
     * Keys:
     * * `relative`: whether this environment supports relative time formatting
     * @example Info.features() //=> { relative: false }
     * @return {Object}
     */
    static features() {
      return { relative: hasRelative() };
    }
  };

  // node_modules/luxon/src/impl/diff.js
  function dayDiff(earlier, later) {
    const utcDayStart = (dt) => dt.toUTC(0, { keepLocalTime: true }).startOf("day").valueOf(), ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor(Duration.fromMillis(ms).as("days"));
  }
  function highOrderDiffs(cursor, later, units) {
    const differs = [
      ["years", (a2, b) => b.year - a2.year],
      ["quarters", (a2, b) => b.quarter - a2.quarter + (b.year - a2.year) * 4],
      ["months", (a2, b) => b.month - a2.month + (b.year - a2.year) * 12],
      [
        "weeks",
        (a2, b) => {
          const days = dayDiff(a2, b);
          return (days - days % 7) / 7;
        }
      ],
      ["days", dayDiff]
    ];
    const results = {};
    const earlier = cursor;
    let lowestOrder, highWater;
    for (const [unit, differ] of differs) {
      if (units.indexOf(unit) >= 0) {
        lowestOrder = unit;
        results[unit] = differ(cursor, later);
        highWater = earlier.plus(results);
        if (highWater > later) {
          results[unit]--;
          cursor = earlier.plus(results);
        } else {
          cursor = highWater;
        }
      }
    }
    return [cursor, results, highWater, lowestOrder];
  }
  function diff_default(earlier, later, units, opts) {
    let [cursor, results, highWater, lowestOrder] = highOrderDiffs(earlier, later, units);
    const remainingMillis = later - cursor;
    const lowerOrderUnits = units.filter(
      (u2) => ["hours", "minutes", "seconds", "milliseconds"].indexOf(u2) >= 0
    );
    if (lowerOrderUnits.length === 0) {
      if (highWater < later) {
        highWater = cursor.plus({ [lowestOrder]: 1 });
      }
      if (highWater !== cursor) {
        results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
      }
    }
    const duration = Duration.fromObject(results, opts);
    if (lowerOrderUnits.length > 0) {
      return Duration.fromMillis(remainingMillis, opts).shiftTo(...lowerOrderUnits).plus(duration);
    } else {
      return duration;
    }
  }

  // node_modules/luxon/src/impl/digits.js
  var numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d"
  };
  var numberingSystemsUTF16 = {
    arab: [1632, 1641],
    arabext: [1776, 1785],
    bali: [6992, 7001],
    beng: [2534, 2543],
    deva: [2406, 2415],
    fullwide: [65296, 65303],
    gujr: [2790, 2799],
    khmr: [6112, 6121],
    knda: [3302, 3311],
    laoo: [3792, 3801],
    limb: [6470, 6479],
    mlym: [3430, 3439],
    mong: [6160, 6169],
    mymr: [4160, 4169],
    orya: [2918, 2927],
    tamldec: [3046, 3055],
    telu: [3174, 3183],
    thai: [3664, 3673],
    tibt: [3872, 3881]
  };
  var hanidecChars = numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
  function parseDigits(str) {
    let value = parseInt(str, 10);
    if (isNaN(value)) {
      value = "";
      for (let i = 0; i < str.length; i++) {
        const code = str.charCodeAt(i);
        if (str[i].search(numberingSystems.hanidec) !== -1) {
          value += hanidecChars.indexOf(str[i]);
        } else {
          for (const key in numberingSystemsUTF16) {
            const [min, max] = numberingSystemsUTF16[key];
            if (code >= min && code <= max) {
              value += code - min;
            }
          }
        }
      }
      return parseInt(value, 10);
    } else {
      return value;
    }
  }
  function digitRegex({ numberingSystem }, append = "") {
    return new RegExp(`${numberingSystems[numberingSystem || "latn"]}${append}`);
  }

  // node_modules/luxon/src/impl/tokenParser.js
  var MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
  function intUnit(regex, post = (i) => i) {
    return { regex, deser: ([s2]) => post(parseDigits(s2)) };
  }
  var NBSP = String.fromCharCode(160);
  var spaceOrNBSP = `[ ${NBSP}]`;
  var spaceOrNBSPRegExp = new RegExp(spaceOrNBSP, "g");
  function fixListRegex(s2) {
    return s2.replace(/\./g, "\\.?").replace(spaceOrNBSPRegExp, spaceOrNBSP);
  }
  function stripInsensitivities(s2) {
    return s2.replace(/\./g, "").replace(spaceOrNBSPRegExp, " ").toLowerCase();
  }
  function oneOf(strings2, startIndex) {
    if (strings2 === null) {
      return null;
    } else {
      return {
        regex: RegExp(strings2.map(fixListRegex).join("|")),
        deser: ([s2]) => strings2.findIndex((i) => stripInsensitivities(s2) === stripInsensitivities(i)) + startIndex
      };
    }
  }
  function offset(regex, groups) {
    return { regex, deser: ([, h, m]) => signedOffset(h, m), groups };
  }
  function simple(regex) {
    return { regex, deser: ([s2]) => s2 };
  }
  function escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }
  function unitForToken(token, loc) {
    const one = digitRegex(loc), two = digitRegex(loc, "{2}"), three = digitRegex(loc, "{3}"), four = digitRegex(loc, "{4}"), six = digitRegex(loc, "{6}"), oneOrTwo = digitRegex(loc, "{1,2}"), oneToThree = digitRegex(loc, "{1,3}"), oneToSix = digitRegex(loc, "{1,6}"), oneToNine = digitRegex(loc, "{1,9}"), twoToFour = digitRegex(loc, "{2,4}"), fourToSix = digitRegex(loc, "{4,6}"), literal2 = (t2) => ({ regex: RegExp(escapeToken(t2.val)), deser: ([s2]) => s2, literal: true }), unitate = (t2) => {
      if (token.literal) {
        return literal2(t2);
      }
      switch (t2.val) {
        case "G":
          return oneOf(loc.eras("short", false), 0);
        case "GG":
          return oneOf(loc.eras("long", false), 0);
        case "y":
          return intUnit(oneToSix);
        case "yy":
          return intUnit(twoToFour, untruncateYear);
        case "yyyy":
          return intUnit(four);
        case "yyyyy":
          return intUnit(fourToSix);
        case "yyyyyy":
          return intUnit(six);
        case "M":
          return intUnit(oneOrTwo);
        case "MM":
          return intUnit(two);
        case "MMM":
          return oneOf(loc.months("short", true, false), 1);
        case "MMMM":
          return oneOf(loc.months("long", true, false), 1);
        case "L":
          return intUnit(oneOrTwo);
        case "LL":
          return intUnit(two);
        case "LLL":
          return oneOf(loc.months("short", false, false), 1);
        case "LLLL":
          return oneOf(loc.months("long", false, false), 1);
        case "d":
          return intUnit(oneOrTwo);
        case "dd":
          return intUnit(two);
        case "o":
          return intUnit(oneToThree);
        case "ooo":
          return intUnit(three);
        case "HH":
          return intUnit(two);
        case "H":
          return intUnit(oneOrTwo);
        case "hh":
          return intUnit(two);
        case "h":
          return intUnit(oneOrTwo);
        case "mm":
          return intUnit(two);
        case "m":
          return intUnit(oneOrTwo);
        case "q":
          return intUnit(oneOrTwo);
        case "qq":
          return intUnit(two);
        case "s":
          return intUnit(oneOrTwo);
        case "ss":
          return intUnit(two);
        case "S":
          return intUnit(oneToThree);
        case "SSS":
          return intUnit(three);
        case "u":
          return simple(oneToNine);
        case "uu":
          return simple(oneOrTwo);
        case "uuu":
          return intUnit(one);
        case "a":
          return oneOf(loc.meridiems(), 0);
        case "kkkk":
          return intUnit(four);
        case "kk":
          return intUnit(twoToFour, untruncateYear);
        case "W":
          return intUnit(oneOrTwo);
        case "WW":
          return intUnit(two);
        case "E":
        case "c":
          return intUnit(one);
        case "EEE":
          return oneOf(loc.weekdays("short", false, false), 1);
        case "EEEE":
          return oneOf(loc.weekdays("long", false, false), 1);
        case "ccc":
          return oneOf(loc.weekdays("short", true, false), 1);
        case "cccc":
          return oneOf(loc.weekdays("long", true, false), 1);
        case "Z":
        case "ZZ":
          return offset(new RegExp(`([+-]${oneOrTwo.source})(?::(${two.source}))?`), 2);
        case "ZZZ":
          return offset(new RegExp(`([+-]${oneOrTwo.source})(${two.source})?`), 2);
        case "z":
          return simple(/[a-z_+-/]{1,256}?/i);
        case " ":
          return simple(/[^\S\n\r]/);
        default:
          return literal2(t2);
      }
    };
    const unit = unitate(token) || {
      invalidReason: MISSING_FTP
    };
    unit.token = token;
    return unit;
  }
  var partTypeStyleToTokenVal = {
    year: {
      "2-digit": "yy",
      numeric: "yyyyy"
    },
    month: {
      numeric: "M",
      "2-digit": "MM",
      short: "MMM",
      long: "MMMM"
    },
    day: {
      numeric: "d",
      "2-digit": "dd"
    },
    weekday: {
      short: "EEE",
      long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour: {
      numeric: "h",
      "2-digit": "hh"
    },
    minute: {
      numeric: "m",
      "2-digit": "mm"
    },
    second: {
      numeric: "s",
      "2-digit": "ss"
    },
    timeZoneName: {
      long: "ZZZZZ",
      short: "ZZZ"
    }
  };
  function tokenForPart(part, formatOpts) {
    const { type: type7, value } = part;
    if (type7 === "literal") {
      const isSpace4 = /^\s+$/.test(value);
      return {
        literal: !isSpace4,
        val: isSpace4 ? " " : value
      };
    }
    const style2 = formatOpts[type7];
    let val = partTypeStyleToTokenVal[type7];
    if (typeof val === "object") {
      val = val[style2];
    }
    if (val) {
      return {
        literal: false,
        val
      };
    }
    return void 0;
  }
  function buildRegex(units) {
    const re = units.map((u2) => u2.regex).reduce((f, r2) => `${f}(${r2.source})`, "");
    return [`^${re}$`, units];
  }
  function match(input, regex, handlers2) {
    const matches = input.match(regex);
    if (matches) {
      const all = {};
      let matchIndex = 1;
      for (const i in handlers2) {
        if (hasOwnProperty(handlers2, i)) {
          const h = handlers2[i], groups = h.groups ? h.groups + 1 : 1;
          if (!h.literal && h.token) {
            all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
          }
          matchIndex += groups;
        }
      }
      return [matches, all];
    } else {
      return [matches, {}];
    }
  }
  function dateTimeFromMatches(matches) {
    const toField = (token) => {
      switch (token) {
        case "S":
          return "millisecond";
        case "s":
          return "second";
        case "m":
          return "minute";
        case "h":
        case "H":
          return "hour";
        case "d":
          return "day";
        case "o":
          return "ordinal";
        case "L":
        case "M":
          return "month";
        case "y":
          return "year";
        case "E":
        case "c":
          return "weekday";
        case "W":
          return "weekNumber";
        case "k":
          return "weekYear";
        case "q":
          return "quarter";
        default:
          return null;
      }
    };
    let zone = null;
    let specificOffset;
    if (!isUndefined(matches.z)) {
      zone = IANAZone.create(matches.z);
    }
    if (!isUndefined(matches.Z)) {
      if (!zone) {
        zone = new FixedOffsetZone(matches.Z);
      }
      specificOffset = matches.Z;
    }
    if (!isUndefined(matches.q)) {
      matches.M = (matches.q - 1) * 3 + 1;
    }
    if (!isUndefined(matches.h)) {
      if (matches.h < 12 && matches.a === 1) {
        matches.h += 12;
      } else if (matches.h === 12 && matches.a === 0) {
        matches.h = 0;
      }
    }
    if (matches.G === 0 && matches.y) {
      matches.y = -matches.y;
    }
    if (!isUndefined(matches.u)) {
      matches.S = parseMillis(matches.u);
    }
    const vals = Object.keys(matches).reduce((r2, k) => {
      const f = toField(k);
      if (f) {
        r2[f] = matches[k];
      }
      return r2;
    }, {});
    return [vals, zone, specificOffset];
  }
  var dummyDateTimeCache = null;
  function getDummyDateTime() {
    if (!dummyDateTimeCache) {
      dummyDateTimeCache = DateTime.fromMillis(1555555555555);
    }
    return dummyDateTimeCache;
  }
  function maybeExpandMacroToken(token, locale) {
    if (token.literal) {
      return token;
    }
    const formatOpts = Formatter.macroTokenToFormatOpts(token.val);
    const tokens2 = formatOptsToTokens(formatOpts, locale);
    if (tokens2 == null || tokens2.includes(void 0)) {
      return token;
    }
    return tokens2;
  }
  function expandMacroTokens(tokens2, locale) {
    return Array.prototype.concat(...tokens2.map((t2) => maybeExpandMacroToken(t2, locale)));
  }
  function explainFromTokens(locale, input, format) {
    const tokens2 = expandMacroTokens(Formatter.parseFormat(format), locale), units = tokens2.map((t2) => unitForToken(t2, locale)), disqualifyingUnit = units.find((t2) => t2.invalidReason);
    if (disqualifyingUnit) {
      return { input, tokens: tokens2, invalidReason: disqualifyingUnit.invalidReason };
    } else {
      const [regexString, handlers2] = buildRegex(units), regex = RegExp(regexString, "i"), [rawMatches, matches] = match(input, regex, handlers2), [result, zone, specificOffset] = matches ? dateTimeFromMatches(matches) : [null, null, void 0];
      if (hasOwnProperty(matches, "a") && hasOwnProperty(matches, "H")) {
        throw new ConflictingSpecificationError(
          "Can't include meridiem when specifying 24-hour format"
        );
      }
      return { input, tokens: tokens2, regex, rawMatches, matches, result, zone, specificOffset };
    }
  }
  function parseFromTokens(locale, input, format) {
    const { result, zone, specificOffset, invalidReason } = explainFromTokens(locale, input, format);
    return [result, zone, specificOffset, invalidReason];
  }
  function formatOptsToTokens(formatOpts, locale) {
    if (!formatOpts) {
      return null;
    }
    const formatter = Formatter.create(locale, formatOpts);
    const parts = formatter.formatDateTimeParts(getDummyDateTime());
    return parts.map((p) => tokenForPart(p, formatOpts));
  }

  // node_modules/luxon/src/impl/conversions.js
  var nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
  var leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];
  function unitOutOfRange(unit, value) {
    return new Invalid(
      "unit out of range",
      `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`
    );
  }
  function dayOfWeek(year, month, day) {
    const d3 = new Date(Date.UTC(year, month - 1, day));
    if (year < 100 && year >= 0) {
      d3.setUTCFullYear(d3.getUTCFullYear() - 1900);
    }
    const js = d3.getUTCDay();
    return js === 0 ? 7 : js;
  }
  function computeOrdinal(year, month, day) {
    return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];
  }
  function uncomputeOrdinal(year, ordinal) {
    const table = isLeapYear(year) ? leapLadder : nonLeapLadder, month0 = table.findIndex((i) => i < ordinal), day = ordinal - table[month0];
    return { month: month0 + 1, day };
  }
  function gregorianToWeek(gregObj) {
    const { year, month, day } = gregObj, ordinal = computeOrdinal(year, month, day), weekday = dayOfWeek(year, month, day);
    let weekNumber = Math.floor((ordinal - weekday + 10) / 7), weekYear;
    if (weekNumber < 1) {
      weekYear = year - 1;
      weekNumber = weeksInWeekYear(weekYear);
    } else if (weekNumber > weeksInWeekYear(year)) {
      weekYear = year + 1;
      weekNumber = 1;
    } else {
      weekYear = year;
    }
    return { weekYear, weekNumber, weekday, ...timeObject(gregObj) };
  }
  function weekToGregorian(weekData) {
    const { weekYear, weekNumber, weekday } = weekData, weekdayOfJan4 = dayOfWeek(weekYear, 1, 4), yearInDays = daysInYear(weekYear);
    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3, year;
    if (ordinal < 1) {
      year = weekYear - 1;
      ordinal += daysInYear(year);
    } else if (ordinal > yearInDays) {
      year = weekYear + 1;
      ordinal -= daysInYear(weekYear);
    } else {
      year = weekYear;
    }
    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(weekData) };
  }
  function gregorianToOrdinal(gregData) {
    const { year, month, day } = gregData;
    const ordinal = computeOrdinal(year, month, day);
    return { year, ordinal, ...timeObject(gregData) };
  }
  function ordinalToGregorian(ordinalData) {
    const { year, ordinal } = ordinalData;
    const { month, day } = uncomputeOrdinal(year, ordinal);
    return { year, month, day, ...timeObject(ordinalData) };
  }
  function hasInvalidWeekData(obj) {
    const validYear = isInteger(obj.weekYear), validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)), validWeekday = integerBetween(obj.weekday, 1, 7);
    if (!validYear) {
      return unitOutOfRange("weekYear", obj.weekYear);
    } else if (!validWeek) {
      return unitOutOfRange("week", obj.week);
    } else if (!validWeekday) {
      return unitOutOfRange("weekday", obj.weekday);
    } else
      return false;
  }
  function hasInvalidOrdinalData(obj) {
    const validYear = isInteger(obj.year), validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));
    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validOrdinal) {
      return unitOutOfRange("ordinal", obj.ordinal);
    } else
      return false;
  }
  function hasInvalidGregorianData(obj) {
    const validYear = isInteger(obj.year), validMonth = integerBetween(obj.month, 1, 12), validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));
    if (!validYear) {
      return unitOutOfRange("year", obj.year);
    } else if (!validMonth) {
      return unitOutOfRange("month", obj.month);
    } else if (!validDay) {
      return unitOutOfRange("day", obj.day);
    } else
      return false;
  }
  function hasInvalidTimeData(obj) {
    const { hour, minute, second, millisecond } = obj;
    const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = integerBetween(minute, 0, 59), validSecond = integerBetween(second, 0, 59), validMillisecond = integerBetween(millisecond, 0, 999);
    if (!validHour) {
      return unitOutOfRange("hour", hour);
    } else if (!validMinute) {
      return unitOutOfRange("minute", minute);
    } else if (!validSecond) {
      return unitOutOfRange("second", second);
    } else if (!validMillisecond) {
      return unitOutOfRange("millisecond", millisecond);
    } else
      return false;
  }

  // node_modules/luxon/src/datetime.js
  var INVALID3 = "Invalid DateTime";
  var MAX_DATE = 864e13;
  function unsupportedZone(zone) {
    return new Invalid("unsupported zone", `the zone "${zone.name}" is not supported`);
  }
  function possiblyCachedWeekData(dt) {
    if (dt.weekData === null) {
      dt.weekData = gregorianToWeek(dt.c);
    }
    return dt.weekData;
  }
  function clone2(inst, alts) {
    const current = {
      ts: inst.ts,
      zone: inst.zone,
      c: inst.c,
      o: inst.o,
      loc: inst.loc,
      invalid: inst.invalid
    };
    return new DateTime({ ...current, ...alts, old: current });
  }
  function fixOffset(localTS, o, tz) {
    let utcGuess = localTS - o * 60 * 1e3;
    const o2 = tz.offset(utcGuess);
    if (o === o2) {
      return [utcGuess, o];
    }
    utcGuess -= (o2 - o) * 60 * 1e3;
    const o3 = tz.offset(utcGuess);
    if (o2 === o3) {
      return [utcGuess, o2];
    }
    return [localTS - Math.min(o2, o3) * 60 * 1e3, Math.max(o2, o3)];
  }
  function tsToObj(ts, offset2) {
    ts += offset2 * 60 * 1e3;
    const d3 = new Date(ts);
    return {
      year: d3.getUTCFullYear(),
      month: d3.getUTCMonth() + 1,
      day: d3.getUTCDate(),
      hour: d3.getUTCHours(),
      minute: d3.getUTCMinutes(),
      second: d3.getUTCSeconds(),
      millisecond: d3.getUTCMilliseconds()
    };
  }
  function objToTS(obj, offset2, zone) {
    return fixOffset(objToLocalTS(obj), offset2, zone);
  }
  function adjustTime(inst, dur) {
    const oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c2 = {
      ...inst.c,
      year,
      month,
      day: Math.min(inst.c.day, daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
    }, millisToAdd = Duration.fromObject({
      years: dur.years - Math.trunc(dur.years),
      quarters: dur.quarters - Math.trunc(dur.quarters),
      months: dur.months - Math.trunc(dur.months),
      weeks: dur.weeks - Math.trunc(dur.weeks),
      days: dur.days - Math.trunc(dur.days),
      hours: dur.hours,
      minutes: dur.minutes,
      seconds: dur.seconds,
      milliseconds: dur.milliseconds
    }).as("milliseconds"), localTS = objToLocalTS(c2);
    let [ts, o] = fixOffset(localTS, oPre, inst.zone);
    if (millisToAdd !== 0) {
      ts += millisToAdd;
      o = inst.zone.offset(ts);
    }
    return { ts, o };
  }
  function parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
    const { setZone, zone } = opts;
    if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
      const interpretationZone = parsedZone || zone, inst = DateTime.fromObject(parsed, {
        ...opts,
        zone: interpretationZone,
        specificOffset
      });
      return setZone ? inst : inst.setZone(zone);
    } else {
      return DateTime.invalid(
        new Invalid("unparsable", `the input "${text}" can't be parsed as ${format}`)
      );
    }
  }
  function toTechFormat(dt, format, allowZ = true) {
    return dt.isValid ? Formatter.create(Locale.create("en-US"), {
      allowZ,
      forceSimple: true
    }).formatDateTimeFromString(dt, format) : null;
  }
  function toISODate(o, extended2) {
    const longFormat = o.c.year > 9999 || o.c.year < 0;
    let c2 = "";
    if (longFormat && o.c.year >= 0)
      c2 += "+";
    c2 += padStart(o.c.year, longFormat ? 6 : 4);
    if (extended2) {
      c2 += "-";
      c2 += padStart(o.c.month);
      c2 += "-";
      c2 += padStart(o.c.day);
    } else {
      c2 += padStart(o.c.month);
      c2 += padStart(o.c.day);
    }
    return c2;
  }
  function toISOTime(o, extended2, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
    let c2 = padStart(o.c.hour);
    if (extended2) {
      c2 += ":";
      c2 += padStart(o.c.minute);
      if (o.c.second !== 0 || !suppressSeconds) {
        c2 += ":";
      }
    } else {
      c2 += padStart(o.c.minute);
    }
    if (o.c.second !== 0 || !suppressSeconds) {
      c2 += padStart(o.c.second);
      if (o.c.millisecond !== 0 || !suppressMilliseconds) {
        c2 += ".";
        c2 += padStart(o.c.millisecond, 3);
      }
    }
    if (includeOffset) {
      if (o.isOffsetFixed && o.offset === 0 && !extendedZone) {
        c2 += "Z";
      } else if (o.o < 0) {
        c2 += "-";
        c2 += padStart(Math.trunc(-o.o / 60));
        c2 += ":";
        c2 += padStart(Math.trunc(-o.o % 60));
      } else {
        c2 += "+";
        c2 += padStart(Math.trunc(o.o / 60));
        c2 += ":";
        c2 += padStart(Math.trunc(o.o % 60));
      }
    }
    if (extendedZone) {
      c2 += "[" + o.zone.ianaName + "]";
    }
    return c2;
  }
  var defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
  };
  var orderedUnits2 = ["year", "month", "day", "hour", "minute", "second", "millisecond"];
  var orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
  ];
  var orderedOrdinalUnits = ["year", "ordinal", "hour", "minute", "second", "millisecond"];
  function normalizeUnit(unit) {
    const normalized = {
      year: "year",
      years: "year",
      month: "month",
      months: "month",
      day: "day",
      days: "day",
      hour: "hour",
      hours: "hour",
      minute: "minute",
      minutes: "minute",
      quarter: "quarter",
      quarters: "quarter",
      second: "second",
      seconds: "second",
      millisecond: "millisecond",
      milliseconds: "millisecond",
      weekday: "weekday",
      weekdays: "weekday",
      weeknumber: "weekNumber",
      weeksnumber: "weekNumber",
      weeknumbers: "weekNumber",
      weekyear: "weekYear",
      weekyears: "weekYear",
      ordinal: "ordinal"
    }[unit.toLowerCase()];
    if (!normalized)
      throw new InvalidUnitError(unit);
    return normalized;
  }
  function quickDT(obj, opts) {
    const zone = normalizeZone(opts.zone, Settings.defaultZone), loc = Locale.fromObject(opts), tsNow = Settings.now();
    let ts, o;
    if (!isUndefined(obj.year)) {
      for (const u2 of orderedUnits2) {
        if (isUndefined(obj[u2])) {
          obj[u2] = defaultUnitValues[u2];
        }
      }
      const invalid = hasInvalidGregorianData(obj) || hasInvalidTimeData(obj);
      if (invalid) {
        return DateTime.invalid(invalid);
      }
      const offsetProvis = zone.offset(tsNow);
      [ts, o] = objToTS(obj, offsetProvis, zone);
    } else {
      ts = tsNow;
    }
    return new DateTime({ ts, zone, loc, o });
  }
  function diffRelative(start2, end2, opts) {
    const round = isUndefined(opts.round) ? true : opts.round, format = (c2, unit) => {
      c2 = roundTo(c2, round || opts.calendary ? 0 : 2, true);
      const formatter = end2.loc.clone(opts).relFormatter(opts);
      return formatter.format(c2, unit);
    }, differ = (unit) => {
      if (opts.calendary) {
        if (!end2.hasSame(start2, unit)) {
          return end2.startOf(unit).diff(start2.startOf(unit), unit).get(unit);
        } else
          return 0;
      } else {
        return end2.diff(start2, unit).get(unit);
      }
    };
    if (opts.unit) {
      return format(differ(opts.unit), opts.unit);
    }
    for (const unit of opts.units) {
      const count = differ(unit);
      if (Math.abs(count) >= 1) {
        return format(count, unit);
      }
    }
    return format(start2 > end2 ? -0 : 0, opts.units[opts.units.length - 1]);
  }
  function lastOpts(argList) {
    let opts = {}, args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
      opts = argList[argList.length - 1];
      args = Array.from(argList).slice(0, argList.length - 1);
    } else {
      args = Array.from(argList);
    }
    return [opts, args];
  }
  var DateTime = class {
    /**
     * @access private
     */
    constructor(config) {
      const zone = config.zone || Settings.defaultZone;
      let invalid = config.invalid || (Number.isNaN(config.ts) ? new Invalid("invalid input") : null) || (!zone.isValid ? unsupportedZone(zone) : null);
      this.ts = isUndefined(config.ts) ? Settings.now() : config.ts;
      let c2 = null, o = null;
      if (!invalid) {
        const unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
        if (unchanged) {
          [c2, o] = [config.old.c, config.old.o];
        } else {
          const ot = zone.offset(this.ts);
          c2 = tsToObj(this.ts, ot);
          invalid = Number.isNaN(c2.year) ? new Invalid("invalid input") : null;
          c2 = invalid ? null : c2;
          o = invalid ? null : ot;
        }
      }
      this._zone = zone;
      this.loc = config.loc || Locale.create();
      this.invalid = invalid;
      this.weekData = null;
      this.c = c2;
      this.o = o;
      this.isLuxonDateTime = true;
    }
    // CONSTRUCT
    /**
     * Create a DateTime for the current instant, in the system's time zone.
     *
     * Use Settings to override these default values if needed.
     * @example DateTime.now().toISO() //~> now in the ISO format
     * @return {DateTime}
     */
    static now() {
      return new DateTime({});
    }
    /**
     * Create a local DateTime
     * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month, 1-indexed
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @example DateTime.local()                                  //~> now
     * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
     * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
     * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
     * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
     * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
     * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
     * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
     * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
     * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
     * @return {DateTime}
     */
    static local() {
      const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }
    /**
     * Create a DateTime in UTC
     * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
     * @param {number} [month=1] - The month, 1-indexed
     * @param {number} [day=1] - The day of the month
     * @param {number} [hour=0] - The hour of the day, in 24-hour time
     * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
     * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
     * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
     * @param {Object} options - configuration options for the DateTime
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @example DateTime.utc()                                              //~> now
     * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
     * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
     * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
     * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
     * @return {DateTime}
     */
    static utc() {
      const [opts, args] = lastOpts(arguments), [year, month, day, hour, minute, second, millisecond] = args;
      opts.zone = FixedOffsetZone.utcInstance;
      return quickDT({ year, month, day, hour, minute, second, millisecond }, opts);
    }
    /**
     * Create a DateTime from a JavaScript Date object. Uses the default zone.
     * @param {Date} date - a JavaScript Date object
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @return {DateTime}
     */
    static fromJSDate(date, options = {}) {
      const ts = isDate(date) ? date.valueOf() : NaN;
      if (Number.isNaN(ts)) {
        return DateTime.invalid("invalid input");
      }
      const zoneToUse = normalizeZone(options.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return DateTime.invalid(unsupportedZone(zoneToUse));
      }
      return new DateTime({
        ts,
        zone: zoneToUse,
        loc: Locale.fromObject(options)
      });
    }
    /**
     * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} milliseconds - a number of milliseconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromMillis(milliseconds, options = {}) {
      if (!isNumber(milliseconds)) {
        throw new InvalidArgumentError(
          `fromMillis requires a numerical input, but received a ${typeof milliseconds} with value ${milliseconds}`
        );
      } else if (milliseconds < -MAX_DATE || milliseconds > MAX_DATE) {
        return DateTime.invalid("Timestamp out of range");
      } else {
        return new DateTime({
          ts: milliseconds,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options)
        });
      }
    }
    /**
     * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
     * @param {number} seconds - a number of seconds since 1970 UTC
     * @param {Object} options - configuration options for the DateTime
     * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
     * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
     * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromSeconds(seconds, options = {}) {
      if (!isNumber(seconds)) {
        throw new InvalidArgumentError("fromSeconds requires a numerical input");
      } else {
        return new DateTime({
          ts: seconds * 1e3,
          zone: normalizeZone(options.zone, Settings.defaultZone),
          loc: Locale.fromObject(options)
        });
      }
    }
    /**
     * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
     * @param {Object} obj - the object to create the DateTime from
     * @param {number} obj.year - a year, such as 1987
     * @param {number} obj.month - a month, 1-12
     * @param {number} obj.day - a day of the month, 1-31, depending on the month
     * @param {number} obj.ordinal - day of the year, 1-365 or 366
     * @param {number} obj.weekYear - an ISO week year
     * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
     * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
     * @param {number} obj.hour - hour of the day, 0-23
     * @param {number} obj.minute - minute of the hour, 0-59
     * @param {number} obj.second - second of the minute, 0-59
     * @param {number} obj.millisecond - millisecond of the second, 0-999
     * @param {Object} opts - options for creating this DateTime
     * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
     * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
     * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
     * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
     * @return {DateTime}
     */
    static fromObject(obj, opts = {}) {
      obj = obj || {};
      const zoneToUse = normalizeZone(opts.zone, Settings.defaultZone);
      if (!zoneToUse.isValid) {
        return DateTime.invalid(unsupportedZone(zoneToUse));
      }
      const tsNow = Settings.now(), offsetProvis = !isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), normalized = normalizeObject(obj, normalizeUnit), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber, loc = Locale.fromObject(opts);
      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }
      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }
      const useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
      let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);
      if (useWeekData) {
        units = orderedWeekUnits;
        defaultValues = defaultWeekUnitValues;
        objNow = gregorianToWeek(objNow);
      } else if (containsOrdinal) {
        units = orderedOrdinalUnits;
        defaultValues = defaultOrdinalUnitValues;
        objNow = gregorianToOrdinal(objNow);
      } else {
        units = orderedUnits2;
        defaultValues = defaultUnitValues;
      }
      let foundFirst = false;
      for (const u2 of units) {
        const v = normalized[u2];
        if (!isUndefined(v)) {
          foundFirst = true;
        } else if (foundFirst) {
          normalized[u2] = defaultValues[u2];
        } else {
          normalized[u2] = objNow[u2];
        }
      }
      const higherOrderInvalid = useWeekData ? hasInvalidWeekData(normalized) : containsOrdinal ? hasInvalidOrdinalData(normalized) : hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || hasInvalidTimeData(normalized);
      if (invalid) {
        return DateTime.invalid(invalid);
      }
      const gregorian = useWeekData ? weekToGregorian(normalized) : containsOrdinal ? ordinalToGregorian(normalized) : normalized, [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse), inst = new DateTime({
        ts: tsFinal,
        zone: zoneToUse,
        o: offsetFinal,
        loc
      });
      if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {
        return DateTime.invalid(
          "mismatched weekday",
          `you can't specify both a weekday of ${normalized.weekday} and a date of ${inst.toISO()}`
        );
      }
      return inst;
    }
    /**
     * Create a DateTime from an ISO 8601 string
     * @param {string} text - the ISO string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
     * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromISO('2016-05-25T09:08:34.123')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
     * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
     * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
     * @example DateTime.fromISO('2016-W05-4')
     * @return {DateTime}
     */
    static fromISO(text, opts = {}) {
      const [vals, parsedZone] = parseISODate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    }
    /**
     * Create a DateTime from an RFC 2822 string
     * @param {string} text - the RFC 2822 string
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
     * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
     * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
     * @return {DateTime}
     */
    static fromRFC2822(text, opts = {}) {
      const [vals, parsedZone] = parseRFC2822Date(text);
      return parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    }
    /**
     * Create a DateTime from an HTTP header date
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @param {string} text - the HTTP header date
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
     * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
     * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
     * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
     * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
     * @return {DateTime}
     */
    static fromHTTP(text, opts = {}) {
      const [vals, parsedZone] = parseHTTPDate(text);
      return parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
    }
    /**
     * Create a DateTime from an input string and format string.
     * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @return {DateTime}
     */
    static fromFormat(text, fmt, opts = {}) {
      if (isUndefined(text) || isUndefined(fmt)) {
        throw new InvalidArgumentError("fromFormat requires an input string and a format");
      }
      const { locale = null, numberingSystem = null } = opts, localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true
      }), [vals, parsedZone, specificOffset, invalid] = parseFromTokens(localeToUse, text, fmt);
      if (invalid) {
        return DateTime.invalid(invalid);
      } else {
        return parseDataToDateTime(vals, parsedZone, opts, `format ${fmt}`, text, specificOffset);
      }
    }
    /**
     * @deprecated use fromFormat instead
     */
    static fromString(text, fmt, opts = {}) {
      return DateTime.fromFormat(text, fmt, opts);
    }
    /**
     * Create a DateTime from a SQL date, time, or datetime
     * Defaults to en-US if no locale has been specified, regardless of the system's locale
     * @param {string} text - the string to parse
     * @param {Object} opts - options to affect the creation
     * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
     * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
     * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
     * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
     * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
     * @example DateTime.fromSQL('2017-05-15')
     * @example DateTime.fromSQL('2017-05-15 09:12:34')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
     * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
     * @example DateTime.fromSQL('09:12:34.342')
     * @return {DateTime}
     */
    static fromSQL(text, opts = {}) {
      const [vals, parsedZone] = parseSQL(text);
      return parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    }
    /**
     * Create an invalid DateTime.
     * @param {DateTime} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent
     * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
     * @return {DateTime}
     */
    static invalid(reason, explanation = null) {
      if (!reason) {
        throw new InvalidArgumentError("need to specify a reason the DateTime is invalid");
      }
      const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);
      if (Settings.throwOnInvalid) {
        throw new InvalidDateTimeError(invalid);
      } else {
        return new DateTime({ invalid });
      }
    }
    /**
     * Check if an object is an instance of DateTime. Works across context boundaries
     * @param {object} o
     * @return {boolean}
     */
    static isDateTime(o) {
      return o && o.isLuxonDateTime || false;
    }
    /**
     * Produce the format string for a set of options
     * @param formatOpts
     * @param localeOpts
     * @returns {string}
     */
    static parseFormatForOpts(formatOpts, localeOpts = {}) {
      const tokenList = formatOptsToTokens(formatOpts, Locale.fromObject(localeOpts));
      return !tokenList ? null : tokenList.map((t2) => t2 ? t2.val : null).join("");
    }
    /**
     * Produce the the fully expanded format token for the locale
     * Does NOT quote characters, so quoted tokens will not round trip correctly
     * @param fmt
     * @param localeOpts
     * @returns {string}
     */
    static expandFormat(fmt, localeOpts = {}) {
      const expanded = expandMacroTokens(Formatter.parseFormat(fmt), Locale.fromObject(localeOpts));
      return expanded.map((t2) => t2.val).join("");
    }
    // INFO
    /**
     * Get the value of unit.
     * @param {string} unit - a unit such as 'minute' or 'day'
     * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
     * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
     * @return {number}
     */
    get(unit) {
      return this[unit];
    }
    /**
     * Returns whether the DateTime is valid. Invalid DateTimes occur when:
     * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
     * * The DateTime was created by an operation on another invalid date
     * @type {boolean}
     */
    get isValid() {
      return this.invalid === null;
    }
    /**
     * Returns an error code if this DateTime is invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidReason() {
      return this.invalid ? this.invalid.reason : null;
    }
    /**
     * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid
     * @type {string}
     */
    get invalidExplanation() {
      return this.invalid ? this.invalid.explanation : null;
    }
    /**
     * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime
     *
     * @type {string}
     */
    get locale() {
      return this.isValid ? this.loc.locale : null;
    }
    /**
     * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime
     *
     * @type {string}
     */
    get numberingSystem() {
      return this.isValid ? this.loc.numberingSystem : null;
    }
    /**
     * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime
     *
     * @type {string}
     */
    get outputCalendar() {
      return this.isValid ? this.loc.outputCalendar : null;
    }
    /**
     * Get the time zone associated with this DateTime.
     * @type {Zone}
     */
    get zone() {
      return this._zone;
    }
    /**
     * Get the name of the time zone.
     * @type {string}
     */
    get zoneName() {
      return this.isValid ? this.zone.name : null;
    }
    /**
     * Get the year
     * @example DateTime.local(2017, 5, 25).year //=> 2017
     * @type {number}
     */
    get year() {
      return this.isValid ? this.c.year : NaN;
    }
    /**
     * Get the quarter
     * @example DateTime.local(2017, 5, 25).quarter //=> 2
     * @type {number}
     */
    get quarter() {
      return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
    }
    /**
     * Get the month (1-12).
     * @example DateTime.local(2017, 5, 25).month //=> 5
     * @type {number}
     */
    get month() {
      return this.isValid ? this.c.month : NaN;
    }
    /**
     * Get the day of the month (1-30ish).
     * @example DateTime.local(2017, 5, 25).day //=> 25
     * @type {number}
     */
    get day() {
      return this.isValid ? this.c.day : NaN;
    }
    /**
     * Get the hour of the day (0-23).
     * @example DateTime.local(2017, 5, 25, 9).hour //=> 9
     * @type {number}
     */
    get hour() {
      return this.isValid ? this.c.hour : NaN;
    }
    /**
     * Get the minute of the hour (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30
     * @type {number}
     */
    get minute() {
      return this.isValid ? this.c.minute : NaN;
    }
    /**
     * Get the second of the minute (0-59).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52
     * @type {number}
     */
    get second() {
      return this.isValid ? this.c.second : NaN;
    }
    /**
     * Get the millisecond of the second (0-999).
     * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654
     * @type {number}
     */
    get millisecond() {
      return this.isValid ? this.c.millisecond : NaN;
    }
    /**
     * Get the week year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 12, 31).weekYear //=> 2015
     * @type {number}
     */
    get weekYear() {
      return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;
    }
    /**
     * Get the week number of the week year (1-52ish).
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2017, 5, 25).weekNumber //=> 21
     * @type {number}
     */
    get weekNumber() {
      return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;
    }
    /**
     * Get the day of the week.
     * 1 is Monday and 7 is Sunday
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2014, 11, 31).weekday //=> 4
     * @type {number}
     */
    get weekday() {
      return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;
    }
    /**
     * Get the ordinal (meaning the day of the year)
     * @example DateTime.local(2017, 5, 25).ordinal //=> 145
     * @type {number|DateTime}
     */
    get ordinal() {
      return this.isValid ? gregorianToOrdinal(this.c).ordinal : NaN;
    }
    /**
     * Get the human readable short month name, such as 'Oct'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthShort //=> Oct
     * @type {string}
     */
    get monthShort() {
      return this.isValid ? Info.months("short", { locObj: this.loc })[this.month - 1] : null;
    }
    /**
     * Get the human readable long month name, such as 'October'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).monthLong //=> October
     * @type {string}
     */
    get monthLong() {
      return this.isValid ? Info.months("long", { locObj: this.loc })[this.month - 1] : null;
    }
    /**
     * Get the human readable short weekday, such as 'Mon'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon
     * @type {string}
     */
    get weekdayShort() {
      return this.isValid ? Info.weekdays("short", { locObj: this.loc })[this.weekday - 1] : null;
    }
    /**
     * Get the human readable long weekday, such as 'Monday'.
     * Defaults to the system's locale if no locale has been specified
     * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday
     * @type {string}
     */
    get weekdayLong() {
      return this.isValid ? Info.weekdays("long", { locObj: this.loc })[this.weekday - 1] : null;
    }
    /**
     * Get the UTC offset of this DateTime in minutes
     * @example DateTime.now().offset //=> -240
     * @example DateTime.utc().offset //=> 0
     * @type {number}
     */
    get offset() {
      return this.isValid ? +this.o : NaN;
    }
    /**
     * Get the short human name for the zone's current offset, for example "EST" or "EDT".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameShort() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "short",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get the long human name for the zone's current offset, for example "Eastern Standard Time" or "Eastern Daylight Time".
     * Defaults to the system's locale if no locale has been specified
     * @type {string}
     */
    get offsetNameLong() {
      if (this.isValid) {
        return this.zone.offsetName(this.ts, {
          format: "long",
          locale: this.locale
        });
      } else {
        return null;
      }
    }
    /**
     * Get whether this zone's offset ever changes, as in a DST.
     * @type {boolean}
     */
    get isOffsetFixed() {
      return this.isValid ? this.zone.isUniversal : null;
    }
    /**
     * Get whether the DateTime is in a DST.
     * @type {boolean}
     */
    get isInDST() {
      if (this.isOffsetFixed) {
        return false;
      } else {
        return this.offset > this.set({ month: 1, day: 1 }).offset || this.offset > this.set({ month: 5 }).offset;
      }
    }
    /**
     * Returns true if this DateTime is in a leap year, false otherwise
     * @example DateTime.local(2016).isInLeapYear //=> true
     * @example DateTime.local(2013).isInLeapYear //=> false
     * @type {boolean}
     */
    get isInLeapYear() {
      return isLeapYear(this.year);
    }
    /**
     * Returns the number of days in this DateTime's month
     * @example DateTime.local(2016, 2).daysInMonth //=> 29
     * @example DateTime.local(2016, 3).daysInMonth //=> 31
     * @type {number}
     */
    get daysInMonth() {
      return daysInMonth(this.year, this.month);
    }
    /**
     * Returns the number of days in this DateTime's year
     * @example DateTime.local(2016).daysInYear //=> 366
     * @example DateTime.local(2013).daysInYear //=> 365
     * @type {number}
     */
    get daysInYear() {
      return this.isValid ? daysInYear(this.year) : NaN;
    }
    /**
     * Returns the number of weeks in this DateTime's year
     * @see https://en.wikipedia.org/wiki/ISO_week_date
     * @example DateTime.local(2004).weeksInWeekYear //=> 53
     * @example DateTime.local(2013).weeksInWeekYear //=> 52
     * @type {number}
     */
    get weeksInWeekYear() {
      return this.isValid ? weeksInWeekYear(this.weekYear) : NaN;
    }
    /**
     * Returns the resolved Intl options for this DateTime.
     * This is useful in understanding the behavior of formatting methods
     * @param {Object} opts - the same options as toLocaleString
     * @return {Object}
     */
    resolvedLocaleOptions(opts = {}) {
      const { locale, numberingSystem, calendar } = Formatter.create(
        this.loc.clone(opts),
        opts
      ).resolvedOptions(this);
      return { locale, numberingSystem, outputCalendar: calendar };
    }
    // TRANSFORM
    /**
     * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
     *
     * Equivalent to {@link DateTime#setZone}('utc')
     * @param {number} [offset=0] - optionally, an offset from UTC in minutes
     * @param {Object} [opts={}] - options to pass to `setZone()`
     * @return {DateTime}
     */
    toUTC(offset2 = 0, opts = {}) {
      return this.setZone(FixedOffsetZone.instance(offset2), opts);
    }
    /**
     * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
     *
     * Equivalent to `setZone('local')`
     * @return {DateTime}
     */
    toLocal() {
      return this.setZone(Settings.defaultZone);
    }
    /**
     * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
     *
     * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
     * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
     * @param {Object} opts - options
     * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
     * @return {DateTime}
     */
    setZone(zone, { keepLocalTime = false, keepCalendarTime = false } = {}) {
      zone = normalizeZone(zone, Settings.defaultZone);
      if (zone.equals(this.zone)) {
        return this;
      } else if (!zone.isValid) {
        return DateTime.invalid(unsupportedZone(zone));
      } else {
        let newTS = this.ts;
        if (keepLocalTime || keepCalendarTime) {
          const offsetGuess = zone.offset(this.ts);
          const asObj = this.toObject();
          [newTS] = objToTS(asObj, offsetGuess, zone);
        }
        return clone2(this, { ts: newTS, zone });
      }
    }
    /**
     * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
     * @param {Object} properties - the properties to set
     * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
     * @return {DateTime}
     */
    reconfigure({ locale, numberingSystem, outputCalendar } = {}) {
      const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });
      return clone2(this, { loc });
    }
    /**
     * "Set" the locale. Returns a newly-constructed DateTime.
     * Just a convenient alias for reconfigure({ locale })
     * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
     * @return {DateTime}
     */
    setLocale(locale) {
      return this.reconfigure({ locale });
    }
    /**
     * "Set" the values of specified units. Returns a newly-constructed DateTime.
     * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
     * @param {Object} values - a mapping of units to numbers
     * @example dt.set({ year: 2017 })
     * @example dt.set({ hour: 8, minute: 30 })
     * @example dt.set({ weekday: 5 })
     * @example dt.set({ year: 2005, ordinal: 234 })
     * @return {DateTime}
     */
    set(values2) {
      if (!this.isValid)
        return this;
      const normalized = normalizeObject(values2, normalizeUnit), settingWeekStuff = !isUndefined(normalized.weekYear) || !isUndefined(normalized.weekNumber) || !isUndefined(normalized.weekday), containsOrdinal = !isUndefined(normalized.ordinal), containsGregorYear = !isUndefined(normalized.year), containsGregorMD = !isUndefined(normalized.month) || !isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
      if ((containsGregor || containsOrdinal) && definiteWeekDef) {
        throw new ConflictingSpecificationError(
          "Can't mix weekYear/weekNumber units with year/month/day or ordinals"
        );
      }
      if (containsGregorMD && containsOrdinal) {
        throw new ConflictingSpecificationError("Can't mix ordinal dates with month/day");
      }
      let mixed;
      if (settingWeekStuff) {
        mixed = weekToGregorian({ ...gregorianToWeek(this.c), ...normalized });
      } else if (!isUndefined(normalized.ordinal)) {
        mixed = ordinalToGregorian({ ...gregorianToOrdinal(this.c), ...normalized });
      } else {
        mixed = { ...this.toObject(), ...normalized };
        if (isUndefined(normalized.day)) {
          mixed.day = Math.min(daysInMonth(mixed.year, mixed.month), mixed.day);
        }
      }
      const [ts, o] = objToTS(mixed, this.o, this.zone);
      return clone2(this, { ts, o });
    }
    /**
     * Add a period of time to this DateTime and return the resulting DateTime
     *
     * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
     * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     * @example DateTime.now().plus(123) //~> in 123 milliseconds
     * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
     * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
     * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
     * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
     * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
     * @return {DateTime}
     */
    plus(duration) {
      if (!this.isValid)
        return this;
      const dur = Duration.fromDurationLike(duration);
      return clone2(this, adjustTime(this, dur));
    }
    /**
     * Subtract a period of time to this DateTime and return the resulting DateTime
     * See {@link DateTime#plus}
     * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
     @return {DateTime}
     */
    minus(duration) {
      if (!this.isValid)
        return this;
      const dur = Duration.fromDurationLike(duration).negate();
      return clone2(this, adjustTime(this, dur));
    }
    /**
     * "Set" this DateTime to the beginning of a unit of time.
     * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
     * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
     * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
     * @return {DateTime}
     */
    startOf(unit) {
      if (!this.isValid)
        return this;
      const o = {}, normalizedUnit = Duration.normalizeUnit(unit);
      switch (normalizedUnit) {
        case "years":
          o.month = 1;
        case "quarters":
        case "months":
          o.day = 1;
        case "weeks":
        case "days":
          o.hour = 0;
        case "hours":
          o.minute = 0;
        case "minutes":
          o.second = 0;
        case "seconds":
          o.millisecond = 0;
          break;
        case "milliseconds":
          break;
      }
      if (normalizedUnit === "weeks") {
        o.weekday = 1;
      }
      if (normalizedUnit === "quarters") {
        const q2 = Math.ceil(this.month / 3);
        o.month = (q2 - 1) * 3 + 1;
      }
      return this.set(o);
    }
    /**
     * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
     * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
     * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
     * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
     * @return {DateTime}
     */
    endOf(unit) {
      return this.isValid ? this.plus({ [unit]: 1 }).startOf(unit).minus(1) : this;
    }
    // OUTPUT
    /**
     * Returns a string representation of this DateTime formatted according to the specified format string.
     * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
     * Defaults to en-US if no locale has been specified, regardless of the system's locale.
     * @param {string} fmt - the format string
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
     * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
     * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
     * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
     * @return {string}
     */
    toFormat(fmt, opts = {}) {
      return this.isValid ? Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : INVALID3;
    }
    /**
     * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
     * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
     * of the DateTime in the assigned locale.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
     * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
     * @param {Object} opts - opts to override the configuration options on this DateTime
     * @example DateTime.now().toLocaleString(); //=> 4/20/2017
     * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
     * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
     * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
     * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
     * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
     * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
     * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
     * @return {string}
     */
    toLocaleString(formatOpts = DATE_SHORT, opts = {}) {
      return this.isValid ? Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : INVALID3;
    }
    /**
     * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
     * Defaults to the system's locale if no locale has been specified
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
     * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
     * @example DateTime.now().toLocaleParts(); //=> [
     *                                   //=>   { type: 'day', value: '25' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'month', value: '05' },
     *                                   //=>   { type: 'literal', value: '/' },
     *                                   //=>   { type: 'year', value: '1982' }
     *                                   //=> ]
     */
    toLocaleParts(opts = {}) {
      return this.isValid ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
     * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
     * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
     * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
     * @return {string}
     */
    toISO({
      format = "extended",
      suppressSeconds = false,
      suppressMilliseconds = false,
      includeOffset = true,
      extendedZone = false
    } = {}) {
      if (!this.isValid) {
        return null;
      }
      const ext = format === "extended";
      let c2 = toISODate(this, ext);
      c2 += "T";
      c2 += toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
      return c2;
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's date component
     * @param {Object} opts - options
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
     * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
     * @return {string}
     */
    toISODate({ format = "extended" } = {}) {
      if (!this.isValid) {
        return null;
      }
      return toISODate(this, format === "extended");
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's week date
     * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
     * @return {string}
     */
    toISOWeekDate() {
      return toTechFormat(this, "kkkk-'W'WW-c");
    }
    /**
     * Returns an ISO 8601-compliant string representation of this DateTime's time component
     * @param {Object} opts - options
     * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
     * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
     * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
     * @param {string} [opts.format='extended'] - choose between the basic and extended format
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
     * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
     * @return {string}
     */
    toISOTime({
      suppressMilliseconds = false,
      suppressSeconds = false,
      includeOffset = true,
      includePrefix = false,
      extendedZone = false,
      format = "extended"
    } = {}) {
      if (!this.isValid) {
        return null;
      }
      let c2 = includePrefix ? "T" : "";
      return c2 + toISOTime(
        this,
        format === "extended",
        suppressSeconds,
        suppressMilliseconds,
        includeOffset,
        extendedZone
      );
    }
    /**
     * Returns an RFC 2822-compatible string representation of this DateTime
     * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
     * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
     * @return {string}
     */
    toRFC2822() {
      return toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
     * Specifically, the string conforms to RFC 1123.
     * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
     * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
     * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
     * @return {string}
     */
    toHTTP() {
      return toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Date
     * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
     * @return {string}
     */
    toSQLDate() {
      if (!this.isValid) {
        return null;
      }
      return toISODate(this, true);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL Time
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc().toSQL() //=> '05:15:16.345'
     * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
     * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
     * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
     * @return {string}
     */
    toSQLTime({ includeOffset = true, includeZone = false, includeOffsetSpace = true } = {}) {
      let fmt = "HH:mm:ss.SSS";
      if (includeZone || includeOffset) {
        if (includeOffsetSpace) {
          fmt += " ";
        }
        if (includeZone) {
          fmt += "z";
        } else if (includeOffset) {
          fmt += "ZZ";
        }
      }
      return toTechFormat(this, fmt, true);
    }
    /**
     * Returns a string representation of this DateTime appropriate for use in SQL DateTime
     * @param {Object} opts - options
     * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
     * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
     * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
     * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
     * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
     * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
     * @return {string}
     */
    toSQL(opts = {}) {
      if (!this.isValid) {
        return null;
      }
      return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;
    }
    /**
     * Returns a string representation of this DateTime appropriate for debugging
     * @return {string}
     */
    toString() {
      return this.isValid ? this.toISO() : INVALID3;
    }
    /**
     * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
     * @return {number}
     */
    valueOf() {
      return this.toMillis();
    }
    /**
     * Returns the epoch milliseconds of this DateTime.
     * @return {number}
     */
    toMillis() {
      return this.isValid ? this.ts : NaN;
    }
    /**
     * Returns the epoch seconds of this DateTime.
     * @return {number}
     */
    toSeconds() {
      return this.isValid ? this.ts / 1e3 : NaN;
    }
    /**
     * Returns the epoch seconds (as a whole number) of this DateTime.
     * @return {number}
     */
    toUnixInteger() {
      return this.isValid ? Math.floor(this.ts / 1e3) : NaN;
    }
    /**
     * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
     * @return {string}
     */
    toJSON() {
      return this.toISO();
    }
    /**
     * Returns a BSON serializable equivalent to this DateTime.
     * @return {Date}
     */
    toBSON() {
      return this.toJSDate();
    }
    /**
     * Returns a JavaScript object with this DateTime's year, month, day, and so on.
     * @param opts - options for generating the object
     * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
     * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
     * @return {Object}
     */
    toObject(opts = {}) {
      if (!this.isValid)
        return {};
      const base4 = { ...this.c };
      if (opts.includeConfig) {
        base4.outputCalendar = this.outputCalendar;
        base4.numberingSystem = this.loc.numberingSystem;
        base4.locale = this.loc.locale;
      }
      return base4;
    }
    /**
     * Returns a JavaScript Date equivalent to this DateTime.
     * @return {Date}
     */
    toJSDate() {
      return new Date(this.isValid ? this.ts : NaN);
    }
    // COMPARE
    /**
     * Return the difference between two DateTimes as a Duration.
     * @param {DateTime} otherDateTime - the DateTime to compare this one to
     * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @example
     * var i1 = DateTime.fromISO('1982-05-25T09:45'),
     *     i2 = DateTime.fromISO('1983-10-14T10:30');
     * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
     * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
     * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
     * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
     * @return {Duration}
     */
    diff(otherDateTime, unit = "milliseconds", opts = {}) {
      if (!this.isValid || !otherDateTime.isValid) {
        return Duration.invalid("created by diffing an invalid DateTime");
      }
      const durOpts = { locale: this.locale, numberingSystem: this.numberingSystem, ...opts };
      const units = maybeArray(unit).map(Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = diff_default(earlier, later, units, durOpts);
      return otherIsLater ? diffed.negate() : diffed;
    }
    /**
     * Return the difference between this DateTime and right now.
     * See {@link DateTime#diff}
     * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
     * @param {Object} opts - options that affect the creation of the Duration
     * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
     * @return {Duration}
     */
    diffNow(unit = "milliseconds", opts = {}) {
      return this.diff(DateTime.now(), unit, opts);
    }
    /**
     * Return an Interval spanning between this DateTime and another DateTime
     * @param {DateTime} otherDateTime - the other end point of the Interval
     * @return {Interval}
     */
    until(otherDateTime) {
      return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;
    }
    /**
     * Return whether this DateTime is in the same unit of time as another DateTime.
     * Higher-order units must also be identical for this function to return `true`.
     * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
     * @param {DateTime} otherDateTime - the other DateTime
     * @param {string} unit - the unit of time to check sameness on
     * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
     * @return {boolean}
     */
    hasSame(otherDateTime, unit) {
      if (!this.isValid)
        return false;
      const inputMs = otherDateTime.valueOf();
      const adjustedToZone = this.setZone(otherDateTime.zone, { keepLocalTime: true });
      return adjustedToZone.startOf(unit) <= inputMs && inputMs <= adjustedToZone.endOf(unit);
    }
    /**
     * Equality check
     * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
     * To compare just the millisecond values, use `+dt1 === +dt2`.
     * @param {DateTime} other - the other DateTime
     * @return {boolean}
     */
    equals(other) {
      return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
    }
    /**
     * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
     * platform supports Intl.RelativeTimeFormat. Rounds down by default.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
     * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
     * @param {boolean} [options.round=true] - whether to round the numbers in the output.
     * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
     * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
     * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
     * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
     * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
     * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
     */
    toRelative(options = {}) {
      if (!this.isValid)
        return null;
      const base4 = options.base || DateTime.fromObject({}, { zone: this.zone }), padding = options.padding ? this < base4 ? -options.padding : options.padding : 0;
      let units = ["years", "months", "days", "hours", "minutes", "seconds"];
      let unit = options.unit;
      if (Array.isArray(options.unit)) {
        units = options.unit;
        unit = void 0;
      }
      return diffRelative(base4, this.plus(padding), {
        ...options,
        numeric: "always",
        units,
        unit
      });
    }
    /**
     * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
     * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
     * @param {Object} options - options that affect the output
     * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
     * @param {string} options.locale - override the locale of this DateTime
     * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
     * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
     * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
     * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
     * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
     */
    toRelativeCalendar(options = {}) {
      if (!this.isValid)
        return null;
      return diffRelative(options.base || DateTime.fromObject({}, { zone: this.zone }), this, {
        ...options,
        numeric: "auto",
        units: ["years", "months", "days"],
        calendary: true
      });
    }
    /**
     * Return the min of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
     * @return {DateTime} the min DateTime, or undefined if called with no argument
     */
    static min(...dateTimes) {
      if (!dateTimes.every(DateTime.isDateTime)) {
        throw new InvalidArgumentError("min requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i) => i.valueOf(), Math.min);
    }
    /**
     * Return the max of several date times
     * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
     * @return {DateTime} the max DateTime, or undefined if called with no argument
     */
    static max(...dateTimes) {
      if (!dateTimes.every(DateTime.isDateTime)) {
        throw new InvalidArgumentError("max requires all arguments be DateTimes");
      }
      return bestBy(dateTimes, (i) => i.valueOf(), Math.max);
    }
    // MISC
    /**
     * Explain how a string would be parsed by fromFormat()
     * @param {string} text - the string to parse
     * @param {string} fmt - the format the string is expected to be in (see description)
     * @param {Object} options - options taken by fromFormat()
     * @return {Object}
     */
    static fromFormatExplain(text, fmt, options = {}) {
      const { locale = null, numberingSystem = null } = options, localeToUse = Locale.fromOpts({
        locale,
        numberingSystem,
        defaultToEN: true
      });
      return explainFromTokens(localeToUse, text, fmt);
    }
    /**
     * @deprecated use fromFormatExplain instead
     */
    static fromStringExplain(text, fmt, options = {}) {
      return DateTime.fromFormatExplain(text, fmt, options);
    }
    // FORMAT PRESETS
    /**
     * {@link DateTime#toLocaleString} format like 10/14/1983
     * @type {Object}
     */
    static get DATE_SHORT() {
      return DATE_SHORT;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED() {
      return DATE_MED;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, Oct 14, 1983'
     * @type {Object}
     */
    static get DATE_MED_WITH_WEEKDAY() {
      return DATE_MED_WITH_WEEKDAY;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983'
     * @type {Object}
     */
    static get DATE_FULL() {
      return DATE_FULL;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Tuesday, October 14, 1983'
     * @type {Object}
     */
    static get DATE_HUGE() {
      return DATE_HUGE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_SIMPLE() {
      return TIME_SIMPLE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SECONDS() {
      return TIME_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_SHORT_OFFSET() {
      return TIME_WITH_SHORT_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get TIME_WITH_LONG_OFFSET() {
      return TIME_WITH_LONG_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_SIMPLE() {
      return TIME_24_SIMPLE;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SECONDS() {
      return TIME_24_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 EDT', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_SHORT_OFFSET() {
      return TIME_24_WITH_SHORT_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.
     * @type {Object}
     */
    static get TIME_24_WITH_LONG_OFFSET() {
      return TIME_24_WITH_LONG_OFFSET;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT() {
      return DATETIME_SHORT;
    }
    /**
     * {@link DateTime#toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_SHORT_WITH_SECONDS() {
      return DATETIME_SHORT_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED() {
      return DATETIME_MED;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_SECONDS() {
      return DATETIME_MED_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Fri, 14 Oct 1983, 9:30 AM'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_MED_WITH_WEEKDAY() {
      return DATETIME_MED_WITH_WEEKDAY;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL() {
      return DATETIME_FULL;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'October 14, 1983, 9:30:33 AM EDT'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_FULL_WITH_SECONDS() {
      return DATETIME_FULL_WITH_SECONDS;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE() {
      return DATETIME_HUGE;
    }
    /**
     * {@link DateTime#toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.
     * @type {Object}
     */
    static get DATETIME_HUGE_WITH_SECONDS() {
      return DATETIME_HUGE_WITH_SECONDS;
    }
  };
  function friendlyDateTime(dateTimeish) {
    if (DateTime.isDateTime(dateTimeish)) {
      return dateTimeish;
    } else if (dateTimeish && dateTimeish.valueOf && isNumber(dateTimeish.valueOf())) {
      return DateTime.fromJSDate(dateTimeish);
    } else if (dateTimeish && typeof dateTimeish === "object") {
      return DateTime.fromObject(dateTimeish);
    } else {
      throw new InvalidArgumentError(
        `Unknown datetime argument: ${dateTimeish}, of type ${typeof dateTimeish}`
      );
    }
  }

  // src/js/faulkner.js
  var import_slugify = __toESM(require_slugify());
  init_dist2();
  init_dist();
  init_dist12();

  // node_modules/@codemirror/language-data/dist/index.js
  init_dist5();
  function legacy(parser14) {
    return new LanguageSupport(StreamLanguage.define(parser14));
  }
  function sql3(dialectName) {
    return Promise.resolve().then(() => (init_dist13(), dist_exports5)).then((m) => m.sql({ dialect: m[dialectName] }));
  }
  var languages = [
    // New-style language modes
    /* @__PURE__ */ LanguageDescription.of({
      name: "C",
      extensions: ["c", "h", "ino"],
      load() {
        return Promise.resolve().then(() => (init_dist14(), dist_exports6)).then((m) => m.cpp());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "C++",
      alias: ["cpp"],
      extensions: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],
      load() {
        return Promise.resolve().then(() => (init_dist14(), dist_exports6)).then((m) => m.cpp());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "CQL",
      alias: ["cassandra"],
      extensions: ["cql"],
      load() {
        return sql3("Cassandra");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "CSS",
      extensions: ["css"],
      load() {
        return Promise.resolve().then(() => (init_dist8(), dist_exports)).then((m) => m.css());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "HTML",
      alias: ["xhtml"],
      extensions: ["html", "htm", "handlebars", "hbs"],
      load() {
        return Promise.resolve().then(() => (init_dist11(), dist_exports3)).then((m) => m.html());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Java",
      extensions: ["java"],
      load() {
        return Promise.resolve().then(() => (init_dist15(), dist_exports7)).then((m) => m.java());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "JavaScript",
      alias: ["ecmascript", "js", "node"],
      extensions: ["js", "mjs", "cjs"],
      load() {
        return Promise.resolve().then(() => (init_dist10(), dist_exports2)).then((m) => m.javascript());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "JSON",
      alias: ["json5"],
      extensions: ["json", "map"],
      load() {
        return Promise.resolve().then(() => (init_dist16(), dist_exports8)).then((m) => m.json());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "JSX",
      extensions: ["jsx"],
      load() {
        return Promise.resolve().then(() => (init_dist10(), dist_exports2)).then((m) => m.javascript({ jsx: true }));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "MariaDB SQL",
      load() {
        return sql3("MariaSQL");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Markdown",
      extensions: ["md", "markdown", "mkd"],
      load() {
        return Promise.resolve().then(() => (init_dist12(), dist_exports4)).then((m) => m.markdown());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "MS SQL",
      load() {
        return sql3("MSSQL");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "MySQL",
      load() {
        return sql3("MySQL");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "PHP",
      extensions: ["php", "php3", "php4", "php5", "php7", "phtml"],
      load() {
        return Promise.resolve().then(() => (init_dist17(), dist_exports9)).then((m) => m.php());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "PLSQL",
      extensions: ["pls"],
      load() {
        return sql3("PLSQL");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "PostgreSQL",
      load() {
        return sql3("PostgreSQL");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Python",
      extensions: ["BUILD", "bzl", "py", "pyw"],
      filename: /^(BUCK|BUILD)$/,
      load() {
        return Promise.resolve().then(() => (init_dist18(), dist_exports10)).then((m) => m.python());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Rust",
      extensions: ["rs"],
      load() {
        return Promise.resolve().then(() => (init_dist19(), dist_exports11)).then((m) => m.rust());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SQL",
      extensions: ["sql"],
      load() {
        return sql3("StandardSQL");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SQLite",
      load() {
        return sql3("SQLite");
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "TSX",
      extensions: ["tsx"],
      load() {
        return Promise.resolve().then(() => (init_dist10(), dist_exports2)).then((m) => m.javascript({ jsx: true, typescript: true }));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "TypeScript",
      alias: ["ts"],
      extensions: ["ts"],
      load() {
        return Promise.resolve().then(() => (init_dist10(), dist_exports2)).then((m) => m.javascript({ typescript: true }));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "WebAssembly",
      extensions: ["wat", "wast"],
      load() {
        return Promise.resolve().then(() => (init_dist20(), dist_exports12)).then((m) => m.wast());
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "XML",
      alias: ["rss", "wsdl", "xsd"],
      extensions: ["xml", "xsl", "xsd", "svg"],
      load() {
        return Promise.resolve().then(() => (init_dist21(), dist_exports13)).then((m) => m.xml());
      }
    }),
    // Legacy modes ported from CodeMirror 5
    /* @__PURE__ */ LanguageDescription.of({
      name: "APL",
      extensions: ["dyalog", "apl"],
      load() {
        return Promise.resolve().then(() => (init_apl(), apl_exports)).then((m) => legacy(m.apl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "PGP",
      alias: ["asciiarmor"],
      extensions: ["asc", "pgp", "sig"],
      load() {
        return Promise.resolve().then(() => (init_asciiarmor(), asciiarmor_exports)).then((m) => legacy(m.asciiArmor));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "ASN.1",
      extensions: ["asn", "asn1"],
      load() {
        return Promise.resolve().then(() => (init_asn1(), asn1_exports)).then((m) => legacy(m.asn1({})));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Asterisk",
      filename: /^extensions\.conf$/i,
      load() {
        return Promise.resolve().then(() => (init_asterisk(), asterisk_exports)).then((m) => legacy(m.asterisk));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Brainfuck",
      extensions: ["b", "bf"],
      load() {
        return Promise.resolve().then(() => (init_brainfuck(), brainfuck_exports)).then((m) => legacy(m.brainfuck));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Cobol",
      extensions: ["cob", "cpy"],
      load() {
        return Promise.resolve().then(() => (init_cobol(), cobol_exports)).then((m) => legacy(m.cobol));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "C#",
      alias: ["csharp", "cs"],
      extensions: ["cs"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.csharp));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Clojure",
      extensions: ["clj", "cljc", "cljx"],
      load() {
        return Promise.resolve().then(() => (init_clojure(), clojure_exports)).then((m) => legacy(m.clojure));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "ClojureScript",
      extensions: ["cljs"],
      load() {
        return Promise.resolve().then(() => (init_clojure(), clojure_exports)).then((m) => legacy(m.clojure));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Closure Stylesheets (GSS)",
      extensions: ["gss"],
      load() {
        return Promise.resolve().then(() => (init_css(), css_exports)).then((m) => legacy(m.gss));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "CMake",
      extensions: ["cmake", "cmake.in"],
      filename: /^CMakeLists\.txt$/,
      load() {
        return Promise.resolve().then(() => (init_cmake(), cmake_exports)).then((m) => legacy(m.cmake));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "CoffeeScript",
      alias: ["coffee", "coffee-script"],
      extensions: ["coffee"],
      load() {
        return Promise.resolve().then(() => (init_coffeescript(), coffeescript_exports)).then((m) => legacy(m.coffeeScript));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Common Lisp",
      alias: ["lisp"],
      extensions: ["cl", "lisp", "el"],
      load() {
        return Promise.resolve().then(() => (init_commonlisp(), commonlisp_exports)).then((m) => legacy(m.commonLisp));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Cypher",
      extensions: ["cyp", "cypher"],
      load() {
        return Promise.resolve().then(() => (init_cypher(), cypher_exports)).then((m) => legacy(m.cypher));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Cython",
      extensions: ["pyx", "pxd", "pxi"],
      load() {
        return Promise.resolve().then(() => (init_python(), python_exports)).then((m) => legacy(m.cython));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Crystal",
      extensions: ["cr"],
      load() {
        return Promise.resolve().then(() => (init_crystal(), crystal_exports)).then((m) => legacy(m.crystal));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "D",
      extensions: ["d"],
      load() {
        return Promise.resolve().then(() => (init_d(), d_exports)).then((m) => legacy(m.d));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Dart",
      extensions: ["dart"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.dart));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "diff",
      extensions: ["diff", "patch"],
      load() {
        return Promise.resolve().then(() => (init_diff(), diff_exports)).then((m) => legacy(m.diff));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Dockerfile",
      filename: /^Dockerfile$/,
      load() {
        return Promise.resolve().then(() => (init_dockerfile(), dockerfile_exports)).then((m) => legacy(m.dockerFile));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "DTD",
      extensions: ["dtd"],
      load() {
        return Promise.resolve().then(() => (init_dtd(), dtd_exports)).then((m) => legacy(m.dtd));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Dylan",
      extensions: ["dylan", "dyl", "intr"],
      load() {
        return Promise.resolve().then(() => (init_dylan(), dylan_exports)).then((m) => legacy(m.dylan));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "EBNF",
      load() {
        return Promise.resolve().then(() => (init_ebnf(), ebnf_exports)).then((m) => legacy(m.ebnf));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "ECL",
      extensions: ["ecl"],
      load() {
        return Promise.resolve().then(() => (init_ecl(), ecl_exports)).then((m) => legacy(m.ecl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "edn",
      extensions: ["edn"],
      load() {
        return Promise.resolve().then(() => (init_clojure(), clojure_exports)).then((m) => legacy(m.clojure));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Eiffel",
      extensions: ["e"],
      load() {
        return Promise.resolve().then(() => (init_eiffel(), eiffel_exports)).then((m) => legacy(m.eiffel));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Elm",
      extensions: ["elm"],
      load() {
        return Promise.resolve().then(() => (init_elm(), elm_exports)).then((m) => legacy(m.elm));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Erlang",
      extensions: ["erl"],
      load() {
        return Promise.resolve().then(() => (init_erlang(), erlang_exports)).then((m) => legacy(m.erlang));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Esper",
      load() {
        return Promise.resolve().then(() => (init_sql(), sql_exports)).then((m) => legacy(m.esper));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Factor",
      extensions: ["factor"],
      load() {
        return Promise.resolve().then(() => (init_factor(), factor_exports)).then((m) => legacy(m.factor));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "FCL",
      load() {
        return Promise.resolve().then(() => (init_fcl(), fcl_exports)).then((m) => legacy(m.fcl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Forth",
      extensions: ["forth", "fth", "4th"],
      load() {
        return Promise.resolve().then(() => (init_forth(), forth_exports)).then((m) => legacy(m.forth));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Fortran",
      extensions: ["f", "for", "f77", "f90", "f95"],
      load() {
        return Promise.resolve().then(() => (init_fortran(), fortran_exports)).then((m) => legacy(m.fortran));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "F#",
      alias: ["fsharp"],
      extensions: ["fs"],
      load() {
        return Promise.resolve().then(() => (init_mllike(), mllike_exports)).then((m) => legacy(m.fSharp));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Gas",
      extensions: ["s"],
      load() {
        return Promise.resolve().then(() => (init_gas(), gas_exports)).then((m) => legacy(m.gas));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Gherkin",
      extensions: ["feature"],
      load() {
        return Promise.resolve().then(() => (init_gherkin(), gherkin_exports)).then((m) => legacy(m.gherkin));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Go",
      extensions: ["go"],
      load() {
        return Promise.resolve().then(() => (init_go(), go_exports)).then((m) => legacy(m.go));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Groovy",
      extensions: ["groovy", "gradle"],
      filename: /^Jenkinsfile$/,
      load() {
        return Promise.resolve().then(() => (init_groovy(), groovy_exports)).then((m) => legacy(m.groovy));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Haskell",
      extensions: ["hs"],
      load() {
        return Promise.resolve().then(() => (init_haskell(), haskell_exports)).then((m) => legacy(m.haskell));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Haxe",
      extensions: ["hx"],
      load() {
        return Promise.resolve().then(() => (init_haxe(), haxe_exports)).then((m) => legacy(m.haxe));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "HXML",
      extensions: ["hxml"],
      load() {
        return Promise.resolve().then(() => (init_haxe(), haxe_exports)).then((m) => legacy(m.hxml));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "HTTP",
      load() {
        return Promise.resolve().then(() => (init_http(), http_exports)).then((m) => legacy(m.http));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "IDL",
      extensions: ["pro"],
      load() {
        return Promise.resolve().then(() => (init_idl(), idl_exports)).then((m) => legacy(m.idl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "JSON-LD",
      alias: ["jsonld"],
      extensions: ["jsonld"],
      load() {
        return Promise.resolve().then(() => (init_javascript(), javascript_exports)).then((m) => legacy(m.jsonld));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Jinja2",
      extensions: ["j2", "jinja", "jinja2"],
      load() {
        return Promise.resolve().then(() => (init_jinja2(), jinja2_exports)).then((m) => legacy(m.jinja2));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Julia",
      extensions: ["jl"],
      load() {
        return Promise.resolve().then(() => (init_julia(), julia_exports)).then((m) => legacy(m.julia));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Kotlin",
      extensions: ["kt"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.kotlin));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "LESS",
      extensions: ["less"],
      load() {
        return Promise.resolve().then(() => (init_css(), css_exports)).then((m) => legacy(m.less));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "LiveScript",
      alias: ["ls"],
      extensions: ["ls"],
      load() {
        return Promise.resolve().then(() => (init_livescript(), livescript_exports)).then((m) => legacy(m.liveScript));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Lua",
      extensions: ["lua"],
      load() {
        return Promise.resolve().then(() => (init_lua(), lua_exports)).then((m) => legacy(m.lua));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "mIRC",
      extensions: ["mrc"],
      load() {
        return Promise.resolve().then(() => (init_mirc(), mirc_exports)).then((m) => legacy(m.mirc));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Mathematica",
      extensions: ["m", "nb", "wl", "wls"],
      load() {
        return Promise.resolve().then(() => (init_mathematica(), mathematica_exports)).then((m) => legacy(m.mathematica));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Modelica",
      extensions: ["mo"],
      load() {
        return Promise.resolve().then(() => (init_modelica(), modelica_exports)).then((m) => legacy(m.modelica));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "MUMPS",
      extensions: ["mps"],
      load() {
        return Promise.resolve().then(() => (init_mumps(), mumps_exports)).then((m) => legacy(m.mumps));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Mbox",
      extensions: ["mbox"],
      load() {
        return Promise.resolve().then(() => (init_mbox(), mbox_exports)).then((m) => legacy(m.mbox));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Nginx",
      filename: /nginx.*\.conf$/i,
      load() {
        return Promise.resolve().then(() => (init_nginx(), nginx_exports)).then((m) => legacy(m.nginx));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "NSIS",
      extensions: ["nsh", "nsi"],
      load() {
        return Promise.resolve().then(() => (init_nsis(), nsis_exports)).then((m) => legacy(m.nsis));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "NTriples",
      extensions: ["nt", "nq"],
      load() {
        return Promise.resolve().then(() => (init_ntriples(), ntriples_exports)).then((m) => legacy(m.ntriples));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Objective-C",
      alias: ["objective-c", "objc"],
      extensions: ["m"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.objectiveC));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Objective-C++",
      alias: ["objective-c++", "objc++"],
      extensions: ["mm"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.objectiveCpp));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "OCaml",
      extensions: ["ml", "mli", "mll", "mly"],
      load() {
        return Promise.resolve().then(() => (init_mllike(), mllike_exports)).then((m) => legacy(m.oCaml));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Octave",
      extensions: ["m"],
      load() {
        return Promise.resolve().then(() => (init_octave(), octave_exports)).then((m) => legacy(m.octave));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Oz",
      extensions: ["oz"],
      load() {
        return Promise.resolve().then(() => (init_oz(), oz_exports)).then((m) => legacy(m.oz));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Pascal",
      extensions: ["p", "pas"],
      load() {
        return Promise.resolve().then(() => (init_pascal(), pascal_exports)).then((m) => legacy(m.pascal));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Perl",
      extensions: ["pl", "pm"],
      load() {
        return Promise.resolve().then(() => (init_perl(), perl_exports)).then((m) => legacy(m.perl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Pig",
      extensions: ["pig"],
      load() {
        return Promise.resolve().then(() => (init_pig(), pig_exports)).then((m) => legacy(m.pig));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "PowerShell",
      extensions: ["ps1", "psd1", "psm1"],
      load() {
        return Promise.resolve().then(() => (init_powershell(), powershell_exports)).then((m) => legacy(m.powerShell));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Properties files",
      alias: ["ini", "properties"],
      extensions: ["properties", "ini", "in"],
      load() {
        return Promise.resolve().then(() => (init_properties(), properties_exports)).then((m) => legacy(m.properties));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "ProtoBuf",
      extensions: ["proto"],
      load() {
        return Promise.resolve().then(() => (init_protobuf(), protobuf_exports)).then((m) => legacy(m.protobuf));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Puppet",
      extensions: ["pp"],
      load() {
        return Promise.resolve().then(() => (init_puppet(), puppet_exports)).then((m) => legacy(m.puppet));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Q",
      extensions: ["q"],
      load() {
        return Promise.resolve().then(() => (init_q(), q_exports)).then((m) => legacy(m.q));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "R",
      alias: ["rscript"],
      extensions: ["r", "R"],
      load() {
        return Promise.resolve().then(() => (init_r(), r_exports)).then((m) => legacy(m.r));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "RPM Changes",
      load() {
        return Promise.resolve().then(() => (init_rpm(), rpm_exports)).then((m) => legacy(m.rpmChanges));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "RPM Spec",
      extensions: ["spec"],
      load() {
        return Promise.resolve().then(() => (init_rpm(), rpm_exports)).then((m) => legacy(m.rpmSpec));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Ruby",
      alias: ["jruby", "macruby", "rake", "rb", "rbx"],
      extensions: ["rb"],
      load() {
        return Promise.resolve().then(() => (init_ruby(), ruby_exports)).then((m) => legacy(m.ruby));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SAS",
      extensions: ["sas"],
      load() {
        return Promise.resolve().then(() => (init_sas(), sas_exports)).then((m) => legacy(m.sas));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Sass",
      extensions: ["sass"],
      load() {
        return Promise.resolve().then(() => (init_sass(), sass_exports)).then((m) => legacy(m.sass));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Scala",
      extensions: ["scala"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.scala));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Scheme",
      extensions: ["scm", "ss"],
      load() {
        return Promise.resolve().then(() => (init_scheme(), scheme_exports)).then((m) => legacy(m.scheme));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SCSS",
      extensions: ["scss"],
      load() {
        return Promise.resolve().then(() => (init_css(), css_exports)).then((m) => legacy(m.sCSS));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Shell",
      alias: ["bash", "sh", "zsh"],
      extensions: ["sh", "ksh", "bash"],
      filename: /^PKGBUILD$/,
      load() {
        return Promise.resolve().then(() => (init_shell(), shell_exports)).then((m) => legacy(m.shell));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Sieve",
      extensions: ["siv", "sieve"],
      load() {
        return Promise.resolve().then(() => (init_sieve(), sieve_exports)).then((m) => legacy(m.sieve));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Smalltalk",
      extensions: ["st"],
      load() {
        return Promise.resolve().then(() => (init_smalltalk(), smalltalk_exports)).then((m) => legacy(m.smalltalk));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Solr",
      load() {
        return Promise.resolve().then(() => (init_solr(), solr_exports)).then((m) => legacy(m.solr));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SML",
      extensions: ["sml", "sig", "fun", "smackspec"],
      load() {
        return Promise.resolve().then(() => (init_mllike(), mllike_exports)).then((m) => legacy(m.sml));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SPARQL",
      alias: ["sparul"],
      extensions: ["rq", "sparql"],
      load() {
        return Promise.resolve().then(() => (init_sparql(), sparql_exports)).then((m) => legacy(m.sparql));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Spreadsheet",
      alias: ["excel", "formula"],
      load() {
        return Promise.resolve().then(() => (init_spreadsheet(), spreadsheet_exports)).then((m) => legacy(m.spreadsheet));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Squirrel",
      extensions: ["nut"],
      load() {
        return Promise.resolve().then(() => (init_clike(), clike_exports)).then((m) => legacy(m.squirrel));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Stylus",
      extensions: ["styl"],
      load() {
        return Promise.resolve().then(() => (init_stylus(), stylus_exports)).then((m) => legacy(m.stylus));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Swift",
      extensions: ["swift"],
      load() {
        return Promise.resolve().then(() => (init_swift(), swift_exports)).then((m) => legacy(m.swift));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "sTeX",
      load() {
        return Promise.resolve().then(() => (init_stex(), stex_exports)).then((m) => legacy(m.stex));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "LaTeX",
      alias: ["tex"],
      extensions: ["text", "ltx", "tex"],
      load() {
        return Promise.resolve().then(() => (init_stex(), stex_exports)).then((m) => legacy(m.stex));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "SystemVerilog",
      extensions: ["v", "sv", "svh"],
      load() {
        return Promise.resolve().then(() => (init_verilog(), verilog_exports)).then((m) => legacy(m.verilog));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Tcl",
      extensions: ["tcl"],
      load() {
        return Promise.resolve().then(() => (init_tcl(), tcl_exports)).then((m) => legacy(m.tcl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Textile",
      extensions: ["textile"],
      load() {
        return Promise.resolve().then(() => (init_textile(), textile_exports)).then((m) => legacy(m.textile));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "TiddlyWiki",
      load() {
        return Promise.resolve().then(() => (init_tiddlywiki(), tiddlywiki_exports)).then((m) => legacy(m.tiddlyWiki));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Tiki wiki",
      load() {
        return Promise.resolve().then(() => (init_tiki(), tiki_exports)).then((m) => legacy(m.tiki));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "TOML",
      extensions: ["toml"],
      load() {
        return Promise.resolve().then(() => (init_toml(), toml_exports)).then((m) => legacy(m.toml));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Troff",
      extensions: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
      load() {
        return Promise.resolve().then(() => (init_troff(), troff_exports)).then((m) => legacy(m.troff));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "TTCN",
      extensions: ["ttcn", "ttcn3", "ttcnpp"],
      load() {
        return Promise.resolve().then(() => (init_ttcn(), ttcn_exports)).then((m) => legacy(m.ttcn));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "TTCN_CFG",
      extensions: ["cfg"],
      load() {
        return Promise.resolve().then(() => (init_ttcn_cfg(), ttcn_cfg_exports)).then((m) => legacy(m.ttcnCfg));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Turtle",
      extensions: ["ttl"],
      load() {
        return Promise.resolve().then(() => (init_turtle(), turtle_exports)).then((m) => legacy(m.turtle));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Web IDL",
      extensions: ["webidl"],
      load() {
        return Promise.resolve().then(() => (init_webidl(), webidl_exports)).then((m) => legacy(m.webIDL));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "VB.NET",
      extensions: ["vb"],
      load() {
        return Promise.resolve().then(() => (init_vb(), vb_exports)).then((m) => legacy(m.vb));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "VBScript",
      extensions: ["vbs"],
      load() {
        return Promise.resolve().then(() => (init_vbscript(), vbscript_exports)).then((m) => legacy(m.vbScript));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Velocity",
      extensions: ["vtl"],
      load() {
        return Promise.resolve().then(() => (init_velocity(), velocity_exports)).then((m) => legacy(m.velocity));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Verilog",
      extensions: ["v"],
      load() {
        return Promise.resolve().then(() => (init_verilog(), verilog_exports)).then((m) => legacy(m.verilog));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "VHDL",
      extensions: ["vhd", "vhdl"],
      load() {
        return Promise.resolve().then(() => (init_vhdl(), vhdl_exports)).then((m) => legacy(m.vhdl));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "XQuery",
      extensions: ["xy", "xquery"],
      load() {
        return Promise.resolve().then(() => (init_xquery(), xquery_exports)).then((m) => legacy(m.xQuery));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Yacas",
      extensions: ["ys"],
      load() {
        return Promise.resolve().then(() => (init_yacas(), yacas_exports)).then((m) => legacy(m.yacas));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "YAML",
      alias: ["yml"],
      extensions: ["yaml", "yml"],
      load() {
        return Promise.resolve().then(() => (init_yaml(), yaml_exports)).then((m) => legacy(m.yaml));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "Z80",
      extensions: ["z80"],
      load() {
        return Promise.resolve().then(() => (init_z80(), z80_exports)).then((m) => legacy(m.z80));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "MscGen",
      extensions: ["mscgen", "mscin", "msc"],
      load() {
        return Promise.resolve().then(() => (init_mscgen(), mscgen_exports)).then((m) => legacy(m.mscgen));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "X\xF9",
      extensions: ["xu"],
      load() {
        return Promise.resolve().then(() => (init_mscgen(), mscgen_exports)).then((m) => legacy(m.xu));
      }
    }),
    /* @__PURE__ */ LanguageDescription.of({
      name: "MsGenny",
      extensions: ["msgenny"],
      load() {
        return Promise.resolve().then(() => (init_mscgen(), mscgen_exports)).then((m) => legacy(m.msgenny));
      }
    })
  ];

  // src/js/faulkner.js
  var App = {};
  var countWords = (string3) => {
    string3 = string3.replace(/(^\s*)|(\s*$)/gi, "");
    string3 = string3.replace(/[ ]{2,}/gi, " ");
    string3 = string3.replace(/\n /, "\n");
    return string3.split(" ").filter(String).length;
  };
  var getDirectory = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker({
        mode: "readwrite"
      });
      App.directory = directoryHandle;
      return App.directory;
    } catch (error) {
      alert(error.name, error.message);
    }
  };
  var verifyPermission = async (handle) => {
    const options = { mode: "readwrite" };
    if (await handle.queryPermission(options) === "granted") {
      return true;
    }
    if (await handle.requestPermission(options) === "granted") {
      return true;
    }
    return false;
  };
  var getDataForFile = async (fileHandle, slug) => {
    const file = await fileHandle.getFile();
    const contents = await file.text();
    const titleRegex = /title: (.*)/;
    const hiddenRegex = /hidden: true/;
    const matchTitle = contents.match(titleRegex);
    const draft = hiddenRegex.test(contents);
    let title = slug;
    if (matchTitle) {
      title = matchTitle[1];
    }
    const date = DateTime.fromISO(slug.substring(0, 10));
    const frontmatterRegex = /^---\r?\n([\s\S]*?)\r?\n---\r?\n/;
    const wordCount = countWords(contents.replace(frontmatterRegex, "").trim());
    return {
      title,
      date,
      contents,
      draft,
      wordCount,
      slug
    };
    return {
      contents,
      draft,
      slug
    };
  };
  var writeFile = async (fileHandle, contents) => {
    const writable = await fileHandle.createWritable();
    await writable.write(contents);
    fileHandle.contents = contents;
    await writable.close();
  };
  var createNewFile = async (name2, contents) => {
    const options = {
      suggestedName: `${DateTime.now().toISODate()}-${name2}.md`,
      types: [
        {
          description: "Markdown files",
          accept: {
            "text/markdown": [".md"]
          }
        }
      ]
    };
    const handle = await window.showSaveFilePicker(options);
    await writeFile(handle, contents);
    return handle;
  };
  var initApp = () => {
    App.pickerButton = document.getElementById("pick-directory");
    App.fileList = document.getElementById("file-list");
    App.draftsList = document.getElementById("drafts-list");
    App.saveButton = document.getElementById("save");
    App.viewPostButton = document.getElementById("view-post");
    App.createDialog = document.getElementById("create-dialog");
    App.createButton = document.getElementById("create-button");
    App.openInCodeButton = document.getElementById("open-vscode");
    let timer;
    const state = EditorState.create({
      extensions: [
        markdown({ base: markdownLanguage, codeLanguages: languages }),
        EditorView.lineWrapping,
        EditorView.updateListener.of((update) => {
          if (update.docChanged) {
            if (timer)
              clearTimeout(timer);
            timer = setTimeout(async () => {
              const contents = update.state.doc.toString();
              if (App.currentFile && contents !== App.currentFile.contents) {
                App.saveButton.hidden = false;
                App.editorState = "dirty";
                console.log("SAVING");
                await writeFile(App.currentFile, contents);
                App.editorState = "";
                App.saveButton.hidden = true;
              } else {
                App.saveButton.hidden = true;
                App.editorState = "";
              }
            }, 500);
          }
        })
      ]
    });
    App.editor = new EditorView({
      state,
      parent: document.getElementById("editor")
    });
    App.pickerButton.onclick = async () => {
      await getDirectory();
      const success = await verifyPermission(App.directory);
      if (success) {
        App.pickerButton.hidden = true;
        App.createButton.hidden = false;
      }
      App.files = [];
      for await (const entry of App.directory.values()) {
        if (entry.kind === "file" && entry.name.endsWith(".md")) {
          const slug = entry.name.replace(".md", "");
          const data2 = await getDataForFile(entry, slug);
          Object.assign(entry, data2);
          App.files.push(entry);
        } else if (entry.kind === "directory") {
          const slug = entry.name;
          const fileEntry = await entry.getFileHandle("index.md");
          const data2 = await getDataForFile(fileEntry, slug);
          Object.assign(fileEntry, data2);
          App.files.push(fileEntry);
        }
      }
      App.saveButton.onclick = async () => {
        if (App.currentFile) {
          await writeFile(App.currentFile, App.editor.getValue());
          App.editorState = "";
          App.saveButton.hidden = true;
        }
      };
      App.createButton.onclick = () => {
        App.createDialog.showModal();
      };
      App.createDialog.onclose = async ({ target: dialog }) => {
        if (dialog.returnValue === "confirm") {
          const formData = new FormData(dialog.querySelector("form"));
          const { title, note } = Object.fromEntries(formData.entries());
          if (title && title !== "") {
            const slug = (0, import_slugify.default)(title);
            const contents = [
              "---",
              `title: ${title}`,
              "hidden: true",
              "---",
              "",
              note
            ].join("\n");
            const file = await createNewFile(slug, contents);
            const data2 = await getDataForFile(file);
            Object.assign(file, data2);
            file.slug = file.name.replace(".md", "");
            App.files.push(file);
            await populateFiles();
          }
          dialog.querySelector("form")?.reset();
        }
      };
      App.files = App.files.sort((a2, b) => b.date.toMillis() - a2.date.toMillis());
      await populateFiles();
      App.draftsList.querySelector("li:first-child button")?.click();
    };
  };
  var clearActiveNavItems = () => {
    const activeItems = document.querySelectorAll("ul button[data-active]");
    activeItems.forEach((item) => {
      delete item.dataset.active;
    });
  };
  var populateFiles = async () => {
    App.fileList.innerHTML = "";
    App.draftsList.innerHTML = "";
    for (const file of App.files) {
      const li = document.createElement("li");
      const button = document.createElement("button");
      const onClick = () => {
        App.editorState = "";
        App.editor.dispatch({
          changes: {
            from: 0,
            to: App.editor.state.doc.length,
            insert: file.contents
          }
        });
        App.saveButton.hidden = true;
        App.currentFile = file;
        clearActiveNavItems();
        button.dataset.active = true;
        App.viewPostButton.hidden = false;
        App.openInCodeButton.hidden = false;
        App.viewPostButton.href = `http://localhost:1995${file.date.toFormat(
          "/yyyy/MM/"
        )}${file.slug.slice(11)}`;
        const fileName = file.name.includes("index.md") ? `${file.slug}/index.md` : file.name;
        App.openInCodeButton.href = `vscode://file//Users/chase/Repositories/www/posts/${fileName}`;
      };
      button.onclick = () => {
        if (App.editorState === "dirty") {
          if (confirm("You have unsaved changes.")) {
            onClick();
          }
        } else {
          onClick();
        }
      };
      const diffInDays = Math.round(
        DateTime.now().diff(file.date, "days").toObject().days
      );
      button.innerText = file.title;
      li.appendChild(button);
      if (file.draft) {
        li.dataset.age = diffInDays;
        const span = document.createElement("span");
        span.innerText = `${diffInDays}d, ${file.wordCount}w`;
        button.appendChild(span);
        App.draftsList.appendChild(li);
      } else {
        App.fileList.appendChild(li);
      }
    }
    const drafts = Array.from(App.draftsList.querySelectorAll("li[data-age]"));
    const sortedDrafts = drafts.sort(
      (a2, b) => parseInt(b.dataset.age) - parseInt(a2.dataset.age)
    );
    App.draftsList.append(...sortedDrafts);
  };
  document.addEventListener("DOMContentLoaded", () => {
    initApp();
    document.title = "Faulkner";
  });
  window.onbeforeunload = function(e) {
    e.preventDefault();
    if (App.editorState === "dirty") {
      return "You have unsaved changes. Are you sure you want to close this tab?";
    }
  };
})();
