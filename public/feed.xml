<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Chase McCoy</title>
        <link>http://chasem.co</link>
        <description>Chase McCoy is a product designer, front-end engineer, and internet explorer working on design systems at Stripe.</description>
        <lastBuildDate>Sat, 03 Apr 2021 23:06:17 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>chasem.co</generator>
        <language>en</language>
        <image>
            <title>Chase McCoy</title>
            <url>http://chasem.co/site-image.png</url>
            <link>http://chasem.co</link>
        </image>
        <atom:link href="https://chasem.co/feed.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[A space for ourselves]]></title>
            <link>https:/chasem.co/space-for-ourselves</link>
            <guid>space-for-ourselves</guid>
            <pubDate>Mon, 08 Feb 2021 00:00:00 GMT</pubDate>
            <description><![CDATA[Thoughts on the challenges of working on the web in the attention economy, and a reminder of how our spaces shape us.]]></description>
            <content:encoded><![CDATA[<p>Working on the internet in 2021 is really hard, and it’s getting harder.</p>
<p>The past year has introduced us all to new routines, new ways of working, new forms of anxiety, and new sources of grief all delivered via the web straight to our periphery. On top of that, we’ve also seen the increasing commercialization of online spaces in recent years. Instagram no longer feels like a place for sharing photos with friends, it feels like a venue to monetize your brand and commodify the attention of others.</p>
<p>The times we find ourselves in have only accelerated the degree to which we are turning to the web to find connection, do our jobs, and spend our time. I personally love the web, and have chosen to build my career around it—but even if that wasn’t true I wouldn’t be able to escape this new, frequently virtual reality.</p>
<p>Despite my love for the web, I’ve realized that the time I spend online today is frequently more draining than it is nourishing. Moments that I would prefer to spend creating and learning are instead spent comparing my output and value to someone else. And when I say “spent”, I mean it more literally than you might think—this is what we pay when we <em>pay</em> attention. When we choose to give energy to things that don&#x27;t serve our goals we are trading against our own creative well being.</p>
<p>Technology is supposed to exist to serve humans and human goals. But increasingly, so many of the technologies that we rely on have goals that are counter to our own—the primary one being engagement for profit’s sake. Tech companies don&#x27;t care whether our engagement is in pursuit of a personal goal, they only care whether they can sell that engagement to advertisers. Our technologies have their own agenda and definition of success that is frequently at odds with our own. So many of us are now beholden to something that was meant to serve <em>us</em>, not the other way around.</p>
<p><img src="/img/space-for-ourselves/saint-peter.jpg" alt="A painting titled &quot;Guardroom with the Deliverance of Saint Peter&quot;"/></p>
<p class="caption mt-8"><a href="https://www.metmuseum.org/art/collection/search/437777" class="color-caption">Guardroom with the Deliverance of Saint Peter, 1645, courtesy of The Met</a></p>
<p>I&#x27;ve been struggling with how creatives are supposed to thrive in this environment, and how we might separate the web that connects and nourishes us from the web that is trying to profit off of our distractedness. If this truly is an attention economy, how can we engage with the web without paying a toll in the only currency that is truly required for creative work?</p>
<p>And to be clear, I don&#x27;t think this is just a problem on the web. So much of our value today is derived from what we produce and share with the world, often done in order to justify some mysterious idea of a &quot;work ethic&quot; in a society where production is seen as a goal unto itself.</p>
<p>But a creative who judges the value of their work by what they produce and share with the world is missing the point. The &quot;why&quot; of our work is in the process, not the result.</p>
<p>I&#x27;m writing this because I need a reminder for myself, and maybe you do too, that our creativity is fickle and doesn&#x27;t work at the pace of the internet, and that&#x27;s okay. The real value is not ultimately in what we create—it&#x27;s in the space we carve out for ourselves to be creative, and the things we learn about ourselves and the world within that space. And yes, that includes all the struggles and tensions that come along with the work.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Measuring the health of a design system]]></title>
            <link>https:/chasem.co/design-system-health</link>
            <guid>design-system-health</guid>
            <pubDate>Tue, 25 Aug 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Design systems are like community gardens, and understanding their health is key to success. Here's how the team at Sprout Social does it.]]></description>
            <content:encoded><![CDATA[<p><img src="/img/design-system-health/content-health.gif" alt="Seeds content health launch animation"/></p>
<div class="callout p-4" style="border:1px dashed var(--section-color);border-radius:16px"><aside class="p-8" style="border-radius:12px"><div class="p-12" style="background:var(--color-body-background);border-radius:8px"><p class="smaller"><p><b>Note!</b> This article was <a target="_blank" href="https://medium.com/sprout-social-design/design-system-health-3004551060f0#0cc5">originally published on the Sprout Social design blog</a>.</p></p></div></aside></div>
<p>Design systems are a lot like community gardens. Everything in a system has a natural life cycle that begins with a human need, eventually grows into a fully-formed component or pattern, and (if nurtured) evolves over time.</p>
<p>System practitioners spend a lot of time focused on the beginning of this life cycle—how does the content of our system come to exist? How does it find its way into the system, and how can our communities play a key role in that process? We sometimes spend so much time focused on the early parts of this lifecycle that we forget to account for how content grows and evolves within our system.</p>
<p>At any given time, a garden may have plants that are flourishing and plants that are withering or dying. Likewise, a design system may have some content that captures the latest and greatest thinking around your product or brand, and some content that may no longer be accurate.</p>
<p>While it might be uncomfortable to acknowledge that everything in your system is not accurate, out-of-date content is a reality for any design system that supports an actively evolving product or brand. Acknowledging and planning for this is important for both the team managing your design system, and the users of that system. Without understanding the health of our system, the teams responsible for their upkeep can’t accurately prioritize work to maintain them, and our users lack confidence because healthy content is treated and presented the same way as out of date content.</p>
<p>Of course, understanding the health of a garden is a lot easier than understanding of the health of a design system. Plants visibly wither and die, whereas design patterns and guidelines slowly become divorced from the implementation they are intended to support.</p>
<p>Sprout Social’s design system, <a href="https://seeds.sproutsocial.com">Seeds</a>, has matured and grown significantly over the past year. In order to ensure we can continue to grow in a responsible way, my team recently set out to paint a clearer picture of the health of our design system for our own purposes, and for the benefit of our users.</p>
<h2 id="defining-health">Defining health</h2>
<p>In order to surface content health in Seeds, we had to first develop a shared definition of what “health” means for content in a design system. This was by far the most challenging aspect of the project, because there are so many factors that can influence health. In fact, this definition will likely be unique to every design system.</p>
<p>In this case, it was helpful for us to work from the outside in by defining the extremes of health in our system. This made things a lot more clear—we know that the positive extreme is simply healthy, up-to-date content, and the negative extreme is removing a piece of content from the system entirely. Of course, there’s a lot of nuance between those two extremes. How do we separate content that doesn’t fall into those buckets, and how much of that nuance do we need to expose to our users? For the answers to those questions, we asked them directly.</p>
<p>We ran a brainstorm with some of our users where we asked them to think about what factors might determine the health of content in our system. Our goal was to determine which “vital signs” our users look for when they are consuming our system. Here are some of the broader themes that we discovered:</p>
<ul>
<li><strong>Times, dates, and people.</strong> Consumers want insight into the history of content in our system—when was it created, when was it last updated, and by whom.</li>
<li><strong>UI kit availability</strong>. Lots of designers attributed the health of a component to whether or not it was represented in our Figma UI kit.</li>
<li><strong>Cross-platform availability</strong>. While our design system is currently focused on our web products, we do have lots of internal documentation on our mobile products that have not yet made it into the system. Our users think of patterns or components with mobile counterparts as being more healthy.</li>
<li><strong>Usage information.</strong> This theme is essentially “how often and where is this component or pattern used in our product(s)?” Frustratingly, this metric is one of the most difficult for our team to measure (as I am sure is true for many system teams).</li>
<li><strong>Known issues and planned enhancements.</strong> Our design system team has a clear sense of where the system is lacking, and what work is currently ongoing or planned. Our users, however, wanted more insight into that information.</li>
</ul>
<p><img src="/img/design-system-health/miro.png" alt="A screenshot of the results of our brainstorm with the team." title="A screenshot of the results of our brainstorm with the team."/></p>
<p>We then took these themes and broke out every discrete piece of relevant information that could be tracked and surfaced, based on the type of content in our system. Unfortunately, we had to filter out any vital signs that were not currently possible for us to track. Most of these were related to when and where in our products a certain component/pattern is used—although this didn’t make it into our v1 solution, we have plans for how we could track and surface this in future iterations.</p>
<p>In the end, we decided on the following vital signs to track for our first iteration:</p>
<ul>
<li><strong>Publish date</strong></li>
<li><strong>Last modified date</strong></li>
<li><strong>UI kit availability</strong></li>
<li><strong>Mobile counterpart</strong></li>
<li><strong>Known issues</strong></li>
<li><strong>Planned enhancements</strong></li>
</ul>
<p>In addition to these vital signs, we also decided to rate each page in our system with an overall health status, which I’ll discuss more in a bit. That status is based on these vital signs, and so it was important that we gathered this data before making decisions around status.</p>
<p>As is common when working on a design system, we turned to a spreadsheet for this. We inputted every page of our system, and created columns for each vital sign we needed to track down.</p>
<p><img src="/img/design-system-health/spreadsheet.png" alt="Spreadsheet where the team tracked and recorded all of the vital signs for our content"/></p>
<p>Luckily, tracking down the <strong>publish date</strong> for all our content was easy—since our system’s content lives in GitHub, we simply had to look at the content’s commit history to see when it was first added.</p>
<p>The <strong>last modified date</strong> was a bit trickier. Finding the date isn’t a problem (GitHub again), but manually tracking and updating these dates as content changes seemed like too much overhead. We wanted our health tracking system to be as effortless as possible, without adding extra burden for us to maintain over time. Enter the magic of <a href="https://www.netlify.com/products/functions/">serverless functions</a>…</p>
<p>I was able to write a function (hosted on <a href="https://www.netlify.com">Netlify</a>) that queries the <a href="https://developer.github.com/v3/repos/commits/#list-commits">Github API</a> to retrieve the date of the last commit for a given file path. Now, instead of tracking last modified dates manually for every page in our system, Seeds instead queries for this date automatically. This means it’s always accurate, and our team doesn’t have to think about updating the date whenever we modify content.</p>
<p>For tracking down <strong>UI kit and mobile counterparts</strong>, we turned to our teammates. We asked the domain experts across our teams to help us gather up links to components in our Figma UI kit and mobile documentation in our internal wiki, as well as system documentation from Apple’s Human Interface Guidelines and Google’s Material Design guidelines for instances where we default to system behavior. During this process, we asked those experts to identify whether missing content was something that needed to be added to our system, or if it was inapplicable to the system. For instance, our <a href="https://seeds.sproutsocial.com/components/stack">Stack</a> component has no counterpart in Figma because it’s a layout utility. However, this being missing does <em>not</em> indicate that Stack is less healthy than other components that do have counterparts in our UI Kit. Context is king when communicating the health of something as nuanced as a design system.</p>
<p>Finally, <strong>known issues and planned enhancements</strong> were the easiest for us to source because the design systems team knows our system intimately, including its shortcomings and roadmap. Our team sat down to go through every page together and list out the major issues and work we knew was planned or in the works. For our partner content, like writing and brand guidelines, we reached out to those teams directly to have them weigh in.</p>
<p>Collectively, these vital signs painted a clear picture of the health of our system. The spreadsheet alone would have been a useful resource for both our team and our stakeholders, but we knew that a much more powerful solution would be to surface this information contextual, within the system itself.</p>
<h2 id="communicating-health">Communicating health</h2>
<p>When planning this project, we discovered that there were two primary user needs we needed to fulfill when surfacing health in our system:</p>
<ul>
<li>Users need a <strong>stop/wait/go</strong> signal when evaluating whether or not to use some part of our system.</li>
<li>Users need <strong>research assistance</strong>. When scrutinizing content in our system, users want rich information to assist in their investigation. Contributors to the system likewise often need a reference point when making updates and evolving content.</li>
</ul>
<p>Each of these needs are on the opposite end of the interaction spectrum—the former is a quick signal that should immediately communicate the proper status to the user, while the latter is much more involved and requires intent from the user.</p>
<p>Due to these contrasting needs, we decided to break content health down into two parts:</p>
<ul>
<li>A <strong>health label</strong> that quickly clues the user into the general health of some piece of content. This status not only indicates health, but also serves as an indicator for users browsing content in Seeds—should they continue reading, or is there reason to stop and investigate?</li>
<li>A <strong>”scorecard”</strong> that includes a variety of metadata and information to help users understand health, and to prompt them to contribute to the system directly.</li>
</ul>
<h3 id="health-labels">Health labels</h3>
<p>Quickly communicating health is surprisingly challenging—there are a huge pool of metaphors and ideas to pull from. For instance, how might we quickly communicate that something is in good health? Here are just some of the words we might use:</p>
<ul>
<li>Mature</li>
<li>Fresh</li>
<li>Healthy</li>
<li>Strong</li>
<li>Good</li>
<li>Active</li>
</ul>
<p>Our team spent a lot of time evaluating language to find just the right terms. We avoided words like “mature” that falsely associated age with health—some content in a design system is naturally more evergreen than others, and age doesn’t paint a complete picture of health. We also avoided words like “dead” that are overly harsh and insensitive.</p>
<p>In the end, we landed on the following status labels, which just happen to fit into the plant theme we have going on at Sprout:</p>
<ul>
<li><strong>Healthy</strong> indicates content that is accurate and represents our most up-to-date recommendations.</li>
<li><strong>Withering</strong> indicates content that has known issues, but is still generally recommended for use.</li>
<li><strong>Dormant</strong> indicates content that is no longer recommended for use, and is in need of foundational updates.</li>
</ul>
<p><img src="/img/design-system-health/health-labels.svg" alt="Our health labels as they currently appear in our system."/></p>
<p>While the “healthy” and “withering” statuses are relatively straightforward, “dormant” may not be as obvious. Initially, our idea was to only have two statuses—healthy and withering. Our rationale was that any page that was beyond withering, and no longer recommended for use, would simply be removed from the system altogether until updated content could be created.</p>
<p>Once we got around to actually assigning statuses to our content, however, this quickly became a problem. Were we really prepared to delete all of the content in our system that had become obsolete? Again, one of our user needs was to assist contributors with research into the contents of our system. Understanding where a pattern came from and how it developed can be crucial to evolving it. If we removed the dormant pages from Seeds altogether, we would be depriving ourselves and our users of opportunities to contribute.</p>
<p>Thus we decided to have a third status for content that is out of date (no longer recommended for new work), but <em>should exist in the system in some capacity</em>. These dormant pages represent concepts that are fundamentally valid, and they serve as a placeholder for future work as well as a historical record for the contributors doing that work.</p>
<p>If dormant pages have some future in the system, what about pages that don’t? In our audit, we did identify content that represented patterns that are abandoned altogether, or that were created for temporary features or campaigns. Since these no longer had a place in our system, we quietly removed them.</p>
<h3 id="scorecards">Scorecards</h3>
<p>While the status label serves the purpose of quickly indicating health to our users, the content scorecard gives them access to the vital signs that informed the team’s decision on whether that content is healthy, withering, or dormant.</p>
<p>Scorecards open up as a modal on the page when the user clicks the status label. The contents of a scorecard depends on what is applicable for the page it represents, but all scorecards show the status label, a description of what that status indicates, the published and last modified dates for that content, and a call to action that serves to drive contribution to the system.</p>
<p><img src="/img/design-system-health/withering-modal.png" alt="An example of a scorecard for a “withering” page." title="An example of a scorecard for a “withering” page."/></p>
<p><img src="/img/design-system-health/cards.png" alt="Screenshots of a variety of content scorecards."/></p>
<p>For pages representing patterns or components that should have mobile or UI kit counterparts, we display that along with links directly to those resources if they exist. If something is missing, we intentionally display that as an indicator that there is work to be done.</p>
<p><img src="/img/design-system-health/cards2.png" alt="Intentionally showing missing items prompts users to contribute." title="Intentionally showing missing items prompts users to contribute."/></p>
<p>For issues and planned enhancements, we decided to allow the content to be free-form (versus the other vital signs that are displayed the same way across every scorecard). This meant that we could craft the content to best serve the context of that page’s specific health issues. This example shows the scorecard for our form documentation, which is dormant, and directs users to alternate documentation that will better serve them:</p>
<p><img src="/img/design-system-health/dormant-modal.png" alt="An example of a scorecard for a “dormant” page."/></p>
<p>This flexibility is key, as most pages have very unique problems and considerations that aren’t well suited to a strict template.</p>
<p>We are excited to see how scorecards might evolve in the future as we track more data about the health of our content over time. We also have plans to integrate tools that allow users to submit ideas, feedback, or suggestions directly rather than sending users to Slack.</p>
<h2 id="making-the-data-work-for-us">Making the data work for us</h2>
<p>While not the original goal of the project, having collected so much data for our content does unlock some very exciting opportunities for both the design system team and our users that weren’t possible before.</p>
<p>One of the first things that we built after shipping this project was an internal dashboard for the team to see the health of our system from a bird’s eye view. This page lets us see every page in our system, its status, and its publish date at a glance. It also shows us the total counts for healthy, withering, and dormant pages in our system.</p>
<p><img src="/img/design-system-health/health-dashboard.png" alt="A screenshot showing our internal content health dashboard." title="A screenshot showing our internal content health dashboard."/></p>
<p>This dashboard gives us an effective “snapshot” of our system’s health at any point in time. Our plan is to monitor and record these numbers over time, with the hope that our system’s health trends up, and giving us a concrete success metric to drive towards.</p>
<p>In the future, we have plans to open this dashboard up to our stakeholders as well so that they can easily see where we are in relation to our goals, and to provide our users with a one-stop-shop for finding opportunities to contribute.</p>
<p>There’s lots of other potential when you are tracking this kind of data. Here are a few ideas we’re exploring:</p>
<ul>
<li><strong>Sending notifications to the design system team when content hits a certain age.</strong> We are imagining a sort of early warning system that prompts our team to maintain and prune the garden that is our system.</li>
<li>Since we are now tracking the publish date for every page, we can easily determine if a page is “new” (say, less than 30 days old) and <strong>surface an indicator within our system that alerts users to new content they may not have seen yet</strong>.</li>
<li>Since we are tracking the elements of our system that are represented in both our Figma UI kit and our mobile documentation, we can easily <strong>generate reports for the maintainers of those resources to show them exactly where the gaps are between them and the system</strong>.</li>
</ul>
<p>We are super excited about what this fidelity of data can do for our system, and we hope to track more and more data over time so that our understanding of our system’s health continues to grow along with the system itself.</p>
<h2 id="whats-next">What’s next</h2>
<p>We learned from research that one of the biggest barriers for users who want to contribute to Seeds is understanding what our system <em>needs</em>. Users are much more likely to actualize their contribution if they feel like they are working towards a well-defined result as opposed to self-initiating a system change.</p>
<p>Our ultimate goal with this work (and the work planned to follow it) is to create a sustainable model of growth for our system. Our design system team is small (2 people), and constantly inundated with feature requests, bug reports, and suggestions for changes to our system that we could never reasonably hope to accomplish alone.</p>
<p>We know what we need to crowd source this work if we are going to keep up with our brand, products, and users as they evolve. Doing so will require us to collect, organize, and advertise the necessary changes to potential contributors in order to connect their desire to participate with an attainable and finite goal. Exposing content health is our first step towards this—we hope that by advertising the gaps in our system, we will provide users with organic opportunities to contribute that they didn’t realize existed before.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[The gap problem]]></title>
            <link>https:/chasem.co/gap-problem</link>
            <guid>gap-problem</guid>
            <pubDate>Thu, 02 Apr 2020 00:00:00 GMT</pubDate>
            <description><![CDATA[Exploring techniques and trade offs for creating reusable grid components using modern CSS best practices.]]></description>
            <content:encoded><![CDATA[<p>Simple collections of items laid out in rows and columns is perhaps one of the most common UI patterns. Whether you&#x27;re showing a literal grid of items, or building the layout of your site, grids are a fundamental element of design on the web (and you could say the same about print, too).</p>
<p>Given that this pattern is so common, you would expect that a good component library would have a component to encapsulate this behavior. Surprisingly though, I haven&#x27;t seen many open source libraries that have flexible but primitive grid layout components. In fact, my team&#x27;s component library, <a href="seeds.sproutsocial.com">Seeds</a>, doesn&#x27;t have one either (yet). It turns out this might be the case because getting this pattern right in a way that&#x27;s responsive and flexible is not always obvious to everyone.</p>
<p>Maybe that&#x27;s because for a while there wasn&#x27;t a really clean way to add gaps between CSS flexbox items. This will get better with <a href="https://caniuse.com/#feat=flexbox-gap">the gap property for flexbox</a>, but that&#x27;s not ready for prime time yet in all browsers (you could <a href="https://medium.com/@schofeld/mind-the-flex-gap-c9cd1b4b35d8">progressively enhance, though</a>). You can work around this however, and this tweet from Devon Govett shows how very succinctly:</p>
<blockquote class="twitter-tweet" data-lang="en" data-dnt="true"><p lang="en" dir="ltr"><p>Made a 10 line polyfill for flexbox gap. 😀</p><br/><br/><p>You can use it just like normal CSS properties. No extra wrappers around each
item, or spacer elements needed. CSS custom properties are super powerful! 😲</p><br/><br/><p>&lt;div class=&quot;flex&quot; style=&quot;--gap: 10px;&quot;&gt;
<a href="https://t.co/gpiScF8XTe"><a href="https://t.co/gpiScF8XTe">https://t.co/gpiScF8XTe</a></a> <a href="https://t.co/cCrJH4R9Iw">pic.twitter.com/cCrJH4R9Iw</a></p></p><p>— Devon Govett (@devongovett) <a href="https://twitter.com/devongovett/status/1244679626162450432?ref_src=twsrc%5Etfw">March 30, 2020</a></p></blockquote>
<p>The basic idea here is that each child item in the grid has spacing around it, which creates the desired gap between items. A negative margin around the parent is applied to cancel out the unwanted spacing around the outer edges of the child items. Voila, you&#x27;ve got gaps between items with no errant spacing.</p>
<p>Combined with <code>flex-wrap</code>, your grid will effortlessly wrap into multiple rows, and the child items can be sized explicitly or implicitly. I prefer to use child items that are explicitly sized with percentages, which makes things nice and flexible. If you do this, you&#x27;ll want to use padding instead of margin for the child items.</p>
<p>Some form of this technique is what I have landed on for grid components in my personal projects, and it works really well. It&#x27;s also responsive as long as the child items are, which is nice.</p>
<p>However, it <em>is</em> 2020 and we do have CSS grid in our tool belt now. <a href="https://hankchizljaw.com/wrote/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid">Andy Bell has an article explaining the technique for doing this with grid</a>. The secret sauce is in this line:</p>
<pre><code class="language-css">grid-template-columns: repeat(
  auto-fill,
  minmax(var(--auto-grid-min-size), 1fr)
);
</code></pre>
<p>With this technique, instead of using breakpoints to specify the screen size where your items should stack, you specify the minimum size an element should be before it stacks. I like this because it encourages developers to think about responsive design in terms of <em>behaviors</em> instead of screen sizes.</p>
<p>The code above will flow items into the grid with as many as it can fit on one row while keeping each item above the minimum width. Pretty cool.</p>
<p>It&#x27;s important to note that this only really works if you want every item in the grid to be an equal width. I use a lot of grids with variable-width items, so I tend to prefer the flexbox technique. This use case is a great example of where flex still has its places, even though we have CSS grid—flexbox was made for flexible children, and CSS grid was made for well-defined grids.</p>
<p>I want to be clear there—CSS grid can totally handle grids whose children have varying widths, but you need to specify those widths up front, whereas I prefer to use percentage widths and have items flow to the next row automatically. Some are okay with this tradeoff, and have grid components that have you specify the <code>grid-template-columns</code> property for the row. <a href="https://primer.style/components/Grid">GitHub Primer, for instance</a>. If you want auto-flow rows in CSS Grid (which I do), all the columns have to be the same width.</p>
<p>There is one subtle bug with the implementation of the CSS grid technique above, though. If the minimum width of your items is larger than the viewport width, items will overflow and be clipped. You see this on smaller screen sizes particularly. Lucky for us, the fix is simple, we can simply change the variable that controls our minimum width on small screens using a media query:</p>
<pre><code class="language-css">@media screen and (max-width: 30rem) {
  --auto-grid-min-size: 100%;
}
</code></pre>
<p>This ruins the clean, &quot;0 breakpoints&quot; aesthetic of the original solution, but it is just <em>one</em> breakpoint and the logic is pretty self explanatory. The value you use for that breakpoint totally be a token from your design system, of course.</p>
<p>So which technique should you use when building a grid component? I would ask myself: are the child items of the grid all the same width?</p>
<ul>
<li>If the answer is yes, I&#x27;d recommend going for the CSS grid solution.</li>
<li>If the answer is no, you&#x27;re better of going with the flexbox method and having each child define its own width.</li>
</ul>
<p>Hopefully once the <code>gap</code> property in flexbox is supported by most browsers we can simplify our implementation a bit. I&#x27;d definitely recommend wrapping this pattern up into a component so that consumers could upgrade down the road without a breaking change.</p>
<p>I&#x27;m also not the only person thinking about this right now. <a href="https://mxstbr.com/thoughts/margin">Max Stoiber has been thinking it through</a> recently, and also has some interesting ideas about how to solve this with a reusable component.</p>
<p>Any way you go — it&#x27;s so nice how much easier this has gotten over the years with tools like flexbox and CSS grid, and it will only get easier in the future with properties like <code>gap</code>.</p>
<p><strong>Update:</strong> I discovered <a href="https://evanminto.com/blog/intrinsically-responsive-css-grid-minmax-min">this post by Evan Minto</a> that describes how to use the CSS Grid technique above without using a breakpoint. His technique takes advantage of the <code>min</code> function in CSS, which has good but not universal browser support. Keep this in mind for future implementations.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Generating friendly, unique identifiers]]></title>
            <link>https:/chasem.co/friendly-ids</link>
            <guid>friendly-ids</guid>
            <pubDate>Sun, 10 Nov 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Using the friendly-words package from Glitch to create human readable identifiers.]]></description>
            <content:encoded><![CDATA[<p>In a recent project, I needed a way to create unique identifiers that met these criteria:</p>
<ul>
<li>Human readable (and human friendly)</li>
<li>Short</li>
<li>Random</li>
</ul>
<p>Creating short and random IDs is pretty easy, but making them human readable is a bit trickier, since you&#x27;ll need a list of words to use. I knew that <a href="https://glitch.com">Glitch</a> was doing this well — when you create a new project you get random names like &quot;reminiscent-chickadee&quot; or &quot;cultured-tadpole&quot;. That&#x27;s exactly the sort of thing I wanted.</p>
<p>I got to digging, and it turns out that <a href="https://github.com/FogCreek/friendly-words">Glitch has opened source their word list on GitHub</a>. The <code>friendly-words</code> repo houses lists of words in four categories that are friendly (the Glitch folks are friendly, and I know they take great care to use friendly language) and available as a package on npm.</p>
<p>Once I had that, it was super simple to wire up a function to return a string generated from these word sets:</p>
<pre><code class="language-js">import words from &#x27;friendly-words&#x27;

const randomName = () =&gt; {
  const { predicates, objects } = words
  const predicate = predicates[Math.floor(Math.random() * predicates.length)]
  const object = objects[Math.floor(Math.random() * objects.length)]
  return `${predicate}-${object}`
}
</code></pre>
<p>Thanks to the folks at Glitch for making this awesome resource available to the community! Check out the repo on GitHub to learn more:</p>
<a href="https://github.com/FogCreek/friendly-words" target="_blank" class="bookmark-loader"></a>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Orbit design system]]></title>
            <link>https:/chasem.co/orbit-design-system</link>
            <guid>orbit-design-system</guid>
            <pubDate>Sun, 03 Nov 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Taking a look at a few interesting aspects of Kiwi.com's design system.]]></description>
            <content:encoded><![CDATA[<p><a href="https://orbit.kiwi">I really like what the team at Kiwi.com have done with their design system, Orbit.</a> There&#x27;s a few details that really stand out.</p>
<h3 id="home-page">Home page</h3>
<p>One of the things my team talks about all the time is how underutilized the home pages of design systems often are. With such a wide range of information being accessed by many different people, how can you make it useful for everyone?</p>
<p>Homepages are also often used as explainers for what the system even is, and how to make sense of it. That use case seems to suggest that it&#x27;s designed for the first time visitor, which is odd, because a design system&#x27;s primary users are usually repeat visitors.</p>
<p>I like Orbit because it has a homepage that is heavily geared towards the folks using the system every day. The first think you see are the &quot;quick links&quot; that direct you to what are no-doubt pages frequently accessed by the Kiwi.com teams.</p>
<p>Right after the quick links is a section listing your bookmarks, which is my other favorite thing about this system.</p>
<p><img src="/img/orbit-design-system/screenshot-1.png" alt="Orbit&#x27;s homepage" title="Orbit does a great job of making its homepage truly useful."/></p>
<h3 id="bookmarks">Bookmarks</h3>
<p>The primary artifact of most design systems is a website that houses all of the resources and documentation around the system. It makes sense considering that websites (hypertext) are really good at organizing information and making it easy to navigate.</p>
<p>I&#x27;ve often thought of good design system sites as good hypertext systems — the really interesting ones go far beyond the features of the web (which is a really a pretty lousy hypertext system, what without crucial features like backlinks, etc.)</p>
<p>Orbit has a feature that is common to most hypertext systems, but is often missing from design system sites, which is the ability to bookmark pages. Once a page is bookmarked, it&#x27;s listed on the homepage for quick access, and available anywhere on the site from within a slide-out drawer.</p>
<p>This makes so much sense. Lots of people using design systems every day are often diving into very specific pages. Why not make those easy for them to access, and prioritize them over the other content in the UI?</p>
<hr/>
<p>Well done to the team at Kiwi.com. Orbit is awesome! 👏</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[CSS resets]]></title>
            <link>https:/chasem.co/css-resets</link>
            <guid>css-resets</guid>
            <pubDate>Wed, 09 Oct 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Taking a look at a few approaches to CSS resets across the web.]]></description>
            <content:encoded><![CDATA[<p>The idea of CSS resets is fascinating to me. There&#x27;s something about bringing order to a chaotic system that is really pleasing. And also fine-tuning all of the rules to work just right for a particular project or use case.</p>
<p>Everyone has their own take on CSS resets (<a href="https://github.com/chasemccoy/kit/blob/master/src/components/CSSReset/index.js">including me</a>), and I love picking through them to see what I can learn.</p>
<p><a href="https://hankchizljaw.com/wrote/a-modern-css-reset/">Andy Bell recently wrote about his</a>. I agree with him here:</p>
<blockquote>
<p>In this modern era of web development, we don’t really need a heavy-handed reset, or even a reset at all, because CSS browser compatibility issues are much less likely than they were in the old IE 6 days. That era was when resets such as normalize.css came about and saved us all heaps of hell. Those days are gone now and we can trust our browsers to behave more, so I think resets like that are probably mostly redundant.</p>
</blockquote>
<p>Modern CSS resets can be a lot leaner than resets of the past.</p>
<p>Andy has an interesting technique for handling resets on elements that typically have pretty good user defaults, like lists.</p>
<blockquote>
<p>I will mention the situation with lists, though. I select only lists that do have a class attribute because if a plain ol’ <code>&lt;ul&gt;</code> or <code>&lt;ol&gt;</code> gets used, I want it to look like a list. A lot of resets, including my previous ones, aggressively remove that.</p>
</blockquote>
<p>That ends up looking something like this:</p>
<pre><code class="language-css">/* Remove default padding */
ul[class],
ol[class] {
  padding: 0;
}
</code></pre>
<p>I think this technique is great, expecially if you&#x27;re working in a pure CSS or CSS preprocessor environment (or when you&#x27;re writing pure HTML/Markdown/etc). This doesn&#x27;t work for me because I often use MDX to replace the rendering of pure HTML elements with custom React components, and those usually have class names applied via Styled Components.</p>
<p>A few more bits from Andy that I will be stealing for my own reset:</p>
<pre><code class="language-css">body {
  scroll-behavior: smooth;
}
</code></pre>
<p>Not all browsers support that yet (Firefox does), but it doesn&#x27;t hurt to add it to projects now so that they get smooth scrolling once browsers get on board.</p>
<pre><code class="language-css">@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
</code></pre>
<p>Remove animations for folks who set their OS to reduce motion. Brilliant.</p>
<p>If you want to dive right into the code, Andy&#x27;s reset is also <a href="https://github.com/hankchizljaw/modern-css-reset">on GitHub</a>.</p>
<hr/>
<p>Another one of my favorite reset projects is <a href="https://github.com/mozdevs/cssremedy">CSS Remedy</a> from the Mozilla development team (primarily <a href="https://jensimmons.com/">Jen Simmons</a>, I believe. Thanks Jen!)</p>
<p>CSS Remedy is a bit different than other resets:</p>
<blockquote>
<p>CSS Remedy sets CSS properties or values to what they would be if the CSSWG were creating the CSS today, from scratch, and didn&#x27;t have to worry about backwards compatibility.</p>
</blockquote>
<p>So many web developers have struggled with the quirks of CSS and wished we could do something about it, so it&#x27;s cool to see browser developers weigh on on how they might solve some of those problems.</p>
<p>I really encourage you to dig through the CSS Remedy code yourself. It&#x27;s all beuatifully commented and documented. It&#x27;s also very cool to read through the issues and pull requests on GitHub to see how best practices evolve as folks weigh in with their use cases.</p>
<div class="callout p-4" style="border:1px dashed var(--section-color);border-radius:16px"><aside class="p-8" style="border-radius:12px"><div class="p-12" style="background:var(--color-body-background);border-radius:8px"><p class="smaller"><p><a href="/notes/css-resets">I&#x27;ll continue thinking and writing about CSS Resets over in the notes section if you&#x27;d like to follow along.</a></p></p></div></aside></div>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Minimum viable dark mode]]></title>
            <link>https:/chasem.co/mvp-dark-mode</link>
            <guid>mvp-dark-mode</guid>
            <pubDate>Mon, 23 Sep 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[How to create a quick and dirty dark mode for simple apps and websites using pure CSS.]]></description>
            <content:encoded><![CDATA[<p>When I recently redesigned this site, I removed the light/dark mode toggle that I had before. It was difficult to iterate on the new design quickly while supporting both light/dark mode and thinking about both when adding new features to my site was annoying.</p>
<p>And then I saw <a href="https://mobile.twitter.com/_dte/status/1166378957081436170">this tweet from Daniel Eden</a>:</p>
<p><a href="https://twitter.com/_dte/status/1166378957081436170">https://twitter.com/_dte/status/1166378957081436170</a></p>
<p>Cool! I added this bit of CSS to my site:</p>
<pre><code class="language-css">@media (prefers-color-scheme: dark) {
  filter: invert(90%) hue-rotate(25deg);
}
</code></pre>
<p>I don&#x27;t care for &quot;pure black&quot; dark modes, so instead of inverting by 100% (like Daniel suggested), I went with 90% to make the dark colors a bit softer.</p>
<p>Daniel&#x27;s tweet suggests rotating the hue by <code>180deg</code>, but I wanted to change my colors palette entirely in dark mode, from white and yellow to gray and purple. So I played with the value in the browser until I found a value for <code>hue-rotate</code> that I liked.</p>
<p>And, of course, I applied some styles to remove the inversion on things that shouldn&#x27;t be inverted (like images):</p>
<pre><code class="language-css">@media (prefers-color-scheme: dark) {
  img, video, iframe {
    filter: invert(100%) hue-rotate(-25deg);
  }
}
</code></pre>
<p>All in all, I really like this solution! It&#x27;s not perfect, but I never have to think about supporting both modes when I built something new. I&#x27;ve also noticed that having a filter on the whole page isn&#x27;t great for performance in some browsers, but I&#x27;m semi-okay with that since this is just a personal site.</p>
<p>Probably don&#x27;t use this for an app (or anything that someone pays for or relies on).</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Creating a useTextContent hook]]></title>
            <link>https:/chasem.co/use-text-content-hook</link>
            <guid>use-text-content-hook</guid>
            <pubDate>Sat, 07 Sep 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[How to create a custom React hook that can read the text content of a tree of nodes.]]></description>
            <content:encoded><![CDATA[<p>In JavaScript, you can use <a href="https://developer.mozilla.org/en/docs/Web/API/Node/textContent">the <code>textContent</code> property of a node</a> to get the text representation of the node and all of its descendent nodes. For instance, if your node looked like this:</p>
<pre><code class="language-html">&lt;p&gt;This is some text with &lt;a href=&#x27;/&#x27;&gt;a link nested within it&lt;/a&gt;.&lt;/p&gt;
</code></pre>
<p>Then <code>node.textContent</code> would give you the string representation of all the text within: &quot;This is some text with a link nested within it.&quot;</p>
<p>This property can be useful in a lot of scenarios, but it only works on DOM nodes, so you can&#x27;t use it to get a the text content of a tree of React components. However, you <em>can</em> create a custom hook that does just that:</p>
<pre><code class="language-jsx">const useTextContent = initial =&gt; {
  const [textContent, setTextContent] = useState(initial)
  
  const ref = useCallback(node =&gt; {
    if (node !== null) {
      setTextContent(node.textContent);
    }
  }, []);
  
  ref.current = textContent
  return ref
}
</code></pre>
<p>In the code above, we define what&#x27;s called <a href="https://reactjs.org/docs/hooks-faq.html?source=post_page-----eb7c15198780----------------------#how-can-i-measure-a-dom-node">a &quot;callback ref&quot;</a> in React. This function will get called whenever the ref gets attached to the node, or when the ref value changes.</p>
<p>If the node exists, we grab the <code>textContent</code> and set the <code>current</code> property of our ref to that value. Then, we return the ref for our consumers.</p>
<p>In the consuming code, the user calls the hook (with an optional initial value) and then attaches the resulting ref to whatever node they would like to read the text content of. The text content itself can be accessed through the <code>current</code> property of the ref:</p>
<pre><code class="language-jsx">const textContainer = useTextContent(null)

return (
  &lt;div&gt;
    &lt;SomeComponent ref={textContainer}This is some text with &lt;a href=&#x27;/&#x27;&gt;a link nested within it&lt;/a&gt;.&lt;/SomeComponent&gt;
    {textContainer.current}
  &lt;/div&gt;
) 
</code></pre>
<div class="callout p-4" style="border:1px dashed var(--section-color);border-radius:16px" mb="1em"><aside class="p-8" style="border-radius:12px"><div class="p-12" style="background:var(--color-body-background);border-radius:8px"><p class="smaller"><p>You can see this hook in action in <a target="_blank" href="https://codepen.io/chasemccoy/pen/WNeXLQW">this example I&#x27;ve created on CodePen</a>.</p></p></div></aside></div>
<p>One of my favorite uses for this hook is to ensure that React components have accessible title attributes without requiring the consumer of the component to pass an explicit value for the title. For instance, imagine a Card component:</p>
<pre><code class="language-jsx">&lt;Card
  title={someReactNode} 
  href=&quot;/details&quot;
/&gt;
</code></pre>
<p>that renders this structure:</p>
<pre><code class="language-jsx">&lt;div&gt;
  &lt;h3&gt;{props.title}&lt;/h3&gt;
  &lt;a href={props.href}&gt;View more&lt;/a&gt;
&lt;/div&gt;
</code></pre>
<p>The contents of the anchor tag here isn&#x27;t enough to be fully accessible (view more of what?), but we could fix that by using the <code>textContent</code> of the card title:</p>
<pre><code class="language-jsx">const textContainer = useTextContent(null)

return (
  &lt;div&gt;
    &lt;h3 ref={textContainer}&gt;{props.title}&lt;/h3&gt;
    &lt;a href={props.href} title={`View more info about ${textContainer.current}`}&gt;View more&lt;/a&gt;
  &lt;/div&gt;
) 
</code></pre>
<p>Now, users relying on a screen reader get an alternate title that describes <em>what</em> they will be viewing more of if they choose to follow this link. And even better, the consumers of the component don&#x27;t have to worry about passing a string specifically for this purpose.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Building Sprout Social’s component library]]></title>
            <link>https:/chasem.co/seeds-component-library</link>
            <guid>seeds-component-library</guid>
            <pubDate>Sun, 28 Jul 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[How our team of three built a component library that designers and engineers love using.]]></description>
            <content:encoded><![CDATA[<div class="callout p-4" style="border:1px dashed var(--section-color);border-radius:16px"><aside class="p-8" style="border-radius:12px"><div class="p-12" style="background:var(--color-body-background);border-radius:8px"><p class="smaller"><p><b>Note!</b> This article was <a target="_blank" href="https://medium.com/styled-components/how-to-build-a-great-component-library-a40d974a412d">originally published on the Styled Component&#x27;s blog</a>. Big thanks to <a target="_blank" href="https://twitter.com/mxstbr?lang=en">Max Stoiber</a> for letting me share my work with the Styled Components readers.</p></p></div></aside></div>
<p>Sprout Social’s design system, <a href="https://seeds.sproutsocial.com">Seeds</a>, has done a lot of growing up since it launched in October of last year. When we launched, our system was home to four categories of guidelines and principles: Brand, Visual, Writing, and Product. A healthy showing, for sure, but something was suspiciously missing  —  components.</p>
<p>Sprout has had a React component library longer than it’s had a design system. We call ours Racine (after the avenue in Chicago where Sprout was once headquartered), and it has long been the source of truth for component patterns in our web app.</p>
<p>At its core, our component library was two things:</p>
<ol>
<li>A package of React components (built with <a href="https://www.styled-components.com">Styled Components</a> and <a href="https://styled-system.com">Styled System</a>) published to npm</li>
<li>A website, built on <a href="https://facebook.github.io/create-react-app/">Create React App</a>, that acted as a local development environment for our developers and a documentation website for stakeholders across the company.</li>
</ol>
<p>What began as a slim, hand-crafted tool slowly grew more bloated over time. Racine was passed around by developers who had the time to work on it, but there was no dedicated team to manage it. Eventually, neither the local development experience, nor the experience as a documentation site, were delightful for anyone. We realized the component library was holding us back more than it was helping us.</p>
<p><strong>We needed to fix this, and <em>fast.</em></strong></p>
<p>When we set out to build our design system, we chose to start from scratch. We didn’t want to adopt any of the debt that our older systems had accumulated, but we did want to use what we had learned from our previous attempts at component libraries to build something strong and stable for the future.</p>
<p>We knew how silly it would be to have component documentation separate from the design system, and thus integrating it would be our highest priority after launching our system. We also knew that it presented us with a fantastic opportunity to not only port the documentation into Seeds, but to make every inch of the experience better along the way (for both developers and consumers).</p>
<p>The design systems team at Sprout Social is relatively small. Our team of 3 (including myself) serves design and engineering teams of well over 30 people each. I want to share some of the tools that our team used to build a component library that all of those folks love using.</p>
<h2 id="separate-development-and-documentation">Separate development and documentation</h2>
<p>Today, Racine lives on as our component library. But no longer does it try to do the job of development tool and documentation site. <a href="https://seeds.sproutsocial.com/components/">The documentation now lives in our design system</a>, and our component library is just a tool for building, testing, and using components in web projects at Sprout.</p>
<p><img src="/img/seeds-component-library/seeds.png" alt="Our component library now lives right inside our design system, at seeds.sproutsocial.com/components" title="Our component library now lives right inside our design system, at seeds.sproutsocial.com/components"/></p>
<p>We learned over time that <strong>when the experience of building a component is intertwined with the experience of documenting it, the latter tends to suffer</strong>. We had many developers who would build and ship new components in our library for themselves without documenting them for others.</p>
<p>Documentation will always fall short when it’s treated as a subtask of the development process, which is how our component library operated in the past. We wanted to change that by redesigning our documentation to make sure that both designers and engineers were invested in its success.</p>
<p>So, we decided to split it into two separate experiences:</p>
<ol>
<li>The documentation for our components moved into our design system, alongside all of our other patterns and guidelines.</li>
<li>We added a separate local development environment based on <a href="https://storybook.js.org">Storybook</a>.</li>
</ol>
<p>Storybook gives our developers an extremely fast and lightweight environment to build and test components. Documentation happens in our design system, which is a custom-built site powered by <a href="https://www.gatsbyjs.org">Gatsby</a>.</p>
<p>Previously, when a new component was created it would appear in our documentation site by default, whether or not it had been properly documented. Now, even if a developer adds a new component, that component isn’t “available” until we’ve written thorough documentation for our system. This puts the task of documentation on equal footing with the task of development.</p>
<p>On that note, <strong>we also learned how crucial it is to apply friction in the right places</strong>. We applied friction to making components available to our entire organization, and that means we now have more time to be strategic about how our work is rolled out. We can design micro education and marketing campaigns that not only increase awareness more broadly, but also make our teammates feel more supported and invested in the continuing success of our system. That investment pays us back tenfold in the form of feedback and contribution.</p>
<p>We’ve explored the idea of these micro campaigns in a few ways that have helped spread awareness for our component library internally:</p>
<ul>
<li>We’ve held <strong>a series of optional workshops</strong> with our teammates (not just engineers!) where we leveraged our design system and component library to prototype UI that matches our product patterns.</li>
<li>For a few high-value projects, we created <strong>internal landing pages with Seeds</strong> that serve as hubs for information about the projects and their teams.</li>
<li>We are currently exploring the idea of <strong>a series of “sponsored” Slack posts that highlight our component recipes</strong>. These recipes are short snippets of code that demonstrate how to use our components to solve a common UI problem or create a pattern often seen in our app. We want to drip these out to our developers in the form of small, well-designed Slack messages that get shared in common channels as a way not only educate, but also to drive excitement.</li>
</ul>
<h2 id="empower-authors">Empower authors</h2>
<p>Being able to focus on documentation in isolation from development has proven to be crucial for us, and it has allowed us to discover that the key to facilitating really great documentation for a design system is to focus on two key areas of the experience:</p>
<ol>
<li><strong>Authorability.</strong> People are busy, and they have better things to do than spend their time writing documentation. Plus, writing good documentation isn’t easy. We wanted to remove as many points of friction as possible to make sure that the authoring process wasn’t keeping anyone from contributing.</li>
<li><strong>Interactivity.</strong> People don’t like writing documentation and they don’t like reading it either, especially when they are trying to get their jobs done. We didn’t want our documentation to feel like a manual that needs to be read from cover-to-cover, but instead like a tool that can be <em>used</em>.</li>
</ol>
<p><a href="https://mdxjs.com">MDX</a>, if you’re not familiar, is described as “Markdown for the component era.” Simply put, it’s a tool that allows users to write React components inline with their Markdown, which solves these two problems for us very well.</p>
<p>Markdown is well known and easy to pick up, and many of the tools that our team already uses (like Dropbox Paper or Confluence) can export content to Markdown. That means our teams can write wherever they want and we can drop their content directly into our system, which lowers the barrier for authors to get started.</p>
<p>And, of course, the inclusion of React components means we make content more interactive by dropping in any UI we want into our documents.</p>
<p>MDX even allows us to customize how native Markdown elements are rendered. For instance, authors can write a regular Markdown code block, like this:</p>
<pre><code class="language-md">```jsx live
  &lt;Box
    display=&#x27;flex&#x27;
    alignItems=&#x27;center&#x27;
    justifyContent=&#x27;center&#x27;
    bg=&#x27;neutral.100&#x27;
    color=&#x27;neutral.1000&#x27;
    p={600}
  &gt;
    This content will be centered within the box.
  &lt;/Box&gt;
```
</code></pre>
<p>and we can output an interactive, editable code block in our design system that looks like this:</p>
<p><img src="/img/seeds-component-library/code-sandbox.png" alt="Example of an interactive code block from Seeds" title="Example of an interactive code block from Seeds"/></p>
<p>Imagine how difficult it would have been before MDX to achieve something like this without the author of the documentation having to hand-write HTML or React.</p>
<p>MDX not only allows you to import any React components, but also allows you to specify a set of components that are available in the global scope. This means we can have “shortcode” like components for rendering common elements.</p>
<p>For instance, to embed a video from YouTube, authors can just use the shortcode without having to import anything:</p>
<pre><code class="language-jsx">&lt;Youtube id=&#x27;abc123&#x27; /&gt;
</code></pre>
<p>For our component documentation, I made a shortcode that renders the table of component properties for any component in our library:</p>
<pre><code class="language-jsx">&lt;PropTable component=&#x27;Button&#x27; /&gt;
</code></pre>
<p>Good tools don’t make a design system, and they won’t increase engagement with your system if you aren’t focused on solving people problems. But great tools can lower the barrier of entry to contribution, and they can make the chore of maintaining a system much less tedious (which gives us more time to focus on people).</p>
<h2 id="delight-the-consumers">Delight the consumers</h2>
<p>Great documentation should be less like a document and more like a workshop. Not only does interactivity make the experience more enjoyable, but it also lets us communicate more information to our consumers.</p>
<p>We’ve tried not to make any of the content in our design system “templated”. When contributors author new content, we don’t give them a structure to fill with information. Instead, we try to let the information inform the structure itself. Here are a few cool examples of this from our system.</p>
<h3 id="interactive-code-blocks">Interactive code blocks</h3>
<p>Every Markdown code block in our component pages turns into a fully editable sandbox for the component. Being able to try out different combinations of props is <em>huge</em> for both our developers and designers. Each code block is like a mini prototyping tool that makes writing code seem as simple as changing a few values.</p>
<p>Those editable code blocks are all thanks to <a href="https://react-live.kitten.sh">an excellent library called react-live</a>. One of the best features of react-live is that it allows us to specify a global scope for every code block on our site. We threw all of our components into the global scope, so that no matter what page you&#x27;re on you have access to all of our components. If you&#x27;re on <a href="https://seeds.sproutsocial.com/components/icon">the page for the Icon component</a>, and you want to see how it looks inside of a <a href="https://seeds.sproutsocial.com/components/button">Button</a>, you can just try it out right there on the page.</p>
<p>That doesn’t just benefit our consumers. I can’t count the number of times I have used this for education and advocacy purposes. When a teammate reaches out with a question about how to something should work I can jump into a code block on Seeds, prototype a quick solution, and send over a screenshot with the code. In the future, we may even build upon that by having a “share” button on each code block that exports an shareable image (similar to something like <a href="https://carbon.now.sh/">Carbon</a>).</p>
<h3 id="token-tags">Token tags</h3>
<p>At the core of our design system are our design tokens — the atomic values that represent our color palette, typography scale, motion guidelines, etc.</p>
<p>We offer our design tokens in a variety of formats (Sass variables, JavaScript constants, etc.), and we reference them all over our design system. Instead of just referring to our tokens by name when we are writing content for our system, we created what we call <strong>Token Tags</strong> (patent pending):</p>
<p><img src="/img/seeds-component-library/token-tag.png" alt="This Token Tag is for the 700 shade of our purple color palette." title="This Token Tag is for the 700 shade of our purple color palette."/></p>
<p>That’s an example of a color token tag, which gives the reader an immediate visual reference to the actual color (instead of just a cryptic Purple 700). When the reader hovers over the tag, they can see the hex value for the color, and clicking the tag will copy the hex value to their clipboard:</p>
<p><img src="/img/seeds-component-library/token-tag.gif" alt="&quot;Hovering over a token tag shows the value of the token&quot;"/></p>
<p>This idea is a great example of ways we are using MDX to make our documentation more interactive, and in turn bringing more value to our consumers instead of making them dig for it themselves.</p>
<h3 id="typography-playground">Typography playground</h3>
<p>Another great example where breaking out of the usual format allowed us to deliver a better experience is on <a href="https://seeds.sproutsocial.com/visual/typography">our Typography page</a>.</p>
<p>We have a complex typographic scale that differs between our product and our brand and marketing materials. Instead of listing this out in a table, we built an interactive tool that takes inspiration from the websites of our favorite font foundries:</p>
<p><img src="/img/seeds-component-library/type-tool.png" alt="Type some text, pick your options, and then copy the tokens for Sass, JavaScript, and CSS." title="Type some text, pick your options, and then copy the tokens for Sass, JavaScript, and CSS."/></p>
<p>Users can paste in the copy they would like to typeset, and then select whether it’s being used in our product or in a visual project (brand and marketing materials). Then, they’re presented with all of the valid values and combinations of values. And, of course, they can copy the design token for whatever environment you’re working in.</p>
<h3 id="system-props">System props</h3>
<p>All of our components are built with <a href="https://www.styled-components.com/">Styled Components</a>, and we use the excellent <a href="https://styled-system.com">Styled System</a> to attach “system props” to our component. Here’s how we describe these props in our documentation:</p>
<blockquote>
<p>System props apply standard sets of properties to a component that can be used to alter its appearance on the fly.</p>
</blockquote>
<p>We hook these system props up to our design tokens, so that consumers of our components can customize styles using our design tokens. Here’s an example of setting a color: <code>&lt;Text color=&quot;green.500&quot; /&gt;</code>.</p>
<p>We are very careful about which system props we apply to which components. We don’t want consumers to be able to change <em>every</em> style on <em>any</em> component, so we break the system props out into groups (a technique which we shamelessly stole from the <a href="https://primer.style">GitHub Primer</a> team, <a href="https://primer.style/components/docs/system-props">who do the same for their components</a>):</p>
<ul>
<li><code>COMMON</code></li>
<li><code>TYPOGRAPHY</code></li>
<li><code>BORDER</code></li>
<li><code>LAYOUT</code></li>
<li><code>POSITION</code></li>
<li><code>FLEX_CONTAINER</code></li>
<li><code>FLEX_ITEM</code></li>
</ul>
<p>Every component in our system gets the COMMON group, which allows consumers to change the margin, padding, color, or background color of the component.</p>
<p>On every component page in our design system, we let the user know exactly which groups of system props that component has access to. When you hover over those groups, you can see which props are included therein:</p>
<p><img src="/img/seeds-component-library/system-props.gif" alt="This component gets the COMMON and LAYOUT system prop groups."/></p>
<p>When developers first hover over these groups, their faces light up when they realize how much power is baked into our components. The system props let them compose UI in half the time, without having to write any CSS. Most importantly, system props make it laughably easy for developers to use our design tokens. When the most consistent thing is also the easiest thing, developers don’t have to break out of the system to get their work done, and you end up with a much more consistent experience.</p>
<h2 id="whats-next">What’s next</h2>
<p>Getting our component library integrated with our design system is really just the beginning for us. If we were thinking in terms of version numbers, we would say that our system is now at version 1.0.0, which means there is plenty of room to grow. Here are some things we are focusing on next:</p>
<ul>
<li><strong>Education</strong> in the form of workshops with the web developers and product designers on our team. New things come with a learning curve, and we want to make sure we are supporting our users by helping them understand the tool we have created.</li>
<li><strong>Reliability</strong> in the form of visual snapshot testing for our components. We want to be able to release updates to our component library with confidence that we aren’t breaking anything for anyone. We already unit test our components, but we will be working to integrate visual tests so we can ensure our components stay pixel perfect when we make changes.</li>
<li><strong>Expanding</strong> our offering by adding more components and continuing to document existing ones. We are just getting started with what our library offers, and we want to increase contribution to our system from engineers who are not directly involved with the projects. In addition, we are updating documentation as we go in response to commonly asked questions and use cases presented by our users.</li>
</ul>
<p>All of this work will happen in parallel with the primary task of our design systems team — taking care of people. This piece has touched on a lot of the flashy artifacts of our system, but a majority of the work happens in Slack channels, Google Doc comments, and conversations with our team. <strong>Our system doesn’t mean anything without a diverse culture of collaboration and contribution that ensures we’re accurately representing our product and teams.</strong></p>
<p>Finally, it’s important to note that we didn’t do any of this work in a vacuum. I want to highlight a few people and projects that have helped us get to where we are now:</p>
<ul>
<li><a href="https://primer.style">The GitHub Primer team</a> has heavily influenced the technical direction of our system. Specifically <a href="https://github.com/emplums">Emily Plummer</a>’s work on <a href="https://primer.style/components">their React component library</a> (we basically modeled our system after Primer). Thank you to the Primer team for doing all of your work in the open — people are watching and we are so grateful.</li>
<li><a href="https://mdxjs.com/about#authors">The folks behind MDX</a> and it’s accompanying plugin for Gatsby, <a href="https://gatsby-mdx.netlify.com">gatsby-mdx</a>. Extra thanks to <a href="https://www.christopherbiscardi.com">Chris Biscardi</a> (the creator of gatsby-mdx) for fielding my many questions as we worked to adopt MDX in our Gatsby site in the early days of the plugin.</li>
<li><a href="https://mxstbr.com">Max Stoiber</a> for <a href="https://www.styled-components.com">Styled Components</a>, and <a href="https://jxnblk.com">Brent Jackson</a> for <a href="https://styled-system.com">Styled System</a>. They making building component libraries a joy.</li>
<li><a href="https://www.netlify.com">Netlify</a> for hosting our system, and <a href="https://www.algolia.com">Algolia</a> for generously powering our search via <a href="https://community.algolia.com/docsearch/">their DocSearch product</a>.</li>
</ul>
<p>If you want to learn more about the design systems team at Sprout Social or what we’re up to, feel free to reach out to me on Twitter <strong><a href="https://twitter.com/chase_mccoy">@chase_mccoy</a></strong> or email our team at <strong><a href="mailto:designsystems@sproutsocial.com">designsystems@sproutsocial.com</a></strong>. And of course, you can check out our design system, Seeds, at <strong><a href="http://seeds.sproutsocial.com">seeds.sproutsocial.com</a></strong>.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Gatsby schema customization is pretty cool]]></title>
            <link>https:/chasem.co/gatsby-schema</link>
            <guid>gatsby-schema</guid>
            <pubDate>Wed, 20 Mar 2019 00:00:00 GMT</pubDate>
            <description><![CDATA[Creating custom schemas for our data allows us to clean separate our view logic from our data source.]]></description>
            <content:encoded><![CDATA[<p>Today on their blog, Gatsby announced the release of <a href="https://www.gatsbyjs.org/blog/2019-03-18-releasing-new-schema-customization/">new schema customization APIs in version 2.2.0</a>.</p>
<p>I&#x27;ve been using these new APIs in <a href="https://www.gatsbyjs.org/blog/2019-03-04-new-schema-customization/">the alpha release</a> on my site for a bit now, and I&#x27;ve come to realize how great they are thanks to <a href="https://github.com/jlengstorf/theme-blog-schema">an example by Jason Lengstorf</a>. He uses the new APIs to create a generic <code>blog</code> schema, and then creates nodes based on data <em>from multiple sources</em>.</p>
<p>This is brilliant because it means your UI can be completely agnostic of where your data is coming from. Jason&#x27;s example sources data from multiple file types locally and creates a set of generic nodes that represent a blog post. The query to get the data you need to populate your UI is very clear:</p>
<pre><code class="language-graphql">allBlog(sort: { fields: date, order: DESC }) {
  nodes {
    title
    date
    content
  }
}
</code></pre>
<p>I adapted my site to do the same things, but in my case I am sourcing most of my data from WordPress, and also pulling in MDX files locally. This solves a big issue I had been facing — how could I merge and sort data from many sources by a common factor (like a date field) in a way that is abstracted from the UI code of my site. This totally solves that.</p>
<p>What&#x27;s great is that, as long as my schema doesn&#x27;t change drastically, I can feed in as many data sources as I want in the future and I will never have to change any of my queries or UI to support the new data sources. That&#x27;s a huge win especially when you consider <a href="https://www.gatsbyjs.org/blog/2018-11-11-introducing-gatsby-themes/">the upcoming themes feature</a>, which allows us to abstract away parts of our sites (configurations, data sources, UI, etc) entirely. These new APIs paired with themes is next level.</p>
<p>Congrats and terrific work to all the contributors over at Gatsby that made this possible. It&#x27;s incredible how easy it&#x27;s becoming to build great developer experiences on top of Gatsby.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[XOXO 2018]]></title>
            <link>https:/chasem.co/xoxo-2018</link>
            <guid>xoxo-2018</guid>
            <pubDate>Mon, 17 Dec 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Highlights from my trip to Portland for the annual festival for creators who work on the internet.]]></description>
            <content:encoded><![CDATA[<p><a href="https://xoxofest.com/">XOXO</a> is &quot;an experimental festival for independent artists and creators who work on the internet,&quot; which is exactly as amazing as it sounds.  </p>
<p>Many of the people in my online circles have been going to XOXO since the beginning, and I knew that if the opportunity ever came for me to go I would jump on it. I was afraid that the festival was gone for good after it failed to return in 2017. Lucky for me, the Andys came back this year for XOXO&#x27;s sixth iteration, and its biggest ever. </p>
<p>I traveled out to Portland, OR in September (my first time visiting), and I can&#x27;t overstate how much I enjoyed my experience there. Both the city and the conference were invigorating, and I can&#x27;t have imagined a better backdrop for this group of folks. Now that the conference videos have been uploaded, I wanted to take the time to share some of my favorite topics, events, and highlights from my trip. </p>
<h2 id="art--code">Art + Code</h2>
<p>XOXO is both a festival and a conference. While conference talks took place (and were recorded) during the day on Friday, Saturday, and Sunday, festival events were in the evenings and were <em>not</em> recorded. I felt bad about missing some of the evening events, but the ones I did catch felt even more special because they were shorter, more intimate, and ephemeral. They left me wanting to explore and learn more about the speakers and projects I saw, and in that way the festival events stuck with me much more than the recorded conference events. </p>
<p>Friday and Saturday night both featured an arcade full of indie game creators showing off upcoming games as well as a dedicated room for tabletop games. Friday night featured two sets of shorter talks: <strong><a href="https://2018.xoxofest.com/art-code">Art + Code</a></strong> and <strong><a href="https://2018.xoxofest.com/film-animation">Film &amp; Animation</a></strong>.</p>
<p>I chose to skip the film and animation talks so that I could catch as much of the Art + Code stuff as possible, and I&#x27;m glad I did. Art + Code turned out to be my favorite part of the programing at XOXO. While I can&#x27;t share any videos of the talks (since they weren&#x27;t recorded), I can share links to some of the demos and their creators.</p>
<p>Art + Code was sponsored by Figma and hosted by Jenn Schiffer, <a href="https://glitch.com">Glitch&#x27;s</a> director of community engineering. For a good roundup of the talks from the night, I highly recommend reading <a href="https://medium.com/glitch/art-code-glitch-at-xoxo-2018-44fa7bb818a7">Glitch&#x27;s official piece</a>, put together by Maurice Cherry. There are enough links in there to keep you occupied for quite a while. </p>
<p>The highlight of the evening for me was <a href="http://baratunde.com">Baratunde Thurston</a> and the demo of his app, <a href="http://livingwhileblack.glitch.me">Living While Black</a>. The app generates headlines about white people calling the cops on black people, and asks the user to guess whether the headlines is real or not. Baratunde also talked a bit about the grammar and patterns of racism in our culture, which was fascinating. Glitch has a <a href="https://medium.com/glitch/talking-privacy-and-data-detox-with-baratunde-thurston-ad4d55fca389">terrific interview with Baratunde</a> over on their blog that I recommend you check out.</p>
<p>Another favorite from the evening was <a href="http://aiweirdness.com">Janelle Shane</a>&#x27;s talk about training AI to generate knitting patterns, and then knitting those patterns to bring them into the physical world (<a href="http://aiweirdness.com/post/173096796277/skyknit-when-knitters-teamed-up-with-a-neural">here&#x27;s her post about it</a>, including pictures!). Janelle also has some <a href="http://aiweirdness.com/post/177091486527/this-ai-is-bad-at-drawing-but-will-try-anyways">hilarious examples of using AI to create art over on her blog</a>, which she shared with the room and told stories of how they came to be. Many of the talks centered around using code to create art, which was very inspiring for <a href="http://localhost:8001/2018/09/art-from-autonomy">my own work</a>. </p>
<h2 id="imposter-syndrome">Imposter syndrome</h2>
<p>Creatives are a highly dissatisfied bunch, often in no place more so than themselves and their own work. This is something that I have struggled with quite a bit in the past few years, and I&#x27;ve found solace knowing that others share in that struggle and that there is a wealth of experiences to learn from. No place is that more true than on the internet. </p>
<p>The web is often where we&#x27;re confronted with our greatest feelings of inadequacy. Members of marginalized groups especially cannot exist online without being told that they&#x27;re not good enough (among other, more awful things). But there are other ways that our self confidence and value are eroded on the internet, and Helen Rosner told a wonderful story of her experience dealing with those situations. </p>
<div style="position:relative;padding-bottom:56.25%;height:0"><iframe src="https://www.youtube.com/embed/2TZvf1rcQfw" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" frameBorder="0" webkitallowfullscreen="true" mozallowfullscreen="true" allowfullscreen="" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div>
<p>Another favorite of mine was Open Mike Eagle&#x27;s thoughts on this subject. He articulated how difficult it can be for a creator to communicate about their work and what it means to them:</p>
<div style="position:relative;padding-bottom:56.25%;height:0"><iframe src="https://www.youtube.com/embed/LrrLT5l8DvU" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" frameBorder="0" webkitallowfullscreen="true" mozallowfullscreen="true" allowfullscreen="" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div>
<p>Sometimes we need the reminder that imposter syndrome does not an imposter make. Our creative heroes face the same struggles, and they overcome it by being honest and open about their experiences. Sharing those feelings with another person (or in the case of XOXO, a couple of thousand people) is really something special. </p>
<h2 id="the-inclusive-web">The inclusive web</h2>
<p>Another theme that was woven throughout the festival was that the web should be place where all people are represented. The web is what we make of it, but sometimes it&#x27;s easy to forget that we have the power to shape the form of our medium.</p>
<p>In what may be my favorite talk of the entire weekend, <a href="https://clairelevans.com">Claire Evans</a> spoke about the women who helped create the web as we know it, and how they have been pushed to the edges of history to make room for their male counterparts.  I was so inspired by the stories of early hypertext pioneers of whom Claire spoke, and so surprised to discover that their stories were unknown to me beforehand. </p>
<div style="position:relative;padding-bottom:56.25%;height:0"><iframe src="https://www.youtube.com/embed/499vS93_LDI" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" frameBorder="0" webkitallowfullscreen="true" mozallowfullscreen="true" allowfullscreen="" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div>
<p>Claire is the author of <em><a href="https://clairelevans.com">Broad Band: The Untold Story of the Women Who Made the Internet</a></em>. I&#x27;ve since read her book and I can easily say that <em>Broad Band</em> is the best book I have read this year. <a href="//www.amazon.com/gp/product/0735211752">I highly recommend picking it up</a>.</p>
<p>Jennifer 8. Lee&#x27;s talk was cut from the same cloth as Claire&#x27;s. <a href="http://www.jennifer8lee.com">Jennifer is a journalist and emoji activist</a> who is a member of the Unicode Emoji Subcommittee and founder of <a href="http://www.emojination.org">Emojination</a>. She spoke about joining the subcommittee and advocating for more inclusive, diverse emoji to better represent the people who are using them to communicate. She also touches a bit on emoji as language and how we use them to communicate, which I thought was very fascinating. </p>
<div style="position:relative;padding-bottom:56.25%;height:0"><iframe src="https://www.youtube.com/embed/Dj8oul-ZCh0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" frameBorder="0" webkitallowfullscreen="true" mozallowfullscreen="true" allowfullscreen="" style="position:absolute;top:0;left:0;width:100%;height:100%"></iframe></div>
<h2 id="portland">Portland</h2>
<p><a href="https://www.halepele.com">Hale Pele</a> lived up to the hype as one of the best tiki bars in the country. Go with a group of friends and hang out for a few hours. </p>
<p>If you like Chinese food (especially dumplings), check out <a href="http://www.duckhousepdx.com">Duck House</a>. The pork wontons in chili oil were incredible 😍. <a href="http://pokpokpdx.com/">Pok Pok</a>&#x27;s wings were as legendary as everyone had told me they would be. The <a href="https://www.google.com/maps/place/Pok+Pok+NW/@45.5308522,-122.6904675,17z/data=!3m1!4b1!4m5!3m4!1s0x549509fc74084ae9:0xeb45256abbc57a54!8m2!3d45.5308485!4d-122.6882788">northwest location</a> was was less busy than the others.</p>
<p>Really, just stick to <a href="http://mrgan.com/pdxfood/">Neven&#x27;s recommendations</a> and you won&#x27;t be disappointed. </p>
<h2 id="until-next-time">Until next time</h2>
<p>XOXO succeeds because it defers to the experiences of its community. It invites a group of interesting people from the internet into a physical space to discuss, share, and question their work with other like-minded folks. XOXO isn&#x27;t one thing — it&#x27;s a lot of things that are constantly changing. I don&#x27;t expect next year&#x27;s festival to be anything like this year&#x27;s, and that&#x27;s why I am so excited to go back to Portland in 2019 to do it all again. </p>
<p>The Andys have created an environment that reflects the experiences of those who occupy it. XOXO is fluid and changing because working on the internet requires us to constantly change the ways we think and interact with one another. We shape our online environment, and we shape XOXO too. </p>
<p>I hope to see you there in 2019.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Making computers make art]]></title>
            <link>https:/chasem.co/generative-art</link>
            <guid>generative-art</guid>
            <pubDate>Wed, 05 Sep 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[An introduction, history, and resource for generative art and creative coding.]]></description>
            <content:encoded><![CDATA[<p>It seems as though everything I gravitate towards in life tends to be at an intersection of art and technology. I spend my days building tools for designers, and thinking about how we design things <em>for people</em> but <em>with technology</em>.</p>
<p>Perhaps the most straightforward example though is <a href="https://en.wikipedia.org/wiki/Generative_art">generative art</a>, which seems to be gaining more and more interest in my corner of the internet. I think it&#x27;s because writing code and/or designing things is so often a means to an end for many of us. Our jobs expect creativity, but demand results.</p>
<p>I&#x27;ve found that exploring generative art has helped me maintain a creative outlet that exists purely in service of making something that delights me. Something like that is all too rare lately.</p>
<p>There have been quite a few excellent resources that have helped me jump into generative art that I would like to share both as a reference for myself, and as a way of lowering the barrier of entry for anyone else who wants to try their hand at creative coding.</p>
<h2 id="some-history">Some history</h2>
<p>Generative art as we know it came about in the 1960s and was directly linked to the rise of the computer industry. I love that for as long as computers have existed, there have been people who see their potential for art as well as science.</p>
<p><a href="https://en.wikipedia.org/wiki/Georg_Nees">George Nees</a> was one of the first to show off graphics made using computers, and worked on that he called &quot;computer-scultpures&quot; using tools like milling machines and plotters.</p>
<p>Generative art is distinguished from computer-generated art in that it is autonomous to some degree. A generative artist differs from a painter or sculptor in that they are not responsible for every decision that leads to the finished piece.</p>
<p>Instead, generative artists create systems that can make some of the decisions alone. The artists gives the direction, but allows the computer to steer the vehicle.</p>
<p>This leads to a certain serendipity in the finished product. Pieces can be different every time that you look at them, and in many cases will never output the exact same piece twice. The fleeting nature of the work is what appeals to many.</p>
<p>Perhaps the biggest pioneer of generative art is <a href="https://en.wikipedia.org/wiki/Vera_Moln%C3%A1r">Vera Molnár</a>, whose work in the space of computational art still holds up today, even though she was doing work with tools that were comparatively ancient to what we have at our disposal now. I strongly encourage you to <a href="https://www.artsy.net/artist/vera-molnar-1">browse through</a> <a href="http://www.artnet.com/artists/vera-molnar/">some of her pieces</a> online.</p>
<p>In one of her most famous series, <em>Structure de Quadrilateres</em>, she takes a collection of rectangles and introduces randomness while somehow maintaining a natural rhythm:</p>
<p><img src="/img/generative-art/molnar.jpg" alt="Structure de Quadrilateres by Vera Molnár"/></p>
<p>If you would like to learn more about Vera Molnár and her works, I recommend reading <a href="https://hyperallergic.com/437834/vera-molnar-drawings-1949-1986-senior-and-shopmaker-gallery-2018/">this recent piece about her on Hyperallergic</a>.</p>
<p>There are so many more amazing generative artists to learn about. For instance, <a href="https://en.wikipedia.org/wiki/Sonia_Landy_Sheridan">Sonia Landy Sheridan</a> founded a new department called Generative Systems in 1970 at the Art Institute of Chicago. <a href="http://sonart.org">She has a fantastic website where you can see some of her art and read more about the Generative Systems department</a>.</p>
<p>Another piece I&#x27;d recommend is <a href="https://www.artnome.com/news/2018/8/8/why-love-generative-art">Jason Bailey&#x27;s post on Artnome titled</a> <a href="https://www.artnome.com/news/2018/8/8/why-love-generative-art"><em>Why Love Generative Art?</em></a> It provides a brief history of generative art and the way that the practice has progressed since its inception.</p>
<p>I encourage you to take some time to appreciate and learn about the people who paved the way for generative art. It makes for an excellent opportunity to find some inspiration for your own work.</p>
<h2 id="practical-magic">Practical magic</h2>
<p>Now that you know a bit of the history behind generative art, I&#x27;d suggest jumping in yourself by learning how to create something simple.</p>
<p>There are lots of technologies out there designed specifically for creative coding. Arguably the most famous of those are <a href="https://p5js.org">p5.js</a> and <a href="https://www.processing.org">Processing</a>. I recommend starting with p5.js because it&#x27;s built on JavaScript — which a lot of folks already know — and it&#x27;s easy to get started using it right in the browser.</p>
<p>In fact, my favorite way to create generative art is in <a href="https://codepen.io">CodePen</a>. You can easily add p5.js as a script in your pen, or you can use <a href="https://codepen.io/chasemccoy/pen/ejexMV">this template I created for quickly getting started with a new p5.js sketch</a>.</p>
<p>No matter which tool you use, it shouldn&#x27;t be too hard to find resources for learning how to draw some basic shapes. One of my favorites is <a href="https://shiffman.net/videos/">Daniel Shiffman&#x27;s video series on creative coding</a>. Watching along and coding examples from a tutorial is a great way to learn. Daniel even has <a href="http://youtube.com/playlist?list=PLRqwX-V7Uu6Zy51Q-x9tMWIv9cueOFTFA">a video series that covers the foundations of JavaScript in the context of p5.js</a>.</p>
<p>Once you&#x27;ve got the basics down, it&#x27;s important to start learning how to introduce autonomy into your pieces using loops and noise.</p>
<p>Tim Holman created one of my favorite resources out there for taking your art to the next level. <a href="https://generativeartistry.com">Generative Artistry</a> is a series of lessons describing fundamental concepts or recreating pieces that teach invaluable skills. I learned the basics of circle packing from the site, and that allowed me to make stuff like this:</p>
<p><img src="/img/generative-art/circle-packed.png" alt="Example of circle packing"/></p>
<p>I especially love that Tim breaks down how to recreate famous pieces from some of the people I mentioned earlier, like Vera Molnár and Georg Nees.</p>
<p>It&#x27;s also important to cultivate an environment of inspiration around generative art. I find that because the possibilities of autonomous art are so limitless, it helps me to take a piece that I like and use it as a starting point to riff on.</p>
<p><a href="https://art.daneden.me">Daniel Eden&#x27;s gallery</a> is excellent not only for the pieces themselves, but because Dan accompanies each with a description of the basic logic used to achieve the result. Recreating some of his pieces helped me learn techniques that I have made use of many times since. Dan also wrote <a href="https://daneden.me/2016/11/02/drawing-with-numbers/">a great piece on how he got started with generative design</a>.</p>
<p>Another favorite of mine is Heydon Pickering&#x27;s <a href="https://mutable.gallery">mutable.gallery</a>, which features sketches that can be re-generated to produce unending, unique permutations. I love how Heydon makes it so easy to share the piece that you generate, making each one feel more special somehow.</p>
<p>Finally, I suggest you follow Matt DesLauriers on <a href="https://twitter.com/mattdesl">Twitter</a> and <a href="https://www.instagram.com/mattdesl_art/">Instagram</a>. Matt&#x27;s work is amazing, and he represents the community well by sharing his processes and learnings as he grows.</p>
<hr/>
<p>I love making generative art because its edges are blurry, and I can step off of them without worrying about technique or execution. Happy accidents are easy to make and often result in some of my favorite pieces.</p>
<p>Ultimately, generative art is about rolling with the punches and letting the medium itself influence the work. I think flexing those types of muscles has made me a better designer overall. Maybe it can do the same for you.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Some prompted thoughts on design]]></title>
            <link>https:/chasem.co/some-prompted-thoughts-on-design</link>
            <guid>some-prompted-thoughts-on-design</guid>
            <pubDate>Sun, 24 Jun 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[InVision interviewed the design team at Sprout, and I wrote up some extended thoughts on their questions.]]></description>
            <content:encoded><![CDATA[<p><em>Invision is writing a piece on the design team at Sprout Social, and they asked us to answer some questions about design and how we work at Sprout. I wanted to post my answers here as well since most of them probably won&#x27;t make it into the finished piece.</em></p>
<hr/>
<p><strong>What’s your best advice for designers who are the only designer at the org, or even designers who can’t seem to get buy-in from executives?</strong></p>
<p>The best way to get buy in is to give others no reason not to buy in. Do the due diligence of research, testing, and building before you go to bat for your ideas. Talk to people one-on-one and try to understand their hesitations to being on board with your idea. Once you know the problem, you can chase solutions.</p>
<p><strong>Do other teams (like marketing, engineering, etc.) there use design thinking or any design methodologies/skills?</strong></p>
<p>Every person at Sprout that touches any aspect of the product is a designer. Engineers think about how to design scalable systems so that they can realize new features. The education team designs resources and methods to teach users how to best take advantage of the product.</p>
<p>Our responsibility as designers is to realize that everyone here at the org designs in some way, and sometimes they need help in understanding the best way to design effectively to solve whatever problem they are tasked with. We can&#x27;t hold design as a practice hostage, as if it&#x27;s only for the select few. We need to give away our tools and knowledge so that everyone can get better.</p>
<p><strong>How can we all give better design feedback?</strong></p>
<p>When giving feedback, try as hard as you can not to be prescriptive about the solution. If you’re thinking in terms of the how, you might be missing important details in the why of the problem.</p>
<p>I like to try to create a common foundation for feedback by framing it in a standard way:</p>
<pre><code>The objectives for a product are to…

1. Reach its goals…
2. For the given audiences (personas)…
3. By creating a design with the right behaviors and characteristics (principles)…
4. To produce the desired experience when used in the applicable contexts (scenarios)
</code></pre>
<p><strong>Imagine you’re having a heart-to-heart with a young designer. Give her 5-10 pieces of your very best advice.</strong></p>
<ol>
<li>Start your process with words. Design is about communication, and writing is the purest form of that.</li>
<li>A picture says a thousand words. If you can create a great solution with writing, you’re on track to producing an even better visual design.</li>
<li>Just as writers edit their words, go back and edit your designs. Remove unnecessary flourishes and distill the design into the purest form of itself.</li>
<li>Understand that when you’re designing software, you can’t design an experience for a user because you can’t control the experience. A user’s experience is personal and specific to them and their environment. All you can do as a designer is architect solutions that will not disrupt a user’s experience.</li>
<li>Show your designs to people who don’t know anything about the problem you are trying to solve. Make it clear for them.</li>
<li>Don&#x27;t listen to me, I don&#x27;t know what I&#x27;m doing.</li>
</ol>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[No Reservations]]></title>
            <link>https:/chasem.co/no-reservations</link>
            <guid>no-reservations</guid>
            <pubDate>Sun, 17 Jun 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Memorializing Anthony Bourdain and all of the things we can learn from him.]]></description>
            <content:encoded><![CDATA[<p>I don&#x27;t have the words to describe what we&#x27;ve lost in Anthony Bourdain. Instead, I thought I would share some things that I love about him. The first that comes to mind is his first visit to a Waffle House:</p>
<p><a href="https://twitter.com/kottke/status/1005188564991307776?ref_src=twsrc%5Etfw">https://twitter.com/kottke/status/1005188564991307776?ref_src=twsrc%5Etfw</a></p>
<p><a href="https://twitter.com/broderick/status/1005095399290531840?ref_src=twsrc%5Etfw">https://twitter.com/broderick/status/1005095399290531840?ref_src=twsrc%5Etfw</a>&quot;</p>
<p>He had some beautiful words on Chicago, the city I love.</p>
<p><a href="https://twitter.com/pang/status/726850794226483200?ref_src=twsrc%5Etfw">https://twitter.com/pang/status/726850794226483200?ref_src=twsrc%5Etfw</a></p>
<p><a href="https://chicago.eater.com/2018/6/8/17441456/anthony-bourdain-chicago-quotes-no-reservations-layover-part-known">Eater also has a great write-up on Bourdain&#x27;s thoughts on Chicago</a>.</p>
<p>And, of course, there&#x27;s <a href="https://www.newyorker.com/magazine/1999/04/19/dont-eat-before-reading-this">the infamous New Yorker piece that led to <em>Kitchen Confidential</em></a>.</p>
<p>Anthony had a way of writing that was simultaneously eloquent and effective while avoiding snobbery and pretense.</p>
<p><a href="https://twitter.com/austinkleon/status/934949863925714945?ref_src=twsrc%5Etfw">https://twitter.com/austinkleon/status/934949863925714945?ref_src=twsrc%5Etfw</a></p>
<p><a href="https://twitter.com/austinkleon/status/1006189018340577280?ref_src=twsrc%5Etfw">https://twitter.com/austinkleon/status/1006189018340577280?ref_src=twsrc%5Etfw</a></p>
<p>He used his influence and stature for good, and ultimately that&#x27;s what I will remember the most about him. R.I.P.</p>
<p><a href="https://twitter.com/ablington/status/1005056496609169409?ref_src=twsrc%5Etfw">https://twitter.com/ablington/status/1005056496609169409?ref_src=twsrc%5Etfw</a></p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Personal finance perfection]]></title>
            <link>https:/chasem.co/personal-finance-perfection</link>
            <guid>personal-finance-perfection</guid>
            <pubDate>Sun, 08 Apr 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[How I manage money with my bank of choice (Simple) and their smart, automated features.]]></description>
            <content:encoded><![CDATA[<p>My bank of choice is <a href="https://www.simple.com">Simple</a>. They&#x27;re online only, care about design, and make it easy to manage money by building saving &amp; analysis tools on top of the bank itself (instead of a third party tool that connects to a bank).</p>
<p>Up until this week, saving money with Simple was pretty good. Their <a href="https://www.simple.com/features/goals">goals feature</a> makes it easy to bucket money into categories. My process for managing money with Simple was something like this:</p>
<ol>
<li>At the beginning of the month, move money from my &quot;safe-to-spend&quot; bucket to various goals. Things like rent, groceries, entertainment, car payment, etc.</li>
<li>Whenever I spend money, use Simple&#x27;s &quot;spend from goal&quot; feature to spend it from the appropriate goal.</li>
<li>At the end of the month, whatever is leftover in my goals is mine to keep. I move it to a savings goal and replenish each goal with my monthly allowance for that category.</li>
</ol>
<p>This worked pretty well. The main annoyances I had with this were that every month I had to manually refill the goals with the correct amount (after first emptying the leftovers into savings), and I had to manually set transactions to spend from certain goals.</p>
<p>Lucky for me, the Simple team addressed these exact frustrations this week with the <a href="https://www.simple.com/company/goals-just-got-a-whole-lot-smarter">launch of two features called <strong>Funding Schedules</strong> and <strong>Auto-Spend</strong></a>.</p>
<p>Funding Schedules allow you to automatically move money into goals on certain dates/frequencies.</p>
<p>Auto Spend lets you associate transaction categories with goals, so that transactions in certain categories <em>always spend from a particular goal</em>. They also added the ability for transactions to &quot;remember&quot; what category they are in and automatically categorize themselves in the future.</p>
<p>These features change the game for me.</p>
<p>Now, my process (after some initial setup) looks more like this:</p>
<ol>
<li>If Simple doesn&#x27;t categorize a transaction correctly, fix the category. I only ever have to do this once since Simple remembers my selection in the future.</li>
<li>At the end of the month, move the leftover money in my goals to my savings goal.</li>
</ol>
<p>Boom. Simple takes care of the rest.</p>
<p>As far as setup goes, it&#x27;s as simple (ha ha) as creating your goals and setting a funding schedule that fits. I like to do my finances monthly, so I set mine up to automatically refill on the first of every month. Simple gives you the flexibility to choose whatever dates/frequencies you like.</p>
<p>Next, you choose which categories go along with which goal. My &quot;Groceries/Food&quot; goal is associated with categories like grocery stores, restaurants, and convenience stores. Whenever I spend money at one of those places, Simple removes it from my goal instead of my safe-to-spend balance.</p>
<p>Now, my personal finance is completely automated. I can set my budget and forget it (aside from the occasional incorrect categorization, which is easy enough to fix). If you use an envelope-style budget, you know that the worst part is maintaining your system manually. With these new features I no longer have to do that, which encourages me to stick to my budget instead of ignoring it because it&#x27;s a pain to manage.</p>
<p>With these new features, I can&#x27;t recommend Simple enough. They had a period of moving very slowly with new features, but lately they have been knocking out of the park with shared accounts, paper checks, and these new goal features.</p>
<p><a href="https://simple.com/friends/CXG5MKP">Sign up for an account with this link (it&#x27;s free) and we will both get $20</a>.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Designing proactively]]></title>
            <link>https:/chasem.co/designing-proactively</link>
            <guid>designing-proactively</guid>
            <pubDate>Sat, 24 Feb 2018 00:00:00 GMT</pubDate>
            <description><![CDATA[Thinking about what it means to slow down and design for the future.]]></description>
            <content:encoded><![CDATA[<p>I’ve been thinking quite a bit about how to be proactive in the practice of design. It seems as if this is more relevant today than ever, with <a href="https://medium.com/@monteiro/designs-lost-generation-ac7289549017">the increasing responsibility of designers to make things that won’t harm people or their minds</a>.</p>
<p>What is proactive work? Depends on your job.</p>
<p>For a chef, it may mean sourcing local ingredients before writing the menu.</p>
<p>A record producer may seek out up-and-coming talents to anticipate trends.</p>
<p>Photographers often shoot photos already knowing which edits they will apply later.</p>
<p>When good programmers write code they also anticipate change, so they make it as extensible and flexible as possible.</p>
<p>Architects never start designing a structure without understanding its location, purpose, and inhabitants.</p>
<p>So, what does it mean to do proactive work as a designer?</p>
<p>Just like a chef, we have to source ingredients (knowledge and context) before designing a product. We have to anticipate trends in the industry and know when to follow them, and maybe more importantly, when <em>not to follow them</em>. We have to prepare for how our designs will change with future requirements and when real users interact with them. We have to design responsibly, considering edge cases and social impact. And of course, to design well, we need to be informed about the contexts in which our work will be used.</p>
<p>In short, proactive design is design that takes its time to prepare for the side effects of real life.</p>
<p>That form you designed may not work on mobile browsers. That new feature you built might increase profit, but does it harm your user’s quality of life? Does your design system scale when you add a new feature to your product?</p>
<p>Designing proactively takes time, attention, and having the power to say no (or maybe “not yet”) to certain stakeholders. And if you’re not being proactive, you may not be doing your due diligence as a designer.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Writing design]]></title>
            <link>https:/chasem.co/writing-design</link>
            <guid>writing-design</guid>
            <pubDate>Mon, 28 Aug 2017 00:00:00 GMT</pubDate>
            <description><![CDATA[Thinking about design systems as vocabularies for shared languages.]]></description>
            <content:encoded><![CDATA[<p>Designers today spend far too much time drawing rectangles and dragging them around the screen. Even designers who don’t know this kind of do <em>know it</em>, I think. Perhaps there is a point in every designer’s career (there certainly was for me) when the idea of design becomes less about aesthetics and more about structure.</p>
<p>When this happens, you’re forced to ask yourself questions about your process and how it serves the function of creating a cohesive, flexible, and supportive structure for your work. Once you move past aesthetics as your primary objective, you start to wonder why you’re manipulating shapes and colors by hand? Design is meant to function on our behalf, and instead so many designers spend their time <em>functioning on behalf of their designs</em>. I think this is backwards, and I think it doesn’t have to be this way.</p>
<p>I spent the first part of my career as a designer like most others—manipulating rectangles on a screen. Now, my day is spent writing code to manipulate those rectangles for me. At my current job, my role is dedicated to making design easier for both designers and developers. Building, maintaining, and improving upon our design systems and pattern libraries is done to enable better solutions to common problems with quicker execution times.</p>
<p>Pattern libraries and design systems don’t appear from nowhere—they have to be built and maintained. This process and all of its subprocesses all boil down to designers and developers making a series of decisions through a continued conversation. My job is to ask myself how I can facilitate those conversations and extract decisions from them more efficiently.</p>
<p>A design system has a lot of goals, but I think the most righteous of those is that it gives designers the ability to stop <em>drawing</em> their designs and <em>write them</em> instead. I propose that we start thinking of design systems as a vocabulary that we use to write design. Think about it: vocabularies have a shared origin like designers have shared inspiration and design has trends; vocabularies of the same language vary colloquially from place to place like our designs vary even internally. The artifacts representing our pattern libraries act like a dictionary—they’re a tool we used to understand the vocabulary. Additionally, the meaning of the words in our dictionary is not always derived from hard and fast rules. Sometimes people themselves can alter or change meanings entirely based on context.</p>
<p>Design systems, like vocabularies, are hard to maintain because they’re defined by people, and people are not consistent. That doesn’t mean they’re not worth it. Both (most of the time) allow us humans to communicate both verbally and visually with shared meaning and understanding. They allow us to categorize the things in our world, and to make statements that represent our values. Just like a vocabulary allows us to avoid communicating with charades, a design system allows designers to stop spending their time drawing pictures of a design, and instead use a common language to write what a design should look like and how it should function.</p>
<p>Like most good things, there are challenges. How can we create a concise vocabulary that simultaneously provides coverage over all of the things we need to express? How can the meaning of words be altered in a way that is natural and works for everyone? At what point do we alter the definition of a word whose meaning has changed based on cultural factors?</p>
<p>The hardest part of doing this successfully is making decisions. Getting a large group of people to agree on how things should be done is really tough, and it only gets tougher as your team grows. Doing this right involves aligning values, goals, ideas, etc. across teams, but that can often take a lot of time away from shipping feature work that, frankly, a lot of teams simply don’t have to spare. I think that a part of the solution to this is to have a team dedicated to aligning values, maintaining consistency, and advocating for a shared vocabulary between designers and developers. At my current job, we call this team the Design Developers. Whatever you want to call them, the design devs spend their days being the shepherds of the organization’s design system, and have the skills to translate decisions into actual tools for designers and developers to expedite their day-to-day work.</p>
<p>What’s great about thinking of product design as a form of writing using a bespoke vocabulary instead of drawing is that the handoff between designers and developers becomes a <em>conversation</em> instead of the delivery of an ephemeral artifact. Designers no longer have to spend their time recreating designs over and over using outdated tools, and instead can use that time to think about how the system can be usable, accessible, and delightful. They can work with design developers to improve the system for everyone instead of the parts of the product that their work touches. And developers can of course spend more time sweating the details rather than recreating work that’s no doubt been done elsewhere already.</p>
<p>The key to conversations is that they go both ways. For these ideas to work in practice, there must be a way for the conversation to evolve naturally and affect the vocabulary, just like our own conversations change the meaning of the words we use over time. Changes to the system must be vetted, purposeful, and most importantly, they must be communicated to everyone who uses the system. If the meaning of a word changes unexpectedly, the conversation becomes mute. That’s why we need to be careful and considered in the words we choose in order to ensure our conversations are timeless within the scope in which we’re working.</p>
<p>The process of governing a design system or a vocabulary varies too widely from company to company and culture to culture to say definitively what the correct solution is. There are plenty of resources out there from companies that have done this successfully, and although they are helpful, none of them will work for you out of the box. Doing this correctly involves remaining vigilant, treating everyone in your organization as a designer, and establishing vetted processes.</p>
<p>I encourage all designers (especially those working on bigger products with a team) to start looking at themselves as writers who are trying to articulate the solutions to problems. It is only when designers condition their colleagues to work with them in this way that design can become more than just wrangling rectangles.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
        <item>
            <title><![CDATA[Default constraint behaviors using Swift protocols]]></title>
            <link>https:/chasem.co/default-constraint-behavior-swift-protocol</link>
            <guid>default-constraint-behavior-swift-protocol</guid>
            <pubDate>Sun, 13 Nov 2016 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>When developing an iOS app, you often need to adjust constraints in order to make sure that the keyboard doesn’t obscure any of the elements on screen. This is a common problem that is an easy but annoying fix.</p>
<p>A few days ago I came across <a href="https://blog.propellerlabs.co/making-life-easier-with-a-keyboardavoidable-protocol-62c6689f603d#.xpxq1lk3w">this Medium article by Roy McKenzie about a Swift protocol called <code>KeyboardAvoidable</code></a> that makes this process so much easier.</p>
<p>To sum it up quickly, any view controller that needs to adjust constraints in response to the keyboard hiding/showing just needs to conform to this protocol and then provide an array of constraints that need to be adjusted. The protocol extension has default methods that can be called when the controller is presented to add keyboard observers, and vice versa when the controller is dismissed.</p>
<p>With this short bit of code (available ion a Gist at the end of the post), all you would need to do to get this behavior is hook up outlets to the constraints of the views that need to be adjusted (probably the bottom constraint of a scroll view), stick them in an array, and implement the requirements of the protocol. When the keyboard is shown, your constraints will all be adjusted <em>and</em> animated. Sweet.</p>
<p>This ideas is so incredibly cool and useful and awesome and I plan to use it in every single project that requires this kind of behavior. What’s better is that the code is very easy to understand and modify for your specific needs.</p>
<p>After seeing this, it got me thinking about other ways protocols can be used to add default behaviors to views by injecting constraints. Every constraint you create in IB is of type <code>NSLayoutConstraint</code>, which means we can create very generic and reusable code very easily. <a href="https://www.natashatherobot.com/protocol-oriented-views-in-swift/">Natasha the Robot has a great post about protocol-oriented views in Swift</a> that is similar to this, except she isn’t using constraints. In that post, she demonstrated adding animations like shaking to views using protocols so that this functionality can be reused.</p>
<p>In a project I am working on, I have some views inside of a view controller that need to be toggled between being hidden or shown when the user tap’s a button. In addition, I want the view to animate into and off of the screen when it is toggled.</p>
<p>Originally, I was just creating outlets to the constraints on these views that I wanted to collapse upon and then putting all of the toggling logic into a method in my view controller that would get called when a button was tapped. This led to a lot of repeated code. For every collapsible view in my view controller, I was essentially writing the exact same code with slight variations to change which constraint I was collapsing upon. After seeing Roy’s <code>KeyboardAvoidable</code> protocol, I realized there was a much better way.</p>
<p>I started by making a protocol to represent collapsible views:</p>
<pre><code class="language-swift">protocol Collapsible {
  var collapseConstraint: NSLayoutConstraint? { get set }
  func collapseView()
  func showView()
  func isCollapsed() -&gt; Bool
}
</code></pre>
<p>The <code>collapseConstraint</code> variable is the constraint that we want our view to collapse upon. I made this optional because there could be a situation where we want to use one of these views without the collapsing functionality, and in that case we just won’t set this variable and it will default to nil. The <code>collapseView()</code> and <code>showView()</code> methods are called when we tap our button, and the <code>isCollapsed()</code> method just returns a bool letting us know what state we’re in.</p>
<p>Next, I created an extension for my <code>Collapsible</code> protocol that defined my default implementations of those methods. I constrained my extension to only apply to <code>UIView</code> objects:</p>
<pre><code class="language-swift">extension Collapsible where Self: UIView {
  func collapseView() {
    collapseConstraint?.constant = -(self.frame.size.width)
  }

  func showView() {
    collapseConstraint?.constant = 0
  }

  func isCollapsed() -&gt; Bool {
    return !(collapseConstraint?.constant == 0)
  }
}
</code></pre>
<p>In my app, these view’s will be sliding into and off of the screen from the left or the right, so the <code>collapseView()</code> method set’s the constant of the collapse constraint to the negative value of the width (that way the view is entirely off screen). The <code>showView()</code> method sets the constant to 0, so that the view is pinned to the left or right edge. These methods will obviously need to be customized depending on which direction you want your view’s to collapse. If you wanted to get really fancy, you could set the direction as well as the constraint so that you can collapse in any direction with this one protocol.</p>
<p>The next step is just to create a view that conforms to the protocol, and declare our <code>collapseConstraint</code> variable:</p>
<pre><code class="language-swift">class MyView: UIView, Collapsible {
  var collapseConstraint: NSLayoutConstraint?
}
</code></pre>
<p>In my app, I am putting my views into my controller using Interface Builder. So inside of my controller I just create an outlet to the view and to the constraint that I want to collapse upon (trailing for right edge or leading for left edge), and in <code>viewDidLoad()</code> I set the <code>collapseConstraint</code> variable:</p>
<pre><code class="language-swift">class MyViewController: UIViewController {
  @IBOutlet var myView: MyView!
  @IBOutlet var myViewLeadingConstraint: NSLayoutConstraint!

  override func viewDidLoad() {
    super.viewDidLoad()

    myView.collapseConstraint = myViewLeadingConstraint
  }
}
</code></pre>
<p>The only thing left to do is put in a method that gets called when you tap a button (or take some other action):</p>
<pre><code class="language-swift">func buttonTapped() {
	if myView.isCollapsed() {
	  myView.showView()
	}
	else {
	  myView.collapseView()
	}

	UIView.animateWithDuration(0.3) {
	  self.view.layoutIfNeeded()
	}
}
</code></pre>
<p>I put in the animation block in order to make the constraint change animate over a given time.</p>
<p>Building protocols like these make creating repeated behaviors extremely simple, and IB constraints fit so perfectly into this method. I am using this technique in several places, and I highly recommend it.</p>]]></content:encoded>
            <author>hi@chasem.co (Chase McCoy)</author>
        </item>
    </channel>
</rss>